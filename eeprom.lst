                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.0 #12072 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module eeprom
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _eeprom_menu
                                     12 	.globl _i2c_eeprom_reset
                                     13 	.globl _i2c_write_random
                                     14 	.globl _i2c_read_random
                                     15 	.globl _get_number_hex
                                     16 	.globl _getchar
                                     17 	.globl _printf
                                     18 	.globl _free
                                     19 	.globl _malloc
                                     20 	.globl _eeprom_buffer
                                     21 	.globl _read_random_byte
                                     22 	.globl _write_random_byte
                                     23 	.globl _hexdump_eeprom
                                     24 	.globl _blockfill_eeprom
                                     25 	.globl _print_eeprom_menu
                                     26 	.globl _dump_eeprom_buffer
                                     27 ;--------------------------------------------------------
                                     28 ; special function registers
                                     29 ;--------------------------------------------------------
                                     30 	.area RSEG    (ABS,DATA)
      000000                         31 	.org 0x0000
                                     32 ;--------------------------------------------------------
                                     33 ; special function bits
                                     34 ;--------------------------------------------------------
                                     35 	.area RSEG    (ABS,DATA)
      000000                         36 	.org 0x0000
                                     37 ;--------------------------------------------------------
                                     38 ; overlayable register banks
                                     39 ;--------------------------------------------------------
                                     40 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         41 	.ds 8
                                     42 ;--------------------------------------------------------
                                     43 ; internal ram data
                                     44 ;--------------------------------------------------------
                                     45 	.area DSEG    (DATA)
      000000                         46 _hexdump_eeprom_sloc0_1_0:
      000000                         47 	.ds 2
                                     48 ;--------------------------------------------------------
                                     49 ; overlayable items in internal ram 
                                     50 ;--------------------------------------------------------
                                     51 ;--------------------------------------------------------
                                     52 ; indirectly addressable internal ram data
                                     53 ;--------------------------------------------------------
                                     54 	.area ISEG    (DATA)
                                     55 ;--------------------------------------------------------
                                     56 ; absolute internal ram data
                                     57 ;--------------------------------------------------------
                                     58 	.area IABS    (ABS,DATA)
                                     59 	.area IABS    (ABS,DATA)
                                     60 ;--------------------------------------------------------
                                     61 ; bit data
                                     62 ;--------------------------------------------------------
                                     63 	.area BSEG    (BIT)
                                     64 ;--------------------------------------------------------
                                     65 ; paged external ram data
                                     66 ;--------------------------------------------------------
                                     67 	.area PSEG    (PAG,XDATA)
                                     68 ;--------------------------------------------------------
                                     69 ; external ram data
                                     70 ;--------------------------------------------------------
                                     71 	.area XSEG    (XDATA)
      000000                         72 _eeprom_buffer::
      000000                         73 	.ds 12
      00000C                         74 _dump_eeprom_buffer_from_65536_73:
      00000C                         75 	.ds 2
      00000E                         76 _dump_eeprom_buffer_j_65537_75:
      00000E                         77 	.ds 2
                                     78 ;--------------------------------------------------------
                                     79 ; absolute external ram data
                                     80 ;--------------------------------------------------------
                                     81 	.area XABS    (ABS,XDATA)
                                     82 ;--------------------------------------------------------
                                     83 ; external initialized ram data
                                     84 ;--------------------------------------------------------
                                     85 	.area XISEG   (XDATA)
                                     86 	.area HOME    (CODE)
                                     87 	.area GSINIT0 (CODE)
                                     88 	.area GSINIT1 (CODE)
                                     89 	.area GSINIT2 (CODE)
                                     90 	.area GSINIT3 (CODE)
                                     91 	.area GSINIT4 (CODE)
                                     92 	.area GSINIT5 (CODE)
                                     93 	.area GSINIT  (CODE)
                                     94 	.area GSFINAL (CODE)
                                     95 	.area CSEG    (CODE)
                                     96 ;--------------------------------------------------------
                                     97 ; global & static initialisations
                                     98 ;--------------------------------------------------------
                                     99 	.area HOME    (CODE)
                                    100 	.area GSINIT  (CODE)
                                    101 	.area GSFINAL (CODE)
                                    102 	.area GSINIT  (CODE)
                                    103 ;--------------------------------------------------------
                                    104 ; Home
                                    105 ;--------------------------------------------------------
                                    106 	.area HOME    (CODE)
                                    107 	.area HOME    (CODE)
                                    108 ;--------------------------------------------------------
                                    109 ; code
                                    110 ;--------------------------------------------------------
                                    111 	.area CSEG    (CODE)
                                    112 ;------------------------------------------------------------
                                    113 ;Allocation info for local variables in function 'eeprom_menu'
                                    114 ;------------------------------------------------------------
                                    115 ;inp                       Allocated with name '_eeprom_menu_inp_65537_51'
                                    116 ;------------------------------------------------------------
                                    117 ;	eeprom.c:42: void eeprom_menu()
                                    118 ;	-----------------------------------------
                                    119 ;	 function eeprom_menu
                                    120 ;	-----------------------------------------
      000000                        121 _eeprom_menu:
                           000007   122 	ar7 = 0x07
                           000006   123 	ar6 = 0x06
                           000005   124 	ar5 = 0x05
                           000004   125 	ar4 = 0x04
                           000003   126 	ar3 = 0x03
                           000002   127 	ar2 = 0x02
                           000001   128 	ar1 = 0x01
                           000000   129 	ar0 = 0x00
                                    130 ;	eeprom.c:44: printf(" \n\r Hello, In EEPROM Demo mode");
      000000 74r00            [12]  131 	mov	a,#___str_0
      000002 C0 E0            [24]  132 	push	acc
      000004 74s00            [12]  133 	mov	a,#(___str_0 >> 8)
      000006 C0 E0            [24]  134 	push	acc
      000008 74 80            [12]  135 	mov	a,#0x80
      00000A C0 E0            [24]  136 	push	acc
      00000C 12r00r00         [24]  137 	lcall	_printf
      00000F 15 81            [12]  138 	dec	sp
      000011 15 81            [12]  139 	dec	sp
      000013 15 81            [12]  140 	dec	sp
                                    141 ;	eeprom.c:45: print_eeprom_menu();
      000015 12r04rB3         [24]  142 	lcall	_print_eeprom_menu
                                    143 ;	eeprom.c:48: wrong_choice_pca:
      000018                        144 00101$:
                                    145 ;	eeprom.c:49: printf("Please make a valid choice\n\r");
      000018 74r1F            [12]  146 	mov	a,#___str_1
      00001A C0 E0            [24]  147 	push	acc
      00001C 74s00            [12]  148 	mov	a,#(___str_1 >> 8)
      00001E C0 E0            [24]  149 	push	acc
      000020 74 80            [12]  150 	mov	a,#0x80
      000022 C0 E0            [24]  151 	push	acc
      000024 12r00r00         [24]  152 	lcall	_printf
      000027 15 81            [12]  153 	dec	sp
      000029 15 81            [12]  154 	dec	sp
      00002B 15 81            [12]  155 	dec	sp
                                    156 ;	eeprom.c:50: inp = getchar();
      00002D 12r00r00         [24]  157 	lcall	_getchar
      000030 AE 82            [24]  158 	mov	r6,dpl
      000032 AF 83            [24]  159 	mov	r7,dph
                                    160 ;	eeprom.c:51: if (inp == 0x52)
      000034 BE 52 08         [24]  161 	cjne	r6,#0x52,00115$
      000037 BF 00 05         [24]  162 	cjne	r7,#0x00,00115$
                                    163 ;	eeprom.c:52: read_random_byte();
      00003A 12r00rA3         [24]  164 	lcall	_read_random_byte
      00003D 80 3F            [24]  165 	sjmp	00129$
      00003F                        166 00115$:
                                    167 ;	eeprom.c:53: else if (inp == 0x57)
      00003F BE 57 08         [24]  168 	cjne	r6,#0x57,00112$
      000042 BF 00 05         [24]  169 	cjne	r7,#0x00,00112$
                                    170 ;	eeprom.c:54: write_random_byte();
      000045 12r01r4A         [24]  171 	lcall	_write_random_byte
      000048 80 34            [24]  172 	sjmp	00129$
      00004A                        173 00112$:
                                    174 ;	eeprom.c:55: else if (inp == 0x44)
      00004A BE 44 08         [24]  175 	cjne	r6,#0x44,00109$
      00004D BF 00 05         [24]  176 	cjne	r7,#0x00,00109$
                                    177 ;	eeprom.c:56: hexdump_eeprom();
      000050 12r01rE0         [24]  178 	lcall	_hexdump_eeprom
      000053 80 29            [24]  179 	sjmp	00129$
      000055                        180 00109$:
                                    181 ;	eeprom.c:57: else if (inp == 0x42)
      000055 BE 42 08         [24]  182 	cjne	r6,#0x42,00106$
      000058 BF 00 05         [24]  183 	cjne	r7,#0x00,00106$
                                    184 ;	eeprom.c:58: blockfill_eeprom();
      00005B 12r03r96         [24]  185 	lcall	_blockfill_eeprom
      00005E 80 1E            [24]  186 	sjmp	00129$
      000060                        187 00106$:
                                    188 ;	eeprom.c:59: else if (inp == 0x46)
      000060 BE 46 B5         [24]  189 	cjne	r6,#0x46,00101$
      000063 BF 00 B2         [24]  190 	cjne	r7,#0x00,00101$
                                    191 ;	eeprom.c:61: i2c_eeprom_reset();
      000066 12r00r00         [24]  192 	lcall	_i2c_eeprom_reset
                                    193 ;	eeprom.c:62: printf("\n\rI2C Reset has been performed \n\r");
      000069 74r3C            [12]  194 	mov	a,#___str_2
      00006B C0 E0            [24]  195 	push	acc
      00006D 74s00            [12]  196 	mov	a,#(___str_2 >> 8)
      00006F C0 E0            [24]  197 	push	acc
      000071 74 80            [12]  198 	mov	a,#0x80
      000073 C0 E0            [24]  199 	push	acc
      000075 12r00r00         [24]  200 	lcall	_printf
      000078 15 81            [12]  201 	dec	sp
      00007A 15 81            [12]  202 	dec	sp
      00007C 15 81            [12]  203 	dec	sp
                                    204 ;	eeprom.c:67: exit_choice:
      00007E                        205 00129$:
      00007E                        206 00117$:
                                    207 ;	eeprom.c:68: printf("\n\rPlease 'E' to go to EEPROM Menu \n\r");
      00007E 74r5E            [12]  208 	mov	a,#___str_3
      000080 C0 E0            [24]  209 	push	acc
      000082 74s00            [12]  210 	mov	a,#(___str_3 >> 8)
      000084 C0 E0            [24]  211 	push	acc
      000086 74 80            [12]  212 	mov	a,#0x80
      000088 C0 E0            [24]  213 	push	acc
      00008A 12r00r00         [24]  214 	lcall	_printf
      00008D 15 81            [12]  215 	dec	sp
      00008F 15 81            [12]  216 	dec	sp
      000091 15 81            [12]  217 	dec	sp
                                    218 ;	eeprom.c:69: inp = getchar();
      000093 12r00r00         [24]  219 	lcall	_getchar
      000096 AE 82            [24]  220 	mov	r6,dpl
      000098 AF 83            [24]  221 	mov	r7,dph
                                    222 ;	eeprom.c:70: if (inp == 0x45)
      00009A BE 45 E1         [24]  223 	cjne	r6,#0x45,00117$
      00009D BF 00 DE         [24]  224 	cjne	r7,#0x00,00117$
                                    225 ;	eeprom.c:71: eeprom_menu();
                                    226 ;	eeprom.c:73: goto exit_choice;
                                    227 ;	eeprom.c:74: }
      0000A0 02r00r00         [24]  228 	ljmp	_eeprom_menu
                                    229 ;------------------------------------------------------------
                                    230 ;Allocation info for local variables in function 'read_random_byte'
                                    231 ;------------------------------------------------------------
                                    232 ;block                     Allocated with name '_read_random_byte_block_65536_53'
                                    233 ;address                   Allocated with name '_read_random_byte_address_65536_53'
                                    234 ;a                         Allocated with name '_read_random_byte_a_65536_53'
                                    235 ;------------------------------------------------------------
                                    236 ;	eeprom.c:82: void read_random_byte()
                                    237 ;	-----------------------------------------
                                    238 ;	 function read_random_byte
                                    239 ;	-----------------------------------------
      0000A3                        240 _read_random_byte:
                                    241 ;	eeprom.c:87: get_valid_hex:
      0000A3                        242 00101$:
                                    243 ;	eeprom.c:88: printf("\n\r Please give a valid address to read from (0x000 - 0x7FF) \n\r");
      0000A3 74r83            [12]  244 	mov	a,#___str_4
      0000A5 C0 E0            [24]  245 	push	acc
      0000A7 74s00            [12]  246 	mov	a,#(___str_4 >> 8)
      0000A9 C0 E0            [24]  247 	push	acc
      0000AB 74 80            [12]  248 	mov	a,#0x80
      0000AD C0 E0            [24]  249 	push	acc
      0000AF 12r00r00         [24]  250 	lcall	_printf
      0000B2 15 81            [12]  251 	dec	sp
      0000B4 15 81            [12]  252 	dec	sp
      0000B6 15 81            [12]  253 	dec	sp
                                    254 ;	eeprom.c:89: a = get_number_hex(3);
      0000B8 90 00 03         [24]  255 	mov	dptr,#0x0003
      0000BB 12r00r00         [24]  256 	lcall	_get_number_hex
      0000BE AE 82            [24]  257 	mov	r6,dpl
                                    258 ;	eeprom.c:91: if (a >= 0 && a <= 2047)
      0000C0 E5 83            [12]  259 	mov	a,dph
      0000C2 FF               [12]  260 	mov	r7,a
      0000C3 20 E7 DD         [24]  261 	jb	acc.7,00101$
      0000C6 C3               [12]  262 	clr	c
      0000C7 74 FF            [12]  263 	mov	a,#0xff
      0000C9 9E               [12]  264 	subb	a,r6
      0000CA 74 87            [12]  265 	mov	a,#(0x07 ^ 0x80)
      0000CC 8F F0            [24]  266 	mov	b,r7
      0000CE 63 F0 80         [24]  267 	xrl	b,#0x80
      0000D1 95 F0            [12]  268 	subb	a,b
      0000D3 40 CE            [24]  269 	jc	00101$
                                    270 ;	eeprom.c:93: block = (a & 0xF00) >> 8;
      0000D5 74 0F            [12]  271 	mov	a,#0x0f
      0000D7 5F               [12]  272 	anl	a,r7
                                    273 ;	eeprom.c:94: address = a & 0x0FF;
                                    274 ;	eeprom.c:101: printf("Block is is %x \n\r", block);
      0000D8 FC               [12]  275 	mov	r4,a
      0000D9 FD               [12]  276 	mov	r5,a
      0000DA 7F 00            [12]  277 	mov	r7,#0x00
      0000DC C0 06            [24]  278 	push	ar6
      0000DE C0 04            [24]  279 	push	ar4
      0000E0 C0 05            [24]  280 	push	ar5
      0000E2 C0 07            [24]  281 	push	ar7
      0000E4 74rC2            [12]  282 	mov	a,#___str_5
      0000E6 C0 E0            [24]  283 	push	acc
      0000E8 74s00            [12]  284 	mov	a,#(___str_5 >> 8)
      0000EA C0 E0            [24]  285 	push	acc
      0000EC 74 80            [12]  286 	mov	a,#0x80
      0000EE C0 E0            [24]  287 	push	acc
      0000F0 12r00r00         [24]  288 	lcall	_printf
      0000F3 E5 81            [12]  289 	mov	a,sp
      0000F5 24 FB            [12]  290 	add	a,#0xfb
      0000F7 F5 81            [12]  291 	mov	sp,a
      0000F9 D0 04            [24]  292 	pop	ar4
      0000FB D0 06            [24]  293 	pop	ar6
                                    294 ;	eeprom.c:102: printf("Address is 0x%X \n\r", address);
      0000FD 8E 05            [24]  295 	mov	ar5,r6
      0000FF 7F 00            [12]  296 	mov	r7,#0x00
      000101 C0 06            [24]  297 	push	ar6
      000103 C0 04            [24]  298 	push	ar4
      000105 C0 05            [24]  299 	push	ar5
      000107 C0 07            [24]  300 	push	ar7
      000109 74rD4            [12]  301 	mov	a,#___str_6
      00010B C0 E0            [24]  302 	push	acc
      00010D 74s00            [12]  303 	mov	a,#(___str_6 >> 8)
      00010F C0 E0            [24]  304 	push	acc
      000111 74 80            [12]  305 	mov	a,#0x80
      000113 C0 E0            [24]  306 	push	acc
      000115 12r00r00         [24]  307 	lcall	_printf
      000118 E5 81            [12]  308 	mov	a,sp
      00011A 24 FB            [12]  309 	add	a,#0xfb
      00011C F5 81            [12]  310 	mov	sp,a
      00011E D0 04            [24]  311 	pop	ar4
      000120 D0 06            [24]  312 	pop	ar6
                                    313 ;	eeprom.c:103: printf("\n\r The value at the address is -> 0x%X \n\r", i2c_read_random(block, address));
      000122 90r00r00         [24]  314 	mov	dptr,#_i2c_read_random_PARM_2
      000125 EE               [12]  315 	mov	a,r6
      000126 F0               [24]  316 	movx	@dptr,a
      000127 8C 82            [24]  317 	mov	dpl,r4
      000129 12r00r00         [24]  318 	lcall	_i2c_read_random
      00012C AF 82            [24]  319 	mov	r7,dpl
      00012E 7E 00            [12]  320 	mov	r6,#0x00
      000130 C0 07            [24]  321 	push	ar7
      000132 C0 06            [24]  322 	push	ar6
      000134 74rE7            [12]  323 	mov	a,#___str_7
      000136 C0 E0            [24]  324 	push	acc
      000138 74s00            [12]  325 	mov	a,#(___str_7 >> 8)
      00013A C0 E0            [24]  326 	push	acc
      00013C 74 80            [12]  327 	mov	a,#0x80
      00013E C0 E0            [24]  328 	push	acc
      000140 12r00r00         [24]  329 	lcall	_printf
      000143 E5 81            [12]  330 	mov	a,sp
      000145 24 FB            [12]  331 	add	a,#0xfb
      000147 F5 81            [12]  332 	mov	sp,a
                                    333 ;	eeprom.c:104: }
      000149 22               [24]  334 	ret
                                    335 ;------------------------------------------------------------
                                    336 ;Allocation info for local variables in function 'write_random_byte'
                                    337 ;------------------------------------------------------------
                                    338 ;block                     Allocated with name '_write_random_byte_block_65536_56'
                                    339 ;address                   Allocated with name '_write_random_byte_address_65536_56'
                                    340 ;a                         Allocated with name '_write_random_byte_a_65536_56'
                                    341 ;------------------------------------------------------------
                                    342 ;	eeprom.c:111: void write_random_byte()
                                    343 ;	-----------------------------------------
                                    344 ;	 function write_random_byte
                                    345 ;	-----------------------------------------
      00014A                        346 _write_random_byte:
                                    347 ;	eeprom.c:116: get_valid_hex_address:
      00014A                        348 00101$:
                                    349 ;	eeprom.c:117: printf("Please give a valid address to write to (0x000 - 0x7FF) \n\r");
      00014A 74r11            [12]  350 	mov	a,#___str_8
      00014C C0 E0            [24]  351 	push	acc
      00014E 74s01            [12]  352 	mov	a,#(___str_8 >> 8)
      000150 C0 E0            [24]  353 	push	acc
      000152 74 80            [12]  354 	mov	a,#0x80
      000154 C0 E0            [24]  355 	push	acc
      000156 12r00r00         [24]  356 	lcall	_printf
      000159 15 81            [12]  357 	dec	sp
      00015B 15 81            [12]  358 	dec	sp
      00015D 15 81            [12]  359 	dec	sp
                                    360 ;	eeprom.c:118: a = get_number_hex(3);
      00015F 90 00 03         [24]  361 	mov	dptr,#0x0003
      000162 12r00r00         [24]  362 	lcall	_get_number_hex
      000165 AE 82            [24]  363 	mov	r6,dpl
                                    364 ;	eeprom.c:120: if (a >= 0 && a <= 2047)
      000167 E5 83            [12]  365 	mov	a,dph
      000169 FF               [12]  366 	mov	r7,a
      00016A 20 E7 DD         [24]  367 	jb	acc.7,00101$
      00016D C3               [12]  368 	clr	c
      00016E 74 FF            [12]  369 	mov	a,#0xff
      000170 9E               [12]  370 	subb	a,r6
      000171 74 87            [12]  371 	mov	a,#(0x07 ^ 0x80)
      000173 8F F0            [24]  372 	mov	b,r7
      000175 63 F0 80         [24]  373 	xrl	b,#0x80
      000178 95 F0            [12]  374 	subb	a,b
      00017A 40 CE            [24]  375 	jc	00101$
                                    376 ;	eeprom.c:122: block = (a & 0xF00) >> 8;
      00017C 7C 00            [12]  377 	mov	r4,#0x00
      00017E 74 0F            [12]  378 	mov	a,#0x0f
      000180 5F               [12]  379 	anl	a,r7
      000181 FD               [12]  380 	mov	r5,a
                                    381 ;	eeprom.c:123: address = a & 0x0FF;
                                    382 ;	eeprom.c:130: get_valid_hex_value:
      000182                        383 00106$:
                                    384 ;	eeprom.c:131: printf("\n\rPlease give a valid data to write (0x00 - 0xFF) \n\r");
      000182 C0 06            [24]  385 	push	ar6
      000184 C0 05            [24]  386 	push	ar5
      000186 74r4C            [12]  387 	mov	a,#___str_9
      000188 C0 E0            [24]  388 	push	acc
      00018A 74s01            [12]  389 	mov	a,#(___str_9 >> 8)
      00018C C0 E0            [24]  390 	push	acc
      00018E 74 80            [12]  391 	mov	a,#0x80
      000190 C0 E0            [24]  392 	push	acc
      000192 12r00r00         [24]  393 	lcall	_printf
      000195 15 81            [12]  394 	dec	sp
      000197 15 81            [12]  395 	dec	sp
      000199 15 81            [12]  396 	dec	sp
                                    397 ;	eeprom.c:132: a = get_number_hex(2);
      00019B 90 00 02         [24]  398 	mov	dptr,#0x0002
      00019E 12r00r00         [24]  399 	lcall	_get_number_hex
      0001A1 AC 82            [24]  400 	mov	r4,dpl
      0001A3 AF 83            [24]  401 	mov	r7,dph
      0001A5 D0 05            [24]  402 	pop	ar5
      0001A7 D0 06            [24]  403 	pop	ar6
                                    404 ;	eeprom.c:134: if (a >= 0)
      0001A9 EF               [12]  405 	mov	a,r7
      0001AA 20 E7 D5         [24]  406 	jb	acc.7,00106$
                                    407 ;	eeprom.c:136: i2c_write_random(block, address, (unsigned char)a);
      0001AD 8C 03            [24]  408 	mov	ar3,r4
      0001AF 90r00r00         [24]  409 	mov	dptr,#_i2c_write_random_PARM_2
      0001B2 EE               [12]  410 	mov	a,r6
      0001B3 F0               [24]  411 	movx	@dptr,a
      0001B4 90r00r00         [24]  412 	mov	dptr,#_i2c_write_random_PARM_3
      0001B7 EB               [12]  413 	mov	a,r3
      0001B8 F0               [24]  414 	movx	@dptr,a
      0001B9 8D 82            [24]  415 	mov	dpl,r5
      0001BB C0 07            [24]  416 	push	ar7
      0001BD C0 04            [24]  417 	push	ar4
      0001BF 12r00r00         [24]  418 	lcall	_i2c_write_random
      0001C2 D0 04            [24]  419 	pop	ar4
      0001C4 D0 07            [24]  420 	pop	ar7
                                    421 ;	eeprom.c:143: printf("\n\rThe data has been successfully written at the address 0x%X \n\r", a);
      0001C6 C0 04            [24]  422 	push	ar4
      0001C8 C0 07            [24]  423 	push	ar7
      0001CA 74r81            [12]  424 	mov	a,#___str_10
      0001CC C0 E0            [24]  425 	push	acc
      0001CE 74s01            [12]  426 	mov	a,#(___str_10 >> 8)
      0001D0 C0 E0            [24]  427 	push	acc
      0001D2 74 80            [12]  428 	mov	a,#0x80
      0001D4 C0 E0            [24]  429 	push	acc
      0001D6 12r00r00         [24]  430 	lcall	_printf
      0001D9 E5 81            [12]  431 	mov	a,sp
      0001DB 24 FB            [12]  432 	add	a,#0xfb
      0001DD F5 81            [12]  433 	mov	sp,a
                                    434 ;	eeprom.c:144: }
      0001DF 22               [24]  435 	ret
                                    436 ;------------------------------------------------------------
                                    437 ;Allocation info for local variables in function 'hexdump_eeprom'
                                    438 ;------------------------------------------------------------
                                    439 ;sloc0                     Allocated with name '_hexdump_eeprom_sloc0_1_0'
                                    440 ;a                         Allocated with name '_hexdump_eeprom_a_65536_61'
                                    441 ;b                         Allocated with name '_hexdump_eeprom_b_65536_61'
                                    442 ;data                      Allocated with name '_hexdump_eeprom_data_65537_64'
                                    443 ;l                         Allocated with name '_hexdump_eeprom_l_131073_65'
                                    444 ;------------------------------------------------------------
                                    445 ;	eeprom.c:151: void hexdump_eeprom()
                                    446 ;	-----------------------------------------
                                    447 ;	 function hexdump_eeprom
                                    448 ;	-----------------------------------------
      0001E0                        449 _hexdump_eeprom:
                                    450 ;	eeprom.c:155: get_valid_from_address:
      0001E0                        451 00101$:
                                    452 ;	eeprom.c:156: printf("Please give a valid starting address (0x000 - 0x7FF) \n\r");
      0001E0 74rC1            [12]  453 	mov	a,#___str_11
      0001E2 C0 E0            [24]  454 	push	acc
      0001E4 74s01            [12]  455 	mov	a,#(___str_11 >> 8)
      0001E6 C0 E0            [24]  456 	push	acc
      0001E8 74 80            [12]  457 	mov	a,#0x80
      0001EA C0 E0            [24]  458 	push	acc
      0001EC 12r00r00         [24]  459 	lcall	_printf
      0001EF 15 81            [12]  460 	dec	sp
      0001F1 15 81            [12]  461 	dec	sp
      0001F3 15 81            [12]  462 	dec	sp
                                    463 ;	eeprom.c:157: a = get_number_hex(3);
      0001F5 90 00 03         [24]  464 	mov	dptr,#0x0003
      0001F8 12r00r00         [24]  465 	lcall	_get_number_hex
      0001FB AE 82            [24]  466 	mov	r6,dpl
                                    467 ;	eeprom.c:159: if (a < 0 || a > 2047)
      0001FD E5 83            [12]  468 	mov	a,dph
      0001FF FF               [12]  469 	mov	r7,a
      000200 20 E7 DD         [24]  470 	jb	acc.7,00101$
      000203 C3               [12]  471 	clr	c
      000204 74 FF            [12]  472 	mov	a,#0xff
      000206 9E               [12]  473 	subb	a,r6
      000207 74 87            [12]  474 	mov	a,#(0x07 ^ 0x80)
      000209 8F F0            [24]  475 	mov	b,r7
      00020B 63 F0 80         [24]  476 	xrl	b,#0x80
      00020E 95 F0            [12]  477 	subb	a,b
      000210 40 CE            [24]  478 	jc	00101$
                                    479 ;	eeprom.c:164: get_valid_to_address:
      000212                        480 00105$:
                                    481 ;	eeprom.c:165: printf("Please give a valid ending address (0x%X - 0x7FF) \n\r", a);
      000212 C0 07            [24]  482 	push	ar7
      000214 C0 06            [24]  483 	push	ar6
      000216 C0 06            [24]  484 	push	ar6
      000218 C0 07            [24]  485 	push	ar7
      00021A 74rF9            [12]  486 	mov	a,#___str_12
      00021C C0 E0            [24]  487 	push	acc
      00021E 74s01            [12]  488 	mov	a,#(___str_12 >> 8)
      000220 C0 E0            [24]  489 	push	acc
      000222 74 80            [12]  490 	mov	a,#0x80
      000224 C0 E0            [24]  491 	push	acc
      000226 12r00r00         [24]  492 	lcall	_printf
      000229 E5 81            [12]  493 	mov	a,sp
      00022B 24 FB            [12]  494 	add	a,#0xfb
      00022D F5 81            [12]  495 	mov	sp,a
                                    496 ;	eeprom.c:166: b = get_number_hex(3);
      00022F 90 00 03         [24]  497 	mov	dptr,#0x0003
      000232 12r00r00         [24]  498 	lcall	_get_number_hex
      000235 AC 82            [24]  499 	mov	r4,dpl
      000237 AD 83            [24]  500 	mov	r5,dph
      000239 D0 06            [24]  501 	pop	ar6
      00023B D0 07            [24]  502 	pop	ar7
                                    503 ;	eeprom.c:168: if (b < a || b > 2047)
      00023D C3               [12]  504 	clr	c
      00023E EC               [12]  505 	mov	a,r4
      00023F 9E               [12]  506 	subb	a,r6
      000240 ED               [12]  507 	mov	a,r5
      000241 64 80            [12]  508 	xrl	a,#0x80
      000243 8F F0            [24]  509 	mov	b,r7
      000245 63 F0 80         [24]  510 	xrl	b,#0x80
      000248 95 F0            [12]  511 	subb	a,b
      00024A 40 C6            [24]  512 	jc	00105$
      00024C 74 FF            [12]  513 	mov	a,#0xff
      00024E 9C               [12]  514 	subb	a,r4
      00024F 74 87            [12]  515 	mov	a,#(0x07 ^ 0x80)
      000251 8D F0            [24]  516 	mov	b,r5
      000253 63 F0 80         [24]  517 	xrl	b,#0x80
      000256 95 F0            [12]  518 	subb	a,b
      000258 40 B8            [24]  519 	jc	00105$
                                    520 ;	eeprom.c:173: eeprom_buffer.buffer_start = malloc((b - a) + 5);
      00025A EC               [12]  521 	mov	a,r4
      00025B C3               [12]  522 	clr	c
      00025C 9E               [12]  523 	subb	a,r6
      00025D FA               [12]  524 	mov	r2,a
      00025E ED               [12]  525 	mov	a,r5
      00025F 9F               [12]  526 	subb	a,r7
      000260 FB               [12]  527 	mov	r3,a
      000261 74 05            [12]  528 	mov	a,#0x05
      000263 2A               [12]  529 	add	a,r2
      000264 F5*00            [12]  530 	mov	_hexdump_eeprom_sloc0_1_0,a
      000266 E4               [12]  531 	clr	a
      000267 3B               [12]  532 	addc	a,r3
      000268 F5*01            [12]  533 	mov	(_hexdump_eeprom_sloc0_1_0 + 1),a
      00026A 85*00 82         [24]  534 	mov	dpl,_hexdump_eeprom_sloc0_1_0
      00026D 85*01 83         [24]  535 	mov	dph,(_hexdump_eeprom_sloc0_1_0 + 1)
      000270 C0 07            [24]  536 	push	ar7
      000272 C0 06            [24]  537 	push	ar6
      000274 C0 05            [24]  538 	push	ar5
      000276 C0 04            [24]  539 	push	ar4
      000278 C0 03            [24]  540 	push	ar3
      00027A C0 02            [24]  541 	push	ar2
      00027C 12r00r00         [24]  542 	lcall	_malloc
      00027F A8 82            [24]  543 	mov	r0,dpl
      000281 A9 83            [24]  544 	mov	r1,dph
      000283 D0 02            [24]  545 	pop	ar2
      000285 D0 03            [24]  546 	pop	ar3
      000287 D0 04            [24]  547 	pop	ar4
      000289 D0 05            [24]  548 	pop	ar5
      00028B D0 06            [24]  549 	pop	ar6
      00028D D0 07            [24]  550 	pop	ar7
      00028F C0 04            [24]  551 	push	ar4
      000291 C0 05            [24]  552 	push	ar5
      000293 7D 00            [12]  553 	mov	r5,#0x00
      000295 90r00r02         [24]  554 	mov	dptr,#(_eeprom_buffer + 0x0002)
      000298 E8               [12]  555 	mov	a,r0
      000299 F0               [24]  556 	movx	@dptr,a
      00029A E9               [12]  557 	mov	a,r1
      00029B A3               [24]  558 	inc	dptr
      00029C F0               [24]  559 	movx	@dptr,a
      00029D ED               [12]  560 	mov	a,r5
      00029E A3               [24]  561 	inc	dptr
      00029F F0               [24]  562 	movx	@dptr,a
                                    563 ;	eeprom.c:175: eeprom_buffer.buff_size = (b - a) + 5;
      0002A0 90r00r08         [24]  564 	mov	dptr,#(_eeprom_buffer + 0x0008)
      0002A3 E5*00            [12]  565 	mov	a,_hexdump_eeprom_sloc0_1_0
      0002A5 F0               [24]  566 	movx	@dptr,a
      0002A6 E5*01            [12]  567 	mov	a,(_hexdump_eeprom_sloc0_1_0 + 1)
      0002A8 A3               [24]  568 	inc	dptr
      0002A9 F0               [24]  569 	movx	@dptr,a
                                    570 ;	eeprom.c:176: eeprom_buffer.buffer_num = 0;
      0002AA 90r00r00         [24]  571 	mov	dptr,#_eeprom_buffer
      0002AD E4               [12]  572 	clr	a
      0002AE F0               [24]  573 	movx	@dptr,a
      0002AF A3               [24]  574 	inc	dptr
      0002B0 F0               [24]  575 	movx	@dptr,a
                                    576 ;	eeprom.c:177: eeprom_buffer.buffer_end = eeprom_buffer.buffer_start + (b - a) + 5;
      0002B1 EA               [12]  577 	mov	a,r2
      0002B2 28               [12]  578 	add	a,r0
      0002B3 FA               [12]  579 	mov	r2,a
      0002B4 EB               [12]  580 	mov	a,r3
      0002B5 39               [12]  581 	addc	a,r1
      0002B6 FB               [12]  582 	mov	r3,a
      0002B7 8D 04            [24]  583 	mov	ar4,r5
      0002B9 74 05            [12]  584 	mov	a,#0x05
      0002BB 2A               [12]  585 	add	a,r2
      0002BC FA               [12]  586 	mov	r2,a
      0002BD E4               [12]  587 	clr	a
      0002BE 3B               [12]  588 	addc	a,r3
      0002BF FB               [12]  589 	mov	r3,a
      0002C0 90r00r05         [24]  590 	mov	dptr,#(_eeprom_buffer + 0x0005)
      0002C3 EA               [12]  591 	mov	a,r2
      0002C4 F0               [24]  592 	movx	@dptr,a
      0002C5 EB               [12]  593 	mov	a,r3
      0002C6 A3               [24]  594 	inc	dptr
      0002C7 F0               [24]  595 	movx	@dptr,a
      0002C8 EC               [12]  596 	mov	a,r4
      0002C9 A3               [24]  597 	inc	dptr
      0002CA F0               [24]  598 	movx	@dptr,a
                                    599 ;	eeprom.c:178: eeprom_buffer.num_char = 0;
      0002CB 90r00r0A         [24]  600 	mov	dptr,#(_eeprom_buffer + 0x000a)
      0002CE F0               [24]  601 	movx	@dptr,a
      0002CF A3               [24]  602 	inc	dptr
      0002D0 F0               [24]  603 	movx	@dptr,a
                                    604 ;	eeprom.c:180: printf("Reading EEPROM...\n\r");
      0002D1 C0 07            [24]  605 	push	ar7
      0002D3 C0 06            [24]  606 	push	ar6
      0002D5 C0 05            [24]  607 	push	ar5
      0002D7 C0 04            [24]  608 	push	ar4
      0002D9 74r2E            [12]  609 	mov	a,#___str_13
      0002DB C0 E0            [24]  610 	push	acc
      0002DD 74s02            [12]  611 	mov	a,#(___str_13 >> 8)
      0002DF C0 E0            [24]  612 	push	acc
      0002E1 74 80            [12]  613 	mov	a,#0x80
      0002E3 C0 E0            [24]  614 	push	acc
      0002E5 12r00r00         [24]  615 	lcall	_printf
      0002E8 15 81            [12]  616 	dec	sp
      0002EA 15 81            [12]  617 	dec	sp
      0002EC 15 81            [12]  618 	dec	sp
      0002EE D0 04            [24]  619 	pop	ar4
      0002F0 D0 05            [24]  620 	pop	ar5
      0002F2 D0 06            [24]  621 	pop	ar6
      0002F4 D0 07            [24]  622 	pop	ar7
                                    623 ;	eeprom.c:182: for (int l = a; l <= b; l++)
      0002F6 8E*00            [24]  624 	mov	_hexdump_eeprom_sloc0_1_0,r6
      0002F8 8F*01            [24]  625 	mov	(_hexdump_eeprom_sloc0_1_0 + 1),r7
                                    626 ;	eeprom.c:191: free(eeprom_buffer.buffer_start);
      0002FA D0 05            [24]  627 	pop	ar5
      0002FC D0 04            [24]  628 	pop	ar4
                                    629 ;	eeprom.c:182: for (int l = a; l <= b; l++)
      0002FE                        630 00111$:
      0002FE C3               [12]  631 	clr	c
      0002FF EC               [12]  632 	mov	a,r4
      000300 95*00            [12]  633 	subb	a,_hexdump_eeprom_sloc0_1_0
      000302 ED               [12]  634 	mov	a,r5
      000303 64 80            [12]  635 	xrl	a,#0x80
      000305 85*01 F0         [24]  636 	mov	b,(_hexdump_eeprom_sloc0_1_0 + 1)
      000308 63 F0 80         [24]  637 	xrl	b,#0x80
      00030B 95 F0            [12]  638 	subb	a,b
      00030D 40 6C            [24]  639 	jc	00109$
                                    640 ;	eeprom.c:185: data = i2c_read_random((l & 0xF00) >> 8, (l & 0x0FF));
      00030F C0 04            [24]  641 	push	ar4
      000311 C0 05            [24]  642 	push	ar5
      000313 74 0F            [12]  643 	mov	a,#0x0f
      000315 55*01            [12]  644 	anl	a,(_hexdump_eeprom_sloc0_1_0 + 1)
      000317 FA               [12]  645 	mov	r2,a
      000318 90r00r00         [24]  646 	mov	dptr,#_i2c_read_random_PARM_2
      00031B E5*00            [12]  647 	mov	a,_hexdump_eeprom_sloc0_1_0
      00031D F0               [24]  648 	movx	@dptr,a
      00031E 8A 82            [24]  649 	mov	dpl,r2
      000320 C0 07            [24]  650 	push	ar7
      000322 C0 06            [24]  651 	push	ar6
      000324 C0 05            [24]  652 	push	ar5
      000326 C0 04            [24]  653 	push	ar4
      000328 12r00r00         [24]  654 	lcall	_i2c_read_random
      00032B AB 82            [24]  655 	mov	r3,dpl
      00032D D0 04            [24]  656 	pop	ar4
      00032F D0 05            [24]  657 	pop	ar5
      000331 D0 06            [24]  658 	pop	ar6
      000333 D0 07            [24]  659 	pop	ar7
                                    660 ;	eeprom.c:186: *(eeprom_buffer.buffer_start + eeprom_buffer.num_char) = data;
      000335 90r00r02         [24]  661 	mov	dptr,#(_eeprom_buffer + 0x0002)
      000338 E0               [24]  662 	movx	a,@dptr
      000339 F8               [12]  663 	mov	r0,a
      00033A A3               [24]  664 	inc	dptr
      00033B E0               [24]  665 	movx	a,@dptr
      00033C F9               [12]  666 	mov	r1,a
      00033D A3               [24]  667 	inc	dptr
      00033E E0               [24]  668 	movx	a,@dptr
      00033F FA               [12]  669 	mov	r2,a
      000340 90r00r0A         [24]  670 	mov	dptr,#(_eeprom_buffer + 0x000a)
      000343 E0               [24]  671 	movx	a,@dptr
      000344 FC               [12]  672 	mov	r4,a
      000345 A3               [24]  673 	inc	dptr
      000346 E0               [24]  674 	movx	a,@dptr
      000347 FD               [12]  675 	mov	r5,a
      000348 EC               [12]  676 	mov	a,r4
      000349 28               [12]  677 	add	a,r0
      00034A F8               [12]  678 	mov	r0,a
      00034B ED               [12]  679 	mov	a,r5
      00034C 39               [12]  680 	addc	a,r1
      00034D F9               [12]  681 	mov	r1,a
      00034E 88 82            [24]  682 	mov	dpl,r0
      000350 89 83            [24]  683 	mov	dph,r1
      000352 8A F0            [24]  684 	mov	b,r2
      000354 EB               [12]  685 	mov	a,r3
      000355 12r00r00         [24]  686 	lcall	__gptrput
                                    687 ;	eeprom.c:187: eeprom_buffer.num_char += 1;
      000358 90r00r0A         [24]  688 	mov	dptr,#(_eeprom_buffer + 0x000a)
      00035B E0               [24]  689 	movx	a,@dptr
      00035C FC               [12]  690 	mov	r4,a
      00035D A3               [24]  691 	inc	dptr
      00035E E0               [24]  692 	movx	a,@dptr
      00035F FD               [12]  693 	mov	r5,a
      000360 0C               [12]  694 	inc	r4
      000361 BC 00 01         [24]  695 	cjne	r4,#0x00,00152$
      000364 0D               [12]  696 	inc	r5
      000365                        697 00152$:
      000365 90r00r0A         [24]  698 	mov	dptr,#(_eeprom_buffer + 0x000a)
      000368 EC               [12]  699 	mov	a,r4
      000369 F0               [24]  700 	movx	@dptr,a
      00036A ED               [12]  701 	mov	a,r5
      00036B A3               [24]  702 	inc	dptr
      00036C F0               [24]  703 	movx	@dptr,a
                                    704 ;	eeprom.c:182: for (int l = a; l <= b; l++)
      00036D 05*00            [12]  705 	inc	_hexdump_eeprom_sloc0_1_0
      00036F E4               [12]  706 	clr	a
      000370 B5*00 02         [24]  707 	cjne	a,_hexdump_eeprom_sloc0_1_0,00153$
      000373 05*01            [12]  708 	inc	(_hexdump_eeprom_sloc0_1_0 + 1)
      000375                        709 00153$:
      000375 D0 05            [24]  710 	pop	ar5
      000377 D0 04            [24]  711 	pop	ar4
      000379 80 83            [24]  712 	sjmp	00111$
      00037B                        713 00109$:
                                    714 ;	eeprom.c:190: dump_eeprom_buffer(a);
      00037B 8E 82            [24]  715 	mov	dpl,r6
      00037D 8F 83            [24]  716 	mov	dph,r7
      00037F 12r05r32         [24]  717 	lcall	_dump_eeprom_buffer
                                    718 ;	eeprom.c:191: free(eeprom_buffer.buffer_start);
      000382 90r00r02         [24]  719 	mov	dptr,#(_eeprom_buffer + 0x0002)
      000385 E0               [24]  720 	movx	a,@dptr
      000386 FD               [12]  721 	mov	r5,a
      000387 A3               [24]  722 	inc	dptr
      000388 E0               [24]  723 	movx	a,@dptr
      000389 FE               [12]  724 	mov	r6,a
      00038A A3               [24]  725 	inc	dptr
      00038B E0               [24]  726 	movx	a,@dptr
      00038C FF               [12]  727 	mov	r7,a
      00038D 8D 82            [24]  728 	mov	dpl,r5
      00038F 8E 83            [24]  729 	mov	dph,r6
      000391 8F F0            [24]  730 	mov	b,r7
                                    731 ;	eeprom.c:192: }
      000393 02r00r00         [24]  732 	ljmp	_free
                                    733 ;------------------------------------------------------------
                                    734 ;Allocation info for local variables in function 'blockfill_eeprom'
                                    735 ;------------------------------------------------------------
                                    736 ;a                         Allocated with name '_blockfill_eeprom_a_65536_67'
                                    737 ;b                         Allocated with name '_blockfill_eeprom_b_65536_67'
                                    738 ;c                         Allocated with name '_blockfill_eeprom_c_65536_67'
                                    739 ;l                         Allocated with name '_blockfill_eeprom_l_131072_70'
                                    740 ;------------------------------------------------------------
                                    741 ;	eeprom.c:199: void blockfill_eeprom()
                                    742 ;	-----------------------------------------
                                    743 ;	 function blockfill_eeprom
                                    744 ;	-----------------------------------------
      000396                        745 _blockfill_eeprom:
                                    746 ;	eeprom.c:203: get_blockfill_from_address:
      000396                        747 00101$:
                                    748 ;	eeprom.c:204: printf("Please give a valid starting address (0x000 - 0x7FF) \n\r");
      000396 74rC1            [12]  749 	mov	a,#___str_11
      000398 C0 E0            [24]  750 	push	acc
      00039A 74s01            [12]  751 	mov	a,#(___str_11 >> 8)
      00039C C0 E0            [24]  752 	push	acc
      00039E 74 80            [12]  753 	mov	a,#0x80
      0003A0 C0 E0            [24]  754 	push	acc
      0003A2 12r00r00         [24]  755 	lcall	_printf
      0003A5 15 81            [12]  756 	dec	sp
      0003A7 15 81            [12]  757 	dec	sp
      0003A9 15 81            [12]  758 	dec	sp
                                    759 ;	eeprom.c:205: a = get_number_hex(3);
      0003AB 90 00 03         [24]  760 	mov	dptr,#0x0003
      0003AE 12r00r00         [24]  761 	lcall	_get_number_hex
      0003B1 AE 82            [24]  762 	mov	r6,dpl
                                    763 ;	eeprom.c:207: if (a < 0 || a > 2047)
      0003B3 E5 83            [12]  764 	mov	a,dph
      0003B5 FF               [12]  765 	mov	r7,a
      0003B6 20 E7 DD         [24]  766 	jb	acc.7,00101$
      0003B9 C3               [12]  767 	clr	c
      0003BA 74 FF            [12]  768 	mov	a,#0xff
      0003BC 9E               [12]  769 	subb	a,r6
      0003BD 74 87            [12]  770 	mov	a,#(0x07 ^ 0x80)
      0003BF 8F F0            [24]  771 	mov	b,r7
      0003C1 63 F0 80         [24]  772 	xrl	b,#0x80
      0003C4 95 F0            [12]  773 	subb	a,b
      0003C6 40 CE            [24]  774 	jc	00101$
                                    775 ;	eeprom.c:212: get_blockfill_to_address:
      0003C8                        776 00105$:
                                    777 ;	eeprom.c:213: printf("Please give a valid ending address (0x%X - 0x7FF) \n\r", a);
      0003C8 C0 07            [24]  778 	push	ar7
      0003CA C0 06            [24]  779 	push	ar6
      0003CC C0 06            [24]  780 	push	ar6
      0003CE C0 07            [24]  781 	push	ar7
      0003D0 74rF9            [12]  782 	mov	a,#___str_12
      0003D2 C0 E0            [24]  783 	push	acc
      0003D4 74s01            [12]  784 	mov	a,#(___str_12 >> 8)
      0003D6 C0 E0            [24]  785 	push	acc
      0003D8 74 80            [12]  786 	mov	a,#0x80
      0003DA C0 E0            [24]  787 	push	acc
      0003DC 12r00r00         [24]  788 	lcall	_printf
      0003DF E5 81            [12]  789 	mov	a,sp
      0003E1 24 FB            [12]  790 	add	a,#0xfb
      0003E3 F5 81            [12]  791 	mov	sp,a
                                    792 ;	eeprom.c:214: b = get_number_hex(3);
      0003E5 90 00 03         [24]  793 	mov	dptr,#0x0003
      0003E8 12r00r00         [24]  794 	lcall	_get_number_hex
      0003EB AC 82            [24]  795 	mov	r4,dpl
      0003ED AD 83            [24]  796 	mov	r5,dph
      0003EF D0 06            [24]  797 	pop	ar6
      0003F1 D0 07            [24]  798 	pop	ar7
                                    799 ;	eeprom.c:216: if (b < a || b > 2047)
      0003F3 C3               [12]  800 	clr	c
      0003F4 EC               [12]  801 	mov	a,r4
      0003F5 9E               [12]  802 	subb	a,r6
      0003F6 ED               [12]  803 	mov	a,r5
      0003F7 64 80            [12]  804 	xrl	a,#0x80
      0003F9 8F F0            [24]  805 	mov	b,r7
      0003FB 63 F0 80         [24]  806 	xrl	b,#0x80
      0003FE 95 F0            [12]  807 	subb	a,b
      000400 40 C6            [24]  808 	jc	00105$
      000402 74 FF            [12]  809 	mov	a,#0xff
      000404 9C               [12]  810 	subb	a,r4
      000405 74 87            [12]  811 	mov	a,#(0x07 ^ 0x80)
      000407 8D F0            [24]  812 	mov	b,r5
      000409 63 F0 80         [24]  813 	xrl	b,#0x80
      00040C 95 F0            [12]  814 	subb	a,b
      00040E 40 B8            [24]  815 	jc	00105$
                                    816 ;	eeprom.c:222: printf("\n\rPlease give a valid data for blockfill (0x00 - 0xFF) \n\r");
      000410 C0 07            [24]  817 	push	ar7
      000412 C0 06            [24]  818 	push	ar6
      000414 C0 05            [24]  819 	push	ar5
      000416 C0 04            [24]  820 	push	ar4
      000418 74r42            [12]  821 	mov	a,#___str_14
      00041A C0 E0            [24]  822 	push	acc
      00041C 74s02            [12]  823 	mov	a,#(___str_14 >> 8)
      00041E C0 E0            [24]  824 	push	acc
      000420 74 80            [12]  825 	mov	a,#0x80
      000422 C0 E0            [24]  826 	push	acc
      000424 12r00r00         [24]  827 	lcall	_printf
      000427 15 81            [12]  828 	dec	sp
      000429 15 81            [12]  829 	dec	sp
      00042B 15 81            [12]  830 	dec	sp
                                    831 ;	eeprom.c:223: c = get_number_hex(2);
      00042D 90 00 02         [24]  832 	mov	dptr,#0x0002
      000430 12r00r00         [24]  833 	lcall	_get_number_hex
      000433 AA 82            [24]  834 	mov	r2,dpl
      000435 AB 83            [24]  835 	mov	r3,dph
                                    836 ;	eeprom.c:225: printf("Writing EEPROM...\n\r");
      000437 C0 03            [24]  837 	push	ar3
      000439 C0 02            [24]  838 	push	ar2
      00043B 74r7C            [12]  839 	mov	a,#___str_15
      00043D C0 E0            [24]  840 	push	acc
      00043F 74s02            [12]  841 	mov	a,#(___str_15 >> 8)
      000441 C0 E0            [24]  842 	push	acc
      000443 74 80            [12]  843 	mov	a,#0x80
      000445 C0 E0            [24]  844 	push	acc
      000447 12r00r00         [24]  845 	lcall	_printf
      00044A 15 81            [12]  846 	dec	sp
      00044C 15 81            [12]  847 	dec	sp
      00044E 15 81            [12]  848 	dec	sp
      000450 D0 02            [24]  849 	pop	ar2
      000452 D0 03            [24]  850 	pop	ar3
      000454 D0 04            [24]  851 	pop	ar4
      000456 D0 05            [24]  852 	pop	ar5
      000458 D0 06            [24]  853 	pop	ar6
      00045A D0 07            [24]  854 	pop	ar7
                                    855 ;	eeprom.c:226: for (int l = a; l <= b; l++)
      00045C                        856 00112$:
      00045C C3               [12]  857 	clr	c
      00045D EC               [12]  858 	mov	a,r4
      00045E 9E               [12]  859 	subb	a,r6
      00045F ED               [12]  860 	mov	a,r5
      000460 64 80            [12]  861 	xrl	a,#0x80
      000462 8F F0            [24]  862 	mov	b,r7
      000464 63 F0 80         [24]  863 	xrl	b,#0x80
      000467 95 F0            [12]  864 	subb	a,b
      000469 40 32            [24]  865 	jc	00110$
                                    866 ;	eeprom.c:228: i2c_write_random((l & 0xF00) >> 8, (l & 0x0FF), (unsigned char)c);
      00046B 74 0F            [12]  867 	mov	a,#0x0f
      00046D 5F               [12]  868 	anl	a,r7
      00046E F8               [12]  869 	mov	r0,a
      00046F 90r00r00         [24]  870 	mov	dptr,#_i2c_write_random_PARM_2
      000472 EE               [12]  871 	mov	a,r6
      000473 F0               [24]  872 	movx	@dptr,a
      000474 90r00r00         [24]  873 	mov	dptr,#_i2c_write_random_PARM_3
      000477 EA               [12]  874 	mov	a,r2
      000478 F0               [24]  875 	movx	@dptr,a
      000479 88 82            [24]  876 	mov	dpl,r0
      00047B C0 07            [24]  877 	push	ar7
      00047D C0 06            [24]  878 	push	ar6
      00047F C0 05            [24]  879 	push	ar5
      000481 C0 04            [24]  880 	push	ar4
      000483 C0 03            [24]  881 	push	ar3
      000485 C0 02            [24]  882 	push	ar2
      000487 12r00r00         [24]  883 	lcall	_i2c_write_random
      00048A D0 02            [24]  884 	pop	ar2
      00048C D0 03            [24]  885 	pop	ar3
      00048E D0 04            [24]  886 	pop	ar4
      000490 D0 05            [24]  887 	pop	ar5
      000492 D0 06            [24]  888 	pop	ar6
      000494 D0 07            [24]  889 	pop	ar7
                                    890 ;	eeprom.c:226: for (int l = a; l <= b; l++)
      000496 0E               [12]  891 	inc	r6
      000497 BE 00 C2         [24]  892 	cjne	r6,#0x00,00112$
      00049A 0F               [12]  893 	inc	r7
      00049B 80 BF            [24]  894 	sjmp	00112$
      00049D                        895 00110$:
                                    896 ;	eeprom.c:231: printf("\n\rBlockfill finished...\n\r");
      00049D 74r90            [12]  897 	mov	a,#___str_16
      00049F C0 E0            [24]  898 	push	acc
      0004A1 74s02            [12]  899 	mov	a,#(___str_16 >> 8)
      0004A3 C0 E0            [24]  900 	push	acc
      0004A5 74 80            [12]  901 	mov	a,#0x80
      0004A7 C0 E0            [24]  902 	push	acc
      0004A9 12r00r00         [24]  903 	lcall	_printf
      0004AC 15 81            [12]  904 	dec	sp
      0004AE 15 81            [12]  905 	dec	sp
      0004B0 15 81            [12]  906 	dec	sp
                                    907 ;	eeprom.c:232: }
      0004B2 22               [24]  908 	ret
                                    909 ;------------------------------------------------------------
                                    910 ;Allocation info for local variables in function 'print_eeprom_menu'
                                    911 ;------------------------------------------------------------
                                    912 ;	eeprom.c:239: void print_eeprom_menu()
                                    913 ;	-----------------------------------------
                                    914 ;	 function print_eeprom_menu
                                    915 ;	-----------------------------------------
      0004B3                        916 _print_eeprom_menu:
                                    917 ;	eeprom.c:241: printf("\n\n\r^^^^^^^^^^^^^^^^^^^-EEPROM-MENU-^^^^^^^^^^^^^^^^^^^^^^^^^^ \n\n\r");
      0004B3 74rAA            [12]  918 	mov	a,#___str_17
      0004B5 C0 E0            [24]  919 	push	acc
      0004B7 74s02            [12]  920 	mov	a,#(___str_17 >> 8)
      0004B9 C0 E0            [24]  921 	push	acc
      0004BB 74 80            [12]  922 	mov	a,#0x80
      0004BD C0 E0            [24]  923 	push	acc
      0004BF 12r00r00         [24]  924 	lcall	_printf
      0004C2 15 81            [12]  925 	dec	sp
      0004C4 15 81            [12]  926 	dec	sp
      0004C6 15 81            [12]  927 	dec	sp
                                    928 ;	eeprom.c:242: printf("'R' -> Read Random Byte\n\r");
      0004C8 74rEC            [12]  929 	mov	a,#___str_18
      0004CA C0 E0            [24]  930 	push	acc
      0004CC 74s02            [12]  931 	mov	a,#(___str_18 >> 8)
      0004CE C0 E0            [24]  932 	push	acc
      0004D0 74 80            [12]  933 	mov	a,#0x80
      0004D2 C0 E0            [24]  934 	push	acc
      0004D4 12r00r00         [24]  935 	lcall	_printf
      0004D7 15 81            [12]  936 	dec	sp
      0004D9 15 81            [12]  937 	dec	sp
      0004DB 15 81            [12]  938 	dec	sp
                                    939 ;	eeprom.c:243: printf("'W' -> Write Random Byte\n\r");
      0004DD 74r06            [12]  940 	mov	a,#___str_19
      0004DF C0 E0            [24]  941 	push	acc
      0004E1 74s03            [12]  942 	mov	a,#(___str_19 >> 8)
      0004E3 C0 E0            [24]  943 	push	acc
      0004E5 74 80            [12]  944 	mov	a,#0x80
      0004E7 C0 E0            [24]  945 	push	acc
      0004E9 12r00r00         [24]  946 	lcall	_printf
      0004EC 15 81            [12]  947 	dec	sp
      0004EE 15 81            [12]  948 	dec	sp
      0004F0 15 81            [12]  949 	dec	sp
                                    950 ;	eeprom.c:244: printf("'D' -> Hexdump\n\r");
      0004F2 74r21            [12]  951 	mov	a,#___str_20
      0004F4 C0 E0            [24]  952 	push	acc
      0004F6 74s03            [12]  953 	mov	a,#(___str_20 >> 8)
      0004F8 C0 E0            [24]  954 	push	acc
      0004FA 74 80            [12]  955 	mov	a,#0x80
      0004FC C0 E0            [24]  956 	push	acc
      0004FE 12r00r00         [24]  957 	lcall	_printf
      000501 15 81            [12]  958 	dec	sp
      000503 15 81            [12]  959 	dec	sp
      000505 15 81            [12]  960 	dec	sp
                                    961 ;	eeprom.c:245: printf("'B' -> Block Fill\n\r");
      000507 74r32            [12]  962 	mov	a,#___str_21
      000509 C0 E0            [24]  963 	push	acc
      00050B 74s03            [12]  964 	mov	a,#(___str_21 >> 8)
      00050D C0 E0            [24]  965 	push	acc
      00050F 74 80            [12]  966 	mov	a,#0x80
      000511 C0 E0            [24]  967 	push	acc
      000513 12r00r00         [24]  968 	lcall	_printf
      000516 15 81            [12]  969 	dec	sp
      000518 15 81            [12]  970 	dec	sp
      00051A 15 81            [12]  971 	dec	sp
                                    972 ;	eeprom.c:246: printf("'F' -> Reset EEPROM \n\r");
      00051C 74r46            [12]  973 	mov	a,#___str_22
      00051E C0 E0            [24]  974 	push	acc
      000520 74s03            [12]  975 	mov	a,#(___str_22 >> 8)
      000522 C0 E0            [24]  976 	push	acc
      000524 74 80            [12]  977 	mov	a,#0x80
      000526 C0 E0            [24]  978 	push	acc
      000528 12r00r00         [24]  979 	lcall	_printf
      00052B 15 81            [12]  980 	dec	sp
      00052D 15 81            [12]  981 	dec	sp
      00052F 15 81            [12]  982 	dec	sp
                                    983 ;	eeprom.c:247: }
      000531 22               [24]  984 	ret
                                    985 ;------------------------------------------------------------
                                    986 ;Allocation info for local variables in function 'dump_eeprom_buffer'
                                    987 ;------------------------------------------------------------
                                    988 ;from                      Allocated with name '_dump_eeprom_buffer_from_65536_73'
                                    989 ;j                         Allocated with name '_dump_eeprom_buffer_j_65537_75'
                                    990 ;i                         Allocated with name '_dump_eeprom_buffer_i_131073_76'
                                    991 ;------------------------------------------------------------
                                    992 ;	eeprom.c:254: void dump_eeprom_buffer(int from)
                                    993 ;	-----------------------------------------
                                    994 ;	 function dump_eeprom_buffer
                                    995 ;	-----------------------------------------
      000532                        996 _dump_eeprom_buffer:
      000532 AF 83            [24]  997 	mov	r7,dph
      000534 E5 82            [12]  998 	mov	a,dpl
      000536 90r00r0C         [24]  999 	mov	dptr,#_dump_eeprom_buffer_from_65536_73
      000539 F0               [24] 1000 	movx	@dptr,a
      00053A EF               [12] 1001 	mov	a,r7
      00053B A3               [24] 1002 	inc	dptr
      00053C F0               [24] 1003 	movx	@dptr,a
                                   1004 ;	eeprom.c:257: printf("\n\r-------------------------HEXDUMP--------------------------------");
      00053D 74r5D            [12] 1005 	mov	a,#___str_23
      00053F C0 E0            [24] 1006 	push	acc
      000541 74s03            [12] 1007 	mov	a,#(___str_23 >> 8)
      000543 C0 E0            [24] 1008 	push	acc
      000545 74 80            [12] 1009 	mov	a,#0x80
      000547 C0 E0            [24] 1010 	push	acc
      000549 12r00r00         [24] 1011 	lcall	_printf
      00054C 15 81            [12] 1012 	dec	sp
      00054E 15 81            [12] 1013 	dec	sp
      000550 15 81            [12] 1014 	dec	sp
                                   1015 ;	eeprom.c:258: printf("\n\r ADDR: +0 +1 +2 +3 +4 +5 +6 +7 +8 +9 +A +B +C +D +E +F \n\r");
      000552 74rA0            [12] 1016 	mov	a,#___str_24
      000554 C0 E0            [24] 1017 	push	acc
      000556 74s03            [12] 1018 	mov	a,#(___str_24 >> 8)
      000558 C0 E0            [24] 1019 	push	acc
      00055A 74 80            [12] 1020 	mov	a,#0x80
      00055C C0 E0            [24] 1021 	push	acc
      00055E 12r00r00         [24] 1022 	lcall	_printf
      000561 15 81            [12] 1023 	dec	sp
      000563 15 81            [12] 1024 	dec	sp
      000565 15 81            [12] 1025 	dec	sp
                                   1026 ;	eeprom.c:259: int j = 16;
      000567 90r00r0E         [24] 1027 	mov	dptr,#_dump_eeprom_buffer_j_65537_75
      00056A 74 10            [12] 1028 	mov	a,#0x10
      00056C F0               [24] 1029 	movx	@dptr,a
      00056D E4               [12] 1030 	clr	a
      00056E A3               [24] 1031 	inc	dptr
      00056F F0               [24] 1032 	movx	@dptr,a
                                   1033 ;	eeprom.c:261: for (int i = 0; i < eeprom_buffer.num_char; i++)
      000570 90r00r0C         [24] 1034 	mov	dptr,#_dump_eeprom_buffer_from_65536_73
      000573 E0               [24] 1035 	movx	a,@dptr
      000574 FE               [12] 1036 	mov	r6,a
      000575 A3               [24] 1037 	inc	dptr
      000576 E0               [24] 1038 	movx	a,@dptr
      000577 FF               [12] 1039 	mov	r7,a
      000578 7C 00            [12] 1040 	mov	r4,#0x00
      00057A 7D 00            [12] 1041 	mov	r5,#0x00
      00057C                       1042 00107$:
      00057C 90r00r0A         [24] 1043 	mov	dptr,#(_eeprom_buffer + 0x000a)
      00057F E0               [24] 1044 	movx	a,@dptr
      000580 FA               [12] 1045 	mov	r2,a
      000581 A3               [24] 1046 	inc	dptr
      000582 E0               [24] 1047 	movx	a,@dptr
      000583 FB               [12] 1048 	mov	r3,a
      000584 C3               [12] 1049 	clr	c
      000585 EC               [12] 1050 	mov	a,r4
      000586 9A               [12] 1051 	subb	a,r2
      000587 ED               [12] 1052 	mov	a,r5
      000588 64 80            [12] 1053 	xrl	a,#0x80
      00058A 8B F0            [24] 1054 	mov	b,r3
      00058C 63 F0 80         [24] 1055 	xrl	b,#0x80
      00058F 95 F0            [12] 1056 	subb	a,b
      000591 40 03            [24] 1057 	jc	00128$
      000593 02r06r4A         [24] 1058 	ljmp	00105$
      000596                       1059 00128$:
                                   1060 ;	eeprom.c:263: if (j == 16)
      000596 90r00r0E         [24] 1061 	mov	dptr,#_dump_eeprom_buffer_j_65537_75
      000599 E0               [24] 1062 	movx	a,@dptr
      00059A FA               [12] 1063 	mov	r2,a
      00059B A3               [24] 1064 	inc	dptr
      00059C E0               [24] 1065 	movx	a,@dptr
      00059D FB               [12] 1066 	mov	r3,a
      00059E BA 10 32         [24] 1067 	cjne	r2,#0x10,00102$
      0005A1 BB 00 2F         [24] 1068 	cjne	r3,#0x00,00102$
                                   1069 ;	eeprom.c:265: printf("\n\r0x%03X: ", (from + i));
      0005A4 EC               [12] 1070 	mov	a,r4
      0005A5 2E               [12] 1071 	add	a,r6
      0005A6 FA               [12] 1072 	mov	r2,a
      0005A7 ED               [12] 1073 	mov	a,r5
      0005A8 3F               [12] 1074 	addc	a,r7
      0005A9 FB               [12] 1075 	mov	r3,a
      0005AA C0 07            [24] 1076 	push	ar7
      0005AC C0 06            [24] 1077 	push	ar6
      0005AE C0 05            [24] 1078 	push	ar5
      0005B0 C0 04            [24] 1079 	push	ar4
      0005B2 C0 02            [24] 1080 	push	ar2
      0005B4 C0 03            [24] 1081 	push	ar3
      0005B6 74rDC            [12] 1082 	mov	a,#___str_25
      0005B8 C0 E0            [24] 1083 	push	acc
      0005BA 74s03            [12] 1084 	mov	a,#(___str_25 >> 8)
      0005BC C0 E0            [24] 1085 	push	acc
      0005BE 74 80            [12] 1086 	mov	a,#0x80
      0005C0 C0 E0            [24] 1087 	push	acc
      0005C2 12r00r00         [24] 1088 	lcall	_printf
      0005C5 E5 81            [12] 1089 	mov	a,sp
      0005C7 24 FB            [12] 1090 	add	a,#0xfb
      0005C9 F5 81            [12] 1091 	mov	sp,a
      0005CB D0 04            [24] 1092 	pop	ar4
      0005CD D0 05            [24] 1093 	pop	ar5
      0005CF D0 06            [24] 1094 	pop	ar6
      0005D1 D0 07            [24] 1095 	pop	ar7
      0005D3                       1096 00102$:
                                   1097 ;	eeprom.c:267: printf("%02X ", *(eeprom_buffer.buffer_start + i));
      0005D3 90r00r02         [24] 1098 	mov	dptr,#(_eeprom_buffer + 0x0002)
      0005D6 E0               [24] 1099 	movx	a,@dptr
      0005D7 F9               [12] 1100 	mov	r1,a
      0005D8 A3               [24] 1101 	inc	dptr
      0005D9 E0               [24] 1102 	movx	a,@dptr
      0005DA FA               [12] 1103 	mov	r2,a
      0005DB A3               [24] 1104 	inc	dptr
      0005DC E0               [24] 1105 	movx	a,@dptr
      0005DD FB               [12] 1106 	mov	r3,a
      0005DE EC               [12] 1107 	mov	a,r4
      0005DF 29               [12] 1108 	add	a,r1
      0005E0 F9               [12] 1109 	mov	r1,a
      0005E1 ED               [12] 1110 	mov	a,r5
      0005E2 3A               [12] 1111 	addc	a,r2
      0005E3 FA               [12] 1112 	mov	r2,a
      0005E4 89 82            [24] 1113 	mov	dpl,r1
      0005E6 8A 83            [24] 1114 	mov	dph,r2
      0005E8 8B F0            [24] 1115 	mov	b,r3
      0005EA 12r00r00         [24] 1116 	lcall	__gptrget
      0005ED F9               [12] 1117 	mov	r1,a
      0005EE 7B 00            [12] 1118 	mov	r3,#0x00
      0005F0 C0 07            [24] 1119 	push	ar7
      0005F2 C0 06            [24] 1120 	push	ar6
      0005F4 C0 05            [24] 1121 	push	ar5
      0005F6 C0 04            [24] 1122 	push	ar4
      0005F8 C0 01            [24] 1123 	push	ar1
      0005FA C0 03            [24] 1124 	push	ar3
      0005FC 74rE7            [12] 1125 	mov	a,#___str_26
      0005FE C0 E0            [24] 1126 	push	acc
      000600 74s03            [12] 1127 	mov	a,#(___str_26 >> 8)
      000602 C0 E0            [24] 1128 	push	acc
      000604 74 80            [12] 1129 	mov	a,#0x80
      000606 C0 E0            [24] 1130 	push	acc
      000608 12r00r00         [24] 1131 	lcall	_printf
      00060B E5 81            [12] 1132 	mov	a,sp
      00060D 24 FB            [12] 1133 	add	a,#0xfb
      00060F F5 81            [12] 1134 	mov	sp,a
      000611 D0 04            [24] 1135 	pop	ar4
      000613 D0 05            [24] 1136 	pop	ar5
      000615 D0 06            [24] 1137 	pop	ar6
      000617 D0 07            [24] 1138 	pop	ar7
                                   1139 ;	eeprom.c:268: j--;
      000619 90r00r0E         [24] 1140 	mov	dptr,#_dump_eeprom_buffer_j_65537_75
      00061C E0               [24] 1141 	movx	a,@dptr
      00061D 24 FF            [12] 1142 	add	a,#0xff
      00061F FA               [12] 1143 	mov	r2,a
      000620 A3               [24] 1144 	inc	dptr
      000621 E0               [24] 1145 	movx	a,@dptr
      000622 34 FF            [12] 1146 	addc	a,#0xff
      000624 FB               [12] 1147 	mov	r3,a
      000625 90r00r0E         [24] 1148 	mov	dptr,#_dump_eeprom_buffer_j_65537_75
      000628 EA               [12] 1149 	mov	a,r2
      000629 F0               [24] 1150 	movx	@dptr,a
      00062A EB               [12] 1151 	mov	a,r3
      00062B A3               [24] 1152 	inc	dptr
      00062C F0               [24] 1153 	movx	@dptr,a
                                   1154 ;	eeprom.c:269: if (j == 0)
      00062D 90r00r0E         [24] 1155 	mov	dptr,#_dump_eeprom_buffer_j_65537_75
      000630 E0               [24] 1156 	movx	a,@dptr
      000631 F5 F0            [12] 1157 	mov	b,a
      000633 A3               [24] 1158 	inc	dptr
      000634 E0               [24] 1159 	movx	a,@dptr
      000635 45 F0            [12] 1160 	orl	a,b
      000637 70 09            [24] 1161 	jnz	00108$
                                   1162 ;	eeprom.c:270: j = 16;
      000639 90r00r0E         [24] 1163 	mov	dptr,#_dump_eeprom_buffer_j_65537_75
      00063C 74 10            [12] 1164 	mov	a,#0x10
      00063E F0               [24] 1165 	movx	@dptr,a
      00063F E4               [12] 1166 	clr	a
      000640 A3               [24] 1167 	inc	dptr
      000641 F0               [24] 1168 	movx	@dptr,a
      000642                       1169 00108$:
                                   1170 ;	eeprom.c:261: for (int i = 0; i < eeprom_buffer.num_char; i++)
      000642 0C               [12] 1171 	inc	r4
      000643 BC 00 01         [24] 1172 	cjne	r4,#0x00,00132$
      000646 0D               [12] 1173 	inc	r5
      000647                       1174 00132$:
      000647 02r05r7C         [24] 1175 	ljmp	00107$
      00064A                       1176 00105$:
                                   1177 ;	eeprom.c:272: printf("\n\n\r");
      00064A 74rED            [12] 1178 	mov	a,#___str_27
      00064C C0 E0            [24] 1179 	push	acc
      00064E 74s03            [12] 1180 	mov	a,#(___str_27 >> 8)
      000650 C0 E0            [24] 1181 	push	acc
      000652 74 80            [12] 1182 	mov	a,#0x80
      000654 C0 E0            [24] 1183 	push	acc
      000656 12r00r00         [24] 1184 	lcall	_printf
      000659 15 81            [12] 1185 	dec	sp
      00065B 15 81            [12] 1186 	dec	sp
      00065D 15 81            [12] 1187 	dec	sp
                                   1188 ;	eeprom.c:273: }
      00065F 22               [24] 1189 	ret
                                   1190 	.area CSEG    (CODE)
                                   1191 	.area CONST   (CODE)
                                   1192 	.area CONST   (CODE)
      000000                       1193 ___str_0:
      000000 20                    1194 	.ascii " "
      000001 0A                    1195 	.db 0x0a
      000002 0D                    1196 	.db 0x0d
      000003 20 48 65 6C 6C 6F 2C  1197 	.ascii " Hello, In EEPROM Demo mode"
             20 49 6E 20 45 45 50
             52 4F 4D 20 44 65 6D
             6F 20 6D 6F 64 65
      00001E 00                    1198 	.db 0x00
                                   1199 	.area CSEG    (CODE)
                                   1200 	.area CONST   (CODE)
      00001F                       1201 ___str_1:
      00001F 50 6C 65 61 73 65 20  1202 	.ascii "Please make a valid choice"
             6D 61 6B 65 20 61 20
             76 61 6C 69 64 20 63
             68 6F 69 63 65
      000039 0A                    1203 	.db 0x0a
      00003A 0D                    1204 	.db 0x0d
      00003B 00                    1205 	.db 0x00
                                   1206 	.area CSEG    (CODE)
                                   1207 	.area CONST   (CODE)
      00003C                       1208 ___str_2:
      00003C 0A                    1209 	.db 0x0a
      00003D 0D                    1210 	.db 0x0d
      00003E 49 32 43 20 52 65 73  1211 	.ascii "I2C Reset has been performed "
             65 74 20 68 61 73 20
             62 65 65 6E 20 70 65
             72 66 6F 72 6D 65 64
             20
      00005B 0A                    1212 	.db 0x0a
      00005C 0D                    1213 	.db 0x0d
      00005D 00                    1214 	.db 0x00
                                   1215 	.area CSEG    (CODE)
                                   1216 	.area CONST   (CODE)
      00005E                       1217 ___str_3:
      00005E 0A                    1218 	.db 0x0a
      00005F 0D                    1219 	.db 0x0d
      000060 50 6C 65 61 73 65 20  1220 	.ascii "Please 'E' to go to EEPROM Menu "
             27 45 27 20 74 6F 20
             67 6F 20 74 6F 20 45
             45 50 52 4F 4D 20 4D
             65 6E 75 20
      000080 0A                    1221 	.db 0x0a
      000081 0D                    1222 	.db 0x0d
      000082 00                    1223 	.db 0x00
                                   1224 	.area CSEG    (CODE)
                                   1225 	.area CONST   (CODE)
      000083                       1226 ___str_4:
      000083 0A                    1227 	.db 0x0a
      000084 0D                    1228 	.db 0x0d
      000085 20 50 6C 65 61 73 65  1229 	.ascii " Please give a valid address to read from (0x000 - 0x7FF) "
             20 67 69 76 65 20 61
             20 76 61 6C 69 64 20
             61 64 64 72 65 73 73
             20 74 6F 20 72 65 61
             64 20 66 72 6F 6D 20
             28 30 78 30 30 30 20
             2D 20 30 78 37 46 46
             29 20
      0000BF 0A                    1230 	.db 0x0a
      0000C0 0D                    1231 	.db 0x0d
      0000C1 00                    1232 	.db 0x00
                                   1233 	.area CSEG    (CODE)
                                   1234 	.area CONST   (CODE)
      0000C2                       1235 ___str_5:
      0000C2 42 6C 6F 63 6B 20 69  1236 	.ascii "Block is is %x "
             73 20 69 73 20 25 78
             20
      0000D1 0A                    1237 	.db 0x0a
      0000D2 0D                    1238 	.db 0x0d
      0000D3 00                    1239 	.db 0x00
                                   1240 	.area CSEG    (CODE)
                                   1241 	.area CONST   (CODE)
      0000D4                       1242 ___str_6:
      0000D4 41 64 64 72 65 73 73  1243 	.ascii "Address is 0x%X "
             20 69 73 20 30 78 25
             58 20
      0000E4 0A                    1244 	.db 0x0a
      0000E5 0D                    1245 	.db 0x0d
      0000E6 00                    1246 	.db 0x00
                                   1247 	.area CSEG    (CODE)
                                   1248 	.area CONST   (CODE)
      0000E7                       1249 ___str_7:
      0000E7 0A                    1250 	.db 0x0a
      0000E8 0D                    1251 	.db 0x0d
      0000E9 20 54 68 65 20 76 61  1252 	.ascii " The value at the address is -> 0x%X "
             6C 75 65 20 61 74 20
             74 68 65 20 61 64 64
             72 65 73 73 20 69 73
             20 2D 3E 20 30 78 25
             58 20
      00010E 0A                    1253 	.db 0x0a
      00010F 0D                    1254 	.db 0x0d
      000110 00                    1255 	.db 0x00
                                   1256 	.area CSEG    (CODE)
                                   1257 	.area CONST   (CODE)
      000111                       1258 ___str_8:
      000111 50 6C 65 61 73 65 20  1259 	.ascii "Please give a valid address to write to (0x000 - 0x7FF) "
             67 69 76 65 20 61 20
             76 61 6C 69 64 20 61
             64 64 72 65 73 73 20
             74 6F 20 77 72 69 74
             65 20 74 6F 20 28 30
             78 30 30 30 20 2D 20
             30 78 37 46 46 29 20
      000149 0A                    1260 	.db 0x0a
      00014A 0D                    1261 	.db 0x0d
      00014B 00                    1262 	.db 0x00
                                   1263 	.area CSEG    (CODE)
                                   1264 	.area CONST   (CODE)
      00014C                       1265 ___str_9:
      00014C 0A                    1266 	.db 0x0a
      00014D 0D                    1267 	.db 0x0d
      00014E 50 6C 65 61 73 65 20  1268 	.ascii "Please give a valid data to write (0x00 - 0xFF) "
             67 69 76 65 20 61 20
             76 61 6C 69 64 20 64
             61 74 61 20 74 6F 20
             77 72 69 74 65 20 28
             30 78 30 30 20 2D 20
             30 78 46 46 29 20
      00017E 0A                    1269 	.db 0x0a
      00017F 0D                    1270 	.db 0x0d
      000180 00                    1271 	.db 0x00
                                   1272 	.area CSEG    (CODE)
                                   1273 	.area CONST   (CODE)
      000181                       1274 ___str_10:
      000181 0A                    1275 	.db 0x0a
      000182 0D                    1276 	.db 0x0d
      000183 54 68 65 20 64 61 74  1277 	.ascii "The data has been successfully written at the address 0x%X "
             61 20 68 61 73 20 62
             65 65 6E 20 73 75 63
             63 65 73 73 66 75 6C
             6C 79 20 77 72 69 74
             74 65 6E 20 61 74 20
             74 68 65 20 61 64 64
             72 65 73 73 20 30 78
             25 58 20
      0001BE 0A                    1278 	.db 0x0a
      0001BF 0D                    1279 	.db 0x0d
      0001C0 00                    1280 	.db 0x00
                                   1281 	.area CSEG    (CODE)
                                   1282 	.area CONST   (CODE)
      0001C1                       1283 ___str_11:
      0001C1 50 6C 65 61 73 65 20  1284 	.ascii "Please give a valid starting address (0x000 - 0x7FF) "
             67 69 76 65 20 61 20
             76 61 6C 69 64 20 73
             74 61 72 74 69 6E 67
             20 61 64 64 72 65 73
             73 20 28 30 78 30 30
             30 20 2D 20 30 78 37
             46 46 29 20
      0001F6 0A                    1285 	.db 0x0a
      0001F7 0D                    1286 	.db 0x0d
      0001F8 00                    1287 	.db 0x00
                                   1288 	.area CSEG    (CODE)
                                   1289 	.area CONST   (CODE)
      0001F9                       1290 ___str_12:
      0001F9 50 6C 65 61 73 65 20  1291 	.ascii "Please give a valid ending address (0x%X - 0x7FF) "
             67 69 76 65 20 61 20
             76 61 6C 69 64 20 65
             6E 64 69 6E 67 20 61
             64 64 72 65 73 73 20
             28 30 78 25 58 20 2D
             20 30 78 37 46 46 29
             20
      00022B 0A                    1292 	.db 0x0a
      00022C 0D                    1293 	.db 0x0d
      00022D 00                    1294 	.db 0x00
                                   1295 	.area CSEG    (CODE)
                                   1296 	.area CONST   (CODE)
      00022E                       1297 ___str_13:
      00022E 52 65 61 64 69 6E 67  1298 	.ascii "Reading EEPROM..."
             20 45 45 50 52 4F 4D
             2E 2E 2E
      00023F 0A                    1299 	.db 0x0a
      000240 0D                    1300 	.db 0x0d
      000241 00                    1301 	.db 0x00
                                   1302 	.area CSEG    (CODE)
                                   1303 	.area CONST   (CODE)
      000242                       1304 ___str_14:
      000242 0A                    1305 	.db 0x0a
      000243 0D                    1306 	.db 0x0d
      000244 50 6C 65 61 73 65 20  1307 	.ascii "Please give a valid data for blockfill (0x00 - 0xFF) "
             67 69 76 65 20 61 20
             76 61 6C 69 64 20 64
             61 74 61 20 66 6F 72
             20 62 6C 6F 63 6B 66
             69 6C 6C 20 28 30 78
             30 30 20 2D 20 30 78
             46 46 29 20
      000279 0A                    1308 	.db 0x0a
      00027A 0D                    1309 	.db 0x0d
      00027B 00                    1310 	.db 0x00
                                   1311 	.area CSEG    (CODE)
                                   1312 	.area CONST   (CODE)
      00027C                       1313 ___str_15:
      00027C 57 72 69 74 69 6E 67  1314 	.ascii "Writing EEPROM..."
             20 45 45 50 52 4F 4D
             2E 2E 2E
      00028D 0A                    1315 	.db 0x0a
      00028E 0D                    1316 	.db 0x0d
      00028F 00                    1317 	.db 0x00
                                   1318 	.area CSEG    (CODE)
                                   1319 	.area CONST   (CODE)
      000290                       1320 ___str_16:
      000290 0A                    1321 	.db 0x0a
      000291 0D                    1322 	.db 0x0d
      000292 42 6C 6F 63 6B 66 69  1323 	.ascii "Blockfill finished..."
             6C 6C 20 66 69 6E 69
             73 68 65 64 2E 2E 2E
      0002A7 0A                    1324 	.db 0x0a
      0002A8 0D                    1325 	.db 0x0d
      0002A9 00                    1326 	.db 0x00
                                   1327 	.area CSEG    (CODE)
                                   1328 	.area CONST   (CODE)
      0002AA                       1329 ___str_17:
      0002AA 0A                    1330 	.db 0x0a
      0002AB 0A                    1331 	.db 0x0a
      0002AC 0D                    1332 	.db 0x0d
      0002AD 5E 5E 5E 5E 5E 5E 5E  1333 	.ascii "^^^^^^^^^^^^^^^^^^^-EEPROM-MENU-^^^^^^^^^^^^^^^^^^^^^^^^^^ "
             5E 5E 5E 5E 5E 5E 5E
             5E 5E 5E 5E 5E 2D 45
             45 50 52 4F 4D 2D 4D
             45 4E 55 2D 5E 5E 5E
             5E 5E 5E 5E 5E 5E 5E
             5E 5E 5E 5E 5E 5E 5E
             5E 5E 5E 5E 5E 5E 5E
             5E 5E 20
      0002E8 0A                    1334 	.db 0x0a
      0002E9 0A                    1335 	.db 0x0a
      0002EA 0D                    1336 	.db 0x0d
      0002EB 00                    1337 	.db 0x00
                                   1338 	.area CSEG    (CODE)
                                   1339 	.area CONST   (CODE)
      0002EC                       1340 ___str_18:
      0002EC 27 52 27 20 2D 3E 20  1341 	.ascii "'R' -> Read Random Byte"
             52 65 61 64 20 52 61
             6E 64 6F 6D 20 42 79
             74 65
      000303 0A                    1342 	.db 0x0a
      000304 0D                    1343 	.db 0x0d
      000305 00                    1344 	.db 0x00
                                   1345 	.area CSEG    (CODE)
                                   1346 	.area CONST   (CODE)
      000306                       1347 ___str_19:
      000306 27 57 27 20 2D 3E 20  1348 	.ascii "'W' -> Write Random Byte"
             57 72 69 74 65 20 52
             61 6E 64 6F 6D 20 42
             79 74 65
      00031E 0A                    1349 	.db 0x0a
      00031F 0D                    1350 	.db 0x0d
      000320 00                    1351 	.db 0x00
                                   1352 	.area CSEG    (CODE)
                                   1353 	.area CONST   (CODE)
      000321                       1354 ___str_20:
      000321 27 44 27 20 2D 3E 20  1355 	.ascii "'D' -> Hexdump"
             48 65 78 64 75 6D 70
      00032F 0A                    1356 	.db 0x0a
      000330 0D                    1357 	.db 0x0d
      000331 00                    1358 	.db 0x00
                                   1359 	.area CSEG    (CODE)
                                   1360 	.area CONST   (CODE)
      000332                       1361 ___str_21:
      000332 27 42 27 20 2D 3E 20  1362 	.ascii "'B' -> Block Fill"
             42 6C 6F 63 6B 20 46
             69 6C 6C
      000343 0A                    1363 	.db 0x0a
      000344 0D                    1364 	.db 0x0d
      000345 00                    1365 	.db 0x00
                                   1366 	.area CSEG    (CODE)
                                   1367 	.area CONST   (CODE)
      000346                       1368 ___str_22:
      000346 27 46 27 20 2D 3E 20  1369 	.ascii "'F' -> Reset EEPROM "
             52 65 73 65 74 20 45
             45 50 52 4F 4D 20
      00035A 0A                    1370 	.db 0x0a
      00035B 0D                    1371 	.db 0x0d
      00035C 00                    1372 	.db 0x00
                                   1373 	.area CSEG    (CODE)
                                   1374 	.area CONST   (CODE)
      00035D                       1375 ___str_23:
      00035D 0A                    1376 	.db 0x0a
      00035E 0D                    1377 	.db 0x0d
      00035F 2D 2D 2D 2D 2D 2D 2D  1378 	.ascii "-------------------------HEXDUMP----------------------------"
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 48 45 58
             44 55 4D 50 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D
      00039B 2D 2D 2D 2D           1379 	.ascii "----"
      00039F 00                    1380 	.db 0x00
                                   1381 	.area CSEG    (CODE)
                                   1382 	.area CONST   (CODE)
      0003A0                       1383 ___str_24:
      0003A0 0A                    1384 	.db 0x0a
      0003A1 0D                    1385 	.db 0x0d
      0003A2 20 41 44 44 52 3A 20  1386 	.ascii " ADDR: +0 +1 +2 +3 +4 +5 +6 +7 +8 +9 +A +B +C +D +E +F "
             2B 30 20 2B 31 20 2B
             32 20 2B 33 20 2B 34
             20 2B 35 20 2B 36 20
             2B 37 20 2B 38 20 2B
             39 20 2B 41 20 2B 42
             20 2B 43 20 2B 44 20
             2B 45 20 2B 46 20
      0003D9 0A                    1387 	.db 0x0a
      0003DA 0D                    1388 	.db 0x0d
      0003DB 00                    1389 	.db 0x00
                                   1390 	.area CSEG    (CODE)
                                   1391 	.area CONST   (CODE)
      0003DC                       1392 ___str_25:
      0003DC 0A                    1393 	.db 0x0a
      0003DD 0D                    1394 	.db 0x0d
      0003DE 30 78 25 30 33 58 3A  1395 	.ascii "0x%03X: "
             20
      0003E6 00                    1396 	.db 0x00
                                   1397 	.area CSEG    (CODE)
                                   1398 	.area CONST   (CODE)
      0003E7                       1399 ___str_26:
      0003E7 25 30 32 58 20        1400 	.ascii "%02X "
      0003EC 00                    1401 	.db 0x00
                                   1402 	.area CSEG    (CODE)
                                   1403 	.area CONST   (CODE)
      0003ED                       1404 ___str_27:
      0003ED 0A                    1405 	.db 0x0a
      0003EE 0A                    1406 	.db 0x0a
      0003EF 0D                    1407 	.db 0x0d
      0003F0 00                    1408 	.db 0x00
                                   1409 	.area CSEG    (CODE)
                                   1410 	.area XINIT   (CODE)
                                   1411 	.area CABS    (ABS,CODE)
