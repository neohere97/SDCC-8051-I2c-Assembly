                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.0 #12072 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module cbfifo
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _cbfifo_capacity
                                     12 	.globl _cbfifo_length
                                     13 	.globl _cbfifo_dequeue
                                     14 	.globl _cbfifo_enqueue
                                     15 	.globl _end_index
                                     16 	.globl _write_index
                                     17 	.globl _read_index
                                     18 	.globl _cbfifo_dequeue_PARM_2
                                     19 	.globl _cbfifo_enqueue_PARM_2
                                     20 	.globl _cb_buffer
                                     21 ;--------------------------------------------------------
                                     22 ; special function registers
                                     23 ;--------------------------------------------------------
                                     24 	.area RSEG    (ABS,DATA)
      000000                         25 	.org 0x0000
                                     26 ;--------------------------------------------------------
                                     27 ; special function bits
                                     28 ;--------------------------------------------------------
                                     29 	.area RSEG    (ABS,DATA)
      000000                         30 	.org 0x0000
                                     31 ;--------------------------------------------------------
                                     32 ; overlayable register banks
                                     33 ;--------------------------------------------------------
                                     34 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         35 	.ds 8
                                     36 ;--------------------------------------------------------
                                     37 ; internal ram data
                                     38 ;--------------------------------------------------------
                                     39 	.area DSEG    (DATA)
                                     40 ;--------------------------------------------------------
                                     41 ; overlayable items in internal ram 
                                     42 ;--------------------------------------------------------
                                     43 	.area	OSEG    (OVR,DATA)
      000000                         44 _cbfifo_dequeue_sloc0_1_0:
      000000                         45 	.ds 2
      000002                         46 _cbfifo_dequeue_sloc1_1_0:
      000002                         47 	.ds 2
      000004                         48 _cbfifo_dequeue_sloc2_1_0:
      000004                         49 	.ds 2
                                     50 ;--------------------------------------------------------
                                     51 ; indirectly addressable internal ram data
                                     52 ;--------------------------------------------------------
                                     53 	.area ISEG    (DATA)
                                     54 ;--------------------------------------------------------
                                     55 ; absolute internal ram data
                                     56 ;--------------------------------------------------------
                                     57 	.area IABS    (ABS,DATA)
                                     58 	.area IABS    (ABS,DATA)
                                     59 ;--------------------------------------------------------
                                     60 ; bit data
                                     61 ;--------------------------------------------------------
                                     62 	.area BSEG    (BIT)
                                     63 ;--------------------------------------------------------
                                     64 ; paged external ram data
                                     65 ;--------------------------------------------------------
                                     66 	.area PSEG    (PAG,XDATA)
                                     67 ;--------------------------------------------------------
                                     68 ; external ram data
                                     69 ;--------------------------------------------------------
                                     70 	.area XSEG    (XDATA)
      000000                         71 _cb_buffer::
      000000                         72 	.ds 128
      000080                         73 _cbfifo_enqueue_PARM_2:
      000080                         74 	.ds 2
      000082                         75 _cbfifo_enqueue_buf_65536_66:
      000082                         76 	.ds 3
      000085                         77 _cbfifo_dequeue_PARM_2:
      000085                         78 	.ds 2
      000087                         79 _cbfifo_dequeue_buf_65536_71:
      000087                         80 	.ds 3
      00008A                         81 _cbfifo_dequeue_i_65537_73:
      00008A                         82 	.ds 2
                                     83 ;--------------------------------------------------------
                                     84 ; absolute external ram data
                                     85 ;--------------------------------------------------------
                                     86 	.area XABS    (ABS,XDATA)
                                     87 ;--------------------------------------------------------
                                     88 ; external initialized ram data
                                     89 ;--------------------------------------------------------
                                     90 	.area XISEG   (XDATA)
      000000                         91 _read_index::
      000000                         92 	.ds 1
      000001                         93 _write_index::
      000001                         94 	.ds 1
      000002                         95 _end_index::
      000002                         96 	.ds 1
                                     97 	.area HOME    (CODE)
                                     98 	.area GSINIT0 (CODE)
                                     99 	.area GSINIT1 (CODE)
                                    100 	.area GSINIT2 (CODE)
                                    101 	.area GSINIT3 (CODE)
                                    102 	.area GSINIT4 (CODE)
                                    103 	.area GSINIT5 (CODE)
                                    104 	.area GSINIT  (CODE)
                                    105 	.area GSFINAL (CODE)
                                    106 	.area CSEG    (CODE)
                                    107 ;--------------------------------------------------------
                                    108 ; global & static initialisations
                                    109 ;--------------------------------------------------------
                                    110 	.area HOME    (CODE)
                                    111 	.area GSINIT  (CODE)
                                    112 	.area GSFINAL (CODE)
                                    113 	.area GSINIT  (CODE)
                                    114 ;--------------------------------------------------------
                                    115 ; Home
                                    116 ;--------------------------------------------------------
                                    117 	.area HOME    (CODE)
                                    118 	.area HOME    (CODE)
                                    119 ;--------------------------------------------------------
                                    120 ; code
                                    121 ;--------------------------------------------------------
                                    122 	.area CSEG    (CODE)
                                    123 ;------------------------------------------------------------
                                    124 ;Allocation info for local variables in function 'cbfifo_enqueue'
                                    125 ;------------------------------------------------------------
                                    126 ;nbyte                     Allocated with name '_cbfifo_enqueue_PARM_2'
                                    127 ;buf                       Allocated with name '_cbfifo_enqueue_buf_65536_66'
                                    128 ;data                      Allocated with name '_cbfifo_enqueue_data_65537_68'
                                    129 ;i                         Allocated with name '_cbfifo_enqueue_i_65537_68'
                                    130 ;------------------------------------------------------------
                                    131 ;	cbfifo.c:15: size_t cbfifo_enqueue(void *buf, size_t nbyte)
                                    132 ;	-----------------------------------------
                                    133 ;	 function cbfifo_enqueue
                                    134 ;	-----------------------------------------
      000000                        135 _cbfifo_enqueue:
                           000007   136 	ar7 = 0x07
                           000006   137 	ar6 = 0x06
                           000005   138 	ar5 = 0x05
                           000004   139 	ar4 = 0x04
                           000003   140 	ar3 = 0x03
                           000002   141 	ar2 = 0x02
                           000001   142 	ar1 = 0x01
                           000000   143 	ar0 = 0x00
      000000 AF F0            [24]  144 	mov	r7,b
      000002 AE 83            [24]  145 	mov	r6,dph
      000004 E5 82            [12]  146 	mov	a,dpl
      000006 90r00r82         [24]  147 	mov	dptr,#_cbfifo_enqueue_buf_65536_66
      000009 F0               [24]  148 	movx	@dptr,a
      00000A EE               [12]  149 	mov	a,r6
      00000B A3               [24]  150 	inc	dptr
      00000C F0               [24]  151 	movx	@dptr,a
      00000D EF               [12]  152 	mov	a,r7
      00000E A3               [24]  153 	inc	dptr
      00000F F0               [24]  154 	movx	@dptr,a
                                    155 ;	cbfifo.c:18: if (buf == NULL)
      000010 90r00r82         [24]  156 	mov	dptr,#_cbfifo_enqueue_buf_65536_66
      000013 E0               [24]  157 	movx	a,@dptr
      000014 FD               [12]  158 	mov	r5,a
      000015 A3               [24]  159 	inc	dptr
      000016 E0               [24]  160 	movx	a,@dptr
      000017 FE               [12]  161 	mov	r6,a
      000018 A3               [24]  162 	inc	dptr
      000019 E0               [24]  163 	movx	a,@dptr
      00001A FF               [12]  164 	mov	r7,a
      00001B 90r00r82         [24]  165 	mov	dptr,#_cbfifo_enqueue_buf_65536_66
      00001E E0               [24]  166 	movx	a,@dptr
      00001F F5 F0            [12]  167 	mov	b,a
      000021 A3               [24]  168 	inc	dptr
      000022 E0               [24]  169 	movx	a,@dptr
      000023 45 F0            [12]  170 	orl	a,b
      000025 70 04            [24]  171 	jnz	00102$
                                    172 ;	cbfifo.c:19: return -1;
      000027 90 FF FF         [24]  173 	mov	dptr,#0xffff
      00002A 22               [24]  174 	ret
      00002B                        175 00102$:
                                    176 ;	cbfifo.c:21: uint8_t *data = buf;
                                    177 ;	cbfifo.c:24: for (i = 0; i < nbyte && write_index < end_index; i++)
      00002B 90r00r80         [24]  178 	mov	dptr,#_cbfifo_enqueue_PARM_2
      00002E E0               [24]  179 	movx	a,@dptr
      00002F FB               [12]  180 	mov	r3,a
      000030 A3               [24]  181 	inc	dptr
      000031 E0               [24]  182 	movx	a,@dptr
      000032 FC               [12]  183 	mov	r4,a
      000033 79 00            [12]  184 	mov	r1,#0x00
      000035 7A 00            [12]  185 	mov	r2,#0x00
      000037                        186 00106$:
      000037 C0 05            [24]  187 	push	ar5
      000039 C0 06            [24]  188 	push	ar6
      00003B C0 07            [24]  189 	push	ar7
      00003D 89 00            [24]  190 	mov	ar0,r1
      00003F 8A 07            [24]  191 	mov	ar7,r2
      000041 C3               [12]  192 	clr	c
      000042 E8               [12]  193 	mov	a,r0
      000043 9B               [12]  194 	subb	a,r3
      000044 EF               [12]  195 	mov	a,r7
      000045 9C               [12]  196 	subb	a,r4
      000046 D0 07            [24]  197 	pop	ar7
      000048 D0 06            [24]  198 	pop	ar6
      00004A D0 05            [24]  199 	pop	ar5
      00004C 50 49            [24]  200 	jnc	00103$
      00004E C0 03            [24]  201 	push	ar3
      000050 C0 04            [24]  202 	push	ar4
      000052 90r00r01         [24]  203 	mov	dptr,#_write_index
      000055 E0               [24]  204 	movx	a,@dptr
      000056 F8               [12]  205 	mov	r0,a
      000057 90r00r02         [24]  206 	mov	dptr,#_end_index
      00005A E0               [24]  207 	movx	a,@dptr
      00005B FC               [12]  208 	mov	r4,a
      00005C C3               [12]  209 	clr	c
      00005D E8               [12]  210 	mov	a,r0
      00005E 9C               [12]  211 	subb	a,r4
      00005F D0 04            [24]  212 	pop	ar4
      000061 D0 03            [24]  213 	pop	ar3
      000063 50 32            [24]  214 	jnc	00103$
                                    215 ;	cbfifo.c:26: cb_buffer[write_index++] = *data++;
      000065 C0 03            [24]  216 	push	ar3
      000067 C0 04            [24]  217 	push	ar4
      000069 90r00r01         [24]  218 	mov	dptr,#_write_index
      00006C E8               [12]  219 	mov	a,r0
      00006D 04               [12]  220 	inc	a
      00006E F0               [24]  221 	movx	@dptr,a
      00006F E8               [12]  222 	mov	a,r0
      000070 24r00            [12]  223 	add	a,#_cb_buffer
      000072 F8               [12]  224 	mov	r0,a
      000073 E4               [12]  225 	clr	a
      000074 34s00            [12]  226 	addc	a,#(_cb_buffer >> 8)
      000076 FC               [12]  227 	mov	r4,a
      000077 8D 82            [24]  228 	mov	dpl,r5
      000079 8E 83            [24]  229 	mov	dph,r6
      00007B 8F F0            [24]  230 	mov	b,r7
      00007D 12r00r00         [24]  231 	lcall	__gptrget
      000080 FB               [12]  232 	mov	r3,a
      000081 A3               [24]  233 	inc	dptr
      000082 AD 82            [24]  234 	mov	r5,dpl
      000084 AE 83            [24]  235 	mov	r6,dph
      000086 88 82            [24]  236 	mov	dpl,r0
      000088 8C 83            [24]  237 	mov	dph,r4
      00008A EB               [12]  238 	mov	a,r3
      00008B F0               [24]  239 	movx	@dptr,a
                                    240 ;	cbfifo.c:24: for (i = 0; i < nbyte && write_index < end_index; i++)
      00008C 09               [12]  241 	inc	r1
      00008D B9 00 01         [24]  242 	cjne	r1,#0x00,00130$
      000090 0A               [12]  243 	inc	r2
      000091                        244 00130$:
      000091 D0 04            [24]  245 	pop	ar4
      000093 D0 03            [24]  246 	pop	ar3
      000095 80 A0            [24]  247 	sjmp	00106$
      000097                        248 00103$:
                                    249 ;	cbfifo.c:29: return (size_t)i;
      000097 89 82            [24]  250 	mov	dpl,r1
      000099 8A 83            [24]  251 	mov	dph,r2
                                    252 ;	cbfifo.c:30: }
      00009B 22               [24]  253 	ret
                                    254 ;------------------------------------------------------------
                                    255 ;Allocation info for local variables in function 'cbfifo_dequeue'
                                    256 ;------------------------------------------------------------
                                    257 ;nbyte                     Allocated with name '_cbfifo_dequeue_PARM_2'
                                    258 ;buf                       Allocated with name '_cbfifo_dequeue_buf_65536_71'
                                    259 ;data                      Allocated with name '_cbfifo_dequeue_data_65537_73'
                                    260 ;i                         Allocated with name '_cbfifo_dequeue_i_65537_73'
                                    261 ;temp_write_index          Allocated with name '_cbfifo_dequeue_temp_write_index_131073_77'
                                    262 ;j                         Allocated with name '_cbfifo_dequeue_j_196609_78'
                                    263 ;sloc0                     Allocated with name '_cbfifo_dequeue_sloc0_1_0'
                                    264 ;sloc1                     Allocated with name '_cbfifo_dequeue_sloc1_1_0'
                                    265 ;sloc2                     Allocated with name '_cbfifo_dequeue_sloc2_1_0'
                                    266 ;------------------------------------------------------------
                                    267 ;	cbfifo.c:32: size_t cbfifo_dequeue(void *buf, size_t nbyte)
                                    268 ;	-----------------------------------------
                                    269 ;	 function cbfifo_dequeue
                                    270 ;	-----------------------------------------
      00009C                        271 _cbfifo_dequeue:
      00009C AF F0            [24]  272 	mov	r7,b
      00009E AE 83            [24]  273 	mov	r6,dph
      0000A0 E5 82            [12]  274 	mov	a,dpl
      0000A2 90r00r87         [24]  275 	mov	dptr,#_cbfifo_dequeue_buf_65536_71
      0000A5 F0               [24]  276 	movx	@dptr,a
      0000A6 EE               [12]  277 	mov	a,r6
      0000A7 A3               [24]  278 	inc	dptr
      0000A8 F0               [24]  279 	movx	@dptr,a
      0000A9 EF               [12]  280 	mov	a,r7
      0000AA A3               [24]  281 	inc	dptr
      0000AB F0               [24]  282 	movx	@dptr,a
                                    283 ;	cbfifo.c:35: if (buf == NULL)
      0000AC 90r00r87         [24]  284 	mov	dptr,#_cbfifo_dequeue_buf_65536_71
      0000AF E0               [24]  285 	movx	a,@dptr
      0000B0 FD               [12]  286 	mov	r5,a
      0000B1 A3               [24]  287 	inc	dptr
      0000B2 E0               [24]  288 	movx	a,@dptr
      0000B3 FE               [12]  289 	mov	r6,a
      0000B4 A3               [24]  290 	inc	dptr
      0000B5 E0               [24]  291 	movx	a,@dptr
      0000B6 FF               [12]  292 	mov	r7,a
      0000B7 90r00r87         [24]  293 	mov	dptr,#_cbfifo_dequeue_buf_65536_71
      0000BA E0               [24]  294 	movx	a,@dptr
      0000BB F5 F0            [12]  295 	mov	b,a
      0000BD A3               [24]  296 	inc	dptr
      0000BE E0               [24]  297 	movx	a,@dptr
      0000BF 45 F0            [12]  298 	orl	a,b
      0000C1 70 04            [24]  299 	jnz	00102$
                                    300 ;	cbfifo.c:36: return -1;
      0000C3 90 FF FF         [24]  301 	mov	dptr,#0xffff
      0000C6 22               [24]  302 	ret
      0000C7                        303 00102$:
                                    304 ;	cbfifo.c:38: uint8_t *data = buf;
                                    305 ;	cbfifo.c:42: for (i = 0; i < nbyte; i++)
      0000C7 90r00r85         [24]  306 	mov	dptr,#_cbfifo_dequeue_PARM_2
      0000CA E0               [24]  307 	movx	a,@dptr
      0000CB FB               [12]  308 	mov	r3,a
      0000CC A3               [24]  309 	inc	dptr
      0000CD E0               [24]  310 	movx	a,@dptr
      0000CE FC               [12]  311 	mov	r4,a
      0000CF 79 00            [12]  312 	mov	r1,#0x00
      0000D1 7A 00            [12]  313 	mov	r2,#0x00
      0000D3                        314 00114$:
      0000D3 C0 05            [24]  315 	push	ar5
      0000D5 C0 06            [24]  316 	push	ar6
      0000D7 C0 07            [24]  317 	push	ar7
      0000D9 89 00            [24]  318 	mov	ar0,r1
      0000DB 8A 07            [24]  319 	mov	ar7,r2
      0000DD C3               [12]  320 	clr	c
      0000DE E8               [12]  321 	mov	a,r0
      0000DF 9B               [12]  322 	subb	a,r3
      0000E0 EF               [12]  323 	mov	a,r7
      0000E1 9C               [12]  324 	subb	a,r4
      0000E2 D0 07            [24]  325 	pop	ar7
      0000E4 D0 06            [24]  326 	pop	ar6
      0000E6 D0 05            [24]  327 	pop	ar5
      0000E8 50 43            [24]  328 	jnc	00129$
                                    329 ;	cbfifo.c:45: if (read_index == write_index)
      0000EA C0 03            [24]  330 	push	ar3
      0000EC C0 04            [24]  331 	push	ar4
      0000EE 90r00r00         [24]  332 	mov	dptr,#_read_index
      0000F1 E0               [24]  333 	movx	a,@dptr
      0000F2 F8               [12]  334 	mov	r0,a
      0000F3 90r00r01         [24]  335 	mov	dptr,#_write_index
      0000F6 E0               [24]  336 	movx	a,@dptr
      0000F7 FC               [12]  337 	mov	r4,a
      0000F8 E8               [12]  338 	mov	a,r0
      0000F9 B5 04 06         [24]  339 	cjne	a,ar4,00157$
      0000FC D0 04            [24]  340 	pop	ar4
      0000FE D0 03            [24]  341 	pop	ar3
      000100 80 2B            [24]  342 	sjmp	00129$
      000102                        343 00157$:
      000102 D0 04            [24]  344 	pop	ar4
      000104 D0 03            [24]  345 	pop	ar3
                                    346 ;	cbfifo.c:50: *data++ = cb_buffer[i];
      000106 E9               [12]  347 	mov	a,r1
      000107 24r00            [12]  348 	add	a,#_cb_buffer
      000109 F5 82            [12]  349 	mov	dpl,a
      00010B EA               [12]  350 	mov	a,r2
      00010C 34s00            [12]  351 	addc	a,#(_cb_buffer >> 8)
      00010E F5 83            [12]  352 	mov	dph,a
      000110 E0               [24]  353 	movx	a,@dptr
      000111 8D 82            [24]  354 	mov	dpl,r5
      000113 8E 83            [24]  355 	mov	dph,r6
      000115 8F F0            [24]  356 	mov	b,r7
      000117 12r00r00         [24]  357 	lcall	__gptrput
      00011A A3               [24]  358 	inc	dptr
      00011B AD 82            [24]  359 	mov	r5,dpl
      00011D AE 83            [24]  360 	mov	r6,dph
                                    361 ;	cbfifo.c:52: read_index++;
      00011F 90r00r00         [24]  362 	mov	dptr,#_read_index
      000122 E0               [24]  363 	movx	a,@dptr
      000123 24 01            [12]  364 	add	a,#0x01
      000125 F0               [24]  365 	movx	@dptr,a
                                    366 ;	cbfifo.c:42: for (i = 0; i < nbyte; i++)
      000126 09               [12]  367 	inc	r1
                                    368 ;	cbfifo.c:56: next_step:
      000127 B9 00 A9         [24]  369 	cjne	r1,#0x00,00114$
      00012A 0A               [12]  370 	inc	r2
      00012B 80 A6            [24]  371 	sjmp	00114$
      00012D                        372 00129$:
      00012D 90r00r8A         [24]  373 	mov	dptr,#_cbfifo_dequeue_i_65537_73
      000130 E9               [12]  374 	mov	a,r1
      000131 F0               [24]  375 	movx	@dptr,a
      000132 EA               [12]  376 	mov	a,r2
      000133 A3               [24]  377 	inc	dptr
      000134 F0               [24]  378 	movx	@dptr,a
                                    379 ;	cbfifo.c:57: if (write_index > read_index)
      000135 90r00r01         [24]  380 	mov	dptr,#_write_index
      000138 E0               [24]  381 	movx	a,@dptr
      000139 FF               [12]  382 	mov	r7,a
      00013A 90r00r00         [24]  383 	mov	dptr,#_read_index
      00013D E0               [24]  384 	movx	a,@dptr
      00013E FE               [12]  385 	mov	r6,a
      00013F C3               [12]  386 	clr	c
      000140 9F               [12]  387 	subb	a,r7
      000141 50 63            [24]  388 	jnc	00111$
                                    389 ;	cbfifo.c:59: size_t temp_write_index = write_index;
      000143 8F*02            [24]  390 	mov	_cbfifo_dequeue_sloc1_1_0,r7
      000145 75*03 00         [24]  391 	mov	(_cbfifo_dequeue_sloc1_1_0 + 1),#0x00
                                    392 ;	cbfifo.c:60: for (int j = 0; j < temp_write_index - read_index; j++)
      000148 7A 00            [12]  393 	mov	r2,#0x00
      00014A 7B 00            [12]  394 	mov	r3,#0x00
      00014C                        395 00117$:
      00014C 90r00r00         [24]  396 	mov	dptr,#_read_index
      00014F E0               [24]  397 	movx	a,@dptr
      000150 F9               [12]  398 	mov	r1,a
      000151 89*00            [24]  399 	mov	_cbfifo_dequeue_sloc0_1_0,r1
      000153 75*01 00         [24]  400 	mov	(_cbfifo_dequeue_sloc0_1_0 + 1),#0x00
      000156 A8*00            [24]  401 	mov	r0,_cbfifo_dequeue_sloc0_1_0
      000158 AD*01            [24]  402 	mov	r5,(_cbfifo_dequeue_sloc0_1_0 + 1)
      00015A E5*02            [12]  403 	mov	a,_cbfifo_dequeue_sloc1_1_0
      00015C C3               [12]  404 	clr	c
      00015D 98               [12]  405 	subb	a,r0
      00015E F5*04            [12]  406 	mov	_cbfifo_dequeue_sloc2_1_0,a
      000160 E5*03            [12]  407 	mov	a,(_cbfifo_dequeue_sloc1_1_0 + 1)
      000162 9D               [12]  408 	subb	a,r5
      000163 F5*05            [12]  409 	mov	(_cbfifo_dequeue_sloc2_1_0 + 1),a
      000165 8A 04            [24]  410 	mov	ar4,r2
      000167 8B 05            [24]  411 	mov	ar5,r3
      000169 C3               [12]  412 	clr	c
      00016A EC               [12]  413 	mov	a,r4
      00016B 95*04            [12]  414 	subb	a,_cbfifo_dequeue_sloc2_1_0
      00016D ED               [12]  415 	mov	a,r5
      00016E 95*05            [12]  416 	subb	a,(_cbfifo_dequeue_sloc2_1_0 + 1)
      000170 50 2B            [24]  417 	jnc	00107$
                                    418 ;	cbfifo.c:62: cb_buffer[j] = cb_buffer[j + read_index];
      000172 EA               [12]  419 	mov	a,r2
      000173 24r00            [12]  420 	add	a,#_cb_buffer
      000175 F5*04            [12]  421 	mov	_cbfifo_dequeue_sloc2_1_0,a
      000177 EB               [12]  422 	mov	a,r3
      000178 34s00            [12]  423 	addc	a,#(_cb_buffer >> 8)
      00017A F5*05            [12]  424 	mov	(_cbfifo_dequeue_sloc2_1_0 + 1),a
      00017C E5*00            [12]  425 	mov	a,_cbfifo_dequeue_sloc0_1_0
      00017E 2A               [12]  426 	add	a,r2
      00017F F8               [12]  427 	mov	r0,a
      000180 E5*01            [12]  428 	mov	a,(_cbfifo_dequeue_sloc0_1_0 + 1)
      000182 3B               [12]  429 	addc	a,r3
      000183 FD               [12]  430 	mov	r5,a
      000184 E8               [12]  431 	mov	a,r0
      000185 24r00            [12]  432 	add	a,#_cb_buffer
      000187 F5 82            [12]  433 	mov	dpl,a
      000189 ED               [12]  434 	mov	a,r5
      00018A 34s00            [12]  435 	addc	a,#(_cb_buffer >> 8)
      00018C F5 83            [12]  436 	mov	dph,a
      00018E E0               [24]  437 	movx	a,@dptr
      00018F 85*04 82         [24]  438 	mov	dpl,_cbfifo_dequeue_sloc2_1_0
      000192 85*05 83         [24]  439 	mov	dph,(_cbfifo_dequeue_sloc2_1_0 + 1)
      000195 F0               [24]  440 	movx	@dptr,a
                                    441 ;	cbfifo.c:60: for (int j = 0; j < temp_write_index - read_index; j++)
      000196 0A               [12]  442 	inc	r2
      000197 BA 00 B2         [24]  443 	cjne	r2,#0x00,00117$
      00019A 0B               [12]  444 	inc	r3
      00019B 80 AF            [24]  445 	sjmp	00117$
      00019D                        446 00107$:
                                    447 ;	cbfifo.c:65: write_index = write_index - read_index;
      00019D 90r00r01         [24]  448 	mov	dptr,#_write_index
      0001A0 E0               [24]  449 	movx	a,@dptr
      0001A1 C3               [12]  450 	clr	c
      0001A2 99               [12]  451 	subb	a,r1
      0001A3 F0               [24]  452 	movx	@dptr,a
      0001A4 80 09            [24]  453 	sjmp	00112$
      0001A6                        454 00111$:
                                    455 ;	cbfifo.c:68: else if (write_index == read_index)
      0001A6 EF               [12]  456 	mov	a,r7
      0001A7 B5 06 05         [24]  457 	cjne	a,ar6,00112$
                                    458 ;	cbfifo.c:70: write_index = 0;
      0001AA 90r00r01         [24]  459 	mov	dptr,#_write_index
      0001AD E4               [12]  460 	clr	a
      0001AE F0               [24]  461 	movx	@dptr,a
      0001AF                        462 00112$:
                                    463 ;	cbfifo.c:73: read_index = 0;
      0001AF 90r00r00         [24]  464 	mov	dptr,#_read_index
      0001B2 E4               [12]  465 	clr	a
      0001B3 F0               [24]  466 	movx	@dptr,a
                                    467 ;	cbfifo.c:75: return (size_t)i;
      0001B4 90r00r8A         [24]  468 	mov	dptr,#_cbfifo_dequeue_i_65537_73
      0001B7 E0               [24]  469 	movx	a,@dptr
      0001B8 FE               [12]  470 	mov	r6,a
      0001B9 A3               [24]  471 	inc	dptr
      0001BA E0               [24]  472 	movx	a,@dptr
                                    473 ;	cbfifo.c:76: }
      0001BB 8E 82            [24]  474 	mov	dpl,r6
      0001BD F5 83            [12]  475 	mov	dph,a
      0001BF 22               [24]  476 	ret
                                    477 ;------------------------------------------------------------
                                    478 ;Allocation info for local variables in function 'cbfifo_length'
                                    479 ;------------------------------------------------------------
                                    480 ;	cbfifo.c:78: size_t cbfifo_length()
                                    481 ;	-----------------------------------------
                                    482 ;	 function cbfifo_length
                                    483 ;	-----------------------------------------
      0001C0                        484 _cbfifo_length:
                                    485 ;	cbfifo.c:81: return (size_t)write_index;
      0001C0 90r00r01         [24]  486 	mov	dptr,#_write_index
      0001C3 E0               [24]  487 	movx	a,@dptr
      0001C4 FF               [12]  488 	mov	r7,a
      0001C5 7E 00            [12]  489 	mov	r6,#0x00
      0001C7 8F 82            [24]  490 	mov	dpl,r7
      0001C9 8E 83            [24]  491 	mov	dph,r6
                                    492 ;	cbfifo.c:82: }
      0001CB 22               [24]  493 	ret
                                    494 ;------------------------------------------------------------
                                    495 ;Allocation info for local variables in function 'cbfifo_capacity'
                                    496 ;------------------------------------------------------------
                                    497 ;	cbfifo.c:84: size_t cbfifo_capacity()
                                    498 ;	-----------------------------------------
                                    499 ;	 function cbfifo_capacity
                                    500 ;	-----------------------------------------
      0001CC                        501 _cbfifo_capacity:
                                    502 ;	cbfifo.c:87: return (size_t)128;
      0001CC 90 00 80         [24]  503 	mov	dptr,#0x0080
                                    504 ;	cbfifo.c:88: }
      0001CF 22               [24]  505 	ret
                                    506 	.area CSEG    (CODE)
                                    507 	.area CONST   (CODE)
                                    508 	.area XINIT   (CODE)
      000000                        509 __xinit__read_index:
      000000 00                     510 	.db #0x00	; 0
      000001                        511 __xinit__write_index:
      000001 00                     512 	.db #0x00	; 0
      000002                        513 __xinit__end_index:
      000002 80                     514 	.db #0x80	; 128
                                    515 	.area CABS    (ABS,CODE)
