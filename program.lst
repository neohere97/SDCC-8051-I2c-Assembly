                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.0 #12072 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module program
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl __sdcc_external_startup
                                     12 	.globl _idle_interrupt
                                     13 	.globl _pca_interrupt
                                     14 	.globl _main
                                     15 	.globl _eeprom_menu
                                     16 	.globl _asm_clang
                                     17 	.globl _user_interface_heap
                                     18 	.globl _getchar
                                     19 	.globl _user_interface_PCA
                                     20 	.globl _printf
                                     21 	.globl _TF1
                                     22 	.globl _TR1
                                     23 	.globl _TF0
                                     24 	.globl _TR0
                                     25 	.globl _IE1
                                     26 	.globl _IT1
                                     27 	.globl _IE0
                                     28 	.globl _IT0
                                     29 	.globl _SM0
                                     30 	.globl _SM1
                                     31 	.globl _SM2
                                     32 	.globl _REN
                                     33 	.globl _TB8
                                     34 	.globl _RB8
                                     35 	.globl _TI
                                     36 	.globl _RI
                                     37 	.globl _CY
                                     38 	.globl _AC
                                     39 	.globl _F0
                                     40 	.globl _RS1
                                     41 	.globl _RS0
                                     42 	.globl _OV
                                     43 	.globl _F1
                                     44 	.globl _P
                                     45 	.globl _RD
                                     46 	.globl _WR
                                     47 	.globl _T1
                                     48 	.globl _T0
                                     49 	.globl _INT1
                                     50 	.globl _INT0
                                     51 	.globl _TXD0
                                     52 	.globl _TXD
                                     53 	.globl _RXD0
                                     54 	.globl _RXD
                                     55 	.globl _P3_7
                                     56 	.globl _P3_6
                                     57 	.globl _P3_5
                                     58 	.globl _P3_4
                                     59 	.globl _P3_3
                                     60 	.globl _P3_2
                                     61 	.globl _P3_1
                                     62 	.globl _P3_0
                                     63 	.globl _P2_7
                                     64 	.globl _P2_6
                                     65 	.globl _P2_5
                                     66 	.globl _P2_4
                                     67 	.globl _P2_3
                                     68 	.globl _P2_2
                                     69 	.globl _P2_1
                                     70 	.globl _P2_0
                                     71 	.globl _P1_7
                                     72 	.globl _P1_6
                                     73 	.globl _P1_5
                                     74 	.globl _P1_4
                                     75 	.globl _P1_3
                                     76 	.globl _P1_2
                                     77 	.globl _P1_1
                                     78 	.globl _P1_0
                                     79 	.globl _P0_7
                                     80 	.globl _P0_6
                                     81 	.globl _P0_5
                                     82 	.globl _P0_4
                                     83 	.globl _P0_3
                                     84 	.globl _P0_2
                                     85 	.globl _P0_1
                                     86 	.globl _P0_0
                                     87 	.globl _PS
                                     88 	.globl _PT1
                                     89 	.globl _PX1
                                     90 	.globl _PT0
                                     91 	.globl _PX0
                                     92 	.globl _EA
                                     93 	.globl _ES
                                     94 	.globl _ET1
                                     95 	.globl _EX1
                                     96 	.globl _ET0
                                     97 	.globl _EX0
                                     98 	.globl _BREG_F7
                                     99 	.globl _BREG_F6
                                    100 	.globl _BREG_F5
                                    101 	.globl _BREG_F4
                                    102 	.globl _BREG_F3
                                    103 	.globl _BREG_F2
                                    104 	.globl _BREG_F1
                                    105 	.globl _BREG_F0
                                    106 	.globl _P5_7
                                    107 	.globl _P5_6
                                    108 	.globl _P5_5
                                    109 	.globl _P5_4
                                    110 	.globl _P5_3
                                    111 	.globl _P5_2
                                    112 	.globl _P5_1
                                    113 	.globl _P5_0
                                    114 	.globl _P4_7
                                    115 	.globl _P4_6
                                    116 	.globl _P4_5
                                    117 	.globl _P4_4
                                    118 	.globl _P4_3
                                    119 	.globl _P4_2
                                    120 	.globl _P4_1
                                    121 	.globl _P4_0
                                    122 	.globl _PX0L
                                    123 	.globl _PT0L
                                    124 	.globl _PX1L
                                    125 	.globl _PT1L
                                    126 	.globl _PSL
                                    127 	.globl _PT2L
                                    128 	.globl _PPCL
                                    129 	.globl _EC
                                    130 	.globl _CCF0
                                    131 	.globl _CCF1
                                    132 	.globl _CCF2
                                    133 	.globl _CCF3
                                    134 	.globl _CCF4
                                    135 	.globl _CR
                                    136 	.globl _CF
                                    137 	.globl _TF2
                                    138 	.globl _EXF2
                                    139 	.globl _RCLK
                                    140 	.globl _TCLK
                                    141 	.globl _EXEN2
                                    142 	.globl _TR2
                                    143 	.globl _C_T2
                                    144 	.globl _CP_RL2
                                    145 	.globl _T2CON_7
                                    146 	.globl _T2CON_6
                                    147 	.globl _T2CON_5
                                    148 	.globl _T2CON_4
                                    149 	.globl _T2CON_3
                                    150 	.globl _T2CON_2
                                    151 	.globl _T2CON_1
                                    152 	.globl _T2CON_0
                                    153 	.globl _PT2
                                    154 	.globl _ET2
                                    155 	.globl __AUXR
                                    156 	.globl _TMOD
                                    157 	.globl _TL1
                                    158 	.globl _TL0
                                    159 	.globl _TH1
                                    160 	.globl _TH0
                                    161 	.globl _TCON
                                    162 	.globl _SP
                                    163 	.globl _SCON
                                    164 	.globl _SBUF0
                                    165 	.globl _SBUF
                                    166 	.globl _PSW
                                    167 	.globl _PCON
                                    168 	.globl _P3
                                    169 	.globl _P2
                                    170 	.globl _P1
                                    171 	.globl _P0
                                    172 	.globl _IP
                                    173 	.globl _IE
                                    174 	.globl _DP0L
                                    175 	.globl _DPL
                                    176 	.globl _DP0H
                                    177 	.globl _DPH
                                    178 	.globl _B
                                    179 	.globl _ACC
                                    180 	.globl _EECON
                                    181 	.globl _KBF
                                    182 	.globl _KBE
                                    183 	.globl _KBLS
                                    184 	.globl _BRL
                                    185 	.globl _BDRCON
                                    186 	.globl _T2MOD
                                    187 	.globl _SPDAT
                                    188 	.globl _SPSTA
                                    189 	.globl _SPCON
                                    190 	.globl _SADEN
                                    191 	.globl _SADDR
                                    192 	.globl _WDTPRG
                                    193 	.globl _WDTRST
                                    194 	.globl _P5
                                    195 	.globl _P4
                                    196 	.globl _IPH1
                                    197 	.globl _IPL1
                                    198 	.globl _IPH0
                                    199 	.globl _IPL0
                                    200 	.globl _IEN1
                                    201 	.globl _IEN0
                                    202 	.globl _CMOD
                                    203 	.globl _CL
                                    204 	.globl _CH
                                    205 	.globl _CCON
                                    206 	.globl _CCAPM4
                                    207 	.globl _CCAPM3
                                    208 	.globl _CCAPM2
                                    209 	.globl _CCAPM1
                                    210 	.globl _CCAPM0
                                    211 	.globl _CCAP4L
                                    212 	.globl _CCAP3L
                                    213 	.globl _CCAP2L
                                    214 	.globl _CCAP1L
                                    215 	.globl _CCAP0L
                                    216 	.globl _CCAP4H
                                    217 	.globl _CCAP3H
                                    218 	.globl _CCAP2H
                                    219 	.globl _CCAP1H
                                    220 	.globl _CCAP0H
                                    221 	.globl _CKCON1
                                    222 	.globl _CKCON0
                                    223 	.globl _CKRL
                                    224 	.globl _AUXR1
                                    225 	.globl _AUXR
                                    226 	.globl _TH2
                                    227 	.globl _TL2
                                    228 	.globl _RCAP2H
                                    229 	.globl _RCAP2L
                                    230 	.globl _T2CON
                                    231 	.globl _global_var_test
                                    232 	.globl _DEBUG_LOC
                                    233 	.globl _main_menu
                                    234 	.globl _dataout
                                    235 ;--------------------------------------------------------
                                    236 ; special function registers
                                    237 ;--------------------------------------------------------
                                    238 	.area RSEG    (ABS,DATA)
      000000                        239 	.org 0x0000
                           0000C8   240 _T2CON	=	0x00c8
                           0000CA   241 _RCAP2L	=	0x00ca
                           0000CB   242 _RCAP2H	=	0x00cb
                           0000CC   243 _TL2	=	0x00cc
                           0000CD   244 _TH2	=	0x00cd
                           00008E   245 _AUXR	=	0x008e
                           0000A2   246 _AUXR1	=	0x00a2
                           000097   247 _CKRL	=	0x0097
                           00008F   248 _CKCON0	=	0x008f
                           0000AF   249 _CKCON1	=	0x00af
                           0000FA   250 _CCAP0H	=	0x00fa
                           0000FB   251 _CCAP1H	=	0x00fb
                           0000FC   252 _CCAP2H	=	0x00fc
                           0000FD   253 _CCAP3H	=	0x00fd
                           0000FE   254 _CCAP4H	=	0x00fe
                           0000EA   255 _CCAP0L	=	0x00ea
                           0000EB   256 _CCAP1L	=	0x00eb
                           0000EC   257 _CCAP2L	=	0x00ec
                           0000ED   258 _CCAP3L	=	0x00ed
                           0000EE   259 _CCAP4L	=	0x00ee
                           0000DA   260 _CCAPM0	=	0x00da
                           0000DB   261 _CCAPM1	=	0x00db
                           0000DC   262 _CCAPM2	=	0x00dc
                           0000DD   263 _CCAPM3	=	0x00dd
                           0000DE   264 _CCAPM4	=	0x00de
                           0000D8   265 _CCON	=	0x00d8
                           0000F9   266 _CH	=	0x00f9
                           0000E9   267 _CL	=	0x00e9
                           0000D9   268 _CMOD	=	0x00d9
                           0000A8   269 _IEN0	=	0x00a8
                           0000B1   270 _IEN1	=	0x00b1
                           0000B8   271 _IPL0	=	0x00b8
                           0000B7   272 _IPH0	=	0x00b7
                           0000B2   273 _IPL1	=	0x00b2
                           0000B3   274 _IPH1	=	0x00b3
                           0000C0   275 _P4	=	0x00c0
                           0000E8   276 _P5	=	0x00e8
                           0000A6   277 _WDTRST	=	0x00a6
                           0000A7   278 _WDTPRG	=	0x00a7
                           0000A9   279 _SADDR	=	0x00a9
                           0000B9   280 _SADEN	=	0x00b9
                           0000C3   281 _SPCON	=	0x00c3
                           0000C4   282 _SPSTA	=	0x00c4
                           0000C5   283 _SPDAT	=	0x00c5
                           0000C9   284 _T2MOD	=	0x00c9
                           00009B   285 _BDRCON	=	0x009b
                           00009A   286 _BRL	=	0x009a
                           00009C   287 _KBLS	=	0x009c
                           00009D   288 _KBE	=	0x009d
                           00009E   289 _KBF	=	0x009e
                           0000D2   290 _EECON	=	0x00d2
                           0000E0   291 _ACC	=	0x00e0
                           0000F0   292 _B	=	0x00f0
                           000083   293 _DPH	=	0x0083
                           000083   294 _DP0H	=	0x0083
                           000082   295 _DPL	=	0x0082
                           000082   296 _DP0L	=	0x0082
                           0000A8   297 _IE	=	0x00a8
                           0000B8   298 _IP	=	0x00b8
                           000080   299 _P0	=	0x0080
                           000090   300 _P1	=	0x0090
                           0000A0   301 _P2	=	0x00a0
                           0000B0   302 _P3	=	0x00b0
                           000087   303 _PCON	=	0x0087
                           0000D0   304 _PSW	=	0x00d0
                           000099   305 _SBUF	=	0x0099
                           000099   306 _SBUF0	=	0x0099
                           000098   307 _SCON	=	0x0098
                           000081   308 _SP	=	0x0081
                           000088   309 _TCON	=	0x0088
                           00008C   310 _TH0	=	0x008c
                           00008D   311 _TH1	=	0x008d
                           00008A   312 _TL0	=	0x008a
                           00008B   313 _TL1	=	0x008b
                           000089   314 _TMOD	=	0x0089
                           00008E   315 __AUXR	=	0x008e
                                    316 ;--------------------------------------------------------
                                    317 ; special function bits
                                    318 ;--------------------------------------------------------
                                    319 	.area RSEG    (ABS,DATA)
      000000                        320 	.org 0x0000
                           0000AD   321 _ET2	=	0x00ad
                           0000BD   322 _PT2	=	0x00bd
                           0000C8   323 _T2CON_0	=	0x00c8
                           0000C9   324 _T2CON_1	=	0x00c9
                           0000CA   325 _T2CON_2	=	0x00ca
                           0000CB   326 _T2CON_3	=	0x00cb
                           0000CC   327 _T2CON_4	=	0x00cc
                           0000CD   328 _T2CON_5	=	0x00cd
                           0000CE   329 _T2CON_6	=	0x00ce
                           0000CF   330 _T2CON_7	=	0x00cf
                           0000C8   331 _CP_RL2	=	0x00c8
                           0000C9   332 _C_T2	=	0x00c9
                           0000CA   333 _TR2	=	0x00ca
                           0000CB   334 _EXEN2	=	0x00cb
                           0000CC   335 _TCLK	=	0x00cc
                           0000CD   336 _RCLK	=	0x00cd
                           0000CE   337 _EXF2	=	0x00ce
                           0000CF   338 _TF2	=	0x00cf
                           0000DF   339 _CF	=	0x00df
                           0000DE   340 _CR	=	0x00de
                           0000DC   341 _CCF4	=	0x00dc
                           0000DB   342 _CCF3	=	0x00db
                           0000DA   343 _CCF2	=	0x00da
                           0000D9   344 _CCF1	=	0x00d9
                           0000D8   345 _CCF0	=	0x00d8
                           0000AE   346 _EC	=	0x00ae
                           0000BE   347 _PPCL	=	0x00be
                           0000BD   348 _PT2L	=	0x00bd
                           0000BC   349 _PSL	=	0x00bc
                           0000BB   350 _PT1L	=	0x00bb
                           0000BA   351 _PX1L	=	0x00ba
                           0000B9   352 _PT0L	=	0x00b9
                           0000B8   353 _PX0L	=	0x00b8
                           0000C0   354 _P4_0	=	0x00c0
                           0000C1   355 _P4_1	=	0x00c1
                           0000C2   356 _P4_2	=	0x00c2
                           0000C3   357 _P4_3	=	0x00c3
                           0000C4   358 _P4_4	=	0x00c4
                           0000C5   359 _P4_5	=	0x00c5
                           0000C6   360 _P4_6	=	0x00c6
                           0000C7   361 _P4_7	=	0x00c7
                           0000E8   362 _P5_0	=	0x00e8
                           0000E9   363 _P5_1	=	0x00e9
                           0000EA   364 _P5_2	=	0x00ea
                           0000EB   365 _P5_3	=	0x00eb
                           0000EC   366 _P5_4	=	0x00ec
                           0000ED   367 _P5_5	=	0x00ed
                           0000EE   368 _P5_6	=	0x00ee
                           0000EF   369 _P5_7	=	0x00ef
                           0000F0   370 _BREG_F0	=	0x00f0
                           0000F1   371 _BREG_F1	=	0x00f1
                           0000F2   372 _BREG_F2	=	0x00f2
                           0000F3   373 _BREG_F3	=	0x00f3
                           0000F4   374 _BREG_F4	=	0x00f4
                           0000F5   375 _BREG_F5	=	0x00f5
                           0000F6   376 _BREG_F6	=	0x00f6
                           0000F7   377 _BREG_F7	=	0x00f7
                           0000A8   378 _EX0	=	0x00a8
                           0000A9   379 _ET0	=	0x00a9
                           0000AA   380 _EX1	=	0x00aa
                           0000AB   381 _ET1	=	0x00ab
                           0000AC   382 _ES	=	0x00ac
                           0000AF   383 _EA	=	0x00af
                           0000B8   384 _PX0	=	0x00b8
                           0000B9   385 _PT0	=	0x00b9
                           0000BA   386 _PX1	=	0x00ba
                           0000BB   387 _PT1	=	0x00bb
                           0000BC   388 _PS	=	0x00bc
                           000080   389 _P0_0	=	0x0080
                           000081   390 _P0_1	=	0x0081
                           000082   391 _P0_2	=	0x0082
                           000083   392 _P0_3	=	0x0083
                           000084   393 _P0_4	=	0x0084
                           000085   394 _P0_5	=	0x0085
                           000086   395 _P0_6	=	0x0086
                           000087   396 _P0_7	=	0x0087
                           000090   397 _P1_0	=	0x0090
                           000091   398 _P1_1	=	0x0091
                           000092   399 _P1_2	=	0x0092
                           000093   400 _P1_3	=	0x0093
                           000094   401 _P1_4	=	0x0094
                           000095   402 _P1_5	=	0x0095
                           000096   403 _P1_6	=	0x0096
                           000097   404 _P1_7	=	0x0097
                           0000A0   405 _P2_0	=	0x00a0
                           0000A1   406 _P2_1	=	0x00a1
                           0000A2   407 _P2_2	=	0x00a2
                           0000A3   408 _P2_3	=	0x00a3
                           0000A4   409 _P2_4	=	0x00a4
                           0000A5   410 _P2_5	=	0x00a5
                           0000A6   411 _P2_6	=	0x00a6
                           0000A7   412 _P2_7	=	0x00a7
                           0000B0   413 _P3_0	=	0x00b0
                           0000B1   414 _P3_1	=	0x00b1
                           0000B2   415 _P3_2	=	0x00b2
                           0000B3   416 _P3_3	=	0x00b3
                           0000B4   417 _P3_4	=	0x00b4
                           0000B5   418 _P3_5	=	0x00b5
                           0000B6   419 _P3_6	=	0x00b6
                           0000B7   420 _P3_7	=	0x00b7
                           0000B0   421 _RXD	=	0x00b0
                           0000B0   422 _RXD0	=	0x00b0
                           0000B1   423 _TXD	=	0x00b1
                           0000B1   424 _TXD0	=	0x00b1
                           0000B2   425 _INT0	=	0x00b2
                           0000B3   426 _INT1	=	0x00b3
                           0000B4   427 _T0	=	0x00b4
                           0000B5   428 _T1	=	0x00b5
                           0000B6   429 _WR	=	0x00b6
                           0000B7   430 _RD	=	0x00b7
                           0000D0   431 _P	=	0x00d0
                           0000D1   432 _F1	=	0x00d1
                           0000D2   433 _OV	=	0x00d2
                           0000D3   434 _RS0	=	0x00d3
                           0000D4   435 _RS1	=	0x00d4
                           0000D5   436 _F0	=	0x00d5
                           0000D6   437 _AC	=	0x00d6
                           0000D7   438 _CY	=	0x00d7
                           000098   439 _RI	=	0x0098
                           000099   440 _TI	=	0x0099
                           00009A   441 _RB8	=	0x009a
                           00009B   442 _TB8	=	0x009b
                           00009C   443 _REN	=	0x009c
                           00009D   444 _SM2	=	0x009d
                           00009E   445 _SM1	=	0x009e
                           00009F   446 _SM0	=	0x009f
                           000088   447 _IT0	=	0x0088
                           000089   448 _IE0	=	0x0089
                           00008A   449 _IT1	=	0x008a
                           00008B   450 _IE1	=	0x008b
                           00008C   451 _TR0	=	0x008c
                           00008D   452 _TF0	=	0x008d
                           00008E   453 _TR1	=	0x008e
                           00008F   454 _TF1	=	0x008f
                                    455 ;--------------------------------------------------------
                                    456 ; overlayable register banks
                                    457 ;--------------------------------------------------------
                                    458 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        459 	.ds 8
                                    460 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        461 	.ds 8
                                    462 ;--------------------------------------------------------
                                    463 ; overlayable bit register bank
                                    464 ;--------------------------------------------------------
                                    465 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        466 bits:
      000000                        467 	.ds 1
                           008000   468 	b0 = bits[0]
                           008100   469 	b1 = bits[1]
                           008200   470 	b2 = bits[2]
                           008300   471 	b3 = bits[3]
                           008400   472 	b4 = bits[4]
                           008500   473 	b5 = bits[5]
                           008600   474 	b6 = bits[6]
                           008700   475 	b7 = bits[7]
                                    476 ;--------------------------------------------------------
                                    477 ; internal ram data
                                    478 ;--------------------------------------------------------
                                    479 	.area DSEG    (DATA)
                                    480 ;--------------------------------------------------------
                                    481 ; overlayable items in internal ram 
                                    482 ;--------------------------------------------------------
                                    483 ;--------------------------------------------------------
                                    484 ; Stack segment in internal ram 
                                    485 ;--------------------------------------------------------
                                    486 	.area	SSEG
      000000                        487 __start__stack:
      000000                        488 	.ds	1
                                    489 
                                    490 ;--------------------------------------------------------
                                    491 ; indirectly addressable internal ram data
                                    492 ;--------------------------------------------------------
                                    493 	.area ISEG    (DATA)
                                    494 ;--------------------------------------------------------
                                    495 ; absolute internal ram data
                                    496 ;--------------------------------------------------------
                                    497 	.area IABS    (ABS,DATA)
                                    498 	.area IABS    (ABS,DATA)
                                    499 ;--------------------------------------------------------
                                    500 ; bit data
                                    501 ;--------------------------------------------------------
                                    502 	.area BSEG    (BIT)
                                    503 ;--------------------------------------------------------
                                    504 ; paged external ram data
                                    505 ;--------------------------------------------------------
                                    506 	.area PSEG    (PAG,XDATA)
                                    507 ;--------------------------------------------------------
                                    508 ; external ram data
                                    509 ;--------------------------------------------------------
                                    510 	.area XSEG    (XDATA)
                           008000   511 _DEBUG_LOC	=	0x8000
      000000                        512 _dataout_data_65536_56:
      000000                        513 	.ds 1
                                    514 ;--------------------------------------------------------
                                    515 ; absolute external ram data
                                    516 ;--------------------------------------------------------
                                    517 	.area XABS    (ABS,XDATA)
                                    518 ;--------------------------------------------------------
                                    519 ; external initialized ram data
                                    520 ;--------------------------------------------------------
                                    521 	.area XISEG   (XDATA)
      000000                        522 _global_var_test::
      000000                        523 	.ds 1
                                    524 	.area HOME    (CODE)
                                    525 	.area GSINIT0 (CODE)
                                    526 	.area GSINIT1 (CODE)
                                    527 	.area GSINIT2 (CODE)
                                    528 	.area GSINIT3 (CODE)
                                    529 	.area GSINIT4 (CODE)
                                    530 	.area GSINIT5 (CODE)
                                    531 	.area GSINIT  (CODE)
                                    532 	.area GSFINAL (CODE)
                                    533 	.area CSEG    (CODE)
                                    534 ;--------------------------------------------------------
                                    535 ; interrupt vector 
                                    536 ;--------------------------------------------------------
                                    537 	.area HOME    (CODE)
      000000                        538 __interrupt_vect:
      000000 02r00r00         [24]  539 	ljmp	__sdcc_gsinit_startup
      000003 02r01r77         [24]  540 	ljmp	_idle_interrupt
      000006                        541 	.ds	5
      00000B 32               [24]  542 	reti
      00000C                        543 	.ds	7
      000013 32               [24]  544 	reti
      000014                        545 	.ds	7
      00001B 32               [24]  546 	reti
      00001C                        547 	.ds	7
      000023 32               [24]  548 	reti
      000024                        549 	.ds	7
      00002B 32               [24]  550 	reti
      00002C                        551 	.ds	7
      000033 02r00rCF         [24]  552 	ljmp	_pca_interrupt
                                    553 ;--------------------------------------------------------
                                    554 ; global & static initialisations
                                    555 ;--------------------------------------------------------
                                    556 	.area HOME    (CODE)
                                    557 	.area GSINIT  (CODE)
                                    558 	.area GSFINAL (CODE)
                                    559 	.area GSINIT  (CODE)
                                    560 	.globl __sdcc_gsinit_startup
                                    561 	.globl __sdcc_program_startup
                                    562 	.globl __start__stack
                                    563 	.globl __mcs51_genXINIT
                                    564 	.globl __mcs51_genXRAMCLEAR
                                    565 	.globl __mcs51_genRAMCLEAR
                                    566 	.area GSFINAL (CODE)
      000000 02r00r36         [24]  567 	ljmp	__sdcc_program_startup
                                    568 ;--------------------------------------------------------
                                    569 ; Home
                                    570 ;--------------------------------------------------------
                                    571 	.area HOME    (CODE)
                                    572 	.area HOME    (CODE)
      000036                        573 __sdcc_program_startup:
      000036 02r00r00         [24]  574 	ljmp	_main
                                    575 ;	return from main will return to caller
                                    576 ;--------------------------------------------------------
                                    577 ; code
                                    578 ;--------------------------------------------------------
                                    579 	.area CSEG    (CODE)
                                    580 ;------------------------------------------------------------
                                    581 ;Allocation info for local variables in function 'main'
                                    582 ;------------------------------------------------------------
                                    583 ;	program.c:44: void main(void)
                                    584 ;	-----------------------------------------
                                    585 ;	 function main
                                    586 ;	-----------------------------------------
      000000                        587 _main:
                           000007   588 	ar7 = 0x07
                           000006   589 	ar6 = 0x06
                           000005   590 	ar5 = 0x05
                           000004   591 	ar4 = 0x04
                           000003   592 	ar3 = 0x03
                           000002   593 	ar2 = 0x02
                           000001   594 	ar1 = 0x01
                           000000   595 	ar0 = 0x00
                                    596 ;	program.c:46: printf("\n\r HELLO! Started in X2 Mode \n\r");
      000000 74r00            [12]  597 	mov	a,#___str_0
      000002 C0 E0            [24]  598 	push	acc
      000004 74s00            [12]  599 	mov	a,#(___str_0 >> 8)
      000006 C0 E0            [24]  600 	push	acc
      000008 74 80            [12]  601 	mov	a,#0x80
      00000A C0 E0            [24]  602 	push	acc
      00000C 12r00r00         [24]  603 	lcall	_printf
      00000F 15 81            [12]  604 	dec	sp
      000011 15 81            [12]  605 	dec	sp
      000013 15 81            [12]  606 	dec	sp
                                    607 ;	program.c:47: DEBUGPORT(0x01);
      000015 75 82 01         [24]  608 	mov	dpl,#0x01
      000018 12r01rEC         [24]  609 	lcall	_dataout
                                    610 ;	program.c:48: P1_1 = 0;
                                    611 ;	assignBit
      00001B C2 91            [12]  612 	clr	_P1_1
                                    613 ;	program.c:49: main_menu();
                                    614 ;	program.c:50: }
      00001D 02r00r20         [24]  615 	ljmp	_main_menu
                                    616 ;------------------------------------------------------------
                                    617 ;Allocation info for local variables in function 'main_menu'
                                    618 ;------------------------------------------------------------
                                    619 ;inp                       Allocated with name '_main_menu_inp_65537_49'
                                    620 ;------------------------------------------------------------
                                    621 ;	program.c:52: void main_menu()
                                    622 ;	-----------------------------------------
                                    623 ;	 function main_menu
                                    624 ;	-----------------------------------------
      000020                        625 _main_menu:
                                    626 ;	program.c:54: DEBUGPORT(0x02);
      000020 75 82 02         [24]  627 	mov	dpl,#0x02
      000023 12r01rEC         [24]  628 	lcall	_dataout
                                    629 ;	program.c:55: printf("\n\n\r^^^^^^^^^^^^^^^^^^^-MENU-^^^^^^^^^^^^^^^^^^^^^^^^^^ \n\n\r");
      000026 74r20            [12]  630 	mov	a,#___str_1
      000028 C0 E0            [24]  631 	push	acc
      00002A 74s00            [12]  632 	mov	a,#(___str_1 >> 8)
      00002C C0 E0            [24]  633 	push	acc
      00002E 74 80            [12]  634 	mov	a,#0x80
      000030 C0 E0            [24]  635 	push	acc
      000032 12r00r00         [24]  636 	lcall	_printf
      000035 15 81            [12]  637 	dec	sp
      000037 15 81            [12]  638 	dec	sp
      000039 15 81            [12]  639 	dec	sp
                                    640 ;	program.c:56: printf("'H' -> Enter Heap Demo Mode \n\r");
      00003B 74r5B            [12]  641 	mov	a,#___str_2
      00003D C0 E0            [24]  642 	push	acc
      00003F 74s00            [12]  643 	mov	a,#(___str_2 >> 8)
      000041 C0 E0            [24]  644 	push	acc
      000043 74 80            [12]  645 	mov	a,#0x80
      000045 C0 E0            [24]  646 	push	acc
      000047 12r00r00         [24]  647 	lcall	_printf
      00004A 15 81            [12]  648 	dec	sp
      00004C 15 81            [12]  649 	dec	sp
      00004E 15 81            [12]  650 	dec	sp
                                    651 ;	program.c:57: printf("'P' -> Enter PCA Demo Mode \n\r");
      000050 74r7A            [12]  652 	mov	a,#___str_3
      000052 C0 E0            [24]  653 	push	acc
      000054 74s00            [12]  654 	mov	a,#(___str_3 >> 8)
      000056 C0 E0            [24]  655 	push	acc
      000058 74 80            [12]  656 	mov	a,#0x80
      00005A C0 E0            [24]  657 	push	acc
      00005C 12r00r00         [24]  658 	lcall	_printf
      00005F 15 81            [12]  659 	dec	sp
      000061 15 81            [12]  660 	dec	sp
      000063 15 81            [12]  661 	dec	sp
                                    662 ;	program.c:58: printf("'A' -> Assembly C Mix \n\r");
      000065 74r98            [12]  663 	mov	a,#___str_4
      000067 C0 E0            [24]  664 	push	acc
      000069 74s00            [12]  665 	mov	a,#(___str_4 >> 8)
      00006B C0 E0            [24]  666 	push	acc
      00006D 74 80            [12]  667 	mov	a,#0x80
      00006F C0 E0            [24]  668 	push	acc
      000071 12r00r00         [24]  669 	lcall	_printf
      000074 15 81            [12]  670 	dec	sp
      000076 15 81            [12]  671 	dec	sp
      000078 15 81            [12]  672 	dec	sp
                                    673 ;	program.c:59: printf("'E' -> EEPROM Mode \n\r");
      00007A 74rB1            [12]  674 	mov	a,#___str_5
      00007C C0 E0            [24]  675 	push	acc
      00007E 74s00            [12]  676 	mov	a,#(___str_5 >> 8)
      000080 C0 E0            [24]  677 	push	acc
      000082 74 80            [12]  678 	mov	a,#0x80
      000084 C0 E0            [24]  679 	push	acc
      000086 12r00r00         [24]  680 	lcall	_printf
      000089 15 81            [12]  681 	dec	sp
      00008B 15 81            [12]  682 	dec	sp
      00008D 15 81            [12]  683 	dec	sp
                                    684 ;	program.c:62: wrong_choice:
      00008F                        685 00101$:
                                    686 ;	program.c:63: printf("Please make a valid choice \n\r");
      00008F 74rC7            [12]  687 	mov	a,#___str_6
      000091 C0 E0            [24]  688 	push	acc
      000093 74s00            [12]  689 	mov	a,#(___str_6 >> 8)
      000095 C0 E0            [24]  690 	push	acc
      000097 74 80            [12]  691 	mov	a,#0x80
      000099 C0 E0            [24]  692 	push	acc
      00009B 12r00r00         [24]  693 	lcall	_printf
      00009E 15 81            [12]  694 	dec	sp
      0000A0 15 81            [12]  695 	dec	sp
      0000A2 15 81            [12]  696 	dec	sp
                                    697 ;	program.c:64: inp = getchar();
      0000A4 12r00r00         [24]  698 	lcall	_getchar
      0000A7 AE 82            [24]  699 	mov	r6,dpl
      0000A9 AF 83            [24]  700 	mov	r7,dph
                                    701 ;	program.c:65: if (inp == 0x48)
      0000AB BE 48 06         [24]  702 	cjne	r6,#0x48,00112$
      0000AE BF 00 03         [24]  703 	cjne	r7,#0x00,00112$
                                    704 ;	program.c:66: user_interface_heap();
      0000B1 02r00r00         [24]  705 	ljmp	_user_interface_heap
      0000B4                        706 00112$:
                                    707 ;	program.c:67: else if (inp == 0x50)
      0000B4 BE 50 06         [24]  708 	cjne	r6,#0x50,00109$
      0000B7 BF 00 03         [24]  709 	cjne	r7,#0x00,00109$
                                    710 ;	program.c:68: user_interface_PCA();
      0000BA 02r00r00         [24]  711 	ljmp	_user_interface_PCA
      0000BD                        712 00109$:
                                    713 ;	program.c:69: else if (inp == 0x41)
      0000BD BE 41 06         [24]  714 	cjne	r6,#0x41,00106$
      0000C0 BF 00 03         [24]  715 	cjne	r7,#0x00,00106$
                                    716 ;	program.c:70: asm_clang();
      0000C3 02r00r00         [24]  717 	ljmp	_asm_clang
      0000C6                        718 00106$:
                                    719 ;	program.c:71: else if (inp == 0x45)
      0000C6 BE 45 C6         [24]  720 	cjne	r6,#0x45,00101$
      0000C9 BF 00 C3         [24]  721 	cjne	r7,#0x00,00101$
                                    722 ;	program.c:72: eeprom_menu();
                                    723 ;	program.c:74: goto wrong_choice;
                                    724 ;	program.c:75: }
      0000CC 02r00r00         [24]  725 	ljmp	_eeprom_menu
                                    726 ;------------------------------------------------------------
                                    727 ;Allocation info for local variables in function 'pca_interrupt'
                                    728 ;------------------------------------------------------------
                                    729 ;	program.c:83: void pca_interrupt() __interrupt(6) __using(1)
                                    730 ;	-----------------------------------------
                                    731 ;	 function pca_interrupt
                                    732 ;	-----------------------------------------
      0000CF                        733 _pca_interrupt:
                           00000F   734 	ar7 = 0x0f
                           00000E   735 	ar6 = 0x0e
                           00000D   736 	ar5 = 0x0d
                           00000C   737 	ar4 = 0x0c
                           00000B   738 	ar3 = 0x0b
                           00000A   739 	ar2 = 0x0a
                           000009   740 	ar1 = 0x09
                           000008   741 	ar0 = 0x08
      0000CF C0*00            [24]  742 	push	bits
      0000D1 C0 E0            [24]  743 	push	acc
      0000D3 C0 F0            [24]  744 	push	b
      0000D5 C0 82            [24]  745 	push	dpl
      0000D7 C0 83            [24]  746 	push	dph
      0000D9 C0 07            [24]  747 	push	(0+7)
      0000DB C0 06            [24]  748 	push	(0+6)
      0000DD C0 05            [24]  749 	push	(0+5)
      0000DF C0 04            [24]  750 	push	(0+4)
      0000E1 C0 03            [24]  751 	push	(0+3)
      0000E3 C0 02            [24]  752 	push	(0+2)
      0000E5 C0 01            [24]  753 	push	(0+1)
      0000E7 C0 00            [24]  754 	push	(0+0)
      0000E9 C0 D0            [24]  755 	push	psw
      0000EB 75 D0 08         [24]  756 	mov	psw,#0x08
                                    757 ;	program.c:85: if (CCF0)
      0000EE 30 D8 2D         [24]  758 	jnb	_CCF0,00102$
                                    759 ;	program.c:87: printf("Captured Value CCPL -> %d CCPH -> %d \n\r", CCAP0L, CCAP0H);
      0000F1 AE FA            [24]  760 	mov	r6,_CCAP0H
      0000F3 7F 00            [12]  761 	mov	r7,#0x00
      0000F5 AC EA            [24]  762 	mov	r4,_CCAP0L
      0000F7 7D 00            [12]  763 	mov	r5,#0x00
      0000F9 C0 0E            [24]  764 	push	ar6
      0000FB C0 0F            [24]  765 	push	ar7
      0000FD C0 0C            [24]  766 	push	ar4
      0000FF C0 0D            [24]  767 	push	ar5
      000101 74rE5            [12]  768 	mov	a,#___str_7
      000103 C0 E0            [24]  769 	push	acc
      000105 74s00            [12]  770 	mov	a,#(___str_7 >> 8)
      000107 C0 E0            [24]  771 	push	acc
      000109 74 80            [12]  772 	mov	a,#0x80
      00010B C0 E0            [24]  773 	push	acc
      00010D 75 D0 00         [24]  774 	mov	psw,#0x00
      000110 12r00r00         [24]  775 	lcall	_printf
      000113 75 D0 08         [24]  776 	mov	psw,#0x08
      000116 E5 81            [12]  777 	mov	a,sp
      000118 24 F9            [12]  778 	add	a,#0xf9
      00011A F5 81            [12]  779 	mov	sp,a
                                    780 ;	program.c:89: CCF0 = 0;
                                    781 ;	assignBit
      00011C C2 D8            [12]  782 	clr	_CCF0
      00011E                        783 00102$:
                                    784 ;	program.c:91: if (CCF1)
                                    785 ;	program.c:93: CCF1 = 0;
                                    786 ;	assignBit
      00011E 10 D9 02         [24]  787 	jbc	_CCF1,00128$
      000121 80 06            [24]  788 	sjmp	00104$
      000123                        789 00128$:
                                    790 ;	program.c:94: CH = 0;
      000123 75 F9 00         [24]  791 	mov	_CH,#0x00
                                    792 ;	program.c:95: CL = 0;
      000126 75 E9 00         [24]  793 	mov	_CL,#0x00
      000129                        794 00104$:
                                    795 ;	program.c:97: if (CCF2)
                                    796 ;	program.c:99: CCF2 = 0;
                                    797 ;	assignBit
      000129 10 DA 02         [24]  798 	jbc	_CCF2,00129$
      00012C 80 0C            [24]  799 	sjmp	00106$
      00012E                        800 00129$:
                                    801 ;	program.c:100: CH = 0;
      00012E 75 F9 00         [24]  802 	mov	_CH,#0x00
                                    803 ;	program.c:101: CL = 0;
      000131 75 E9 00         [24]  804 	mov	_CL,#0x00
                                    805 ;	program.c:102: WDTRST = 0x01E;
      000134 75 A6 1E         [24]  806 	mov	_WDTRST,#0x1e
                                    807 ;	program.c:103: WDTRST = 0x0E1;
      000137 75 A6 E1         [24]  808 	mov	_WDTRST,#0xe1
      00013A                        809 00106$:
                                    810 ;	program.c:105: if (CCF3)
                                    811 ;	program.c:107: CCF3 = 0;
                                    812 ;	assignBit
      00013A 10 DB 02         [24]  813 	jbc	_CCF3,00130$
      00013D 80 1B            [24]  814 	sjmp	00109$
      00013F                        815 00130$:
                                    816 ;	program.c:108: printf("Timer Interrupt\n\r");
      00013F 74r0D            [12]  817 	mov	a,#___str_8
      000141 C0 E0            [24]  818 	push	acc
      000143 74s01            [12]  819 	mov	a,#(___str_8 >> 8)
      000145 C0 E0            [24]  820 	push	acc
      000147 74 80            [12]  821 	mov	a,#0x80
      000149 C0 E0            [24]  822 	push	acc
      00014B 75 D0 00         [24]  823 	mov	psw,#0x00
      00014E 12r00r00         [24]  824 	lcall	_printf
      000151 75 D0 08         [24]  825 	mov	psw,#0x08
      000154 15 81            [12]  826 	dec	sp
      000156 15 81            [12]  827 	dec	sp
      000158 15 81            [12]  828 	dec	sp
      00015A                        829 00109$:
                                    830 ;	program.c:110: }
      00015A D0 D0            [24]  831 	pop	psw
      00015C D0 00            [24]  832 	pop	(0+0)
      00015E D0 01            [24]  833 	pop	(0+1)
      000160 D0 02            [24]  834 	pop	(0+2)
      000162 D0 03            [24]  835 	pop	(0+3)
      000164 D0 04            [24]  836 	pop	(0+4)
      000166 D0 05            [24]  837 	pop	(0+5)
      000168 D0 06            [24]  838 	pop	(0+6)
      00016A D0 07            [24]  839 	pop	(0+7)
      00016C D0 83            [24]  840 	pop	dph
      00016E D0 82            [24]  841 	pop	dpl
      000170 D0 F0            [24]  842 	pop	b
      000172 D0 E0            [24]  843 	pop	acc
      000174 D0*00            [24]  844 	pop	bits
      000176 32               [24]  845 	reti
                                    846 ;------------------------------------------------------------
                                    847 ;Allocation info for local variables in function 'idle_interrupt'
                                    848 ;------------------------------------------------------------
                                    849 ;	program.c:117: void idle_interrupt() __interrupt(0) __using(1)
                                    850 ;	-----------------------------------------
                                    851 ;	 function idle_interrupt
                                    852 ;	-----------------------------------------
      000177                        853 _idle_interrupt:
      000177 C0*00            [24]  854 	push	bits
      000179 C0 E0            [24]  855 	push	acc
      00017B C0 F0            [24]  856 	push	b
      00017D C0 82            [24]  857 	push	dpl
      00017F C0 83            [24]  858 	push	dph
      000181 C0 07            [24]  859 	push	(0+7)
      000183 C0 06            [24]  860 	push	(0+6)
      000185 C0 05            [24]  861 	push	(0+5)
      000187 C0 04            [24]  862 	push	(0+4)
      000189 C0 03            [24]  863 	push	(0+3)
      00018B C0 02            [24]  864 	push	(0+2)
      00018D C0 01            [24]  865 	push	(0+1)
      00018F C0 00            [24]  866 	push	(0+0)
      000191 C0 D0            [24]  867 	push	psw
      000193 75 D0 08         [24]  868 	mov	psw,#0x08
                                    869 ;	program.c:119: EX0 = 0;
                                    870 ;	assignBit
      000196 C2 A8            [12]  871 	clr	_EX0
                                    872 ;	program.c:120: PCON = 0x80;
      000198 75 87 80         [24]  873 	mov	_PCON,#0x80
                                    874 ;	program.c:121: CR = 0;
                                    875 ;	assignBit
      00019B C2 DE            [12]  876 	clr	_CR
                                    877 ;	program.c:122: CKRL = 255;
      00019D 75 97 FF         [24]  878 	mov	_CKRL,#0xff
                                    879 ;	program.c:123: CCAPM0 = 0;
                                    880 ;	program.c:124: CCAPM1 = 0;
                                    881 ;	program.c:125: CCAPM2 = 0;
                                    882 ;	program.c:126: CCAPM3 = 0;
                                    883 ;	program.c:127: CCAPM4 = 0;
                                    884 ;	program.c:128: printf("Going to main menu.. \n\r");
      0001A0 E4               [12]  885 	clr	a
      0001A1 F5 DA            [12]  886 	mov	_CCAPM0,a
      0001A3 F5 DB            [12]  887 	mov	_CCAPM1,a
      0001A5 F5 DC            [12]  888 	mov	_CCAPM2,a
      0001A7 F5 DD            [12]  889 	mov	_CCAPM3,a
      0001A9 F5 DE            [12]  890 	mov	_CCAPM4,a
      0001AB 74r1F            [12]  891 	mov	a,#___str_9
      0001AD C0 E0            [24]  892 	push	acc
      0001AF 74s01            [12]  893 	mov	a,#(___str_9 >> 8)
      0001B1 C0 E0            [24]  894 	push	acc
      0001B3 74 80            [12]  895 	mov	a,#0x80
      0001B5 C0 E0            [24]  896 	push	acc
      0001B7 75 D0 00         [24]  897 	mov	psw,#0x00
      0001BA 12r00r00         [24]  898 	lcall	_printf
      0001BD 75 D0 08         [24]  899 	mov	psw,#0x08
      0001C0 15 81            [12]  900 	dec	sp
      0001C2 15 81            [12]  901 	dec	sp
      0001C4 15 81            [12]  902 	dec	sp
                                    903 ;	program.c:129: main_menu();
      0001C6 75 D0 00         [24]  904 	mov	psw,#0x00
      0001C9 12r00r20         [24]  905 	lcall	_main_menu
      0001CC 75 D0 08         [24]  906 	mov	psw,#0x08
                                    907 ;	program.c:130: }
      0001CF D0 D0            [24]  908 	pop	psw
      0001D1 D0 00            [24]  909 	pop	(0+0)
      0001D3 D0 01            [24]  910 	pop	(0+1)
      0001D5 D0 02            [24]  911 	pop	(0+2)
      0001D7 D0 03            [24]  912 	pop	(0+3)
      0001D9 D0 04            [24]  913 	pop	(0+4)
      0001DB D0 05            [24]  914 	pop	(0+5)
      0001DD D0 06            [24]  915 	pop	(0+6)
      0001DF D0 07            [24]  916 	pop	(0+7)
      0001E1 D0 83            [24]  917 	pop	dph
      0001E3 D0 82            [24]  918 	pop	dpl
      0001E5 D0 F0            [24]  919 	pop	b
      0001E7 D0 E0            [24]  920 	pop	acc
      0001E9 D0*00            [24]  921 	pop	bits
      0001EB 32               [24]  922 	reti
                                    923 ;------------------------------------------------------------
                                    924 ;Allocation info for local variables in function 'dataout'
                                    925 ;------------------------------------------------------------
                                    926 ;data                      Allocated with name '_dataout_data_65536_56'
                                    927 ;------------------------------------------------------------
                                    928 ;	program.c:138: void dataout(unsigned char data)
                                    929 ;	-----------------------------------------
                                    930 ;	 function dataout
                                    931 ;	-----------------------------------------
      0001EC                        932 _dataout:
                           000007   933 	ar7 = 0x07
                           000006   934 	ar6 = 0x06
                           000005   935 	ar5 = 0x05
                           000004   936 	ar4 = 0x04
                           000003   937 	ar3 = 0x03
                           000002   938 	ar2 = 0x02
                           000001   939 	ar1 = 0x01
                           000000   940 	ar0 = 0x00
      0001EC E5 82            [12]  941 	mov	a,dpl
      0001EE 90r00r00         [24]  942 	mov	dptr,#_dataout_data_65536_56
      0001F1 F0               [24]  943 	movx	@dptr,a
                                    944 ;	program.c:140: DEBUG_LOC = data;
      0001F2 E0               [24]  945 	movx	a,@dptr
      0001F3 90 80 00         [24]  946 	mov	dptr,#_DEBUG_LOC
      0001F6 F0               [24]  947 	movx	@dptr,a
                                    948 ;	program.c:141: }
      0001F7 22               [24]  949 	ret
                                    950 ;------------------------------------------------------------
                                    951 ;Allocation info for local variables in function '_sdcc_external_startup'
                                    952 ;------------------------------------------------------------
                                    953 ;	program.c:150: _sdcc_external_startup()
                                    954 ;	-----------------------------------------
                                    955 ;	 function _sdcc_external_startup
                                    956 ;	-----------------------------------------
      0001F8                        957 __sdcc_external_startup:
                                    958 ;	program.c:152: CKCON0 |= 0x1;
      0001F8 43 8F 01         [24]  959 	orl	_CKCON0,#0x01
                                    960 ;	program.c:154: _AUXR = 0xC;
      0001FB 75 8E 0C         [24]  961 	mov	__AUXR,#0x0c
                                    962 ;	program.c:156: SCON = 0x42;
      0001FE 75 98 42         [24]  963 	mov	_SCON,#0x42
                                    964 ;	program.c:158: PCON = 0x80;
      000201 75 87 80         [24]  965 	mov	_PCON,#0x80
                                    966 ;	program.c:160: TH1 = 255;
      000204 75 8D FF         [24]  967 	mov	_TH1,#0xff
                                    968 ;	program.c:161: TL1 = 255;
      000207 75 8B FF         [24]  969 	mov	_TL1,#0xff
                                    970 ;	program.c:163: TMOD = 0x20;
      00020A 75 89 20         [24]  971 	mov	_TMOD,#0x20
                                    972 ;	program.c:165: REN = 1;
                                    973 ;	assignBit
      00020D D2 9C            [12]  974 	setb	_REN
                                    975 ;	program.c:167: TR1 = 1;
                                    976 ;	assignBit
      00020F D2 8E            [12]  977 	setb	_TR1
                                    978 ;	program.c:169: EA = 1;
                                    979 ;	assignBit
      000211 D2 AF            [12]  980 	setb	_EA
                                    981 ;	program.c:171: EC = 1;
                                    982 ;	assignBit
      000213 D2 AE            [12]  983 	setb	_EC
                                    984 ;	program.c:172: return 0;
      000215 90 00 00         [24]  985 	mov	dptr,#0x0000
                                    986 ;	program.c:173: }
      000218 22               [24]  987 	ret
                                    988 	.area CSEG    (CODE)
                                    989 	.area CONST   (CODE)
                                    990 	.area CONST   (CODE)
      000000                        991 ___str_0:
      000000 0A                     992 	.db 0x0a
      000001 0D                     993 	.db 0x0d
      000002 20 48 45 4C 4C 4F 21   994 	.ascii " HELLO! Started in X2 Mode "
             20 53 74 61 72 74 65
             64 20 69 6E 20 58 32
             20 4D 6F 64 65 20
      00001D 0A                     995 	.db 0x0a
      00001E 0D                     996 	.db 0x0d
      00001F 00                     997 	.db 0x00
                                    998 	.area CSEG    (CODE)
                                    999 	.area CONST   (CODE)
      000020                       1000 ___str_1:
      000020 0A                    1001 	.db 0x0a
      000021 0A                    1002 	.db 0x0a
      000022 0D                    1003 	.db 0x0d
      000023 5E 5E 5E 5E 5E 5E 5E  1004 	.ascii "^^^^^^^^^^^^^^^^^^^-MENU-^^^^^^^^^^^^^^^^^^^^^^^^^^ "
             5E 5E 5E 5E 5E 5E 5E
             5E 5E 5E 5E 5E 2D 4D
             45 4E 55 2D 5E 5E 5E
             5E 5E 5E 5E 5E 5E 5E
             5E 5E 5E 5E 5E 5E 5E
             5E 5E 5E 5E 5E 5E 5E
             5E 5E 20
      000057 0A                    1005 	.db 0x0a
      000058 0A                    1006 	.db 0x0a
      000059 0D                    1007 	.db 0x0d
      00005A 00                    1008 	.db 0x00
                                   1009 	.area CSEG    (CODE)
                                   1010 	.area CONST   (CODE)
      00005B                       1011 ___str_2:
      00005B 27 48 27 20 2D 3E 20  1012 	.ascii "'H' -> Enter Heap Demo Mode "
             45 6E 74 65 72 20 48
             65 61 70 20 44 65 6D
             6F 20 4D 6F 64 65 20
      000077 0A                    1013 	.db 0x0a
      000078 0D                    1014 	.db 0x0d
      000079 00                    1015 	.db 0x00
                                   1016 	.area CSEG    (CODE)
                                   1017 	.area CONST   (CODE)
      00007A                       1018 ___str_3:
      00007A 27 50 27 20 2D 3E 20  1019 	.ascii "'P' -> Enter PCA Demo Mode "
             45 6E 74 65 72 20 50
             43 41 20 44 65 6D 6F
             20 4D 6F 64 65 20
      000095 0A                    1020 	.db 0x0a
      000096 0D                    1021 	.db 0x0d
      000097 00                    1022 	.db 0x00
                                   1023 	.area CSEG    (CODE)
                                   1024 	.area CONST   (CODE)
      000098                       1025 ___str_4:
      000098 27 41 27 20 2D 3E 20  1026 	.ascii "'A' -> Assembly C Mix "
             41 73 73 65 6D 62 6C
             79 20 43 20 4D 69 78
             20
      0000AE 0A                    1027 	.db 0x0a
      0000AF 0D                    1028 	.db 0x0d
      0000B0 00                    1029 	.db 0x00
                                   1030 	.area CSEG    (CODE)
                                   1031 	.area CONST   (CODE)
      0000B1                       1032 ___str_5:
      0000B1 27 45 27 20 2D 3E 20  1033 	.ascii "'E' -> EEPROM Mode "
             45 45 50 52 4F 4D 20
             4D 6F 64 65 20
      0000C4 0A                    1034 	.db 0x0a
      0000C5 0D                    1035 	.db 0x0d
      0000C6 00                    1036 	.db 0x00
                                   1037 	.area CSEG    (CODE)
                                   1038 	.area CONST   (CODE)
      0000C7                       1039 ___str_6:
      0000C7 50 6C 65 61 73 65 20  1040 	.ascii "Please make a valid choice "
             6D 61 6B 65 20 61 20
             76 61 6C 69 64 20 63
             68 6F 69 63 65 20
      0000E2 0A                    1041 	.db 0x0a
      0000E3 0D                    1042 	.db 0x0d
      0000E4 00                    1043 	.db 0x00
                                   1044 	.area CSEG    (CODE)
                                   1045 	.area CONST   (CODE)
      0000E5                       1046 ___str_7:
      0000E5 43 61 70 74 75 72 65  1047 	.ascii "Captured Value CCPL -> %d CCPH -> %d "
             64 20 56 61 6C 75 65
             20 43 43 50 4C 20 2D
             3E 20 25 64 20 43 43
             50 48 20 2D 3E 20 25
             64 20
      00010A 0A                    1048 	.db 0x0a
      00010B 0D                    1049 	.db 0x0d
      00010C 00                    1050 	.db 0x00
                                   1051 	.area CSEG    (CODE)
                                   1052 	.area CONST   (CODE)
      00010D                       1053 ___str_8:
      00010D 54 69 6D 65 72 20 49  1054 	.ascii "Timer Interrupt"
             6E 74 65 72 72 75 70
             74
      00011C 0A                    1055 	.db 0x0a
      00011D 0D                    1056 	.db 0x0d
      00011E 00                    1057 	.db 0x00
                                   1058 	.area CSEG    (CODE)
                                   1059 	.area CONST   (CODE)
      00011F                       1060 ___str_9:
      00011F 47 6F 69 6E 67 20 74  1061 	.ascii "Going to main menu.. "
             6F 20 6D 61 69 6E 20
             6D 65 6E 75 2E 2E 20
      000134 0A                    1062 	.db 0x0a
      000135 0D                    1063 	.db 0x0d
      000136 00                    1064 	.db 0x00
                                   1065 	.area CSEG    (CODE)
                                   1066 	.area XINIT   (CODE)
      000000                       1067 __xinit__global_var_test:
      000000 02                    1068 	.db #0x02	; 2
                                   1069 	.area CABS    (ABS,CODE)
