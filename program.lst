                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.0 #12072 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module program
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl __sdcc_external_startup
                                     12 	.globl _idle_interrupt
                                     13 	.globl _pca_interrupt
                                     14 	.globl _main
                                     15 	.globl _asmtest
                                     16 	.globl _printf
                                     17 	.globl _free
                                     18 	.globl _malloc
                                     19 	.globl _TF1
                                     20 	.globl _TR1
                                     21 	.globl _TF0
                                     22 	.globl _TR0
                                     23 	.globl _IE1
                                     24 	.globl _IT1
                                     25 	.globl _IE0
                                     26 	.globl _IT0
                                     27 	.globl _SM0
                                     28 	.globl _SM1
                                     29 	.globl _SM2
                                     30 	.globl _REN
                                     31 	.globl _TB8
                                     32 	.globl _RB8
                                     33 	.globl _TI
                                     34 	.globl _RI
                                     35 	.globl _CY
                                     36 	.globl _AC
                                     37 	.globl _F0
                                     38 	.globl _RS1
                                     39 	.globl _RS0
                                     40 	.globl _OV
                                     41 	.globl _F1
                                     42 	.globl _P
                                     43 	.globl _RD
                                     44 	.globl _WR
                                     45 	.globl _T1
                                     46 	.globl _T0
                                     47 	.globl _INT1
                                     48 	.globl _INT0
                                     49 	.globl _TXD0
                                     50 	.globl _TXD
                                     51 	.globl _RXD0
                                     52 	.globl _RXD
                                     53 	.globl _P3_7
                                     54 	.globl _P3_6
                                     55 	.globl _P3_5
                                     56 	.globl _P3_4
                                     57 	.globl _P3_3
                                     58 	.globl _P3_2
                                     59 	.globl _P3_1
                                     60 	.globl _P3_0
                                     61 	.globl _P2_7
                                     62 	.globl _P2_6
                                     63 	.globl _P2_5
                                     64 	.globl _P2_4
                                     65 	.globl _P2_3
                                     66 	.globl _P2_2
                                     67 	.globl _P2_1
                                     68 	.globl _P2_0
                                     69 	.globl _P1_7
                                     70 	.globl _P1_6
                                     71 	.globl _P1_5
                                     72 	.globl _P1_4
                                     73 	.globl _P1_3
                                     74 	.globl _P1_2
                                     75 	.globl _P1_1
                                     76 	.globl _P1_0
                                     77 	.globl _P0_7
                                     78 	.globl _P0_6
                                     79 	.globl _P0_5
                                     80 	.globl _P0_4
                                     81 	.globl _P0_3
                                     82 	.globl _P0_2
                                     83 	.globl _P0_1
                                     84 	.globl _P0_0
                                     85 	.globl _PS
                                     86 	.globl _PT1
                                     87 	.globl _PX1
                                     88 	.globl _PT0
                                     89 	.globl _PX0
                                     90 	.globl _EA
                                     91 	.globl _ES
                                     92 	.globl _ET1
                                     93 	.globl _EX1
                                     94 	.globl _ET0
                                     95 	.globl _EX0
                                     96 	.globl _BREG_F7
                                     97 	.globl _BREG_F6
                                     98 	.globl _BREG_F5
                                     99 	.globl _BREG_F4
                                    100 	.globl _BREG_F3
                                    101 	.globl _BREG_F2
                                    102 	.globl _BREG_F1
                                    103 	.globl _BREG_F0
                                    104 	.globl _P5_7
                                    105 	.globl _P5_6
                                    106 	.globl _P5_5
                                    107 	.globl _P5_4
                                    108 	.globl _P5_3
                                    109 	.globl _P5_2
                                    110 	.globl _P5_1
                                    111 	.globl _P5_0
                                    112 	.globl _P4_7
                                    113 	.globl _P4_6
                                    114 	.globl _P4_5
                                    115 	.globl _P4_4
                                    116 	.globl _P4_3
                                    117 	.globl _P4_2
                                    118 	.globl _P4_1
                                    119 	.globl _P4_0
                                    120 	.globl _PX0L
                                    121 	.globl _PT0L
                                    122 	.globl _PX1L
                                    123 	.globl _PT1L
                                    124 	.globl _PSL
                                    125 	.globl _PT2L
                                    126 	.globl _PPCL
                                    127 	.globl _EC
                                    128 	.globl _CCF0
                                    129 	.globl _CCF1
                                    130 	.globl _CCF2
                                    131 	.globl _CCF3
                                    132 	.globl _CCF4
                                    133 	.globl _CR
                                    134 	.globl _CF
                                    135 	.globl _TF2
                                    136 	.globl _EXF2
                                    137 	.globl _RCLK
                                    138 	.globl _TCLK
                                    139 	.globl _EXEN2
                                    140 	.globl _TR2
                                    141 	.globl _C_T2
                                    142 	.globl _CP_RL2
                                    143 	.globl _T2CON_7
                                    144 	.globl _T2CON_6
                                    145 	.globl _T2CON_5
                                    146 	.globl _T2CON_4
                                    147 	.globl _T2CON_3
                                    148 	.globl _T2CON_2
                                    149 	.globl _T2CON_1
                                    150 	.globl _T2CON_0
                                    151 	.globl _PT2
                                    152 	.globl _ET2
                                    153 	.globl __AUXR
                                    154 	.globl _TMOD
                                    155 	.globl _TL1
                                    156 	.globl _TL0
                                    157 	.globl _TH1
                                    158 	.globl _TH0
                                    159 	.globl _TCON
                                    160 	.globl _SP
                                    161 	.globl _SCON
                                    162 	.globl _SBUF0
                                    163 	.globl _SBUF
                                    164 	.globl _PSW
                                    165 	.globl _PCON
                                    166 	.globl _P3
                                    167 	.globl _P2
                                    168 	.globl _P1
                                    169 	.globl _P0
                                    170 	.globl _IP
                                    171 	.globl _IE
                                    172 	.globl _DP0L
                                    173 	.globl _DPL
                                    174 	.globl _DP0H
                                    175 	.globl _DPH
                                    176 	.globl _B
                                    177 	.globl _ACC
                                    178 	.globl _EECON
                                    179 	.globl _KBF
                                    180 	.globl _KBE
                                    181 	.globl _KBLS
                                    182 	.globl _BRL
                                    183 	.globl _BDRCON
                                    184 	.globl _T2MOD
                                    185 	.globl _SPDAT
                                    186 	.globl _SPSTA
                                    187 	.globl _SPCON
                                    188 	.globl _SADEN
                                    189 	.globl _SADDR
                                    190 	.globl _WDTPRG
                                    191 	.globl _WDTRST
                                    192 	.globl _P5
                                    193 	.globl _P4
                                    194 	.globl _IPH1
                                    195 	.globl _IPL1
                                    196 	.globl _IPH0
                                    197 	.globl _IPL0
                                    198 	.globl _IEN1
                                    199 	.globl _IEN0
                                    200 	.globl _CMOD
                                    201 	.globl _CL
                                    202 	.globl _CH
                                    203 	.globl _CCON
                                    204 	.globl _CCAPM4
                                    205 	.globl _CCAPM3
                                    206 	.globl _CCAPM2
                                    207 	.globl _CCAPM1
                                    208 	.globl _CCAPM0
                                    209 	.globl _CCAP4L
                                    210 	.globl _CCAP3L
                                    211 	.globl _CCAP2L
                                    212 	.globl _CCAP1L
                                    213 	.globl _CCAP0L
                                    214 	.globl _CCAP4H
                                    215 	.globl _CCAP3H
                                    216 	.globl _CCAP2H
                                    217 	.globl _CCAP1H
                                    218 	.globl _CCAP0H
                                    219 	.globl _CKCON1
                                    220 	.globl _CKCON0
                                    221 	.globl _CKRL
                                    222 	.globl _AUXR1
                                    223 	.globl _AUXR
                                    224 	.globl _TH2
                                    225 	.globl _TL2
                                    226 	.globl _RCAP2H
                                    227 	.globl _RCAP2L
                                    228 	.globl _T2CON
                                    229 	.globl _global_var_test
                                    230 	.globl _buffers_array
                                    231 	.globl _program_stats
                                    232 	.globl _DEBUG_LOC
                                    233 	.globl _user_interface_heap
                                    234 	.globl _user_interface_PCA
                                    235 	.globl _pca_falling_edge
                                    236 	.globl _pca_software_timer
                                    237 	.globl _pca_high_speed
                                    238 	.globl _pca_pwm
                                    239 	.globl _pca_watchdog
                                    240 	.globl _pca_idle
                                    241 	.globl _pca_pdown
                                    242 	.globl _fclk_lowest
                                    243 	.globl _main_menu
                                    244 	.globl _asm_clang
                                    245 	.globl _at_clear_all_buffers
                                    246 	.globl _delete_buffer
                                    247 	.globl _print_pca_menu
                                    248 	.globl _print_heap_menu
                                    249 	.globl _create_new_buffer
                                    250 	.globl _create_initial_buffers
                                    251 	.globl _enter_chars
                                    252 	.globl _dump_buff_zero_ascii
                                    253 	.globl _dump_buff_zero_hex
                                    254 	.globl _print_heap_stats
                                    255 	.globl _print_all_buffers
                                    256 	.globl _get_number
                                    257 	.globl _get_num_helper
                                    258 	.globl _putchar
                                    259 	.globl _getchar
                                    260 	.globl _dataout
                                    261 ;--------------------------------------------------------
                                    262 ; special function registers
                                    263 ;--------------------------------------------------------
                                    264 	.area RSEG    (ABS,DATA)
      000000                        265 	.org 0x0000
                           0000C8   266 _T2CON	=	0x00c8
                           0000CA   267 _RCAP2L	=	0x00ca
                           0000CB   268 _RCAP2H	=	0x00cb
                           0000CC   269 _TL2	=	0x00cc
                           0000CD   270 _TH2	=	0x00cd
                           00008E   271 _AUXR	=	0x008e
                           0000A2   272 _AUXR1	=	0x00a2
                           000097   273 _CKRL	=	0x0097
                           00008F   274 _CKCON0	=	0x008f
                           0000AF   275 _CKCON1	=	0x00af
                           0000FA   276 _CCAP0H	=	0x00fa
                           0000FB   277 _CCAP1H	=	0x00fb
                           0000FC   278 _CCAP2H	=	0x00fc
                           0000FD   279 _CCAP3H	=	0x00fd
                           0000FE   280 _CCAP4H	=	0x00fe
                           0000EA   281 _CCAP0L	=	0x00ea
                           0000EB   282 _CCAP1L	=	0x00eb
                           0000EC   283 _CCAP2L	=	0x00ec
                           0000ED   284 _CCAP3L	=	0x00ed
                           0000EE   285 _CCAP4L	=	0x00ee
                           0000DA   286 _CCAPM0	=	0x00da
                           0000DB   287 _CCAPM1	=	0x00db
                           0000DC   288 _CCAPM2	=	0x00dc
                           0000DD   289 _CCAPM3	=	0x00dd
                           0000DE   290 _CCAPM4	=	0x00de
                           0000D8   291 _CCON	=	0x00d8
                           0000F9   292 _CH	=	0x00f9
                           0000E9   293 _CL	=	0x00e9
                           0000D9   294 _CMOD	=	0x00d9
                           0000A8   295 _IEN0	=	0x00a8
                           0000B1   296 _IEN1	=	0x00b1
                           0000B8   297 _IPL0	=	0x00b8
                           0000B7   298 _IPH0	=	0x00b7
                           0000B2   299 _IPL1	=	0x00b2
                           0000B3   300 _IPH1	=	0x00b3
                           0000C0   301 _P4	=	0x00c0
                           0000E8   302 _P5	=	0x00e8
                           0000A6   303 _WDTRST	=	0x00a6
                           0000A7   304 _WDTPRG	=	0x00a7
                           0000A9   305 _SADDR	=	0x00a9
                           0000B9   306 _SADEN	=	0x00b9
                           0000C3   307 _SPCON	=	0x00c3
                           0000C4   308 _SPSTA	=	0x00c4
                           0000C5   309 _SPDAT	=	0x00c5
                           0000C9   310 _T2MOD	=	0x00c9
                           00009B   311 _BDRCON	=	0x009b
                           00009A   312 _BRL	=	0x009a
                           00009C   313 _KBLS	=	0x009c
                           00009D   314 _KBE	=	0x009d
                           00009E   315 _KBF	=	0x009e
                           0000D2   316 _EECON	=	0x00d2
                           0000E0   317 _ACC	=	0x00e0
                           0000F0   318 _B	=	0x00f0
                           000083   319 _DPH	=	0x0083
                           000083   320 _DP0H	=	0x0083
                           000082   321 _DPL	=	0x0082
                           000082   322 _DP0L	=	0x0082
                           0000A8   323 _IE	=	0x00a8
                           0000B8   324 _IP	=	0x00b8
                           000080   325 _P0	=	0x0080
                           000090   326 _P1	=	0x0090
                           0000A0   327 _P2	=	0x00a0
                           0000B0   328 _P3	=	0x00b0
                           000087   329 _PCON	=	0x0087
                           0000D0   330 _PSW	=	0x00d0
                           000099   331 _SBUF	=	0x0099
                           000099   332 _SBUF0	=	0x0099
                           000098   333 _SCON	=	0x0098
                           000081   334 _SP	=	0x0081
                           000088   335 _TCON	=	0x0088
                           00008C   336 _TH0	=	0x008c
                           00008D   337 _TH1	=	0x008d
                           00008A   338 _TL0	=	0x008a
                           00008B   339 _TL1	=	0x008b
                           000089   340 _TMOD	=	0x0089
                           00008E   341 __AUXR	=	0x008e
                                    342 ;--------------------------------------------------------
                                    343 ; special function bits
                                    344 ;--------------------------------------------------------
                                    345 	.area RSEG    (ABS,DATA)
      000000                        346 	.org 0x0000
                           0000AD   347 _ET2	=	0x00ad
                           0000BD   348 _PT2	=	0x00bd
                           0000C8   349 _T2CON_0	=	0x00c8
                           0000C9   350 _T2CON_1	=	0x00c9
                           0000CA   351 _T2CON_2	=	0x00ca
                           0000CB   352 _T2CON_3	=	0x00cb
                           0000CC   353 _T2CON_4	=	0x00cc
                           0000CD   354 _T2CON_5	=	0x00cd
                           0000CE   355 _T2CON_6	=	0x00ce
                           0000CF   356 _T2CON_7	=	0x00cf
                           0000C8   357 _CP_RL2	=	0x00c8
                           0000C9   358 _C_T2	=	0x00c9
                           0000CA   359 _TR2	=	0x00ca
                           0000CB   360 _EXEN2	=	0x00cb
                           0000CC   361 _TCLK	=	0x00cc
                           0000CD   362 _RCLK	=	0x00cd
                           0000CE   363 _EXF2	=	0x00ce
                           0000CF   364 _TF2	=	0x00cf
                           0000DF   365 _CF	=	0x00df
                           0000DE   366 _CR	=	0x00de
                           0000DC   367 _CCF4	=	0x00dc
                           0000DB   368 _CCF3	=	0x00db
                           0000DA   369 _CCF2	=	0x00da
                           0000D9   370 _CCF1	=	0x00d9
                           0000D8   371 _CCF0	=	0x00d8
                           0000AE   372 _EC	=	0x00ae
                           0000BE   373 _PPCL	=	0x00be
                           0000BD   374 _PT2L	=	0x00bd
                           0000BC   375 _PSL	=	0x00bc
                           0000BB   376 _PT1L	=	0x00bb
                           0000BA   377 _PX1L	=	0x00ba
                           0000B9   378 _PT0L	=	0x00b9
                           0000B8   379 _PX0L	=	0x00b8
                           0000C0   380 _P4_0	=	0x00c0
                           0000C1   381 _P4_1	=	0x00c1
                           0000C2   382 _P4_2	=	0x00c2
                           0000C3   383 _P4_3	=	0x00c3
                           0000C4   384 _P4_4	=	0x00c4
                           0000C5   385 _P4_5	=	0x00c5
                           0000C6   386 _P4_6	=	0x00c6
                           0000C7   387 _P4_7	=	0x00c7
                           0000E8   388 _P5_0	=	0x00e8
                           0000E9   389 _P5_1	=	0x00e9
                           0000EA   390 _P5_2	=	0x00ea
                           0000EB   391 _P5_3	=	0x00eb
                           0000EC   392 _P5_4	=	0x00ec
                           0000ED   393 _P5_5	=	0x00ed
                           0000EE   394 _P5_6	=	0x00ee
                           0000EF   395 _P5_7	=	0x00ef
                           0000F0   396 _BREG_F0	=	0x00f0
                           0000F1   397 _BREG_F1	=	0x00f1
                           0000F2   398 _BREG_F2	=	0x00f2
                           0000F3   399 _BREG_F3	=	0x00f3
                           0000F4   400 _BREG_F4	=	0x00f4
                           0000F5   401 _BREG_F5	=	0x00f5
                           0000F6   402 _BREG_F6	=	0x00f6
                           0000F7   403 _BREG_F7	=	0x00f7
                           0000A8   404 _EX0	=	0x00a8
                           0000A9   405 _ET0	=	0x00a9
                           0000AA   406 _EX1	=	0x00aa
                           0000AB   407 _ET1	=	0x00ab
                           0000AC   408 _ES	=	0x00ac
                           0000AF   409 _EA	=	0x00af
                           0000B8   410 _PX0	=	0x00b8
                           0000B9   411 _PT0	=	0x00b9
                           0000BA   412 _PX1	=	0x00ba
                           0000BB   413 _PT1	=	0x00bb
                           0000BC   414 _PS	=	0x00bc
                           000080   415 _P0_0	=	0x0080
                           000081   416 _P0_1	=	0x0081
                           000082   417 _P0_2	=	0x0082
                           000083   418 _P0_3	=	0x0083
                           000084   419 _P0_4	=	0x0084
                           000085   420 _P0_5	=	0x0085
                           000086   421 _P0_6	=	0x0086
                           000087   422 _P0_7	=	0x0087
                           000090   423 _P1_0	=	0x0090
                           000091   424 _P1_1	=	0x0091
                           000092   425 _P1_2	=	0x0092
                           000093   426 _P1_3	=	0x0093
                           000094   427 _P1_4	=	0x0094
                           000095   428 _P1_5	=	0x0095
                           000096   429 _P1_6	=	0x0096
                           000097   430 _P1_7	=	0x0097
                           0000A0   431 _P2_0	=	0x00a0
                           0000A1   432 _P2_1	=	0x00a1
                           0000A2   433 _P2_2	=	0x00a2
                           0000A3   434 _P2_3	=	0x00a3
                           0000A4   435 _P2_4	=	0x00a4
                           0000A5   436 _P2_5	=	0x00a5
                           0000A6   437 _P2_6	=	0x00a6
                           0000A7   438 _P2_7	=	0x00a7
                           0000B0   439 _P3_0	=	0x00b0
                           0000B1   440 _P3_1	=	0x00b1
                           0000B2   441 _P3_2	=	0x00b2
                           0000B3   442 _P3_3	=	0x00b3
                           0000B4   443 _P3_4	=	0x00b4
                           0000B5   444 _P3_5	=	0x00b5
                           0000B6   445 _P3_6	=	0x00b6
                           0000B7   446 _P3_7	=	0x00b7
                           0000B0   447 _RXD	=	0x00b0
                           0000B0   448 _RXD0	=	0x00b0
                           0000B1   449 _TXD	=	0x00b1
                           0000B1   450 _TXD0	=	0x00b1
                           0000B2   451 _INT0	=	0x00b2
                           0000B3   452 _INT1	=	0x00b3
                           0000B4   453 _T0	=	0x00b4
                           0000B5   454 _T1	=	0x00b5
                           0000B6   455 _WR	=	0x00b6
                           0000B7   456 _RD	=	0x00b7
                           0000D0   457 _P	=	0x00d0
                           0000D1   458 _F1	=	0x00d1
                           0000D2   459 _OV	=	0x00d2
                           0000D3   460 _RS0	=	0x00d3
                           0000D4   461 _RS1	=	0x00d4
                           0000D5   462 _F0	=	0x00d5
                           0000D6   463 _AC	=	0x00d6
                           0000D7   464 _CY	=	0x00d7
                           000098   465 _RI	=	0x0098
                           000099   466 _TI	=	0x0099
                           00009A   467 _RB8	=	0x009a
                           00009B   468 _TB8	=	0x009b
                           00009C   469 _REN	=	0x009c
                           00009D   470 _SM2	=	0x009d
                           00009E   471 _SM1	=	0x009e
                           00009F   472 _SM0	=	0x009f
                           000088   473 _IT0	=	0x0088
                           000089   474 _IE0	=	0x0089
                           00008A   475 _IT1	=	0x008a
                           00008B   476 _IE1	=	0x008b
                           00008C   477 _TR0	=	0x008c
                           00008D   478 _TF0	=	0x008d
                           00008E   479 _TR1	=	0x008e
                           00008F   480 _TF1	=	0x008f
                                    481 ;--------------------------------------------------------
                                    482 ; overlayable register banks
                                    483 ;--------------------------------------------------------
                                    484 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        485 	.ds 8
                                    486 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        487 	.ds 8
                                    488 ;--------------------------------------------------------
                                    489 ; overlayable bit register bank
                                    490 ;--------------------------------------------------------
                                    491 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        492 bits:
      000000                        493 	.ds 1
                           008000   494 	b0 = bits[0]
                           008100   495 	b1 = bits[1]
                           008200   496 	b2 = bits[2]
                           008300   497 	b3 = bits[3]
                           008400   498 	b4 = bits[4]
                           008500   499 	b5 = bits[5]
                           008600   500 	b6 = bits[6]
                           008700   501 	b7 = bits[7]
                                    502 ;--------------------------------------------------------
                                    503 ; internal ram data
                                    504 ;--------------------------------------------------------
                                    505 	.area DSEG    (DATA)
      000000                        506 _delete_buffer_sloc0_1_0:
      000000                        507 	.ds 2
      000002                        508 _delete_buffer_sloc1_1_0:
      000002                        509 	.ds 2
      000004                        510 _delete_buffer_sloc2_1_0:
      000004                        511 	.ds 3
                                    512 ;--------------------------------------------------------
                                    513 ; overlayable items in internal ram 
                                    514 ;--------------------------------------------------------
                                    515 ;--------------------------------------------------------
                                    516 ; Stack segment in internal ram 
                                    517 ;--------------------------------------------------------
                                    518 	.area	SSEG
      000000                        519 __start__stack:
      000000                        520 	.ds	1
                                    521 
                                    522 ;--------------------------------------------------------
                                    523 ; indirectly addressable internal ram data
                                    524 ;--------------------------------------------------------
                                    525 	.area ISEG    (DATA)
                                    526 ;--------------------------------------------------------
                                    527 ; absolute internal ram data
                                    528 ;--------------------------------------------------------
                                    529 	.area IABS    (ABS,DATA)
                                    530 	.area IABS    (ABS,DATA)
                                    531 ;--------------------------------------------------------
                                    532 ; bit data
                                    533 ;--------------------------------------------------------
                                    534 	.area BSEG    (BIT)
                                    535 ;--------------------------------------------------------
                                    536 ; paged external ram data
                                    537 ;--------------------------------------------------------
                                    538 	.area PSEG    (PAG,XDATA)
                                    539 ;--------------------------------------------------------
                                    540 ; external ram data
                                    541 ;--------------------------------------------------------
                                    542 	.area XSEG    (XDATA)
                           008000   543 _DEBUG_LOC	=	0x8000
      000000                        544 _program_stats::
      000000                        545 	.ds 10
      00000A                        546 _buffers_array::
      00000A                        547 	.ds 300
      000136                        548 _create_new_buffer_buff_65537_84:
      000136                        549 	.ds 12
      000142                        550 _create_initial_buffers_buff_65538_91:
      000142                        551 	.ds 12
      00014E                        552 _create_initial_buffers_buff1_65538_91:
      00014E                        553 	.ds 12
      00015A                        554 _dump_buff_zero_ascii_j_65537_108:
      00015A                        555 	.ds 2
      00015C                        556 _dump_buff_zero_hex_j_131073_116:
      00015C                        557 	.ds 2
      00015E                        558 _get_number_total_chars_65536_125:
      00015E                        559 	.ds 2
      000160                        560 _get_number_num_65537_127:
      000160                        561 	.ds 2
      000162                        562 _get_num_helper_times_65536_132:
      000162                        563 	.ds 2
      000164                        564 _get_num_helper_num_65536_133:
      000164                        565 	.ds 2
      000166                        566 _putchar_c_65536_136:
      000166                        567 	.ds 2
      000168                        568 _dataout_data_65536_139:
      000168                        569 	.ds 1
                                    570 ;--------------------------------------------------------
                                    571 ; absolute external ram data
                                    572 ;--------------------------------------------------------
                                    573 	.area XABS    (ABS,XDATA)
                                    574 ;--------------------------------------------------------
                                    575 ; external initialized ram data
                                    576 ;--------------------------------------------------------
                                    577 	.area XISEG   (XDATA)
      000000                        578 _global_var_test::
      000000                        579 	.ds 1
                                    580 	.area HOME    (CODE)
                                    581 	.area GSINIT0 (CODE)
                                    582 	.area GSINIT1 (CODE)
                                    583 	.area GSINIT2 (CODE)
                                    584 	.area GSINIT3 (CODE)
                                    585 	.area GSINIT4 (CODE)
                                    586 	.area GSINIT5 (CODE)
                                    587 	.area GSINIT  (CODE)
                                    588 	.area GSFINAL (CODE)
                                    589 	.area CSEG    (CODE)
                                    590 ;--------------------------------------------------------
                                    591 ; interrupt vector 
                                    592 ;--------------------------------------------------------
                                    593 	.area HOME    (CODE)
      000000                        594 __interrupt_vect:
      000000 02r00r00         [24]  595 	ljmp	__sdcc_gsinit_startup
      000003 02r01r52         [24]  596 	ljmp	_idle_interrupt
      000006                        597 	.ds	5
      00000B 32               [24]  598 	reti
      00000C                        599 	.ds	7
      000013 32               [24]  600 	reti
      000014                        601 	.ds	7
      00001B 32               [24]  602 	reti
      00001C                        603 	.ds	7
      000023 32               [24]  604 	reti
      000024                        605 	.ds	7
      00002B 32               [24]  606 	reti
      00002C                        607 	.ds	7
      000033 02r00rC6         [24]  608 	ljmp	_pca_interrupt
                                    609 ;--------------------------------------------------------
                                    610 ; global & static initialisations
                                    611 ;--------------------------------------------------------
                                    612 	.area HOME    (CODE)
                                    613 	.area GSINIT  (CODE)
                                    614 	.area GSFINAL (CODE)
                                    615 	.area GSINIT  (CODE)
                                    616 	.globl __sdcc_gsinit_startup
                                    617 	.globl __sdcc_program_startup
                                    618 	.globl __start__stack
                                    619 	.globl __mcs51_genXINIT
                                    620 	.globl __mcs51_genXRAMCLEAR
                                    621 	.globl __mcs51_genRAMCLEAR
                                    622 	.area GSFINAL (CODE)
      000000 02r00r36         [24]  623 	ljmp	__sdcc_program_startup
                                    624 ;--------------------------------------------------------
                                    625 ; Home
                                    626 ;--------------------------------------------------------
                                    627 	.area HOME    (CODE)
                                    628 	.area HOME    (CODE)
      000036                        629 __sdcc_program_startup:
      000036 02r00r00         [24]  630 	ljmp	_main
                                    631 ;	return from main will return to caller
                                    632 ;--------------------------------------------------------
                                    633 ; code
                                    634 ;--------------------------------------------------------
                                    635 	.area CSEG    (CODE)
                                    636 ;------------------------------------------------------------
                                    637 ;Allocation info for local variables in function 'main'
                                    638 ;------------------------------------------------------------
                                    639 ;	program.c:84: void main(void)
                                    640 ;	-----------------------------------------
                                    641 ;	 function main
                                    642 ;	-----------------------------------------
      000000                        643 _main:
                           000007   644 	ar7 = 0x07
                           000006   645 	ar6 = 0x06
                           000005   646 	ar5 = 0x05
                           000004   647 	ar4 = 0x04
                           000003   648 	ar3 = 0x03
                           000002   649 	ar2 = 0x02
                           000001   650 	ar1 = 0x01
                           000000   651 	ar0 = 0x00
                                    652 ;	program.c:86: printf("\n\r HELLO! Started in X2 Mode \n\r");
      000000 74r00            [12]  653 	mov	a,#___str_0
      000002 C0 E0            [24]  654 	push	acc
      000004 74s00            [12]  655 	mov	a,#(___str_0 >> 8)
      000006 C0 E0            [24]  656 	push	acc
      000008 74 80            [12]  657 	mov	a,#0x80
      00000A C0 E0            [24]  658 	push	acc
      00000C 12r00r00         [24]  659 	lcall	_printf
      00000F 15 81            [12]  660 	dec	sp
      000011 15 81            [12]  661 	dec	sp
      000013 15 81            [12]  662 	dec	sp
                                    663 ;	program.c:87: DEBUGPORT(0x01);
      000015 75 82 01         [24]  664 	mov	dpl,#0x01
      000018 12r12r73         [24]  665 	lcall	_dataout
                                    666 ;	program.c:88: P1_1 = 0;
                                    667 ;	assignBit
      00001B C2 91            [12]  668 	clr	_P1_1
                                    669 ;	program.c:90: main_menu();
                                    670 ;	program.c:91: }
      00001D 02r02r93         [24]  671 	ljmp	_main_menu
                                    672 ;------------------------------------------------------------
                                    673 ;Allocation info for local variables in function 'user_interface_heap'
                                    674 ;------------------------------------------------------------
                                    675 ;	program.c:98: void user_interface_heap()
                                    676 ;	-----------------------------------------
                                    677 ;	 function user_interface_heap
                                    678 ;	-----------------------------------------
      000020                        679 _user_interface_heap:
                                    680 ;	program.c:100: DEBUGPORT(0x02);
      000020 75 82 02         [24]  681 	mov	dpl,#0x02
      000023 12r12r73         [24]  682 	lcall	_dataout
                                    683 ;	program.c:101: create_initial_buffers();
      000026 12r09r22         [24]  684 	lcall	_create_initial_buffers
                                    685 ;	program.c:102: print_all_buffers();
      000029 12r0Fr53         [24]  686 	lcall	_print_all_buffers
                                    687 ;	program.c:103: enter_chars();
                                    688 ;	program.c:104: }
      00002C 02r0ArFF         [24]  689 	ljmp	_enter_chars
                                    690 ;------------------------------------------------------------
                                    691 ;Allocation info for local variables in function 'user_interface_PCA'
                                    692 ;------------------------------------------------------------
                                    693 ;inp                       Allocated with name '_user_interface_PCA_inp_65537_51'
                                    694 ;------------------------------------------------------------
                                    695 ;	program.c:111: void user_interface_PCA()
                                    696 ;	-----------------------------------------
                                    697 ;	 function user_interface_PCA
                                    698 ;	-----------------------------------------
      00002F                        699 _user_interface_PCA:
                                    700 ;	program.c:113: DEBUGPORT(0xAA);
      00002F 75 82 AA         [24]  701 	mov	dpl,#0xaa
      000032 12r12r73         [24]  702 	lcall	_dataout
                                    703 ;	program.c:114: printf("Hello, In PCA Demo mode \n\r");
      000035 74r20            [12]  704 	mov	a,#___str_1
      000037 C0 E0            [24]  705 	push	acc
      000039 74s00            [12]  706 	mov	a,#(___str_1 >> 8)
      00003B C0 E0            [24]  707 	push	acc
      00003D 74 80            [12]  708 	mov	a,#0x80
      00003F C0 E0            [24]  709 	push	acc
      000041 12r00r00         [24]  710 	lcall	_printf
      000044 15 81            [12]  711 	dec	sp
      000046 15 81            [12]  712 	dec	sp
      000048 15 81            [12]  713 	dec	sp
                                    714 ;	program.c:115: print_pca_menu();
      00004A 12r06r20         [24]  715 	lcall	_print_pca_menu
                                    716 ;	program.c:118: wrong_choice_pca:
      00004D                        717 00101$:
                                    718 ;	program.c:119: printf("Please make a valid choice \n\r");
      00004D 74r3B            [12]  719 	mov	a,#___str_2
      00004F C0 E0            [24]  720 	push	acc
      000051 74s00            [12]  721 	mov	a,#(___str_2 >> 8)
      000053 C0 E0            [24]  722 	push	acc
      000055 74 80            [12]  723 	mov	a,#0x80
      000057 C0 E0            [24]  724 	push	acc
      000059 12r00r00         [24]  725 	lcall	_printf
      00005C 15 81            [12]  726 	dec	sp
      00005E 15 81            [12]  727 	dec	sp
      000060 15 81            [12]  728 	dec	sp
                                    729 ;	program.c:120: inp = getchar();
      000062 12r12r37         [24]  730 	lcall	_getchar
      000065 AE 82            [24]  731 	mov	r6,dpl
      000067 AF 83            [24]  732 	mov	r7,dph
                                    733 ;	program.c:121: if (inp == 0x46)
      000069 BE 46 08         [24]  734 	cjne	r6,#0x46,00124$
      00006C BF 00 05         [24]  735 	cjne	r7,#0x00,00124$
                                    736 ;	program.c:122: pca_falling_edge();
      00006F 12r01r69         [24]  737 	lcall	_pca_falling_edge
      000072 80 50            [24]  738 	sjmp	00127$
      000074                        739 00124$:
                                    740 ;	program.c:123: else if (inp == 0x53)
      000074 BE 53 08         [24]  741 	cjne	r6,#0x53,00121$
      000077 BF 00 05         [24]  742 	cjne	r7,#0x00,00121$
                                    743 ;	program.c:124: pca_software_timer();
      00007A 12r01r84         [24]  744 	lcall	_pca_software_timer
      00007D 80 45            [24]  745 	sjmp	00127$
      00007F                        746 00121$:
                                    747 ;	program.c:125: else if (inp == 0x48)
      00007F BE 48 08         [24]  748 	cjne	r6,#0x48,00118$
      000082 BF 00 05         [24]  749 	cjne	r7,#0x00,00118$
                                    750 ;	program.c:126: pca_high_speed();
      000085 12r01rA5         [24]  751 	lcall	_pca_high_speed
      000088 80 3A            [24]  752 	sjmp	00127$
      00008A                        753 00118$:
                                    754 ;	program.c:127: else if (inp == 0x50)
      00008A BE 50 08         [24]  755 	cjne	r6,#0x50,00115$
      00008D BF 00 05         [24]  756 	cjne	r7,#0x00,00115$
                                    757 ;	program.c:128: pca_pwm();
      000090 12r01rC6         [24]  758 	lcall	_pca_pwm
      000093 80 2F            [24]  759 	sjmp	00127$
      000095                        760 00115$:
                                    761 ;	program.c:129: else if (inp == 0x57)
      000095 BE 57 08         [24]  762 	cjne	r6,#0x57,00112$
      000098 BF 00 05         [24]  763 	cjne	r7,#0x00,00112$
                                    764 ;	program.c:130: pca_watchdog();
      00009B 12r01rEA         [24]  765 	lcall	_pca_watchdog
      00009E 80 24            [24]  766 	sjmp	00127$
      0000A0                        767 00112$:
                                    768 ;	program.c:131: else if (inp == 0x49)
      0000A0 BE 49 08         [24]  769 	cjne	r6,#0x49,00109$
      0000A3 BF 00 05         [24]  770 	cjne	r7,#0x00,00109$
                                    771 ;	program.c:132: pca_idle();
      0000A6 12r02r0E         [24]  772 	lcall	_pca_idle
      0000A9 80 19            [24]  773 	sjmp	00127$
      0000AB                        774 00109$:
                                    775 ;	program.c:133: else if (inp == 0x44)
      0000AB BE 44 08         [24]  776 	cjne	r6,#0x44,00106$
      0000AE BF 00 05         [24]  777 	cjne	r7,#0x00,00106$
                                    778 ;	program.c:134: pca_pdown();
      0000B1 12r02r43         [24]  779 	lcall	_pca_pdown
      0000B4 80 0E            [24]  780 	sjmp	00127$
      0000B6                        781 00106$:
                                    782 ;	program.c:135: else if (inp == 0x4C)
      0000B6 BE 4C 05         [24]  783 	cjne	r6,#0x4c,00185$
      0000B9 BF 00 02         [24]  784 	cjne	r7,#0x00,00185$
      0000BC 80 03            [24]  785 	sjmp	00186$
      0000BE                        786 00185$:
      0000BE 02r00r4D         [24]  787 	ljmp	00101$
      0000C1                        788 00186$:
                                    789 ;	program.c:136: fclk_lowest();
      0000C1 12r02r78         [24]  790 	lcall	_fclk_lowest
                                    791 ;	program.c:140: while(1){
      0000C4                        792 00127$:
                                    793 ;	program.c:143: }
      0000C4 80 FE            [24]  794 	sjmp	00127$
                                    795 ;------------------------------------------------------------
                                    796 ;Allocation info for local variables in function 'pca_interrupt'
                                    797 ;------------------------------------------------------------
                                    798 ;	program.c:145: void pca_interrupt() __interrupt(6) __using(1)
                                    799 ;	-----------------------------------------
                                    800 ;	 function pca_interrupt
                                    801 ;	-----------------------------------------
      0000C6                        802 _pca_interrupt:
                           00000F   803 	ar7 = 0x0f
                           00000E   804 	ar6 = 0x0e
                           00000D   805 	ar5 = 0x0d
                           00000C   806 	ar4 = 0x0c
                           00000B   807 	ar3 = 0x0b
                           00000A   808 	ar2 = 0x0a
                           000009   809 	ar1 = 0x09
                           000008   810 	ar0 = 0x08
      0000C6 C0*00            [24]  811 	push	bits
      0000C8 C0 E0            [24]  812 	push	acc
      0000CA C0 F0            [24]  813 	push	b
      0000CC C0 82            [24]  814 	push	dpl
      0000CE C0 83            [24]  815 	push	dph
      0000D0 C0 07            [24]  816 	push	(0+7)
      0000D2 C0 06            [24]  817 	push	(0+6)
      0000D4 C0 05            [24]  818 	push	(0+5)
      0000D6 C0 04            [24]  819 	push	(0+4)
      0000D8 C0 03            [24]  820 	push	(0+3)
      0000DA C0 02            [24]  821 	push	(0+2)
      0000DC C0 01            [24]  822 	push	(0+1)
      0000DE C0 00            [24]  823 	push	(0+0)
      0000E0 C0 D0            [24]  824 	push	psw
      0000E2 75 D0 08         [24]  825 	mov	psw,#0x08
                                    826 ;	program.c:147: if (CCF0)
      0000E5 30 D8 2D         [24]  827 	jnb	_CCF0,00102$
                                    828 ;	program.c:149: printf("Captured Value CCPL -> %d CCPH -> %d \n\r", CCAP0L, CCAP0H);
      0000E8 AE FA            [24]  829 	mov	r6,_CCAP0H
      0000EA 7F 00            [12]  830 	mov	r7,#0x00
      0000EC AC EA            [24]  831 	mov	r4,_CCAP0L
      0000EE 7D 00            [12]  832 	mov	r5,#0x00
      0000F0 C0 0E            [24]  833 	push	ar6
      0000F2 C0 0F            [24]  834 	push	ar7
      0000F4 C0 0C            [24]  835 	push	ar4
      0000F6 C0 0D            [24]  836 	push	ar5
      0000F8 74r59            [12]  837 	mov	a,#___str_3
      0000FA C0 E0            [24]  838 	push	acc
      0000FC 74s00            [12]  839 	mov	a,#(___str_3 >> 8)
      0000FE C0 E0            [24]  840 	push	acc
      000100 74 80            [12]  841 	mov	a,#0x80
      000102 C0 E0            [24]  842 	push	acc
      000104 75 D0 00         [24]  843 	mov	psw,#0x00
      000107 12r00r00         [24]  844 	lcall	_printf
      00010A 75 D0 08         [24]  845 	mov	psw,#0x08
      00010D E5 81            [12]  846 	mov	a,sp
      00010F 24 F9            [12]  847 	add	a,#0xf9
      000111 F5 81            [12]  848 	mov	sp,a
                                    849 ;	program.c:151: CCF0 = 0;
                                    850 ;	assignBit
      000113 C2 D8            [12]  851 	clr	_CCF0
      000115                        852 00102$:
                                    853 ;	program.c:153: if (CCF1)
      000115 30 D9 1D         [24]  854 	jnb	_CCF1,00105$
                                    855 ;	program.c:155: printf("Timer Interrupt on CCF1!!! \n\r");
      000118 74r81            [12]  856 	mov	a,#___str_4
      00011A C0 E0            [24]  857 	push	acc
      00011C 74s00            [12]  858 	mov	a,#(___str_4 >> 8)
      00011E C0 E0            [24]  859 	push	acc
      000120 74 80            [12]  860 	mov	a,#0x80
      000122 C0 E0            [24]  861 	push	acc
      000124 75 D0 00         [24]  862 	mov	psw,#0x00
      000127 12r00r00         [24]  863 	lcall	_printf
      00012A 75 D0 08         [24]  864 	mov	psw,#0x08
      00012D 15 81            [12]  865 	dec	sp
      00012F 15 81            [12]  866 	dec	sp
      000131 15 81            [12]  867 	dec	sp
                                    868 ;	program.c:157: CCF1 = 0;
                                    869 ;	assignBit
      000133 C2 D9            [12]  870 	clr	_CCF1
      000135                        871 00105$:
                                    872 ;	program.c:159: }
      000135 D0 D0            [24]  873 	pop	psw
      000137 D0 00            [24]  874 	pop	(0+0)
      000139 D0 01            [24]  875 	pop	(0+1)
      00013B D0 02            [24]  876 	pop	(0+2)
      00013D D0 03            [24]  877 	pop	(0+3)
      00013F D0 04            [24]  878 	pop	(0+4)
      000141 D0 05            [24]  879 	pop	(0+5)
      000143 D0 06            [24]  880 	pop	(0+6)
      000145 D0 07            [24]  881 	pop	(0+7)
      000147 D0 83            [24]  882 	pop	dph
      000149 D0 82            [24]  883 	pop	dpl
      00014B D0 F0            [24]  884 	pop	b
      00014D D0 E0            [24]  885 	pop	acc
      00014F D0*00            [24]  886 	pop	bits
      000151 32               [24]  887 	reti
                                    888 ;------------------------------------------------------------
                                    889 ;Allocation info for local variables in function 'idle_interrupt'
                                    890 ;------------------------------------------------------------
                                    891 ;	program.c:161: void idle_interrupt() __interrupt(0) __using(1)
                                    892 ;	-----------------------------------------
                                    893 ;	 function idle_interrupt
                                    894 ;	-----------------------------------------
      000152                        895 _idle_interrupt:
                                    896 ;	program.c:163: EX0 = 0;
                                    897 ;	assignBit
      000152 C2 A8            [12]  898 	clr	_EX0
                                    899 ;	program.c:164: PCON = 0x80;
      000154 75 87 80         [24]  900 	mov	_PCON,#0x80
                                    901 ;	program.c:165: CR = 0;
                                    902 ;	assignBit
      000157 C2 DE            [12]  903 	clr	_CR
                                    904 ;	program.c:166: CCAPM0 = 0;
      000159 75 DA 00         [24]  905 	mov	_CCAPM0,#0x00
                                    906 ;	program.c:167: CCAPM1 = 0;
      00015C 75 DB 00         [24]  907 	mov	_CCAPM1,#0x00
                                    908 ;	program.c:168: CCAPM2 = 0;
      00015F 75 DC 00         [24]  909 	mov	_CCAPM2,#0x00
                                    910 ;	program.c:169: CCAPM3 = 0;
      000162 75 DD 00         [24]  911 	mov	_CCAPM3,#0x00
                                    912 ;	program.c:170: CCAPM4 = 0;   
      000165 75 DE 00         [24]  913 	mov	_CCAPM4,#0x00
                                    914 ;	program.c:171: }
      000168 32               [24]  915 	reti
                                    916 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    917 ;	eliminated unneeded push/pop not_psw
                                    918 ;	eliminated unneeded push/pop dpl
                                    919 ;	eliminated unneeded push/pop dph
                                    920 ;	eliminated unneeded push/pop b
                                    921 ;	eliminated unneeded push/pop acc
                                    922 ;------------------------------------------------------------
                                    923 ;Allocation info for local variables in function 'pca_falling_edge'
                                    924 ;------------------------------------------------------------
                                    925 ;	program.c:173: void pca_falling_edge()
                                    926 ;	-----------------------------------------
                                    927 ;	 function pca_falling_edge
                                    928 ;	-----------------------------------------
      000169                        929 _pca_falling_edge:
                           000007   930 	ar7 = 0x07
                           000006   931 	ar6 = 0x06
                           000005   932 	ar5 = 0x05
                           000004   933 	ar4 = 0x04
                           000003   934 	ar3 = 0x03
                           000002   935 	ar2 = 0x02
                           000001   936 	ar1 = 0x01
                           000000   937 	ar0 = 0x00
                                    938 ;	program.c:175: printf("Setting P1.3 as falling edge detector, enabling PCA interrupt \n\r");
      000169 74r9F            [12]  939 	mov	a,#___str_5
      00016B C0 E0            [24]  940 	push	acc
      00016D 74s00            [12]  941 	mov	a,#(___str_5 >> 8)
      00016F C0 E0            [24]  942 	push	acc
      000171 74 80            [12]  943 	mov	a,#0x80
      000173 C0 E0            [24]  944 	push	acc
      000175 12r00r00         [24]  945 	lcall	_printf
      000178 15 81            [12]  946 	dec	sp
      00017A 15 81            [12]  947 	dec	sp
      00017C 15 81            [12]  948 	dec	sp
                                    949 ;	program.c:176: CCAPM0 = 0x21;
      00017E 75 DA 21         [24]  950 	mov	_CCAPM0,#0x21
                                    951 ;	program.c:177: CR = 1;
                                    952 ;	assignBit
      000181 D2 DE            [12]  953 	setb	_CR
                                    954 ;	program.c:179: }
      000183 22               [24]  955 	ret
                                    956 ;------------------------------------------------------------
                                    957 ;Allocation info for local variables in function 'pca_software_timer'
                                    958 ;------------------------------------------------------------
                                    959 ;	program.c:181: void pca_software_timer()
                                    960 ;	-----------------------------------------
                                    961 ;	 function pca_software_timer
                                    962 ;	-----------------------------------------
      000184                        963 _pca_software_timer:
                                    964 ;	program.c:183: printf("Entering Software Timer Mode \n\r");
      000184 74rE0            [12]  965 	mov	a,#___str_6
      000186 C0 E0            [24]  966 	push	acc
      000188 74s00            [12]  967 	mov	a,#(___str_6 >> 8)
      00018A C0 E0            [24]  968 	push	acc
      00018C 74 80            [12]  969 	mov	a,#0x80
      00018E C0 E0            [24]  970 	push	acc
      000190 12r00r00         [24]  971 	lcall	_printf
      000193 15 81            [12]  972 	dec	sp
      000195 15 81            [12]  973 	dec	sp
      000197 15 81            [12]  974 	dec	sp
                                    975 ;	program.c:184: CCAPM1 = 0x49;
      000199 75 DB 49         [24]  976 	mov	_CCAPM1,#0x49
                                    977 ;	program.c:185: CCAP1L = 255;
      00019C 75 EB FF         [24]  978 	mov	_CCAP1L,#0xff
                                    979 ;	program.c:186: CCAP1H = 255;
      00019F 75 FB FF         [24]  980 	mov	_CCAP1H,#0xff
                                    981 ;	program.c:187: CR = 1;
                                    982 ;	assignBit
      0001A2 D2 DE            [12]  983 	setb	_CR
                                    984 ;	program.c:189: }
      0001A4 22               [24]  985 	ret
                                    986 ;------------------------------------------------------------
                                    987 ;Allocation info for local variables in function 'pca_high_speed'
                                    988 ;------------------------------------------------------------
                                    989 ;	program.c:191: void pca_high_speed()
                                    990 ;	-----------------------------------------
                                    991 ;	 function pca_high_speed
                                    992 ;	-----------------------------------------
      0001A5                        993 _pca_high_speed:
                                    994 ;	program.c:194: printf("Entering High Speed Toggle Mode\n\r");
      0001A5 74r00            [12]  995 	mov	a,#___str_7
      0001A7 C0 E0            [24]  996 	push	acc
      0001A9 74s01            [12]  997 	mov	a,#(___str_7 >> 8)
      0001AB C0 E0            [24]  998 	push	acc
      0001AD 74 80            [12]  999 	mov	a,#0x80
      0001AF C0 E0            [24] 1000 	push	acc
      0001B1 12r00r00         [24] 1001 	lcall	_printf
      0001B4 15 81            [12] 1002 	dec	sp
      0001B6 15 81            [12] 1003 	dec	sp
      0001B8 15 81            [12] 1004 	dec	sp
                                   1005 ;	program.c:195: CCAPM2 = 0x4D;
      0001BA 75 DC 4D         [24] 1006 	mov	_CCAPM2,#0x4d
                                   1007 ;	program.c:196: CCAP2L = 255;
      0001BD 75 EC FF         [24] 1008 	mov	_CCAP2L,#0xff
                                   1009 ;	program.c:197: CCAP2H = 255;
      0001C0 75 FC FF         [24] 1010 	mov	_CCAP2H,#0xff
                                   1011 ;	program.c:198: CR = 1;
                                   1012 ;	assignBit
      0001C3 D2 DE            [12] 1013 	setb	_CR
                                   1014 ;	program.c:200: }
      0001C5 22               [24] 1015 	ret
                                   1016 ;------------------------------------------------------------
                                   1017 ;Allocation info for local variables in function 'pca_pwm'
                                   1018 ;------------------------------------------------------------
                                   1019 ;	program.c:202: void pca_pwm()
                                   1020 ;	-----------------------------------------
                                   1021 ;	 function pca_pwm
                                   1022 ;	-----------------------------------------
      0001C6                       1023 _pca_pwm:
                                   1024 ;	program.c:204: printf("Entering PWM Mode, 25 percent Duty Cycle\n\r");
      0001C6 74r22            [12] 1025 	mov	a,#___str_8
      0001C8 C0 E0            [24] 1026 	push	acc
      0001CA 74s01            [12] 1027 	mov	a,#(___str_8 >> 8)
      0001CC C0 E0            [24] 1028 	push	acc
      0001CE 74 80            [12] 1029 	mov	a,#0x80
      0001D0 C0 E0            [24] 1030 	push	acc
      0001D2 12r00r00         [24] 1031 	lcall	_printf
      0001D5 15 81            [12] 1032 	dec	sp
      0001D7 15 81            [12] 1033 	dec	sp
      0001D9 15 81            [12] 1034 	dec	sp
                                   1035 ;	program.c:205: CCAPM3 = 0x42;
      0001DB 75 DD 42         [24] 1036 	mov	_CCAPM3,#0x42
                                   1037 ;	program.c:206: CCAP3L = 192;
      0001DE 75 ED C0         [24] 1038 	mov	_CCAP3L,#0xc0
                                   1039 ;	program.c:207: CCAP3H = 192;
      0001E1 75 FD C0         [24] 1040 	mov	_CCAP3H,#0xc0
                                   1041 ;	program.c:208: CMOD = CPS0;
      0001E4 75 D9 02         [24] 1042 	mov	_CMOD,#0x02
                                   1043 ;	program.c:209: CR = 1;
                                   1044 ;	assignBit
      0001E7 D2 DE            [12] 1045 	setb	_CR
                                   1046 ;	program.c:211: }
      0001E9 22               [24] 1047 	ret
                                   1048 ;------------------------------------------------------------
                                   1049 ;Allocation info for local variables in function 'pca_watchdog'
                                   1050 ;------------------------------------------------------------
                                   1051 ;	program.c:213: void pca_watchdog()
                                   1052 ;	-----------------------------------------
                                   1053 ;	 function pca_watchdog
                                   1054 ;	-----------------------------------------
      0001EA                       1055 _pca_watchdog:
                                   1056 ;	program.c:215: printf("Enabling Watchdog Timer..\n\r");
      0001EA 74r4D            [12] 1057 	mov	a,#___str_9
      0001EC C0 E0            [24] 1058 	push	acc
      0001EE 74s01            [12] 1059 	mov	a,#(___str_9 >> 8)
      0001F0 C0 E0            [24] 1060 	push	acc
      0001F2 74 80            [12] 1061 	mov	a,#0x80
      0001F4 C0 E0            [24] 1062 	push	acc
      0001F6 12r00r00         [24] 1063 	lcall	_printf
      0001F9 15 81            [12] 1064 	dec	sp
      0001FB 15 81            [12] 1065 	dec	sp
      0001FD 15 81            [12] 1066 	dec	sp
                                   1067 ;	program.c:216: CCAPM4 = 0x48;
      0001FF 75 DE 48         [24] 1068 	mov	_CCAPM4,#0x48
                                   1069 ;	program.c:217: CCAP4L = 255;
      000202 75 EE FF         [24] 1070 	mov	_CCAP4L,#0xff
                                   1071 ;	program.c:218: CCAP4H = 255;
      000205 75 FE FF         [24] 1072 	mov	_CCAP4H,#0xff
                                   1073 ;	program.c:219: CMOD = WDTE;
      000208 75 D9 40         [24] 1074 	mov	_CMOD,#0x40
                                   1075 ;	program.c:220: CR = 1;
                                   1076 ;	assignBit
      00020B D2 DE            [12] 1077 	setb	_CR
                                   1078 ;	program.c:222: }
      00020D 22               [24] 1079 	ret
                                   1080 ;------------------------------------------------------------
                                   1081 ;Allocation info for local variables in function 'pca_idle'
                                   1082 ;------------------------------------------------------------
                                   1083 ;	program.c:223: void pca_idle()
                                   1084 ;	-----------------------------------------
                                   1085 ;	 function pca_idle
                                   1086 ;	-----------------------------------------
      00020E                       1087 _pca_idle:
                                   1088 ;	program.c:225: pca_pwm();
      00020E 12r01rC6         [24] 1089 	lcall	_pca_pwm
                                   1090 ;	program.c:226: printf("Entering Idle, Will Exit on external interrupt 0\n\r");   
      000211 74r69            [12] 1091 	mov	a,#___str_10
      000213 C0 E0            [24] 1092 	push	acc
      000215 74s01            [12] 1093 	mov	a,#(___str_10 >> 8)
      000217 C0 E0            [24] 1094 	push	acc
      000219 74 80            [12] 1095 	mov	a,#0x80
      00021B C0 E0            [24] 1096 	push	acc
      00021D 12r00r00         [24] 1097 	lcall	_printf
      000220 15 81            [12] 1098 	dec	sp
      000222 15 81            [12] 1099 	dec	sp
      000224 15 81            [12] 1100 	dec	sp
                                   1101 ;	program.c:227: EX0 = 1;
                                   1102 ;	assignBit
      000226 D2 A8            [12] 1103 	setb	_EX0
                                   1104 ;	program.c:228: PCON = IDL; 
      000228 75 87 01         [24] 1105 	mov	_PCON,#0x01
                                   1106 ;	program.c:229: printf("Woke up from Idle/Power down, going to main menu \n\r");
      00022B 74r9C            [12] 1107 	mov	a,#___str_11
      00022D C0 E0            [24] 1108 	push	acc
      00022F 74s01            [12] 1109 	mov	a,#(___str_11 >> 8)
      000231 C0 E0            [24] 1110 	push	acc
      000233 74 80            [12] 1111 	mov	a,#0x80
      000235 C0 E0            [24] 1112 	push	acc
      000237 12r00r00         [24] 1113 	lcall	_printf
      00023A 15 81            [12] 1114 	dec	sp
      00023C 15 81            [12] 1115 	dec	sp
      00023E 15 81            [12] 1116 	dec	sp
                                   1117 ;	program.c:230: main_menu();
                                   1118 ;	program.c:231: }
      000240 02r02r93         [24] 1119 	ljmp	_main_menu
                                   1120 ;------------------------------------------------------------
                                   1121 ;Allocation info for local variables in function 'pca_pdown'
                                   1122 ;------------------------------------------------------------
                                   1123 ;	program.c:233: void pca_pdown()
                                   1124 ;	-----------------------------------------
                                   1125 ;	 function pca_pdown
                                   1126 ;	-----------------------------------------
      000243                       1127 _pca_pdown:
                                   1128 ;	program.c:235: pca_pwm();
      000243 12r01rC6         [24] 1129 	lcall	_pca_pwm
                                   1130 ;	program.c:236: printf("Entering power down, Will Exit on external interrupt 0\n\r");   
      000246 74rD0            [12] 1131 	mov	a,#___str_12
      000248 C0 E0            [24] 1132 	push	acc
      00024A 74s01            [12] 1133 	mov	a,#(___str_12 >> 8)
      00024C C0 E0            [24] 1134 	push	acc
      00024E 74 80            [12] 1135 	mov	a,#0x80
      000250 C0 E0            [24] 1136 	push	acc
      000252 12r00r00         [24] 1137 	lcall	_printf
      000255 15 81            [12] 1138 	dec	sp
      000257 15 81            [12] 1139 	dec	sp
      000259 15 81            [12] 1140 	dec	sp
                                   1141 ;	program.c:237: EX0 = 1;
                                   1142 ;	assignBit
      00025B D2 A8            [12] 1143 	setb	_EX0
                                   1144 ;	program.c:238: PCON = PD; 
      00025D 75 87 02         [24] 1145 	mov	_PCON,#0x02
                                   1146 ;	program.c:239: printf("Woke up from Idle/Power down, going to main menu \n\r");
      000260 74r9C            [12] 1147 	mov	a,#___str_11
      000262 C0 E0            [24] 1148 	push	acc
      000264 74s01            [12] 1149 	mov	a,#(___str_11 >> 8)
      000266 C0 E0            [24] 1150 	push	acc
      000268 74 80            [12] 1151 	mov	a,#0x80
      00026A C0 E0            [24] 1152 	push	acc
      00026C 12r00r00         [24] 1153 	lcall	_printf
      00026F 15 81            [12] 1154 	dec	sp
      000271 15 81            [12] 1155 	dec	sp
      000273 15 81            [12] 1156 	dec	sp
                                   1157 ;	program.c:240: main_menu();
                                   1158 ;	program.c:241: }
      000275 02r02r93         [24] 1159 	ljmp	_main_menu
                                   1160 ;------------------------------------------------------------
                                   1161 ;Allocation info for local variables in function 'fclk_lowest'
                                   1162 ;------------------------------------------------------------
                                   1163 ;	program.c:243: void fclk_lowest(){
                                   1164 ;	-----------------------------------------
                                   1165 ;	 function fclk_lowest
                                   1166 ;	-----------------------------------------
      000278                       1167 _fclk_lowest:
                                   1168 ;	program.c:244: printf("Changing Clock prescalar to go to lowest frequency in X2 Mode..\n\r");
      000278 74r09            [12] 1169 	mov	a,#___str_13
      00027A C0 E0            [24] 1170 	push	acc
      00027C 74s02            [12] 1171 	mov	a,#(___str_13 >> 8)
      00027E C0 E0            [24] 1172 	push	acc
      000280 74 80            [12] 1173 	mov	a,#0x80
      000282 C0 E0            [24] 1174 	push	acc
      000284 12r00r00         [24] 1175 	lcall	_printf
      000287 15 81            [12] 1176 	dec	sp
      000289 15 81            [12] 1177 	dec	sp
      00028B 15 81            [12] 1178 	dec	sp
                                   1179 ;	program.c:245: CKRL = 0 ;
      00028D 75 97 00         [24] 1180 	mov	_CKRL,#0x00
                                   1181 ;	program.c:246: main_menu();
                                   1182 ;	program.c:247: }
      000290 02r02r93         [24] 1183 	ljmp	_main_menu
                                   1184 ;------------------------------------------------------------
                                   1185 ;Allocation info for local variables in function 'main_menu'
                                   1186 ;------------------------------------------------------------
                                   1187 ;inp                       Allocated with name '_main_menu_inp_65537_66'
                                   1188 ;------------------------------------------------------------
                                   1189 ;	program.c:249: void main_menu()
                                   1190 ;	-----------------------------------------
                                   1191 ;	 function main_menu
                                   1192 ;	-----------------------------------------
      000293                       1193 _main_menu:
                                   1194 ;	program.c:251: printf("\n\n\r^^^^^^^^^^^^^^^^^^^-MENU-^^^^^^^^^^^^^^^^^^^^^^^^^^ \n\n\r");
      000293 74r4B            [12] 1195 	mov	a,#___str_14
      000295 C0 E0            [24] 1196 	push	acc
      000297 74s02            [12] 1197 	mov	a,#(___str_14 >> 8)
      000299 C0 E0            [24] 1198 	push	acc
      00029B 74 80            [12] 1199 	mov	a,#0x80
      00029D C0 E0            [24] 1200 	push	acc
      00029F 12r00r00         [24] 1201 	lcall	_printf
      0002A2 15 81            [12] 1202 	dec	sp
      0002A4 15 81            [12] 1203 	dec	sp
      0002A6 15 81            [12] 1204 	dec	sp
                                   1205 ;	program.c:252: printf("'H' -> Enter Heap Demo Mode \n\r");
      0002A8 74r86            [12] 1206 	mov	a,#___str_15
      0002AA C0 E0            [24] 1207 	push	acc
      0002AC 74s02            [12] 1208 	mov	a,#(___str_15 >> 8)
      0002AE C0 E0            [24] 1209 	push	acc
      0002B0 74 80            [12] 1210 	mov	a,#0x80
      0002B2 C0 E0            [24] 1211 	push	acc
      0002B4 12r00r00         [24] 1212 	lcall	_printf
      0002B7 15 81            [12] 1213 	dec	sp
      0002B9 15 81            [12] 1214 	dec	sp
      0002BB 15 81            [12] 1215 	dec	sp
                                   1216 ;	program.c:253: printf("'P' -> Enter PCA Demo Mode \n\r");
      0002BD 74rA5            [12] 1217 	mov	a,#___str_16
      0002BF C0 E0            [24] 1218 	push	acc
      0002C1 74s02            [12] 1219 	mov	a,#(___str_16 >> 8)
      0002C3 C0 E0            [24] 1220 	push	acc
      0002C5 74 80            [12] 1221 	mov	a,#0x80
      0002C7 C0 E0            [24] 1222 	push	acc
      0002C9 12r00r00         [24] 1223 	lcall	_printf
      0002CC 15 81            [12] 1224 	dec	sp
      0002CE 15 81            [12] 1225 	dec	sp
      0002D0 15 81            [12] 1226 	dec	sp
                                   1227 ;	program.c:254: printf("'A' -> Assembly C Mix \n\r");
      0002D2 74rC3            [12] 1228 	mov	a,#___str_17
      0002D4 C0 E0            [24] 1229 	push	acc
      0002D6 74s02            [12] 1230 	mov	a,#(___str_17 >> 8)
      0002D8 C0 E0            [24] 1231 	push	acc
      0002DA 74 80            [12] 1232 	mov	a,#0x80
      0002DC C0 E0            [24] 1233 	push	acc
      0002DE 12r00r00         [24] 1234 	lcall	_printf
      0002E1 15 81            [12] 1235 	dec	sp
      0002E3 15 81            [12] 1236 	dec	sp
      0002E5 15 81            [12] 1237 	dec	sp
                                   1238 ;	program.c:257: wrong_choice:
      0002E7                       1239 00101$:
                                   1240 ;	program.c:258: printf("Please make a valid choice \n\r");
      0002E7 74r3B            [12] 1241 	mov	a,#___str_2
      0002E9 C0 E0            [24] 1242 	push	acc
      0002EB 74s00            [12] 1243 	mov	a,#(___str_2 >> 8)
      0002ED C0 E0            [24] 1244 	push	acc
      0002EF 74 80            [12] 1245 	mov	a,#0x80
      0002F1 C0 E0            [24] 1246 	push	acc
      0002F3 12r00r00         [24] 1247 	lcall	_printf
      0002F6 15 81            [12] 1248 	dec	sp
      0002F8 15 81            [12] 1249 	dec	sp
      0002FA 15 81            [12] 1250 	dec	sp
                                   1251 ;	program.c:259: inp = getchar();
      0002FC 12r12r37         [24] 1252 	lcall	_getchar
      0002FF AE 82            [24] 1253 	mov	r6,dpl
      000301 AF 83            [24] 1254 	mov	r7,dph
                                   1255 ;	program.c:260: if (inp == 0x48)
      000303 BE 48 06         [24] 1256 	cjne	r6,#0x48,00109$
      000306 BF 00 03         [24] 1257 	cjne	r7,#0x00,00109$
                                   1258 ;	program.c:261: user_interface_heap();
      000309 02r00r20         [24] 1259 	ljmp	_user_interface_heap
      00030C                       1260 00109$:
                                   1261 ;	program.c:262: else if (inp == 0x50)
      00030C BE 50 06         [24] 1262 	cjne	r6,#0x50,00106$
      00030F BF 00 03         [24] 1263 	cjne	r7,#0x00,00106$
                                   1264 ;	program.c:263: user_interface_PCA();
      000312 02r00r2F         [24] 1265 	ljmp	_user_interface_PCA
      000315                       1266 00106$:
                                   1267 ;	program.c:264: else if (inp == 0x41)
      000315 BE 41 CF         [24] 1268 	cjne	r6,#0x41,00101$
      000318 BF 00 CC         [24] 1269 	cjne	r7,#0x00,00101$
                                   1270 ;	program.c:265: asm_clang();
                                   1271 ;	program.c:267: goto wrong_choice;
                                   1272 ;	program.c:268: }
      00031B 02r03r1E         [24] 1273 	ljmp	_asm_clang
                                   1274 ;------------------------------------------------------------
                                   1275 ;Allocation info for local variables in function 'asm_clang'
                                   1276 ;------------------------------------------------------------
                                   1277 ;num1                      Allocated with name '_asm_clang_num1_65537_68'
                                   1278 ;num2                      Allocated with name '_asm_clang_num2_65538_69'
                                   1279 ;num3                      Allocated with name '_asm_clang_num3_65539_70'
                                   1280 ;------------------------------------------------------------
                                   1281 ;	program.c:270: void asm_clang(){
                                   1282 ;	-----------------------------------------
                                   1283 ;	 function asm_clang
                                   1284 ;	-----------------------------------------
      00031E                       1285 _asm_clang:
                                   1286 ;	program.c:271: printf("\n\r Give param 1, 8bit \n\r");
      00031E 74rDC            [12] 1287 	mov	a,#___str_18
      000320 C0 E0            [24] 1288 	push	acc
      000322 74s02            [12] 1289 	mov	a,#(___str_18 >> 8)
      000324 C0 E0            [24] 1290 	push	acc
      000326 74 80            [12] 1291 	mov	a,#0x80
      000328 C0 E0            [24] 1292 	push	acc
      00032A 12r00r00         [24] 1293 	lcall	_printf
      00032D 15 81            [12] 1294 	dec	sp
      00032F 15 81            [12] 1295 	dec	sp
      000331 15 81            [12] 1296 	dec	sp
                                   1297 ;	program.c:272: unsigned char num1 = get_number(3);
      000333 90 00 03         [24] 1298 	mov	dptr,#0x0003
      000336 12r10rC3         [24] 1299 	lcall	_get_number
      000339 AE 82            [24] 1300 	mov	r6,dpl
                                   1301 ;	program.c:273: printf("\n\r Give param 2, 8bit \n\r");
      00033B C0 06            [24] 1302 	push	ar6
      00033D 74rF5            [12] 1303 	mov	a,#___str_19
      00033F C0 E0            [24] 1304 	push	acc
      000341 74s02            [12] 1305 	mov	a,#(___str_19 >> 8)
      000343 C0 E0            [24] 1306 	push	acc
      000345 74 80            [12] 1307 	mov	a,#0x80
      000347 C0 E0            [24] 1308 	push	acc
      000349 12r00r00         [24] 1309 	lcall	_printf
      00034C 15 81            [12] 1310 	dec	sp
      00034E 15 81            [12] 1311 	dec	sp
      000350 15 81            [12] 1312 	dec	sp
                                   1313 ;	program.c:274: unsigned char num2 = get_number(3);
      000352 90 00 03         [24] 1314 	mov	dptr,#0x0003
      000355 12r10rC3         [24] 1315 	lcall	_get_number
      000358 AD 82            [24] 1316 	mov	r5,dpl
                                   1317 ;	program.c:275: printf("\n\r Give param 3, 8bit \n\r");
      00035A C0 05            [24] 1318 	push	ar5
      00035C 74r0E            [12] 1319 	mov	a,#___str_20
      00035E C0 E0            [24] 1320 	push	acc
      000360 74s03            [12] 1321 	mov	a,#(___str_20 >> 8)
      000362 C0 E0            [24] 1322 	push	acc
      000364 74 80            [12] 1323 	mov	a,#0x80
      000366 C0 E0            [24] 1324 	push	acc
      000368 12r00r00         [24] 1325 	lcall	_printf
      00036B 15 81            [12] 1326 	dec	sp
      00036D 15 81            [12] 1327 	dec	sp
      00036F 15 81            [12] 1328 	dec	sp
                                   1329 ;	program.c:276: unsigned char num3 = get_number(3);
      000371 90 00 03         [24] 1330 	mov	dptr,#0x0003
      000374 12r10rC3         [24] 1331 	lcall	_get_number
      000377 AC 82            [24] 1332 	mov	r4,dpl
      000379 D0 05            [24] 1333 	pop	ar5
      00037B D0 06            [24] 1334 	pop	ar6
                                   1335 ;	program.c:278: printf("\n\r RESULT-> param3<Mod>param2 * param1 = %d \n\r", asmtest(num1,num2,num3));
      00037D 90r00r00         [24] 1336 	mov	dptr,#_asmtest_PARM_2
      000380 ED               [12] 1337 	mov	a,r5
      000381 F0               [24] 1338 	movx	@dptr,a
      000382 90r00r00         [24] 1339 	mov	dptr,#_asmtest_PARM_3
      000385 EC               [12] 1340 	mov	a,r4
      000386 F0               [24] 1341 	movx	@dptr,a
      000387 8E 82            [24] 1342 	mov	dpl,r6
      000389 12r00r00         [24] 1343 	lcall	_asmtest
      00038C AF 82            [24] 1344 	mov	r7,dpl
      00038E 7E 00            [12] 1345 	mov	r6,#0x00
      000390 C0 07            [24] 1346 	push	ar7
      000392 C0 06            [24] 1347 	push	ar6
      000394 74r27            [12] 1348 	mov	a,#___str_21
      000396 C0 E0            [24] 1349 	push	acc
      000398 74s03            [12] 1350 	mov	a,#(___str_21 >> 8)
      00039A C0 E0            [24] 1351 	push	acc
      00039C 74 80            [12] 1352 	mov	a,#0x80
      00039E C0 E0            [24] 1353 	push	acc
      0003A0 12r00r00         [24] 1354 	lcall	_printf
      0003A3 E5 81            [12] 1355 	mov	a,sp
      0003A5 24 FB            [12] 1356 	add	a,#0xfb
      0003A7 F5 81            [12] 1357 	mov	sp,a
                                   1358 ;	program.c:279: }
      0003A9 22               [24] 1359 	ret
                                   1360 ;------------------------------------------------------------
                                   1361 ;Allocation info for local variables in function 'at_clear_all_buffers'
                                   1362 ;------------------------------------------------------------
                                   1363 ;i                         Allocated with name '_at_clear_all_buffers_i_131072_72'
                                   1364 ;------------------------------------------------------------
                                   1365 ;	program.c:287: void at_clear_all_buffers()
                                   1366 ;	-----------------------------------------
                                   1367 ;	 function at_clear_all_buffers
                                   1368 ;	-----------------------------------------
      0003AA                       1369 _at_clear_all_buffers:
                                   1370 ;	program.c:289: DEBUGPORT(0x03);
      0003AA 75 82 03         [24] 1371 	mov	dpl,#0x03
      0003AD 12r12r73         [24] 1372 	lcall	_dataout
                                   1373 ;	program.c:290: for (int i = 0; i < program_stats.total_buffers; i++)
      0003B0 7E 00            [12] 1374 	mov	r6,#0x00
      0003B2 7F 00            [12] 1375 	mov	r7,#0x00
      0003B4                       1376 00103$:
      0003B4 90r00r08         [24] 1377 	mov	dptr,#(_program_stats + 0x0008)
      0003B7 E0               [24] 1378 	movx	a,@dptr
      0003B8 FC               [12] 1379 	mov	r4,a
      0003B9 A3               [24] 1380 	inc	dptr
      0003BA E0               [24] 1381 	movx	a,@dptr
      0003BB FD               [12] 1382 	mov	r5,a
      0003BC C3               [12] 1383 	clr	c
      0003BD EE               [12] 1384 	mov	a,r6
      0003BE 9C               [12] 1385 	subb	a,r4
      0003BF EF               [12] 1386 	mov	a,r7
      0003C0 64 80            [12] 1387 	xrl	a,#0x80
      0003C2 8D F0            [24] 1388 	mov	b,r5
      0003C4 63 F0 80         [24] 1389 	xrl	b,#0x80
      0003C7 95 F0            [12] 1390 	subb	a,b
      0003C9 50 61            [24] 1391 	jnc	00101$
                                   1392 ;	program.c:292: free(buffers_array[i].buffer_start);
      0003CB 90r00r00         [24] 1393 	mov	dptr,#__mulint_PARM_2
      0003CE EE               [12] 1394 	mov	a,r6
      0003CF F0               [24] 1395 	movx	@dptr,a
      0003D0 EF               [12] 1396 	mov	a,r7
      0003D1 A3               [24] 1397 	inc	dptr
      0003D2 F0               [24] 1398 	movx	@dptr,a
      0003D3 90 00 0C         [24] 1399 	mov	dptr,#0x000c
      0003D6 C0 07            [24] 1400 	push	ar7
      0003D8 C0 06            [24] 1401 	push	ar6
      0003DA 12r00r00         [24] 1402 	lcall	__mulint
      0003DD AC 82            [24] 1403 	mov	r4,dpl
      0003DF AD 83            [24] 1404 	mov	r5,dph
      0003E1 EC               [12] 1405 	mov	a,r4
      0003E2 24r0A            [12] 1406 	add	a,#_buffers_array
      0003E4 FC               [12] 1407 	mov	r4,a
      0003E5 ED               [12] 1408 	mov	a,r5
      0003E6 34s00            [12] 1409 	addc	a,#(_buffers_array >> 8)
      0003E8 FD               [12] 1410 	mov	r5,a
      0003E9 8C 82            [24] 1411 	mov	dpl,r4
      0003EB 8D 83            [24] 1412 	mov	dph,r5
      0003ED A3               [24] 1413 	inc	dptr
      0003EE A3               [24] 1414 	inc	dptr
      0003EF E0               [24] 1415 	movx	a,@dptr
      0003F0 FB               [12] 1416 	mov	r3,a
      0003F1 A3               [24] 1417 	inc	dptr
      0003F2 E0               [24] 1418 	movx	a,@dptr
      0003F3 FC               [12] 1419 	mov	r4,a
      0003F4 A3               [24] 1420 	inc	dptr
      0003F5 E0               [24] 1421 	movx	a,@dptr
      0003F6 FD               [12] 1422 	mov	r5,a
      0003F7 8B 82            [24] 1423 	mov	dpl,r3
      0003F9 8C 83            [24] 1424 	mov	dph,r4
      0003FB 8D F0            [24] 1425 	mov	b,r5
      0003FD 12r00r00         [24] 1426 	lcall	_free
      000400 D0 06            [24] 1427 	pop	ar6
      000402 D0 07            [24] 1428 	pop	ar7
                                   1429 ;	program.c:293: printf("Buffer %d Freed ....\n\r", i);
      000404 C0 07            [24] 1430 	push	ar7
      000406 C0 06            [24] 1431 	push	ar6
      000408 C0 06            [24] 1432 	push	ar6
      00040A C0 07            [24] 1433 	push	ar7
      00040C 74r56            [12] 1434 	mov	a,#___str_22
      00040E C0 E0            [24] 1435 	push	acc
      000410 74s03            [12] 1436 	mov	a,#(___str_22 >> 8)
      000412 C0 E0            [24] 1437 	push	acc
      000414 74 80            [12] 1438 	mov	a,#0x80
      000416 C0 E0            [24] 1439 	push	acc
      000418 12r00r00         [24] 1440 	lcall	_printf
      00041B E5 81            [12] 1441 	mov	a,sp
      00041D 24 FB            [12] 1442 	add	a,#0xfb
      00041F F5 81            [12] 1443 	mov	sp,a
      000421 D0 06            [24] 1444 	pop	ar6
      000423 D0 07            [24] 1445 	pop	ar7
                                   1446 ;	program.c:290: for (int i = 0; i < program_stats.total_buffers; i++)
      000425 0E               [12] 1447 	inc	r6
      000426 BE 00 8B         [24] 1448 	cjne	r6,#0x00,00103$
      000429 0F               [12] 1449 	inc	r7
      00042A 80 88            [24] 1450 	sjmp	00103$
      00042C                       1451 00101$:
                                   1452 ;	program.c:295: printf("Let's begin again..\n\r");
      00042C 74r6D            [12] 1453 	mov	a,#___str_23
      00042E C0 E0            [24] 1454 	push	acc
      000430 74s03            [12] 1455 	mov	a,#(___str_23 >> 8)
      000432 C0 E0            [24] 1456 	push	acc
      000434 74 80            [12] 1457 	mov	a,#0x80
      000436 C0 E0            [24] 1458 	push	acc
      000438 12r00r00         [24] 1459 	lcall	_printf
      00043B 15 81            [12] 1460 	dec	sp
      00043D 15 81            [12] 1461 	dec	sp
      00043F 15 81            [12] 1462 	dec	sp
                                   1463 ;	program.c:296: user_interface_heap();
                                   1464 ;	program.c:297: }
      000441 02r00r20         [24] 1465 	ljmp	_user_interface_heap
                                   1466 ;------------------------------------------------------------
                                   1467 ;Allocation info for local variables in function 'delete_buffer'
                                   1468 ;------------------------------------------------------------
                                   1469 ;sloc0                     Allocated with name '_delete_buffer_sloc0_1_0'
                                   1470 ;sloc1                     Allocated with name '_delete_buffer_sloc1_1_0'
                                   1471 ;sloc2                     Allocated with name '_delete_buffer_sloc2_1_0'
                                   1472 ;buff_number               Allocated with name '_delete_buffer_buff_number_65537_75'
                                   1473 ;buff_to_free              Allocated with name '_delete_buffer_buff_to_free_65537_75'
                                   1474 ;buffer_freed_size         Allocated with name '_delete_buffer_buffer_freed_size_65537_75'
                                   1475 ;i                         Allocated with name '_delete_buffer_i_196609_77'
                                   1476 ;------------------------------------------------------------
                                   1477 ;	program.c:304: int delete_buffer()
                                   1478 ;	-----------------------------------------
                                   1479 ;	 function delete_buffer
                                   1480 ;	-----------------------------------------
      000444                       1481 _delete_buffer:
                                   1482 ;	program.c:306: DEBUGPORT(0x04);
      000444 75 82 04         [24] 1483 	mov	dpl,#0x04
      000447 12r12r73         [24] 1484 	lcall	_dataout
                                   1485 ;	program.c:310: get_del_num:
      00044A                       1486 00101$:
                                   1487 ;	program.c:311: printf("\n\rGive Valid Buffer Number to delete(1-%d) in 3 digits\n\r", (program_stats.total_buffers - 1));
      00044A 90r00r08         [24] 1488 	mov	dptr,#(_program_stats + 0x0008)
      00044D E0               [24] 1489 	movx	a,@dptr
      00044E FE               [12] 1490 	mov	r6,a
      00044F A3               [24] 1491 	inc	dptr
      000450 E0               [24] 1492 	movx	a,@dptr
      000451 FF               [12] 1493 	mov	r7,a
      000452 1E               [12] 1494 	dec	r6
      000453 BE FF 01         [24] 1495 	cjne	r6,#0xff,00139$
      000456 1F               [12] 1496 	dec	r7
      000457                       1497 00139$:
      000457 C0 06            [24] 1498 	push	ar6
      000459 C0 07            [24] 1499 	push	ar7
      00045B 74r83            [12] 1500 	mov	a,#___str_24
      00045D C0 E0            [24] 1501 	push	acc
      00045F 74s03            [12] 1502 	mov	a,#(___str_24 >> 8)
      000461 C0 E0            [24] 1503 	push	acc
      000463 74 80            [12] 1504 	mov	a,#0x80
      000465 C0 E0            [24] 1505 	push	acc
      000467 12r00r00         [24] 1506 	lcall	_printf
      00046A E5 81            [12] 1507 	mov	a,sp
      00046C 24 FB            [12] 1508 	add	a,#0xfb
      00046E F5 81            [12] 1509 	mov	sp,a
                                   1510 ;	program.c:312: buff_number = get_number(3);
      000470 90 00 03         [24] 1511 	mov	dptr,#0x0003
      000473 12r10rC3         [24] 1512 	lcall	_get_number
      000476 AE 82            [24] 1513 	mov	r6,dpl
      000478 AF 83            [24] 1514 	mov	r7,dph
                                   1515 ;	program.c:314: if (buff_number > 0 && buff_number < program_stats.total_buffers)
      00047A C3               [12] 1516 	clr	c
      00047B E4               [12] 1517 	clr	a
      00047C 9E               [12] 1518 	subb	a,r6
      00047D 74 80            [12] 1519 	mov	a,#(0x00 ^ 0x80)
      00047F 8F F0            [24] 1520 	mov	b,r7
      000481 63 F0 80         [24] 1521 	xrl	b,#0x80
      000484 95 F0            [12] 1522 	subb	a,b
      000486 50 C2            [24] 1523 	jnc	00101$
      000488 90r00r08         [24] 1524 	mov	dptr,#(_program_stats + 0x0008)
      00048B E0               [24] 1525 	movx	a,@dptr
      00048C FC               [12] 1526 	mov	r4,a
      00048D A3               [24] 1527 	inc	dptr
      00048E E0               [24] 1528 	movx	a,@dptr
      00048F FD               [12] 1529 	mov	r5,a
      000490 C3               [12] 1530 	clr	c
      000491 EE               [12] 1531 	mov	a,r6
      000492 9C               [12] 1532 	subb	a,r4
      000493 EF               [12] 1533 	mov	a,r7
      000494 64 80            [12] 1534 	xrl	a,#0x80
      000496 8D F0            [24] 1535 	mov	b,r5
      000498 63 F0 80         [24] 1536 	xrl	b,#0x80
      00049B 95 F0            [12] 1537 	subb	a,b
      00049D 50 AB            [24] 1538 	jnc	00101$
                                   1539 ;	program.c:318: buff_to_free = buffers_array[buff_number].buffer_start;
      00049F 90r00r00         [24] 1540 	mov	dptr,#__mulint_PARM_2
      0004A2 EE               [12] 1541 	mov	a,r6
      0004A3 F0               [24] 1542 	movx	@dptr,a
      0004A4 EF               [12] 1543 	mov	a,r7
      0004A5 A3               [24] 1544 	inc	dptr
      0004A6 F0               [24] 1545 	movx	@dptr,a
      0004A7 90 00 0C         [24] 1546 	mov	dptr,#0x000c
      0004AA C0 07            [24] 1547 	push	ar7
      0004AC C0 06            [24] 1548 	push	ar6
      0004AE 12r00r00         [24] 1549 	lcall	__mulint
      0004B1 AC 82            [24] 1550 	mov	r4,dpl
      0004B3 AD 83            [24] 1551 	mov	r5,dph
      0004B5 D0 06            [24] 1552 	pop	ar6
      0004B7 D0 07            [24] 1553 	pop	ar7
      0004B9 EC               [12] 1554 	mov	a,r4
      0004BA 24r0A            [12] 1555 	add	a,#_buffers_array
      0004BC FC               [12] 1556 	mov	r4,a
      0004BD ED               [12] 1557 	mov	a,r5
      0004BE 34s00            [12] 1558 	addc	a,#(_buffers_array >> 8)
      0004C0 FD               [12] 1559 	mov	r5,a
      0004C1 8C 82            [24] 1560 	mov	dpl,r4
      0004C3 8D 83            [24] 1561 	mov	dph,r5
      0004C5 A3               [24] 1562 	inc	dptr
      0004C6 A3               [24] 1563 	inc	dptr
      0004C7 E0               [24] 1564 	movx	a,@dptr
      0004C8 F5*04            [12] 1565 	mov	_delete_buffer_sloc2_1_0,a
      0004CA A3               [24] 1566 	inc	dptr
      0004CB E0               [24] 1567 	movx	a,@dptr
      0004CC F5*05            [12] 1568 	mov	(_delete_buffer_sloc2_1_0 + 1),a
      0004CE A3               [24] 1569 	inc	dptr
      0004CF E0               [24] 1570 	movx	a,@dptr
      0004D0 F5*06            [12] 1571 	mov	(_delete_buffer_sloc2_1_0 + 2),a
                                   1572 ;	program.c:319: buffer_freed_size = buffers_array[buff_number].buff_size;
      0004D2 74 08            [12] 1573 	mov	a,#0x08
      0004D4 2C               [12] 1574 	add	a,r4
      0004D5 F5 82            [12] 1575 	mov	dpl,a
      0004D7 E4               [12] 1576 	clr	a
      0004D8 3D               [12] 1577 	addc	a,r5
      0004D9 F5 83            [12] 1578 	mov	dph,a
      0004DB E0               [24] 1579 	movx	a,@dptr
      0004DC FC               [12] 1580 	mov	r4,a
      0004DD A3               [24] 1581 	inc	dptr
      0004DE E0               [24] 1582 	movx	a,@dptr
      0004DF FD               [12] 1583 	mov	r5,a
                                   1584 ;	program.c:321: for (int i = 0; i < (program_stats.total_buffers - 1); i++)
      0004E0 E4               [12] 1585 	clr	a
      0004E1 F5*00            [12] 1586 	mov	_delete_buffer_sloc0_1_0,a
      0004E3 F5*01            [12] 1587 	mov	(_delete_buffer_sloc0_1_0 + 1),a
      0004E5                       1588 00110$:
      0004E5 C0 04            [24] 1589 	push	ar4
      0004E7 C0 05            [24] 1590 	push	ar5
      0004E9 90r00r08         [24] 1591 	mov	dptr,#(_program_stats + 0x0008)
      0004EC E0               [24] 1592 	movx	a,@dptr
      0004ED F5*02            [12] 1593 	mov	_delete_buffer_sloc1_1_0,a
      0004EF A3               [24] 1594 	inc	dptr
      0004F0 E0               [24] 1595 	movx	a,@dptr
      0004F1 F5*03            [12] 1596 	mov	(_delete_buffer_sloc1_1_0 + 1),a
      0004F3 E5*02            [12] 1597 	mov	a,_delete_buffer_sloc1_1_0
      0004F5 24 FF            [12] 1598 	add	a,#0xff
      0004F7 F8               [12] 1599 	mov	r0,a
      0004F8 E5*03            [12] 1600 	mov	a,(_delete_buffer_sloc1_1_0 + 1)
      0004FA 34 FF            [12] 1601 	addc	a,#0xff
      0004FC FD               [12] 1602 	mov	r5,a
      0004FD C3               [12] 1603 	clr	c
      0004FE E5*00            [12] 1604 	mov	a,_delete_buffer_sloc0_1_0
      000500 98               [12] 1605 	subb	a,r0
      000501 E5*01            [12] 1606 	mov	a,(_delete_buffer_sloc0_1_0 + 1)
      000503 64 80            [12] 1607 	xrl	a,#0x80
      000505 8D F0            [24] 1608 	mov	b,r5
      000507 63 F0 80         [24] 1609 	xrl	b,#0x80
      00050A 95 F0            [12] 1610 	subb	a,b
      00050C D0 05            [24] 1611 	pop	ar5
      00050E D0 04            [24] 1612 	pop	ar4
      000510 40 03            [24] 1613 	jc	00142$
      000512 02r05rC3         [24] 1614 	ljmp	00104$
      000515                       1615 00142$:
                                   1616 ;	program.c:323: if (i >= buff_number)
      000515 C3               [12] 1617 	clr	c
      000516 E5*00            [12] 1618 	mov	a,_delete_buffer_sloc0_1_0
      000518 9E               [12] 1619 	subb	a,r6
      000519 E5*01            [12] 1620 	mov	a,(_delete_buffer_sloc0_1_0 + 1)
      00051B 64 80            [12] 1621 	xrl	a,#0x80
      00051D 8F F0            [24] 1622 	mov	b,r7
      00051F 63 F0 80         [24] 1623 	xrl	b,#0x80
      000522 95 F0            [12] 1624 	subb	a,b
      000524 50 03            [24] 1625 	jnc	00143$
      000526 02r05rB8         [24] 1626 	ljmp	00111$
      000529                       1627 00143$:
                                   1628 ;	program.c:325: buffers_array[i + 1].buffer_num = i;
      000529 C0 04            [24] 1629 	push	ar4
      00052B C0 05            [24] 1630 	push	ar5
      00052D 90r00r00         [24] 1631 	mov	dptr,#__mulint_PARM_2
      000530 74 01            [12] 1632 	mov	a,#0x01
      000532 25*00            [12] 1633 	add	a,_delete_buffer_sloc0_1_0
      000534 F0               [24] 1634 	movx	@dptr,a
      000535 E4               [12] 1635 	clr	a
      000536 35*01            [12] 1636 	addc	a,(_delete_buffer_sloc0_1_0 + 1)
      000538 A3               [24] 1637 	inc	dptr
      000539 F0               [24] 1638 	movx	@dptr,a
      00053A 90 00 0C         [24] 1639 	mov	dptr,#0x000c
      00053D C0 07            [24] 1640 	push	ar7
      00053F C0 06            [24] 1641 	push	ar6
      000541 C0 04            [24] 1642 	push	ar4
      000543 12r00r00         [24] 1643 	lcall	__mulint
      000546 A8 82            [24] 1644 	mov	r0,dpl
      000548 AD 83            [24] 1645 	mov	r5,dph
      00054A D0 04            [24] 1646 	pop	ar4
      00054C E8               [12] 1647 	mov	a,r0
      00054D 24r0A            [12] 1648 	add	a,#_buffers_array
      00054F F5 82            [12] 1649 	mov	dpl,a
      000551 ED               [12] 1650 	mov	a,r5
      000552 34s00            [12] 1651 	addc	a,#(_buffers_array >> 8)
      000554 F5 83            [12] 1652 	mov	dph,a
      000556 E5*00            [12] 1653 	mov	a,_delete_buffer_sloc0_1_0
      000558 F0               [24] 1654 	movx	@dptr,a
      000559 E5*01            [12] 1655 	mov	a,(_delete_buffer_sloc0_1_0 + 1)
      00055B A3               [24] 1656 	inc	dptr
      00055C F0               [24] 1657 	movx	@dptr,a
                                   1658 ;	program.c:326: buffers_array[i] = buffers_array[i + 1];
      00055D 90r00r00         [24] 1659 	mov	dptr,#__mulint_PARM_2
      000560 E5*00            [12] 1660 	mov	a,_delete_buffer_sloc0_1_0
      000562 F0               [24] 1661 	movx	@dptr,a
      000563 E5*01            [12] 1662 	mov	a,(_delete_buffer_sloc0_1_0 + 1)
      000565 A3               [24] 1663 	inc	dptr
      000566 F0               [24] 1664 	movx	@dptr,a
      000567 90 00 0C         [24] 1665 	mov	dptr,#0x000c
      00056A C0 05            [24] 1666 	push	ar5
      00056C C0 00            [24] 1667 	push	ar0
      00056E 12r00r00         [24] 1668 	lcall	__mulint
      000571 AB 82            [24] 1669 	mov	r3,dpl
      000573 AC 83            [24] 1670 	mov	r4,dph
      000575 D0 00            [24] 1671 	pop	ar0
      000577 D0 05            [24] 1672 	pop	ar5
      000579 EB               [12] 1673 	mov	a,r3
      00057A 24r0A            [12] 1674 	add	a,#_buffers_array
      00057C FB               [12] 1675 	mov	r3,a
      00057D EC               [12] 1676 	mov	a,r4
      00057E 34s00            [12] 1677 	addc	a,#(_buffers_array >> 8)
      000580 FC               [12] 1678 	mov	r4,a
      000581 7A 00            [12] 1679 	mov	r2,#0x00
      000583 E8               [12] 1680 	mov	a,r0
      000584 24r0A            [12] 1681 	add	a,#_buffers_array
      000586 F8               [12] 1682 	mov	r0,a
      000587 ED               [12] 1683 	mov	a,r5
      000588 34s00            [12] 1684 	addc	a,#(_buffers_array >> 8)
      00058A FD               [12] 1685 	mov	r5,a
      00058B 90r00r00         [24] 1686 	mov	dptr,#___memcpy_PARM_2
      00058E E8               [12] 1687 	mov	a,r0
      00058F F0               [24] 1688 	movx	@dptr,a
      000590 ED               [12] 1689 	mov	a,r5
      000591 A3               [24] 1690 	inc	dptr
      000592 F0               [24] 1691 	movx	@dptr,a
      000593 E4               [12] 1692 	clr	a
      000594 A3               [24] 1693 	inc	dptr
      000595 F0               [24] 1694 	movx	@dptr,a
      000596 90r00r00         [24] 1695 	mov	dptr,#___memcpy_PARM_3
      000599 74 0C            [12] 1696 	mov	a,#0x0c
      00059B F0               [24] 1697 	movx	@dptr,a
      00059C E4               [12] 1698 	clr	a
      00059D A3               [24] 1699 	inc	dptr
      00059E F0               [24] 1700 	movx	@dptr,a
      00059F 8B 82            [24] 1701 	mov	dpl,r3
      0005A1 8C 83            [24] 1702 	mov	dph,r4
      0005A3 8A F0            [24] 1703 	mov	b,r2
      0005A5 C0 05            [24] 1704 	push	ar5
      0005A7 C0 04            [24] 1705 	push	ar4
      0005A9 12r00r00         [24] 1706 	lcall	___memcpy
      0005AC D0 04            [24] 1707 	pop	ar4
      0005AE D0 05            [24] 1708 	pop	ar5
      0005B0 D0 06            [24] 1709 	pop	ar6
      0005B2 D0 07            [24] 1710 	pop	ar7
                                   1711 ;	program.c:339: goto get_del_num;
      0005B4 D0 05            [24] 1712 	pop	ar5
      0005B6 D0 04            [24] 1713 	pop	ar4
                                   1714 ;	program.c:326: buffers_array[i] = buffers_array[i + 1];
      0005B8                       1715 00111$:
                                   1716 ;	program.c:321: for (int i = 0; i < (program_stats.total_buffers - 1); i++)
      0005B8 05*00            [12] 1717 	inc	_delete_buffer_sloc0_1_0
      0005BA E4               [12] 1718 	clr	a
      0005BB B5*00 02         [24] 1719 	cjne	a,_delete_buffer_sloc0_1_0,00144$
      0005BE 05*01            [12] 1720 	inc	(_delete_buffer_sloc0_1_0 + 1)
      0005C0                       1721 00144$:
      0005C0 02r04rE5         [24] 1722 	ljmp	00110$
      0005C3                       1723 00104$:
                                   1724 ;	program.c:330: program_stats.total_buffers -= 1;
      0005C3 E5*02            [12] 1725 	mov	a,_delete_buffer_sloc1_1_0
      0005C5 24 FF            [12] 1726 	add	a,#0xff
      0005C7 FA               [12] 1727 	mov	r2,a
      0005C8 E5*03            [12] 1728 	mov	a,(_delete_buffer_sloc1_1_0 + 1)
      0005CA 34 FF            [12] 1729 	addc	a,#0xff
      0005CC FB               [12] 1730 	mov	r3,a
      0005CD 90r00r08         [24] 1731 	mov	dptr,#(_program_stats + 0x0008)
      0005D0 EA               [12] 1732 	mov	a,r2
      0005D1 F0               [24] 1733 	movx	@dptr,a
      0005D2 EB               [12] 1734 	mov	a,r3
      0005D3 A3               [24] 1735 	inc	dptr
      0005D4 F0               [24] 1736 	movx	@dptr,a
                                   1737 ;	program.c:331: program_stats.allocated_heap -= buffer_freed_size;
      0005D5 90r00r02         [24] 1738 	mov	dptr,#(_program_stats + 0x0002)
      0005D8 E0               [24] 1739 	movx	a,@dptr
      0005D9 FA               [12] 1740 	mov	r2,a
      0005DA A3               [24] 1741 	inc	dptr
      0005DB E0               [24] 1742 	movx	a,@dptr
      0005DC FB               [12] 1743 	mov	r3,a
      0005DD EA               [12] 1744 	mov	a,r2
      0005DE C3               [12] 1745 	clr	c
      0005DF 9C               [12] 1746 	subb	a,r4
      0005E0 FC               [12] 1747 	mov	r4,a
      0005E1 EB               [12] 1748 	mov	a,r3
      0005E2 9D               [12] 1749 	subb	a,r5
      0005E3 FD               [12] 1750 	mov	r5,a
      0005E4 90r00r02         [24] 1751 	mov	dptr,#(_program_stats + 0x0002)
      0005E7 EC               [12] 1752 	mov	a,r4
      0005E8 F0               [24] 1753 	movx	@dptr,a
      0005E9 ED               [12] 1754 	mov	a,r5
      0005EA A3               [24] 1755 	inc	dptr
      0005EB F0               [24] 1756 	movx	@dptr,a
                                   1757 ;	program.c:333: free(buff_to_free);
      0005EC AB*04            [24] 1758 	mov	r3,_delete_buffer_sloc2_1_0
      0005EE AC*05            [24] 1759 	mov	r4,(_delete_buffer_sloc2_1_0 + 1)
      0005F0 AD*06            [24] 1760 	mov	r5,(_delete_buffer_sloc2_1_0 + 2)
      0005F2 8B 82            [24] 1761 	mov	dpl,r3
      0005F4 8C 83            [24] 1762 	mov	dph,r4
      0005F6 8D F0            [24] 1763 	mov	b,r5
      0005F8 C0 07            [24] 1764 	push	ar7
      0005FA C0 06            [24] 1765 	push	ar6
      0005FC 12r00r00         [24] 1766 	lcall	_free
      0005FF D0 06            [24] 1767 	pop	ar6
      000601 D0 07            [24] 1768 	pop	ar7
                                   1769 ;	program.c:334: printf("Buffer %d Successfully Deleted.. \n\r", buff_number);
      000603 C0 06            [24] 1770 	push	ar6
      000605 C0 07            [24] 1771 	push	ar7
      000607 74rBC            [12] 1772 	mov	a,#___str_25
      000609 C0 E0            [24] 1773 	push	acc
      00060B 74s03            [12] 1774 	mov	a,#(___str_25 >> 8)
      00060D C0 E0            [24] 1775 	push	acc
      00060F 74 80            [12] 1776 	mov	a,#0x80
      000611 C0 E0            [24] 1777 	push	acc
      000613 12r00r00         [24] 1778 	lcall	_printf
      000616 E5 81            [12] 1779 	mov	a,sp
      000618 24 FB            [12] 1780 	add	a,#0xfb
      00061A F5 81            [12] 1781 	mov	sp,a
                                   1782 ;	program.c:335: return 0;
      00061C 90 00 00         [24] 1783 	mov	dptr,#0x0000
                                   1784 ;	program.c:339: goto get_del_num;
                                   1785 ;	program.c:341: }
      00061F 22               [24] 1786 	ret
                                   1787 ;------------------------------------------------------------
                                   1788 ;Allocation info for local variables in function 'print_pca_menu'
                                   1789 ;------------------------------------------------------------
                                   1790 ;	program.c:348: void print_pca_menu()
                                   1791 ;	-----------------------------------------
                                   1792 ;	 function print_pca_menu
                                   1793 ;	-----------------------------------------
      000620                       1794 _print_pca_menu:
                                   1795 ;	program.c:350: DEBUGPORT(0x55);
      000620 75 82 55         [24] 1796 	mov	dpl,#0x55
      000623 12r12r73         [24] 1797 	lcall	_dataout
                                   1798 ;	program.c:351: printf("\n\n\r^^^^^^^^^^^^^^^^^^^-PCA-MENU-^^^^^^^^^^^^^^^^^^^^^^^^^^ \n\n\r");
      000626 74rE0            [12] 1799 	mov	a,#___str_26
      000628 C0 E0            [24] 1800 	push	acc
      00062A 74s03            [12] 1801 	mov	a,#(___str_26 >> 8)
      00062C C0 E0            [24] 1802 	push	acc
      00062E 74 80            [12] 1803 	mov	a,#0x80
      000630 C0 E0            [24] 1804 	push	acc
      000632 12r00r00         [24] 1805 	lcall	_printf
      000635 15 81            [12] 1806 	dec	sp
      000637 15 81            [12] 1807 	dec	sp
      000639 15 81            [12] 1808 	dec	sp
                                   1809 ;	program.c:352: printf("'F' -> Falling Edge Capture Mode\n\r");
      00063B 74r1F            [12] 1810 	mov	a,#___str_27
      00063D C0 E0            [24] 1811 	push	acc
      00063F 74s04            [12] 1812 	mov	a,#(___str_27 >> 8)
      000641 C0 E0            [24] 1813 	push	acc
      000643 74 80            [12] 1814 	mov	a,#0x80
      000645 C0 E0            [24] 1815 	push	acc
      000647 12r00r00         [24] 1816 	lcall	_printf
      00064A 15 81            [12] 1817 	dec	sp
      00064C 15 81            [12] 1818 	dec	sp
      00064E 15 81            [12] 1819 	dec	sp
                                   1820 ;	program.c:353: printf("'S' -> Software Timer Mode\n\r");
      000650 74r42            [12] 1821 	mov	a,#___str_28
      000652 C0 E0            [24] 1822 	push	acc
      000654 74s04            [12] 1823 	mov	a,#(___str_28 >> 8)
      000656 C0 E0            [24] 1824 	push	acc
      000658 74 80            [12] 1825 	mov	a,#0x80
      00065A C0 E0            [24] 1826 	push	acc
      00065C 12r00r00         [24] 1827 	lcall	_printf
      00065F 15 81            [12] 1828 	dec	sp
      000661 15 81            [12] 1829 	dec	sp
      000663 15 81            [12] 1830 	dec	sp
                                   1831 ;	program.c:354: printf("'H' -> High Speed Output Mode\n\r");
      000665 74r5F            [12] 1832 	mov	a,#___str_29
      000667 C0 E0            [24] 1833 	push	acc
      000669 74s04            [12] 1834 	mov	a,#(___str_29 >> 8)
      00066B C0 E0            [24] 1835 	push	acc
      00066D 74 80            [12] 1836 	mov	a,#0x80
      00066F C0 E0            [24] 1837 	push	acc
      000671 12r00r00         [24] 1838 	lcall	_printf
      000674 15 81            [12] 1839 	dec	sp
      000676 15 81            [12] 1840 	dec	sp
      000678 15 81            [12] 1841 	dec	sp
                                   1842 ;	program.c:355: printf("'P' -> PWM Mode \n\r");
      00067A 74r7F            [12] 1843 	mov	a,#___str_30
      00067C C0 E0            [24] 1844 	push	acc
      00067E 74s04            [12] 1845 	mov	a,#(___str_30 >> 8)
      000680 C0 E0            [24] 1846 	push	acc
      000682 74 80            [12] 1847 	mov	a,#0x80
      000684 C0 E0            [24] 1848 	push	acc
      000686 12r00r00         [24] 1849 	lcall	_printf
      000689 15 81            [12] 1850 	dec	sp
      00068B 15 81            [12] 1851 	dec	sp
      00068D 15 81            [12] 1852 	dec	sp
                                   1853 ;	program.c:356: printf("'W' -> Watchdog Timer Mode\n\r");
      00068F 74r92            [12] 1854 	mov	a,#___str_31
      000691 C0 E0            [24] 1855 	push	acc
      000693 74s04            [12] 1856 	mov	a,#(___str_31 >> 8)
      000695 C0 E0            [24] 1857 	push	acc
      000697 74 80            [12] 1858 	mov	a,#0x80
      000699 C0 E0            [24] 1859 	push	acc
      00069B 12r00r00         [24] 1860 	lcall	_printf
      00069E 15 81            [12] 1861 	dec	sp
      0006A0 15 81            [12] 1862 	dec	sp
      0006A2 15 81            [12] 1863 	dec	sp
                                   1864 ;	program.c:357: printf("'I' -> Idle Mode with PWM\n\r");
      0006A4 74rAF            [12] 1865 	mov	a,#___str_32
      0006A6 C0 E0            [24] 1866 	push	acc
      0006A8 74s04            [12] 1867 	mov	a,#(___str_32 >> 8)
      0006AA C0 E0            [24] 1868 	push	acc
      0006AC 74 80            [12] 1869 	mov	a,#0x80
      0006AE C0 E0            [24] 1870 	push	acc
      0006B0 12r00r00         [24] 1871 	lcall	_printf
      0006B3 15 81            [12] 1872 	dec	sp
      0006B5 15 81            [12] 1873 	dec	sp
      0006B7 15 81            [12] 1874 	dec	sp
                                   1875 ;	program.c:358: printf("'L' -> Change Prescalar to lowest frequency\n\r");
      0006B9 74rCB            [12] 1876 	mov	a,#___str_33
      0006BB C0 E0            [24] 1877 	push	acc
      0006BD 74s04            [12] 1878 	mov	a,#(___str_33 >> 8)
      0006BF C0 E0            [24] 1879 	push	acc
      0006C1 74 80            [12] 1880 	mov	a,#0x80
      0006C3 C0 E0            [24] 1881 	push	acc
      0006C5 12r00r00         [24] 1882 	lcall	_printf
      0006C8 15 81            [12] 1883 	dec	sp
      0006CA 15 81            [12] 1884 	dec	sp
      0006CC 15 81            [12] 1885 	dec	sp
                                   1886 ;	program.c:359: printf("'D' -> Power Down Mode\n\n\r");
      0006CE 74rF9            [12] 1887 	mov	a,#___str_34
      0006D0 C0 E0            [24] 1888 	push	acc
      0006D2 74s04            [12] 1889 	mov	a,#(___str_34 >> 8)
      0006D4 C0 E0            [24] 1890 	push	acc
      0006D6 74 80            [12] 1891 	mov	a,#0x80
      0006D8 C0 E0            [24] 1892 	push	acc
      0006DA 12r00r00         [24] 1893 	lcall	_printf
      0006DD 15 81            [12] 1894 	dec	sp
      0006DF 15 81            [12] 1895 	dec	sp
      0006E1 15 81            [12] 1896 	dec	sp
                                   1897 ;	program.c:361: printf("'M' -> Go to Main Menu \n\n\r");
      0006E3 74r13            [12] 1898 	mov	a,#___str_35
      0006E5 C0 E0            [24] 1899 	push	acc
      0006E7 74s05            [12] 1900 	mov	a,#(___str_35 >> 8)
      0006E9 C0 E0            [24] 1901 	push	acc
      0006EB 74 80            [12] 1902 	mov	a,#0x80
      0006ED C0 E0            [24] 1903 	push	acc
      0006EF 12r00r00         [24] 1904 	lcall	_printf
      0006F2 15 81            [12] 1905 	dec	sp
      0006F4 15 81            [12] 1906 	dec	sp
      0006F6 15 81            [12] 1907 	dec	sp
                                   1908 ;	program.c:362: }
      0006F8 22               [24] 1909 	ret
                                   1910 ;------------------------------------------------------------
                                   1911 ;Allocation info for local variables in function 'print_heap_menu'
                                   1912 ;------------------------------------------------------------
                                   1913 ;	program.c:369: void print_heap_menu()
                                   1914 ;	-----------------------------------------
                                   1915 ;	 function print_heap_menu
                                   1916 ;	-----------------------------------------
      0006F9                       1917 _print_heap_menu:
                                   1918 ;	program.c:371: DEBUGPORT(0x05);
      0006F9 75 82 05         [24] 1919 	mov	dpl,#0x05
      0006FC 12r12r73         [24] 1920 	lcall	_dataout
                                   1921 ;	program.c:372: printf("\n\n\r^^^^^^^^^^^^^^^^^^^-HEAP-MENU-^^^^^^^^^^^^^^^^^^^^^^^^^^ \n\n\r");
      0006FF 74r2E            [12] 1922 	mov	a,#___str_36
      000701 C0 E0            [24] 1923 	push	acc
      000703 74s05            [12] 1924 	mov	a,#(___str_36 >> 8)
      000705 C0 E0            [24] 1925 	push	acc
      000707 74 80            [12] 1926 	mov	a,#0x80
      000709 C0 E0            [24] 1927 	push	acc
      00070B 12r00r00         [24] 1928 	lcall	_printf
      00070E 15 81            [12] 1929 	dec	sp
      000710 15 81            [12] 1930 	dec	sp
      000712 15 81            [12] 1931 	dec	sp
                                   1932 ;	program.c:373: printf("You can enter characters or use commands from below \n\r");
      000714 74r6E            [12] 1933 	mov	a,#___str_37
      000716 C0 E0            [24] 1934 	push	acc
      000718 74s05            [12] 1935 	mov	a,#(___str_37 >> 8)
      00071A C0 E0            [24] 1936 	push	acc
      00071C 74 80            [12] 1937 	mov	a,#0x80
      00071E C0 E0            [24] 1938 	push	acc
      000720 12r00r00         [24] 1939 	lcall	_printf
      000723 15 81            [12] 1940 	dec	sp
      000725 15 81            [12] 1941 	dec	sp
      000727 15 81            [12] 1942 	dec	sp
                                   1943 ;	program.c:374: printf("'?' -> Show heap status, dump & clear Buffer 0 \n\r");
      000729 74rA5            [12] 1944 	mov	a,#___str_38
      00072B C0 E0            [24] 1945 	push	acc
      00072D 74s05            [12] 1946 	mov	a,#(___str_38 >> 8)
      00072F C0 E0            [24] 1947 	push	acc
      000731 74 80            [12] 1948 	mov	a,#0x80
      000733 C0 E0            [24] 1949 	push	acc
      000735 12r00r00         [24] 1950 	lcall	_printf
      000738 15 81            [12] 1951 	dec	sp
      00073A 15 81            [12] 1952 	dec	sp
      00073C 15 81            [12] 1953 	dec	sp
                                   1954 ;	program.c:375: printf("'+' -> Add a new Buffer\n\r");
      00073E 74rD7            [12] 1955 	mov	a,#___str_39
      000740 C0 E0            [24] 1956 	push	acc
      000742 74s05            [12] 1957 	mov	a,#(___str_39 >> 8)
      000744 C0 E0            [24] 1958 	push	acc
      000746 74 80            [12] 1959 	mov	a,#0x80
      000748 C0 E0            [24] 1960 	push	acc
      00074A 12r00r00         [24] 1961 	lcall	_printf
      00074D 15 81            [12] 1962 	dec	sp
      00074F 15 81            [12] 1963 	dec	sp
      000751 15 81            [12] 1964 	dec	sp
                                   1965 ;	program.c:376: printf("'-' -> Delete existing Buffer\n\r");
      000753 74rF1            [12] 1966 	mov	a,#___str_40
      000755 C0 E0            [24] 1967 	push	acc
      000757 74s05            [12] 1968 	mov	a,#(___str_40 >> 8)
      000759 C0 E0            [24] 1969 	push	acc
      00075B 74 80            [12] 1970 	mov	a,#0x80
      00075D C0 E0            [24] 1971 	push	acc
      00075F 12r00r00         [24] 1972 	lcall	_printf
      000762 15 81            [12] 1973 	dec	sp
      000764 15 81            [12] 1974 	dec	sp
      000766 15 81            [12] 1975 	dec	sp
                                   1976 ;	program.c:377: printf("'=' -> Dump Buffer 0 in hex\n\r");
      000768 74r11            [12] 1977 	mov	a,#___str_41
      00076A C0 E0            [24] 1978 	push	acc
      00076C 74s06            [12] 1979 	mov	a,#(___str_41 >> 8)
      00076E C0 E0            [24] 1980 	push	acc
      000770 74 80            [12] 1981 	mov	a,#0x80
      000772 C0 E0            [24] 1982 	push	acc
      000774 12r00r00         [24] 1983 	lcall	_printf
      000777 15 81            [12] 1984 	dec	sp
      000779 15 81            [12] 1985 	dec	sp
      00077B 15 81            [12] 1986 	dec	sp
                                   1987 ;	program.c:378: printf("'@' -> Free all Heap & begin again\n\n\r");
      00077D 74r2F            [12] 1988 	mov	a,#___str_42
      00077F C0 E0            [24] 1989 	push	acc
      000781 74s06            [12] 1990 	mov	a,#(___str_42 >> 8)
      000783 C0 E0            [24] 1991 	push	acc
      000785 74 80            [12] 1992 	mov	a,#0x80
      000787 C0 E0            [24] 1993 	push	acc
      000789 12r00r00         [24] 1994 	lcall	_printf
      00078C 15 81            [12] 1995 	dec	sp
      00078E 15 81            [12] 1996 	dec	sp
      000790 15 81            [12] 1997 	dec	sp
                                   1998 ;	program.c:379: printf("'M' -> Go to Main Menu \n\n\r");
      000792 74r13            [12] 1999 	mov	a,#___str_35
      000794 C0 E0            [24] 2000 	push	acc
      000796 74s05            [12] 2001 	mov	a,#(___str_35 >> 8)
      000798 C0 E0            [24] 2002 	push	acc
      00079A 74 80            [12] 2003 	mov	a,#0x80
      00079C C0 E0            [24] 2004 	push	acc
      00079E 12r00r00         [24] 2005 	lcall	_printf
      0007A1 15 81            [12] 2006 	dec	sp
      0007A3 15 81            [12] 2007 	dec	sp
      0007A5 15 81            [12] 2008 	dec	sp
                                   2009 ;	program.c:380: }
      0007A7 22               [24] 2010 	ret
                                   2011 ;------------------------------------------------------------
                                   2012 ;Allocation info for local variables in function 'create_new_buffer'
                                   2013 ;------------------------------------------------------------
                                   2014 ;buff_size                 Allocated with name '_create_new_buffer_buff_size_65537_84'
                                   2015 ;buff                      Allocated with name '_create_new_buffer_buff_65537_84'
                                   2016 ;------------------------------------------------------------
                                   2017 ;	program.c:388: int create_new_buffer()
                                   2018 ;	-----------------------------------------
                                   2019 ;	 function create_new_buffer
                                   2020 ;	-----------------------------------------
      0007A8                       2021 _create_new_buffer:
                                   2022 ;	program.c:390: DEBUGPORT(0x06);
      0007A8 75 82 06         [24] 2023 	mov	dpl,#0x06
      0007AB 12r12r73         [24] 2024 	lcall	_dataout
                                   2025 ;	program.c:393: if (program_stats.allocated_heap == program_stats.total_heap_size)
      0007AE 90r00r02         [24] 2026 	mov	dptr,#(_program_stats + 0x0002)
      0007B1 E0               [24] 2027 	movx	a,@dptr
      0007B2 FE               [12] 2028 	mov	r6,a
      0007B3 A3               [24] 2029 	inc	dptr
      0007B4 E0               [24] 2030 	movx	a,@dptr
      0007B5 FF               [12] 2031 	mov	r7,a
      0007B6 90r00r00         [24] 2032 	mov	dptr,#_program_stats
      0007B9 E0               [24] 2033 	movx	a,@dptr
      0007BA FC               [12] 2034 	mov	r4,a
      0007BB A3               [24] 2035 	inc	dptr
      0007BC E0               [24] 2036 	movx	a,@dptr
      0007BD FD               [12] 2037 	mov	r5,a
      0007BE EE               [12] 2038 	mov	a,r6
      0007BF B5 04 07         [24] 2039 	cjne	a,ar4,00133$
      0007C2 EF               [12] 2040 	mov	a,r7
      0007C3 B5 05 03         [24] 2041 	cjne	a,ar5,00133$
      0007C6 02r09r09         [24] 2042 	ljmp	00111$
      0007C9                       2043 00133$:
                                   2044 ;	program.c:396: get_new_buff:
      0007C9                       2045 00103$:
                                   2046 ;	program.c:397: printf("\n\rGive Valid Buffer Size(030-300):");
      0007C9 74r55            [12] 2047 	mov	a,#___str_43
      0007CB C0 E0            [24] 2048 	push	acc
      0007CD 74s06            [12] 2049 	mov	a,#(___str_43 >> 8)
      0007CF C0 E0            [24] 2050 	push	acc
      0007D1 74 80            [12] 2051 	mov	a,#0x80
      0007D3 C0 E0            [24] 2052 	push	acc
      0007D5 12r00r00         [24] 2053 	lcall	_printf
      0007D8 15 81            [12] 2054 	dec	sp
      0007DA 15 81            [12] 2055 	dec	sp
      0007DC 15 81            [12] 2056 	dec	sp
                                   2057 ;	program.c:398: buff_size = get_number(3);
      0007DE 90 00 03         [24] 2058 	mov	dptr,#0x0003
      0007E1 12r10rC3         [24] 2059 	lcall	_get_number
      0007E4 AE 82            [24] 2060 	mov	r6,dpl
      0007E6 AF 83            [24] 2061 	mov	r7,dph
                                   2062 ;	program.c:399: if (buff_size >= 30 && buff_size <= 300)
      0007E8 C3               [12] 2063 	clr	c
      0007E9 EE               [12] 2064 	mov	a,r6
      0007EA 94 1E            [12] 2065 	subb	a,#0x1e
      0007EC EF               [12] 2066 	mov	a,r7
      0007ED 64 80            [12] 2067 	xrl	a,#0x80
      0007EF 94 80            [12] 2068 	subb	a,#0x80
      0007F1 40 D6            [24] 2069 	jc	00103$
      0007F3 74 2C            [12] 2070 	mov	a,#0x2c
      0007F5 9E               [12] 2071 	subb	a,r6
      0007F6 74 81            [12] 2072 	mov	a,#(0x01 ^ 0x80)
      0007F8 8F F0            [24] 2073 	mov	b,r7
      0007FA 63 F0 80         [24] 2074 	xrl	b,#0x80
      0007FD 95 F0            [12] 2075 	subb	a,b
      0007FF 40 C8            [24] 2076 	jc	00103$
                                   2077 ;	program.c:401: buff.buffer_start = malloc(buff_size);
      000801 8E 82            [24] 2078 	mov	dpl,r6
      000803 8F 83            [24] 2079 	mov	dph,r7
      000805 C0 07            [24] 2080 	push	ar7
      000807 C0 06            [24] 2081 	push	ar6
      000809 12r00r00         [24] 2082 	lcall	_malloc
      00080C AC 82            [24] 2083 	mov	r4,dpl
      00080E AD 83            [24] 2084 	mov	r5,dph
      000810 D0 06            [24] 2085 	pop	ar6
      000812 D0 07            [24] 2086 	pop	ar7
      000814 7B 00            [12] 2087 	mov	r3,#0x00
      000816 90r01r38         [24] 2088 	mov	dptr,#(_create_new_buffer_buff_65537_84 + 0x0002)
      000819 EC               [12] 2089 	mov	a,r4
      00081A F0               [24] 2090 	movx	@dptr,a
      00081B ED               [12] 2091 	mov	a,r5
      00081C A3               [24] 2092 	inc	dptr
      00081D F0               [24] 2093 	movx	@dptr,a
      00081E EB               [12] 2094 	mov	a,r3
      00081F A3               [24] 2095 	inc	dptr
      000820 F0               [24] 2096 	movx	@dptr,a
                                   2097 ;	program.c:402: if (buff.buffer_start == NULL)
      000821 EC               [12] 2098 	mov	a,r4
      000822 4D               [12] 2099 	orl	a,r5
      000823 70 18            [24] 2100 	jnz	00105$
                                   2101 ;	program.c:404: printf("Failed, give smaller buffer\n\r");
      000825 74r78            [12] 2102 	mov	a,#___str_44
      000827 C0 E0            [24] 2103 	push	acc
      000829 74s06            [12] 2104 	mov	a,#(___str_44 >> 8)
      00082B C0 E0            [24] 2105 	push	acc
      00082D 74 80            [12] 2106 	mov	a,#0x80
      00082F C0 E0            [24] 2107 	push	acc
      000831 12r00r00         [24] 2108 	lcall	_printf
      000834 15 81            [12] 2109 	dec	sp
      000836 15 81            [12] 2110 	dec	sp
      000838 15 81            [12] 2111 	dec	sp
      00083A 02r09r05         [24] 2112 	ljmp	00106$
      00083D                       2113 00105$:
                                   2114 ;	program.c:408: printf("\n\n\r####SUCCESS, BUFFER Created####\n\n\r");
      00083D C0 07            [24] 2115 	push	ar7
      00083F C0 06            [24] 2116 	push	ar6
      000841 74r96            [12] 2117 	mov	a,#___str_45
      000843 C0 E0            [24] 2118 	push	acc
      000845 74s06            [12] 2119 	mov	a,#(___str_45 >> 8)
      000847 C0 E0            [24] 2120 	push	acc
      000849 74 80            [12] 2121 	mov	a,#0x80
      00084B C0 E0            [24] 2122 	push	acc
      00084D 12r00r00         [24] 2123 	lcall	_printf
      000850 15 81            [12] 2124 	dec	sp
      000852 15 81            [12] 2125 	dec	sp
      000854 15 81            [12] 2126 	dec	sp
      000856 D0 06            [24] 2127 	pop	ar6
      000858 D0 07            [24] 2128 	pop	ar7
                                   2129 ;	program.c:410: program_stats.allocated_heap += buff_size;
      00085A 90r00r02         [24] 2130 	mov	dptr,#(_program_stats + 0x0002)
      00085D E0               [24] 2131 	movx	a,@dptr
      00085E FC               [12] 2132 	mov	r4,a
      00085F A3               [24] 2133 	inc	dptr
      000860 E0               [24] 2134 	movx	a,@dptr
      000861 FD               [12] 2135 	mov	r5,a
      000862 EE               [12] 2136 	mov	a,r6
      000863 2C               [12] 2137 	add	a,r4
      000864 FC               [12] 2138 	mov	r4,a
      000865 EF               [12] 2139 	mov	a,r7
      000866 3D               [12] 2140 	addc	a,r5
      000867 FD               [12] 2141 	mov	r5,a
      000868 90r00r02         [24] 2142 	mov	dptr,#(_program_stats + 0x0002)
      00086B EC               [12] 2143 	mov	a,r4
      00086C F0               [24] 2144 	movx	@dptr,a
      00086D ED               [12] 2145 	mov	a,r5
      00086E A3               [24] 2146 	inc	dptr
      00086F F0               [24] 2147 	movx	@dptr,a
                                   2148 ;	program.c:411: buff.buff_size = buff_size;
      000870 90r01r3E         [24] 2149 	mov	dptr,#(_create_new_buffer_buff_65537_84 + 0x0008)
      000873 EE               [12] 2150 	mov	a,r6
      000874 F0               [24] 2151 	movx	@dptr,a
      000875 EF               [12] 2152 	mov	a,r7
      000876 A3               [24] 2153 	inc	dptr
      000877 F0               [24] 2154 	movx	@dptr,a
                                   2155 ;	program.c:412: buff.buffer_num = program_stats.total_buffers;
      000878 90r00r08         [24] 2156 	mov	dptr,#(_program_stats + 0x0008)
      00087B E0               [24] 2157 	movx	a,@dptr
      00087C FC               [12] 2158 	mov	r4,a
      00087D A3               [24] 2159 	inc	dptr
      00087E E0               [24] 2160 	movx	a,@dptr
      00087F FD               [12] 2161 	mov	r5,a
      000880 90r01r36         [24] 2162 	mov	dptr,#_create_new_buffer_buff_65537_84
      000883 EC               [12] 2163 	mov	a,r4
      000884 F0               [24] 2164 	movx	@dptr,a
      000885 ED               [12] 2165 	mov	a,r5
      000886 A3               [24] 2166 	inc	dptr
      000887 F0               [24] 2167 	movx	@dptr,a
                                   2168 ;	program.c:413: buff.buffer_end = buff.buffer_start + buff_size;
      000888 90r01r38         [24] 2169 	mov	dptr,#(_create_new_buffer_buff_65537_84 + 0x0002)
      00088B E0               [24] 2170 	movx	a,@dptr
      00088C FB               [12] 2171 	mov	r3,a
      00088D A3               [24] 2172 	inc	dptr
      00088E E0               [24] 2173 	movx	a,@dptr
      00088F FC               [12] 2174 	mov	r4,a
      000890 A3               [24] 2175 	inc	dptr
      000891 E0               [24] 2176 	movx	a,@dptr
      000892 FD               [12] 2177 	mov	r5,a
      000893 EE               [12] 2178 	mov	a,r6
      000894 2B               [12] 2179 	add	a,r3
      000895 FE               [12] 2180 	mov	r6,a
      000896 EF               [12] 2181 	mov	a,r7
      000897 3C               [12] 2182 	addc	a,r4
      000898 FF               [12] 2183 	mov	r7,a
      000899 8D 02            [24] 2184 	mov	ar2,r5
      00089B 90r01r3B         [24] 2185 	mov	dptr,#(_create_new_buffer_buff_65537_84 + 0x0005)
      00089E EE               [12] 2186 	mov	a,r6
      00089F F0               [24] 2187 	movx	@dptr,a
      0008A0 EF               [12] 2188 	mov	a,r7
      0008A1 A3               [24] 2189 	inc	dptr
      0008A2 F0               [24] 2190 	movx	@dptr,a
      0008A3 EA               [12] 2191 	mov	a,r2
      0008A4 A3               [24] 2192 	inc	dptr
      0008A5 F0               [24] 2193 	movx	@dptr,a
                                   2194 ;	program.c:414: buff.num_char = 0;
      0008A6 90r01r40         [24] 2195 	mov	dptr,#(_create_new_buffer_buff_65537_84 + 0x000a)
      0008A9 E4               [12] 2196 	clr	a
      0008AA F0               [24] 2197 	movx	@dptr,a
      0008AB A3               [24] 2198 	inc	dptr
      0008AC F0               [24] 2199 	movx	@dptr,a
                                   2200 ;	program.c:416: buffers_array[program_stats.total_buffers] = buff;
      0008AD 90r00r08         [24] 2201 	mov	dptr,#(_program_stats + 0x0008)
      0008B0 E0               [24] 2202 	movx	a,@dptr
      0008B1 FE               [12] 2203 	mov	r6,a
      0008B2 A3               [24] 2204 	inc	dptr
      0008B3 E0               [24] 2205 	movx	a,@dptr
      0008B4 FF               [12] 2206 	mov	r7,a
      0008B5 90r00r00         [24] 2207 	mov	dptr,#__mulint_PARM_2
      0008B8 EE               [12] 2208 	mov	a,r6
      0008B9 F0               [24] 2209 	movx	@dptr,a
      0008BA EF               [12] 2210 	mov	a,r7
      0008BB A3               [24] 2211 	inc	dptr
      0008BC F0               [24] 2212 	movx	@dptr,a
      0008BD 90 00 0C         [24] 2213 	mov	dptr,#0x000c
      0008C0 12r00r00         [24] 2214 	lcall	__mulint
      0008C3 AE 82            [24] 2215 	mov	r6,dpl
      0008C5 AF 83            [24] 2216 	mov	r7,dph
      0008C7 EE               [12] 2217 	mov	a,r6
      0008C8 24r0A            [12] 2218 	add	a,#_buffers_array
      0008CA FE               [12] 2219 	mov	r6,a
      0008CB EF               [12] 2220 	mov	a,r7
      0008CC 34s00            [12] 2221 	addc	a,#(_buffers_array >> 8)
      0008CE FF               [12] 2222 	mov	r7,a
      0008CF 7D 00            [12] 2223 	mov	r5,#0x00
      0008D1 90r00r00         [24] 2224 	mov	dptr,#___memcpy_PARM_2
      0008D4 74r36            [12] 2225 	mov	a,#_create_new_buffer_buff_65537_84
      0008D6 F0               [24] 2226 	movx	@dptr,a
      0008D7 74s01            [12] 2227 	mov	a,#(_create_new_buffer_buff_65537_84 >> 8)
      0008D9 A3               [24] 2228 	inc	dptr
      0008DA F0               [24] 2229 	movx	@dptr,a
      0008DB E4               [12] 2230 	clr	a
      0008DC A3               [24] 2231 	inc	dptr
      0008DD F0               [24] 2232 	movx	@dptr,a
      0008DE 90r00r00         [24] 2233 	mov	dptr,#___memcpy_PARM_3
      0008E1 74 0C            [12] 2234 	mov	a,#0x0c
      0008E3 F0               [24] 2235 	movx	@dptr,a
      0008E4 E4               [12] 2236 	clr	a
      0008E5 A3               [24] 2237 	inc	dptr
      0008E6 F0               [24] 2238 	movx	@dptr,a
      0008E7 8E 82            [24] 2239 	mov	dpl,r6
      0008E9 8F 83            [24] 2240 	mov	dph,r7
      0008EB 8D F0            [24] 2241 	mov	b,r5
      0008ED 12r00r00         [24] 2242 	lcall	___memcpy
                                   2243 ;	program.c:417: program_stats.total_buffers += 1;
      0008F0 90r00r08         [24] 2244 	mov	dptr,#(_program_stats + 0x0008)
      0008F3 E0               [24] 2245 	movx	a,@dptr
      0008F4 FE               [12] 2246 	mov	r6,a
      0008F5 A3               [24] 2247 	inc	dptr
      0008F6 E0               [24] 2248 	movx	a,@dptr
      0008F7 FF               [12] 2249 	mov	r7,a
      0008F8 0E               [12] 2250 	inc	r6
      0008F9 BE 00 01         [24] 2251 	cjne	r6,#0x00,00137$
      0008FC 0F               [12] 2252 	inc	r7
      0008FD                       2253 00137$:
      0008FD 90r00r08         [24] 2254 	mov	dptr,#(_program_stats + 0x0008)
      000900 EE               [12] 2255 	mov	a,r6
      000901 F0               [24] 2256 	movx	@dptr,a
      000902 EF               [12] 2257 	mov	a,r7
      000903 A3               [24] 2258 	inc	dptr
      000904 F0               [24] 2259 	movx	@dptr,a
      000905                       2260 00106$:
                                   2261 ;	program.c:419: return 0;
      000905 90 00 00         [24] 2262 	mov	dptr,#0x0000
                                   2263 ;	program.c:425: no_heap_left:
      000908 22               [24] 2264 	ret
      000909                       2265 00111$:
                                   2266 ;	program.c:426: printf("No Heap Memory Left, Delete some buffers...\n\r");
      000909 74rBC            [12] 2267 	mov	a,#___str_46
      00090B C0 E0            [24] 2268 	push	acc
      00090D 74s06            [12] 2269 	mov	a,#(___str_46 >> 8)
      00090F C0 E0            [24] 2270 	push	acc
      000911 74 80            [12] 2271 	mov	a,#0x80
      000913 C0 E0            [24] 2272 	push	acc
      000915 12r00r00         [24] 2273 	lcall	_printf
      000918 15 81            [12] 2274 	dec	sp
      00091A 15 81            [12] 2275 	dec	sp
      00091C 15 81            [12] 2276 	dec	sp
                                   2277 ;	program.c:427: return 0;
      00091E 90 00 00         [24] 2278 	mov	dptr,#0x0000
                                   2279 ;	program.c:428: }
      000921 22               [24] 2280 	ret
                                   2281 ;------------------------------------------------------------
                                   2282 ;Allocation info for local variables in function 'create_initial_buffers'
                                   2283 ;------------------------------------------------------------
                                   2284 ;buff_size                 Allocated with name '_create_initial_buffers_buff_size_65537_90'
                                   2285 ;buff                      Allocated with name '_create_initial_buffers_buff_65538_91'
                                   2286 ;buff1                     Allocated with name '_create_initial_buffers_buff1_65538_91'
                                   2287 ;------------------------------------------------------------
                                   2288 ;	program.c:436: void create_initial_buffers()
                                   2289 ;	-----------------------------------------
                                   2290 ;	 function create_initial_buffers
                                   2291 ;	-----------------------------------------
      000922                       2292 _create_initial_buffers:
                                   2293 ;	program.c:438: DEBUGPORT(0x07);
      000922 75 82 07         [24] 2294 	mov	dpl,#0x07
      000925 12r12r73         [24] 2295 	lcall	_dataout
                                   2296 ;	program.c:441: get_buff:
      000928                       2297 00101$:
                                   2298 ;	program.c:442: printf("\n\rGive Valid Initial Buffer Size(0048-4800):");
      000928 74rEA            [12] 2299 	mov	a,#___str_47
      00092A C0 E0            [24] 2300 	push	acc
      00092C 74s06            [12] 2301 	mov	a,#(___str_47 >> 8)
      00092E C0 E0            [24] 2302 	push	acc
      000930 74 80            [12] 2303 	mov	a,#0x80
      000932 C0 E0            [24] 2304 	push	acc
      000934 12r00r00         [24] 2305 	lcall	_printf
      000937 15 81            [12] 2306 	dec	sp
      000939 15 81            [12] 2307 	dec	sp
      00093B 15 81            [12] 2308 	dec	sp
                                   2309 ;	program.c:443: buff_size = get_number(4);
      00093D 90 00 04         [24] 2310 	mov	dptr,#0x0004
      000940 12r10rC3         [24] 2311 	lcall	_get_number
      000943 AE 82            [24] 2312 	mov	r6,dpl
      000945 AF 83            [24] 2313 	mov	r7,dph
                                   2314 ;	program.c:447: if (buff_size >= 48 && buff_size <= 4800)
      000947 C3               [12] 2315 	clr	c
      000948 EE               [12] 2316 	mov	a,r6
      000949 94 30            [12] 2317 	subb	a,#0x30
      00094B EF               [12] 2318 	mov	a,r7
      00094C 64 80            [12] 2319 	xrl	a,#0x80
      00094E 94 80            [12] 2320 	subb	a,#0x80
      000950 40 D6            [24] 2321 	jc	00101$
      000952 74 C0            [12] 2322 	mov	a,#0xc0
      000954 9E               [12] 2323 	subb	a,r6
      000955 74 92            [12] 2324 	mov	a,#(0x12 ^ 0x80)
      000957 8F F0            [24] 2325 	mov	b,r7
      000959 63 F0 80         [24] 2326 	xrl	b,#0x80
      00095C 95 F0            [12] 2327 	subb	a,b
      00095E 40 C8            [24] 2328 	jc	00101$
                                   2329 ;	program.c:449: buff.buffer_start = malloc(buff_size);
      000960 8E 82            [24] 2330 	mov	dpl,r6
      000962 8F 83            [24] 2331 	mov	dph,r7
      000964 C0 07            [24] 2332 	push	ar7
      000966 C0 06            [24] 2333 	push	ar6
      000968 12r00r00         [24] 2334 	lcall	_malloc
      00096B AC 82            [24] 2335 	mov	r4,dpl
      00096D AD 83            [24] 2336 	mov	r5,dph
      00096F D0 06            [24] 2337 	pop	ar6
      000971 D0 07            [24] 2338 	pop	ar7
      000973 7B 00            [12] 2339 	mov	r3,#0x00
      000975 90r01r44         [24] 2340 	mov	dptr,#(_create_initial_buffers_buff_65538_91 + 0x0002)
      000978 EC               [12] 2341 	mov	a,r4
      000979 F0               [24] 2342 	movx	@dptr,a
      00097A ED               [12] 2343 	mov	a,r5
      00097B A3               [24] 2344 	inc	dptr
      00097C F0               [24] 2345 	movx	@dptr,a
      00097D EB               [12] 2346 	mov	a,r3
      00097E A3               [24] 2347 	inc	dptr
      00097F F0               [24] 2348 	movx	@dptr,a
                                   2349 ;	program.c:450: buff1.buffer_start = malloc(buff_size);
      000980 8E 82            [24] 2350 	mov	dpl,r6
      000982 8F 83            [24] 2351 	mov	dph,r7
      000984 C0 07            [24] 2352 	push	ar7
      000986 C0 06            [24] 2353 	push	ar6
      000988 12r00r00         [24] 2354 	lcall	_malloc
      00098B AC 82            [24] 2355 	mov	r4,dpl
      00098D AD 83            [24] 2356 	mov	r5,dph
      00098F D0 06            [24] 2357 	pop	ar6
      000991 D0 07            [24] 2358 	pop	ar7
      000993 7B 00            [12] 2359 	mov	r3,#0x00
      000995 90r01r50         [24] 2360 	mov	dptr,#(_create_initial_buffers_buff1_65538_91 + 0x0002)
      000998 EC               [12] 2361 	mov	a,r4
      000999 F0               [24] 2362 	movx	@dptr,a
      00099A ED               [12] 2363 	mov	a,r5
      00099B A3               [24] 2364 	inc	dptr
      00099C F0               [24] 2365 	movx	@dptr,a
      00099D EB               [12] 2366 	mov	a,r3
      00099E A3               [24] 2367 	inc	dptr
      00099F F0               [24] 2368 	movx	@dptr,a
                                   2369 ;	program.c:452: if (buff.buffer_start == NULL || buff1.buffer_start == NULL)
      0009A0 90r01r44         [24] 2370 	mov	dptr,#(_create_initial_buffers_buff_65538_91 + 0x0002)
      0009A3 E0               [24] 2371 	movx	a,@dptr
      0009A4 FB               [12] 2372 	mov	r3,a
      0009A5 A3               [24] 2373 	inc	dptr
      0009A6 E0               [24] 2374 	movx	a,@dptr
      0009A7 FC               [12] 2375 	mov	r4,a
      0009A8 A3               [24] 2376 	inc	dptr
      0009A9 E0               [24] 2377 	movx	a,@dptr
      0009AA EB               [12] 2378 	mov	a,r3
      0009AB 4C               [12] 2379 	orl	a,r4
      0009AC 60 0F            [24] 2380 	jz	00106$
      0009AE 90r01r50         [24] 2381 	mov	dptr,#(_create_initial_buffers_buff1_65538_91 + 0x0002)
      0009B1 E0               [24] 2382 	movx	a,@dptr
      0009B2 FB               [12] 2383 	mov	r3,a
      0009B3 A3               [24] 2384 	inc	dptr
      0009B4 E0               [24] 2385 	movx	a,@dptr
      0009B5 FC               [12] 2386 	mov	r4,a
      0009B6 A3               [24] 2387 	inc	dptr
      0009B7 E0               [24] 2388 	movx	a,@dptr
      0009B8 FD               [12] 2389 	mov	r5,a
      0009B9 EB               [12] 2390 	mov	a,r3
      0009BA 4C               [12] 2391 	orl	a,r4
      0009BB 70 60            [24] 2392 	jnz	00107$
      0009BD                       2393 00106$:
                                   2394 ;	program.c:454: printf("\n\r####FAIL, Please give a smaller buffer size####\n\n\r");
      0009BD 74r17            [12] 2395 	mov	a,#___str_48
      0009BF C0 E0            [24] 2396 	push	acc
      0009C1 74s07            [12] 2397 	mov	a,#(___str_48 >> 8)
      0009C3 C0 E0            [24] 2398 	push	acc
      0009C5 74 80            [12] 2399 	mov	a,#0x80
      0009C7 C0 E0            [24] 2400 	push	acc
      0009C9 12r00r00         [24] 2401 	lcall	_printf
      0009CC 15 81            [12] 2402 	dec	sp
      0009CE 15 81            [12] 2403 	dec	sp
      0009D0 15 81            [12] 2404 	dec	sp
                                   2405 ;	program.c:456: if (buff.buffer_start != NULL)
      0009D2 90r01r44         [24] 2406 	mov	dptr,#(_create_initial_buffers_buff_65538_91 + 0x0002)
      0009D5 E0               [24] 2407 	movx	a,@dptr
      0009D6 FB               [12] 2408 	mov	r3,a
      0009D7 A3               [24] 2409 	inc	dptr
      0009D8 E0               [24] 2410 	movx	a,@dptr
      0009D9 FC               [12] 2411 	mov	r4,a
      0009DA A3               [24] 2412 	inc	dptr
      0009DB E0               [24] 2413 	movx	a,@dptr
      0009DC EB               [12] 2414 	mov	a,r3
      0009DD 4C               [12] 2415 	orl	a,r4
      0009DE 60 14            [24] 2416 	jz	00103$
                                   2417 ;	program.c:457: free(buff.buffer_start);
      0009E0 90r01r44         [24] 2418 	mov	dptr,#(_create_initial_buffers_buff_65538_91 + 0x0002)
      0009E3 E0               [24] 2419 	movx	a,@dptr
      0009E4 FB               [12] 2420 	mov	r3,a
      0009E5 A3               [24] 2421 	inc	dptr
      0009E6 E0               [24] 2422 	movx	a,@dptr
      0009E7 FC               [12] 2423 	mov	r4,a
      0009E8 A3               [24] 2424 	inc	dptr
      0009E9 E0               [24] 2425 	movx	a,@dptr
      0009EA FD               [12] 2426 	mov	r5,a
      0009EB 8B 82            [24] 2427 	mov	dpl,r3
      0009ED 8C 83            [24] 2428 	mov	dph,r4
      0009EF 8D F0            [24] 2429 	mov	b,r5
      0009F1 12r00r00         [24] 2430 	lcall	_free
      0009F4                       2431 00103$:
                                   2432 ;	program.c:458: if (buff1.buffer_start != NULL)
      0009F4 90r01r50         [24] 2433 	mov	dptr,#(_create_initial_buffers_buff1_65538_91 + 0x0002)
      0009F7 E0               [24] 2434 	movx	a,@dptr
      0009F8 FB               [12] 2435 	mov	r3,a
      0009F9 A3               [24] 2436 	inc	dptr
      0009FA E0               [24] 2437 	movx	a,@dptr
      0009FB FC               [12] 2438 	mov	r4,a
      0009FC A3               [24] 2439 	inc	dptr
      0009FD E0               [24] 2440 	movx	a,@dptr
      0009FE FD               [12] 2441 	mov	r5,a
      0009FF EB               [12] 2442 	mov	a,r3
      000A00 4C               [12] 2443 	orl	a,r4
      000A01 70 03            [24] 2444 	jnz	00145$
      000A03 02r09r28         [24] 2445 	ljmp	00101$
      000A06                       2446 00145$:
                                   2447 ;	program.c:459: free(buff1.buffer_start);
      000A06 90r01r50         [24] 2448 	mov	dptr,#(_create_initial_buffers_buff1_65538_91 + 0x0002)
      000A09 E0               [24] 2449 	movx	a,@dptr
      000A0A FB               [12] 2450 	mov	r3,a
      000A0B A3               [24] 2451 	inc	dptr
      000A0C E0               [24] 2452 	movx	a,@dptr
      000A0D FC               [12] 2453 	mov	r4,a
      000A0E A3               [24] 2454 	inc	dptr
      000A0F E0               [24] 2455 	movx	a,@dptr
      000A10 FD               [12] 2456 	mov	r5,a
      000A11 8B 82            [24] 2457 	mov	dpl,r3
      000A13 8C 83            [24] 2458 	mov	dph,r4
      000A15 8D F0            [24] 2459 	mov	b,r5
      000A17 12r00r00         [24] 2460 	lcall	_free
                                   2461 ;	program.c:461: goto get_buff;
      000A1A 02r09r28         [24] 2462 	ljmp	00101$
      000A1D                       2463 00107$:
                                   2464 ;	program.c:466: printf("\n\n\r####SUCCESS, INITIAL BUFFERS Created####\n\n\r");
      000A1D C0 07            [24] 2465 	push	ar7
      000A1F C0 06            [24] 2466 	push	ar6
      000A21 74r4C            [12] 2467 	mov	a,#___str_49
      000A23 C0 E0            [24] 2468 	push	acc
      000A25 74s07            [12] 2469 	mov	a,#(___str_49 >> 8)
      000A27 C0 E0            [24] 2470 	push	acc
      000A29 74 80            [12] 2471 	mov	a,#0x80
      000A2B C0 E0            [24] 2472 	push	acc
      000A2D 12r00r00         [24] 2473 	lcall	_printf
      000A30 15 81            [12] 2474 	dec	sp
      000A32 15 81            [12] 2475 	dec	sp
      000A34 15 81            [12] 2476 	dec	sp
      000A36 D0 06            [24] 2477 	pop	ar6
      000A38 D0 07            [24] 2478 	pop	ar7
                                   2479 ;	program.c:467: program_stats.allocated_heap = 2 * buff_size;
      000A3A EE               [12] 2480 	mov	a,r6
      000A3B 2E               [12] 2481 	add	a,r6
      000A3C FC               [12] 2482 	mov	r4,a
      000A3D EF               [12] 2483 	mov	a,r7
      000A3E 33               [12] 2484 	rlc	a
      000A3F FD               [12] 2485 	mov	r5,a
      000A40 90r00r02         [24] 2486 	mov	dptr,#(_program_stats + 0x0002)
      000A43 EC               [12] 2487 	mov	a,r4
      000A44 F0               [24] 2488 	movx	@dptr,a
      000A45 ED               [12] 2489 	mov	a,r5
      000A46 A3               [24] 2490 	inc	dptr
      000A47 F0               [24] 2491 	movx	@dptr,a
                                   2492 ;	program.c:468: program_stats.total_heap_size = 4996;
      000A48 90r00r00         [24] 2493 	mov	dptr,#_program_stats
      000A4B 74 84            [12] 2494 	mov	a,#0x84
      000A4D F0               [24] 2495 	movx	@dptr,a
      000A4E 74 13            [12] 2496 	mov	a,#0x13
      000A50 A3               [24] 2497 	inc	dptr
      000A51 F0               [24] 2498 	movx	@dptr,a
                                   2499 ;	program.c:469: program_stats.total_buffers = 2;
      000A52 90r00r08         [24] 2500 	mov	dptr,#(_program_stats + 0x0008)
      000A55 74 02            [12] 2501 	mov	a,#0x02
      000A57 F0               [24] 2502 	movx	@dptr,a
      000A58 E4               [12] 2503 	clr	a
      000A59 A3               [24] 2504 	inc	dptr
      000A5A F0               [24] 2505 	movx	@dptr,a
                                   2506 ;	program.c:471: buff.buff_size = buff_size;
      000A5B 90r01r4A         [24] 2507 	mov	dptr,#(_create_initial_buffers_buff_65538_91 + 0x0008)
      000A5E EE               [12] 2508 	mov	a,r6
      000A5F F0               [24] 2509 	movx	@dptr,a
      000A60 EF               [12] 2510 	mov	a,r7
      000A61 A3               [24] 2511 	inc	dptr
      000A62 F0               [24] 2512 	movx	@dptr,a
                                   2513 ;	program.c:472: buff1.buff_size = buff_size;
      000A63 90r01r56         [24] 2514 	mov	dptr,#(_create_initial_buffers_buff1_65538_91 + 0x0008)
      000A66 EE               [12] 2515 	mov	a,r6
      000A67 F0               [24] 2516 	movx	@dptr,a
      000A68 EF               [12] 2517 	mov	a,r7
      000A69 A3               [24] 2518 	inc	dptr
      000A6A F0               [24] 2519 	movx	@dptr,a
                                   2520 ;	program.c:473: buff.buffer_num = 0;
      000A6B 90r01r42         [24] 2521 	mov	dptr,#_create_initial_buffers_buff_65538_91
      000A6E E4               [12] 2522 	clr	a
      000A6F F0               [24] 2523 	movx	@dptr,a
      000A70 A3               [24] 2524 	inc	dptr
      000A71 F0               [24] 2525 	movx	@dptr,a
                                   2526 ;	program.c:474: buff1.buffer_num = 1;
      000A72 90r01r4E         [24] 2527 	mov	dptr,#_create_initial_buffers_buff1_65538_91
      000A75 04               [12] 2528 	inc	a
      000A76 F0               [24] 2529 	movx	@dptr,a
      000A77 E4               [12] 2530 	clr	a
      000A78 A3               [24] 2531 	inc	dptr
      000A79 F0               [24] 2532 	movx	@dptr,a
                                   2533 ;	program.c:475: buff1.buffer_end = buff1.buffer_start + buff_size;
      000A7A 90r01r50         [24] 2534 	mov	dptr,#(_create_initial_buffers_buff1_65538_91 + 0x0002)
      000A7D E0               [24] 2535 	movx	a,@dptr
      000A7E FB               [12] 2536 	mov	r3,a
      000A7F A3               [24] 2537 	inc	dptr
      000A80 E0               [24] 2538 	movx	a,@dptr
      000A81 FC               [12] 2539 	mov	r4,a
      000A82 A3               [24] 2540 	inc	dptr
      000A83 E0               [24] 2541 	movx	a,@dptr
      000A84 FD               [12] 2542 	mov	r5,a
      000A85 EE               [12] 2543 	mov	a,r6
      000A86 2B               [12] 2544 	add	a,r3
      000A87 FB               [12] 2545 	mov	r3,a
      000A88 EF               [12] 2546 	mov	a,r7
      000A89 3C               [12] 2547 	addc	a,r4
      000A8A FC               [12] 2548 	mov	r4,a
      000A8B 90r01r53         [24] 2549 	mov	dptr,#(_create_initial_buffers_buff1_65538_91 + 0x0005)
      000A8E EB               [12] 2550 	mov	a,r3
      000A8F F0               [24] 2551 	movx	@dptr,a
      000A90 EC               [12] 2552 	mov	a,r4
      000A91 A3               [24] 2553 	inc	dptr
      000A92 F0               [24] 2554 	movx	@dptr,a
      000A93 ED               [12] 2555 	mov	a,r5
      000A94 A3               [24] 2556 	inc	dptr
      000A95 F0               [24] 2557 	movx	@dptr,a
                                   2558 ;	program.c:476: buff.buffer_end = buff.buffer_start + buff_size;
      000A96 90r01r44         [24] 2559 	mov	dptr,#(_create_initial_buffers_buff_65538_91 + 0x0002)
      000A99 E0               [24] 2560 	movx	a,@dptr
      000A9A FB               [12] 2561 	mov	r3,a
      000A9B A3               [24] 2562 	inc	dptr
      000A9C E0               [24] 2563 	movx	a,@dptr
      000A9D FC               [12] 2564 	mov	r4,a
      000A9E A3               [24] 2565 	inc	dptr
      000A9F E0               [24] 2566 	movx	a,@dptr
      000AA0 FD               [12] 2567 	mov	r5,a
      000AA1 EE               [12] 2568 	mov	a,r6
      000AA2 2B               [12] 2569 	add	a,r3
      000AA3 FE               [12] 2570 	mov	r6,a
      000AA4 EF               [12] 2571 	mov	a,r7
      000AA5 3C               [12] 2572 	addc	a,r4
      000AA6 FF               [12] 2573 	mov	r7,a
      000AA7 8D 02            [24] 2574 	mov	ar2,r5
      000AA9 90r01r47         [24] 2575 	mov	dptr,#(_create_initial_buffers_buff_65538_91 + 0x0005)
      000AAC EE               [12] 2576 	mov	a,r6
      000AAD F0               [24] 2577 	movx	@dptr,a
      000AAE EF               [12] 2578 	mov	a,r7
      000AAF A3               [24] 2579 	inc	dptr
      000AB0 F0               [24] 2580 	movx	@dptr,a
      000AB1 EA               [12] 2581 	mov	a,r2
      000AB2 A3               [24] 2582 	inc	dptr
      000AB3 F0               [24] 2583 	movx	@dptr,a
                                   2584 ;	program.c:477: buff.num_char = 0;
      000AB4 90r01r4C         [24] 2585 	mov	dptr,#(_create_initial_buffers_buff_65538_91 + 0x000a)
      000AB7 E4               [12] 2586 	clr	a
      000AB8 F0               [24] 2587 	movx	@dptr,a
      000AB9 A3               [24] 2588 	inc	dptr
      000ABA F0               [24] 2589 	movx	@dptr,a
                                   2590 ;	program.c:478: buff1.num_char = 0;
      000ABB 90r01r58         [24] 2591 	mov	dptr,#(_create_initial_buffers_buff1_65538_91 + 0x000a)
      000ABE F0               [24] 2592 	movx	@dptr,a
      000ABF A3               [24] 2593 	inc	dptr
      000AC0 F0               [24] 2594 	movx	@dptr,a
                                   2595 ;	program.c:480: buffers_array[0] = buff;
      000AC1 90r00r00         [24] 2596 	mov	dptr,#___memcpy_PARM_2
      000AC4 74r42            [12] 2597 	mov	a,#_create_initial_buffers_buff_65538_91
      000AC6 F0               [24] 2598 	movx	@dptr,a
      000AC7 74s01            [12] 2599 	mov	a,#(_create_initial_buffers_buff_65538_91 >> 8)
      000AC9 A3               [24] 2600 	inc	dptr
      000ACA F0               [24] 2601 	movx	@dptr,a
      000ACB E4               [12] 2602 	clr	a
      000ACC A3               [24] 2603 	inc	dptr
      000ACD F0               [24] 2604 	movx	@dptr,a
      000ACE 90r00r00         [24] 2605 	mov	dptr,#___memcpy_PARM_3
      000AD1 74 0C            [12] 2606 	mov	a,#0x0c
      000AD3 F0               [24] 2607 	movx	@dptr,a
      000AD4 E4               [12] 2608 	clr	a
      000AD5 A3               [24] 2609 	inc	dptr
      000AD6 F0               [24] 2610 	movx	@dptr,a
      000AD7 90r00r0A         [24] 2611 	mov	dptr,#_buffers_array
      000ADA 75 F0 00         [24] 2612 	mov	b,#0x00
      000ADD 12r00r00         [24] 2613 	lcall	___memcpy
                                   2614 ;	program.c:481: buffers_array[1] = buff1;
      000AE0 90r00r00         [24] 2615 	mov	dptr,#___memcpy_PARM_2
      000AE3 74r4E            [12] 2616 	mov	a,#_create_initial_buffers_buff1_65538_91
      000AE5 F0               [24] 2617 	movx	@dptr,a
      000AE6 74s01            [12] 2618 	mov	a,#(_create_initial_buffers_buff1_65538_91 >> 8)
      000AE8 A3               [24] 2619 	inc	dptr
      000AE9 F0               [24] 2620 	movx	@dptr,a
      000AEA E4               [12] 2621 	clr	a
      000AEB A3               [24] 2622 	inc	dptr
      000AEC F0               [24] 2623 	movx	@dptr,a
      000AED 90r00r00         [24] 2624 	mov	dptr,#___memcpy_PARM_3
      000AF0 74 0C            [12] 2625 	mov	a,#0x0c
      000AF2 F0               [24] 2626 	movx	@dptr,a
      000AF3 E4               [12] 2627 	clr	a
      000AF4 A3               [24] 2628 	inc	dptr
      000AF5 F0               [24] 2629 	movx	@dptr,a
      000AF6 90r00r16         [24] 2630 	mov	dptr,#(_buffers_array + 0x000c)
      000AF9 75 F0 00         [24] 2631 	mov	b,#0x00
                                   2632 ;	program.c:485: goto get_buff;
                                   2633 ;	program.c:486: }
      000AFC 02r00r00         [24] 2634 	ljmp	___memcpy
                                   2635 ;------------------------------------------------------------
                                   2636 ;Allocation info for local variables in function 'enter_chars'
                                   2637 ;------------------------------------------------------------
                                   2638 ;rec                       Allocated with name '_enter_chars_rec_65537_96'
                                   2639 ;------------------------------------------------------------
                                   2640 ;	program.c:494: void enter_chars()
                                   2641 ;	-----------------------------------------
                                   2642 ;	 function enter_chars
                                   2643 ;	-----------------------------------------
      000AFF                       2644 _enter_chars:
                                   2645 ;	program.c:496: DEBUGPORT(0x08);
      000AFF 75 82 08         [24] 2646 	mov	dpl,#0x08
      000B02 12r12r73         [24] 2647 	lcall	_dataout
                                   2648 ;	program.c:497: print_heap_menu();
      000B05 12r06rF9         [24] 2649 	lcall	_print_heap_menu
                                   2650 ;	program.c:499: while (1)
      000B08                       2651 00126$:
                                   2652 ;	program.c:501: rec = getchar();
      000B08 12r12r37         [24] 2653 	lcall	_getchar
      000B0B AE 82            [24] 2654 	mov	r6,dpl
      000B0D AF 83            [24] 2655 	mov	r7,dph
                                   2656 ;	program.c:502: if (rec > 0x60 && rec < 0x7B)
      000B0F C3               [12] 2657 	clr	c
      000B10 74 60            [12] 2658 	mov	a,#0x60
      000B12 9E               [12] 2659 	subb	a,r6
      000B13 74 80            [12] 2660 	mov	a,#(0x00 ^ 0x80)
      000B15 8F F0            [24] 2661 	mov	b,r7
      000B17 63 F0 80         [24] 2662 	xrl	b,#0x80
      000B1A 95 F0            [12] 2663 	subb	a,b
      000B1C 40 03            [24] 2664 	jc	00170$
      000B1E 02r0BrAD         [24] 2665 	ljmp	00122$
      000B21                       2666 00170$:
      000B21 C3               [12] 2667 	clr	c
      000B22 EE               [12] 2668 	mov	a,r6
      000B23 94 7B            [12] 2669 	subb	a,#0x7b
      000B25 EF               [12] 2670 	mov	a,r7
      000B26 64 80            [12] 2671 	xrl	a,#0x80
      000B28 94 80            [12] 2672 	subb	a,#0x80
      000B2A 40 03            [24] 2673 	jc	00171$
      000B2C 02r0BrAD         [24] 2674 	ljmp	00122$
      000B2F                       2675 00171$:
                                   2676 ;	program.c:506: if (buffers_array[0].num_char < buffers_array[0].buff_size)
      000B2F 90r00r14         [24] 2677 	mov	dptr,#(_buffers_array + 0x000a)
      000B32 E0               [24] 2678 	movx	a,@dptr
      000B33 FC               [12] 2679 	mov	r4,a
      000B34 A3               [24] 2680 	inc	dptr
      000B35 E0               [24] 2681 	movx	a,@dptr
      000B36 FD               [12] 2682 	mov	r5,a
      000B37 90r00r12         [24] 2683 	mov	dptr,#(_buffers_array + 0x0008)
      000B3A E0               [24] 2684 	movx	a,@dptr
      000B3B FA               [12] 2685 	mov	r2,a
      000B3C A3               [24] 2686 	inc	dptr
      000B3D E0               [24] 2687 	movx	a,@dptr
      000B3E FB               [12] 2688 	mov	r3,a
      000B3F C3               [12] 2689 	clr	c
      000B40 EC               [12] 2690 	mov	a,r4
      000B41 9A               [12] 2691 	subb	a,r2
      000B42 ED               [12] 2692 	mov	a,r5
      000B43 64 80            [12] 2693 	xrl	a,#0x80
      000B45 8B F0            [24] 2694 	mov	b,r3
      000B47 63 F0 80         [24] 2695 	xrl	b,#0x80
      000B4A 95 F0            [12] 2696 	subb	a,b
      000B4C 50 32            [24] 2697 	jnc	00102$
                                   2698 ;	program.c:508: *(buffers_array[0].buffer_start + buffers_array[0].num_char) = rec;
      000B4E 90r00r0C         [24] 2699 	mov	dptr,#(_buffers_array + 0x0002)
      000B51 E0               [24] 2700 	movx	a,@dptr
      000B52 F9               [12] 2701 	mov	r1,a
      000B53 A3               [24] 2702 	inc	dptr
      000B54 E0               [24] 2703 	movx	a,@dptr
      000B55 FA               [12] 2704 	mov	r2,a
      000B56 A3               [24] 2705 	inc	dptr
      000B57 E0               [24] 2706 	movx	a,@dptr
      000B58 FB               [12] 2707 	mov	r3,a
      000B59 EC               [12] 2708 	mov	a,r4
      000B5A 29               [12] 2709 	add	a,r1
      000B5B F9               [12] 2710 	mov	r1,a
      000B5C ED               [12] 2711 	mov	a,r5
      000B5D 3A               [12] 2712 	addc	a,r2
      000B5E FA               [12] 2713 	mov	r2,a
      000B5F 8E 05            [24] 2714 	mov	ar5,r6
      000B61 89 82            [24] 2715 	mov	dpl,r1
      000B63 8A 83            [24] 2716 	mov	dph,r2
      000B65 8B F0            [24] 2717 	mov	b,r3
      000B67 ED               [12] 2718 	mov	a,r5
      000B68 12r00r00         [24] 2719 	lcall	__gptrput
                                   2720 ;	program.c:509: buffers_array[0].num_char += 1;
      000B6B 90r00r14         [24] 2721 	mov	dptr,#(_buffers_array + 0x000a)
      000B6E E0               [24] 2722 	movx	a,@dptr
      000B6F FC               [12] 2723 	mov	r4,a
      000B70 A3               [24] 2724 	inc	dptr
      000B71 E0               [24] 2725 	movx	a,@dptr
      000B72 FD               [12] 2726 	mov	r5,a
      000B73 0C               [12] 2727 	inc	r4
      000B74 BC 00 01         [24] 2728 	cjne	r4,#0x00,00173$
      000B77 0D               [12] 2729 	inc	r5
      000B78                       2730 00173$:
      000B78 90r00r14         [24] 2731 	mov	dptr,#(_buffers_array + 0x000a)
      000B7B EC               [12] 2732 	mov	a,r4
      000B7C F0               [24] 2733 	movx	@dptr,a
      000B7D ED               [12] 2734 	mov	a,r5
      000B7E A3               [24] 2735 	inc	dptr
      000B7F F0               [24] 2736 	movx	@dptr,a
      000B80                       2737 00102$:
                                   2738 ;	program.c:511: program_stats.all_char_count += 1;
      000B80 90r00r04         [24] 2739 	mov	dptr,#(_program_stats + 0x0004)
      000B83 E0               [24] 2740 	movx	a,@dptr
      000B84 FC               [12] 2741 	mov	r4,a
      000B85 A3               [24] 2742 	inc	dptr
      000B86 E0               [24] 2743 	movx	a,@dptr
      000B87 FD               [12] 2744 	mov	r5,a
      000B88 0C               [12] 2745 	inc	r4
      000B89 BC 00 01         [24] 2746 	cjne	r4,#0x00,00174$
      000B8C 0D               [12] 2747 	inc	r5
      000B8D                       2748 00174$:
      000B8D 90r00r04         [24] 2749 	mov	dptr,#(_program_stats + 0x0004)
      000B90 EC               [12] 2750 	mov	a,r4
      000B91 F0               [24] 2751 	movx	@dptr,a
      000B92 ED               [12] 2752 	mov	a,r5
      000B93 A3               [24] 2753 	inc	dptr
      000B94 F0               [24] 2754 	movx	@dptr,a
                                   2755 ;	program.c:512: program_stats.storage_char_count += 1;
      000B95 90r00r06         [24] 2756 	mov	dptr,#(_program_stats + 0x0006)
      000B98 E0               [24] 2757 	movx	a,@dptr
      000B99 FC               [12] 2758 	mov	r4,a
      000B9A A3               [24] 2759 	inc	dptr
      000B9B E0               [24] 2760 	movx	a,@dptr
      000B9C FD               [12] 2761 	mov	r5,a
      000B9D 0C               [12] 2762 	inc	r4
      000B9E BC 00 01         [24] 2763 	cjne	r4,#0x00,00175$
      000BA1 0D               [12] 2764 	inc	r5
      000BA2                       2765 00175$:
      000BA2 90r00r06         [24] 2766 	mov	dptr,#(_program_stats + 0x0006)
      000BA5 EC               [12] 2767 	mov	a,r4
      000BA6 F0               [24] 2768 	movx	@dptr,a
      000BA7 ED               [12] 2769 	mov	a,r5
      000BA8 A3               [24] 2770 	inc	dptr
      000BA9 F0               [24] 2771 	movx	@dptr,a
      000BAA 02r0Br08         [24] 2772 	ljmp	00126$
      000BAD                       2773 00122$:
                                   2774 ;	program.c:514: else if (rec == 0x3F)
      000BAD BE 3F 1F         [24] 2775 	cjne	r6,#0x3f,00119$
      000BB0 BF 00 1C         [24] 2776 	cjne	r7,#0x00,00119$
                                   2777 ;	program.c:517: print_heap_stats();
      000BB3 12r0Er92         [24] 2778 	lcall	_print_heap_stats
                                   2779 ;	program.c:518: print_all_buffers();
      000BB6 12r0Fr53         [24] 2780 	lcall	_print_all_buffers
                                   2781 ;	program.c:519: dump_buff_zero_ascii();
      000BB9 12r0Cr2F         [24] 2782 	lcall	_dump_buff_zero_ascii
                                   2783 ;	program.c:520: program_stats.all_char_count = 0;
      000BBC 90r00r04         [24] 2784 	mov	dptr,#(_program_stats + 0x0004)
      000BBF E4               [12] 2785 	clr	a
      000BC0 F0               [24] 2786 	movx	@dptr,a
      000BC1 A3               [24] 2787 	inc	dptr
      000BC2 F0               [24] 2788 	movx	@dptr,a
                                   2789 ;	program.c:521: program_stats.storage_char_count = 0;
      000BC3 90r00r06         [24] 2790 	mov	dptr,#(_program_stats + 0x0006)
      000BC6 F0               [24] 2791 	movx	@dptr,a
      000BC7 A3               [24] 2792 	inc	dptr
      000BC8 F0               [24] 2793 	movx	@dptr,a
                                   2794 ;	program.c:522: print_heap_menu();
      000BC9 12r06rF9         [24] 2795 	lcall	_print_heap_menu
      000BCC 02r0Br08         [24] 2796 	ljmp	00126$
      000BCF                       2797 00119$:
                                   2798 ;	program.c:524: else if (rec == 0x3D)
      000BCF BE 3D 0C         [24] 2799 	cjne	r6,#0x3d,00116$
      000BD2 BF 00 09         [24] 2800 	cjne	r7,#0x00,00116$
                                   2801 ;	program.c:527: dump_buff_zero_hex();
      000BD5 12r0Dr45         [24] 2802 	lcall	_dump_buff_zero_hex
                                   2803 ;	program.c:528: print_heap_menu();
      000BD8 12r06rF9         [24] 2804 	lcall	_print_heap_menu
      000BDB 02r0Br08         [24] 2805 	ljmp	00126$
      000BDE                       2806 00116$:
                                   2807 ;	program.c:530: else if (rec == 0x40)
      000BDE BE 40 0C         [24] 2808 	cjne	r6,#0x40,00113$
      000BE1 BF 00 09         [24] 2809 	cjne	r7,#0x00,00113$
                                   2810 ;	program.c:533: at_clear_all_buffers();
      000BE4 12r03rAA         [24] 2811 	lcall	_at_clear_all_buffers
                                   2812 ;	program.c:534: print_heap_menu();
      000BE7 12r06rF9         [24] 2813 	lcall	_print_heap_menu
      000BEA 02r0Br08         [24] 2814 	ljmp	00126$
      000BED                       2815 00113$:
                                   2816 ;	program.c:536: else if (rec == 0x2B)
      000BED BE 2B 0C         [24] 2817 	cjne	r6,#0x2b,00110$
      000BF0 BF 00 09         [24] 2818 	cjne	r7,#0x00,00110$
                                   2819 ;	program.c:539: create_new_buffer();
      000BF3 12r07rA8         [24] 2820 	lcall	_create_new_buffer
                                   2821 ;	program.c:540: print_heap_menu();
      000BF6 12r06rF9         [24] 2822 	lcall	_print_heap_menu
      000BF9 02r0Br08         [24] 2823 	ljmp	00126$
      000BFC                       2824 00110$:
                                   2825 ;	program.c:542: else if (rec == 0x2D)
      000BFC BE 2D 0C         [24] 2826 	cjne	r6,#0x2d,00107$
      000BFF BF 00 09         [24] 2827 	cjne	r7,#0x00,00107$
                                   2828 ;	program.c:545: delete_buffer();
      000C02 12r04r44         [24] 2829 	lcall	_delete_buffer
                                   2830 ;	program.c:546: print_heap_menu();
      000C05 12r06rF9         [24] 2831 	lcall	_print_heap_menu
      000C08 02r0Br08         [24] 2832 	ljmp	00126$
      000C0B                       2833 00107$:
                                   2834 ;	program.c:548: else if (rec == 0x4D)
      000C0B BE 4D 09         [24] 2835 	cjne	r6,#0x4d,00104$
      000C0E BF 00 06         [24] 2836 	cjne	r7,#0x00,00104$
                                   2837 ;	program.c:550: main_menu();
      000C11 12r02r93         [24] 2838 	lcall	_main_menu
      000C14 02r0Br08         [24] 2839 	ljmp	00126$
      000C17                       2840 00104$:
                                   2841 ;	program.c:554: program_stats.all_char_count += 1;
      000C17 90r00r04         [24] 2842 	mov	dptr,#(_program_stats + 0x0004)
      000C1A E0               [24] 2843 	movx	a,@dptr
      000C1B FE               [12] 2844 	mov	r6,a
      000C1C A3               [24] 2845 	inc	dptr
      000C1D E0               [24] 2846 	movx	a,@dptr
      000C1E FF               [12] 2847 	mov	r7,a
      000C1F 0E               [12] 2848 	inc	r6
      000C20 BE 00 01         [24] 2849 	cjne	r6,#0x00,00188$
      000C23 0F               [12] 2850 	inc	r7
      000C24                       2851 00188$:
      000C24 90r00r04         [24] 2852 	mov	dptr,#(_program_stats + 0x0004)
      000C27 EE               [12] 2853 	mov	a,r6
      000C28 F0               [24] 2854 	movx	@dptr,a
      000C29 EF               [12] 2855 	mov	a,r7
      000C2A A3               [24] 2856 	inc	dptr
      000C2B F0               [24] 2857 	movx	@dptr,a
                                   2858 ;	program.c:557: }
      000C2C 02r0Br08         [24] 2859 	ljmp	00126$
                                   2860 ;------------------------------------------------------------
                                   2861 ;Allocation info for local variables in function 'dump_buff_zero_ascii'
                                   2862 ;------------------------------------------------------------
                                   2863 ;j                         Allocated with name '_dump_buff_zero_ascii_j_65537_108'
                                   2864 ;i                         Allocated with name '_dump_buff_zero_ascii_i_196609_110'
                                   2865 ;------------------------------------------------------------
                                   2866 ;	program.c:565: void dump_buff_zero_ascii()
                                   2867 ;	-----------------------------------------
                                   2868 ;	 function dump_buff_zero_ascii
                                   2869 ;	-----------------------------------------
      000C2F                       2870 _dump_buff_zero_ascii:
                                   2871 ;	program.c:567: DEBUGPORT(0x09);
      000C2F 75 82 09         [24] 2872 	mov	dpl,#0x09
      000C32 12r12r73         [24] 2873 	lcall	_dataout
                                   2874 ;	program.c:568: int j = 64;
      000C35 90r01r5A         [24] 2875 	mov	dptr,#_dump_buff_zero_ascii_j_65537_108
      000C38 74 40            [12] 2876 	mov	a,#0x40
      000C3A F0               [24] 2877 	movx	@dptr,a
      000C3B E4               [12] 2878 	clr	a
      000C3C A3               [24] 2879 	inc	dptr
      000C3D F0               [24] 2880 	movx	@dptr,a
                                   2881 ;	program.c:569: if (buffers_array[0].num_char > 0)
      000C3E 90r00r14         [24] 2882 	mov	dptr,#(_buffers_array + 0x000a)
      000C41 E0               [24] 2883 	movx	a,@dptr
      000C42 FE               [12] 2884 	mov	r6,a
      000C43 A3               [24] 2885 	inc	dptr
      000C44 E0               [24] 2886 	movx	a,@dptr
      000C45 FF               [12] 2887 	mov	r7,a
      000C46 C3               [12] 2888 	clr	c
      000C47 E4               [12] 2889 	clr	a
      000C48 9E               [12] 2890 	subb	a,r6
      000C49 74 80            [12] 2891 	mov	a,#(0x00 ^ 0x80)
      000C4B 8F F0            [24] 2892 	mov	b,r7
      000C4D 63 F0 80         [24] 2893 	xrl	b,#0x80
      000C50 95 F0            [12] 2894 	subb	a,b
      000C52 40 03            [24] 2895 	jc	00135$
      000C54 02r0Dr2F         [24] 2896 	ljmp	00107$
      000C57                       2897 00135$:
                                   2898 ;	program.c:571: printf("\n\n\r***********Buffer-0-Contents*********** \n\r");
      000C57 74r7B            [12] 2899 	mov	a,#___str_50
      000C59 C0 E0            [24] 2900 	push	acc
      000C5B 74s07            [12] 2901 	mov	a,#(___str_50 >> 8)
      000C5D C0 E0            [24] 2902 	push	acc
      000C5F 74 80            [12] 2903 	mov	a,#0x80
      000C61 C0 E0            [24] 2904 	push	acc
      000C63 12r00r00         [24] 2905 	lcall	_printf
      000C66 15 81            [12] 2906 	dec	sp
      000C68 15 81            [12] 2907 	dec	sp
      000C6A 15 81            [12] 2908 	dec	sp
                                   2909 ;	program.c:572: for (int i = 0; i < buffers_array[0].num_char; i++)
      000C6C 7E 00            [12] 2910 	mov	r6,#0x00
      000C6E 7F 00            [12] 2911 	mov	r7,#0x00
      000C70                       2912 00110$:
      000C70 90r00r14         [24] 2913 	mov	dptr,#(_buffers_array + 0x000a)
      000C73 E0               [24] 2914 	movx	a,@dptr
      000C74 FC               [12] 2915 	mov	r4,a
      000C75 A3               [24] 2916 	inc	dptr
      000C76 E0               [24] 2917 	movx	a,@dptr
      000C77 FD               [12] 2918 	mov	r5,a
      000C78 C3               [12] 2919 	clr	c
      000C79 EE               [12] 2920 	mov	a,r6
      000C7A 9C               [12] 2921 	subb	a,r4
      000C7B EF               [12] 2922 	mov	a,r7
      000C7C 64 80            [12] 2923 	xrl	a,#0x80
      000C7E 8D F0            [24] 2924 	mov	b,r5
      000C80 63 F0 80         [24] 2925 	xrl	b,#0x80
      000C83 95 F0            [12] 2926 	subb	a,b
      000C85 40 03            [24] 2927 	jc	00136$
      000C87 02r0Dr12         [24] 2928 	ljmp	00105$
      000C8A                       2929 00136$:
                                   2930 ;	program.c:574: if (j == 64)
      000C8A 90r01r5A         [24] 2931 	mov	dptr,#_dump_buff_zero_ascii_j_65537_108
      000C8D E0               [24] 2932 	movx	a,@dptr
      000C8E FC               [12] 2933 	mov	r4,a
      000C8F A3               [24] 2934 	inc	dptr
      000C90 E0               [24] 2935 	movx	a,@dptr
      000C91 FD               [12] 2936 	mov	r5,a
      000C92 BC 40 20         [24] 2937 	cjne	r4,#0x40,00102$
      000C95 BD 00 1D         [24] 2938 	cjne	r5,#0x00,00102$
                                   2939 ;	program.c:576: printf("\n\r");
      000C98 C0 07            [24] 2940 	push	ar7
      000C9A C0 06            [24] 2941 	push	ar6
      000C9C 74rA9            [12] 2942 	mov	a,#___str_51
      000C9E C0 E0            [24] 2943 	push	acc
      000CA0 74s07            [12] 2944 	mov	a,#(___str_51 >> 8)
      000CA2 C0 E0            [24] 2945 	push	acc
      000CA4 74 80            [12] 2946 	mov	a,#0x80
      000CA6 C0 E0            [24] 2947 	push	acc
      000CA8 12r00r00         [24] 2948 	lcall	_printf
      000CAB 15 81            [12] 2949 	dec	sp
      000CAD 15 81            [12] 2950 	dec	sp
      000CAF 15 81            [12] 2951 	dec	sp
      000CB1 D0 06            [24] 2952 	pop	ar6
      000CB3 D0 07            [24] 2953 	pop	ar7
      000CB5                       2954 00102$:
                                   2955 ;	program.c:578: putchar(*(buffers_array[0].buffer_start + i));
      000CB5 90r00r0C         [24] 2956 	mov	dptr,#(_buffers_array + 0x0002)
      000CB8 E0               [24] 2957 	movx	a,@dptr
      000CB9 FB               [12] 2958 	mov	r3,a
      000CBA A3               [24] 2959 	inc	dptr
      000CBB E0               [24] 2960 	movx	a,@dptr
      000CBC FC               [12] 2961 	mov	r4,a
      000CBD A3               [24] 2962 	inc	dptr
      000CBE E0               [24] 2963 	movx	a,@dptr
      000CBF FD               [12] 2964 	mov	r5,a
      000CC0 EE               [12] 2965 	mov	a,r6
      000CC1 2B               [12] 2966 	add	a,r3
      000CC2 FB               [12] 2967 	mov	r3,a
      000CC3 EF               [12] 2968 	mov	a,r7
      000CC4 3C               [12] 2969 	addc	a,r4
      000CC5 FC               [12] 2970 	mov	r4,a
      000CC6 8B 82            [24] 2971 	mov	dpl,r3
      000CC8 8C 83            [24] 2972 	mov	dph,r4
      000CCA 8D F0            [24] 2973 	mov	b,r5
      000CCC 12r00r00         [24] 2974 	lcall	__gptrget
      000CCF FB               [12] 2975 	mov	r3,a
      000CD0 7D 00            [12] 2976 	mov	r5,#0x00
      000CD2 8B 82            [24] 2977 	mov	dpl,r3
      000CD4 8D 83            [24] 2978 	mov	dph,r5
      000CD6 C0 07            [24] 2979 	push	ar7
      000CD8 C0 06            [24] 2980 	push	ar6
      000CDA 12r12r18         [24] 2981 	lcall	_putchar
      000CDD D0 06            [24] 2982 	pop	ar6
      000CDF D0 07            [24] 2983 	pop	ar7
                                   2984 ;	program.c:579: j--;
      000CE1 90r01r5A         [24] 2985 	mov	dptr,#_dump_buff_zero_ascii_j_65537_108
      000CE4 E0               [24] 2986 	movx	a,@dptr
      000CE5 24 FF            [12] 2987 	add	a,#0xff
      000CE7 FC               [12] 2988 	mov	r4,a
      000CE8 A3               [24] 2989 	inc	dptr
      000CE9 E0               [24] 2990 	movx	a,@dptr
      000CEA 34 FF            [12] 2991 	addc	a,#0xff
      000CEC FD               [12] 2992 	mov	r5,a
      000CED 90r01r5A         [24] 2993 	mov	dptr,#_dump_buff_zero_ascii_j_65537_108
      000CF0 EC               [12] 2994 	mov	a,r4
      000CF1 F0               [24] 2995 	movx	@dptr,a
      000CF2 ED               [12] 2996 	mov	a,r5
      000CF3 A3               [24] 2997 	inc	dptr
      000CF4 F0               [24] 2998 	movx	@dptr,a
                                   2999 ;	program.c:580: if (j == 0)
      000CF5 90r01r5A         [24] 3000 	mov	dptr,#_dump_buff_zero_ascii_j_65537_108
      000CF8 E0               [24] 3001 	movx	a,@dptr
      000CF9 F5 F0            [12] 3002 	mov	b,a
      000CFB A3               [24] 3003 	inc	dptr
      000CFC E0               [24] 3004 	movx	a,@dptr
      000CFD 45 F0            [12] 3005 	orl	a,b
      000CFF 70 09            [24] 3006 	jnz	00111$
                                   3007 ;	program.c:581: j = 64;
      000D01 90r01r5A         [24] 3008 	mov	dptr,#_dump_buff_zero_ascii_j_65537_108
      000D04 74 40            [12] 3009 	mov	a,#0x40
      000D06 F0               [24] 3010 	movx	@dptr,a
      000D07 E4               [12] 3011 	clr	a
      000D08 A3               [24] 3012 	inc	dptr
      000D09 F0               [24] 3013 	movx	@dptr,a
      000D0A                       3014 00111$:
                                   3015 ;	program.c:572: for (int i = 0; i < buffers_array[0].num_char; i++)
      000D0A 0E               [12] 3016 	inc	r6
      000D0B BE 00 01         [24] 3017 	cjne	r6,#0x00,00140$
      000D0E 0F               [12] 3018 	inc	r7
      000D0F                       3019 00140$:
      000D0F 02r0Cr70         [24] 3020 	ljmp	00110$
      000D12                       3021 00105$:
                                   3022 ;	program.c:583: buffers_array[0].num_char = 0;
      000D12 90r00r14         [24] 3023 	mov	dptr,#(_buffers_array + 0x000a)
      000D15 E4               [12] 3024 	clr	a
      000D16 F0               [24] 3025 	movx	@dptr,a
      000D17 A3               [24] 3026 	inc	dptr
      000D18 F0               [24] 3027 	movx	@dptr,a
                                   3028 ;	program.c:584: printf("\n\n\r");
      000D19 74rAC            [12] 3029 	mov	a,#___str_52
      000D1B C0 E0            [24] 3030 	push	acc
      000D1D 74s07            [12] 3031 	mov	a,#(___str_52 >> 8)
      000D1F C0 E0            [24] 3032 	push	acc
      000D21 74 80            [12] 3033 	mov	a,#0x80
      000D23 C0 E0            [24] 3034 	push	acc
      000D25 12r00r00         [24] 3035 	lcall	_printf
      000D28 15 81            [12] 3036 	dec	sp
      000D2A 15 81            [12] 3037 	dec	sp
      000D2C 15 81            [12] 3038 	dec	sp
      000D2E 22               [24] 3039 	ret
      000D2F                       3040 00107$:
                                   3041 ;	program.c:588: printf("Buffer0 is Empty....\n\r");
      000D2F 74rB0            [12] 3042 	mov	a,#___str_53
      000D31 C0 E0            [24] 3043 	push	acc
      000D33 74s07            [12] 3044 	mov	a,#(___str_53 >> 8)
      000D35 C0 E0            [24] 3045 	push	acc
      000D37 74 80            [12] 3046 	mov	a,#0x80
      000D39 C0 E0            [24] 3047 	push	acc
      000D3B 12r00r00         [24] 3048 	lcall	_printf
      000D3E 15 81            [12] 3049 	dec	sp
      000D40 15 81            [12] 3050 	dec	sp
      000D42 15 81            [12] 3051 	dec	sp
                                   3052 ;	program.c:590: }
      000D44 22               [24] 3053 	ret
                                   3054 ;------------------------------------------------------------
                                   3055 ;Allocation info for local variables in function 'dump_buff_zero_hex'
                                   3056 ;------------------------------------------------------------
                                   3057 ;j                         Allocated with name '_dump_buff_zero_hex_j_131073_116'
                                   3058 ;i                         Allocated with name '_dump_buff_zero_hex_i_196609_117'
                                   3059 ;------------------------------------------------------------
                                   3060 ;	program.c:597: void dump_buff_zero_hex()
                                   3061 ;	-----------------------------------------
                                   3062 ;	 function dump_buff_zero_hex
                                   3063 ;	-----------------------------------------
      000D45                       3064 _dump_buff_zero_hex:
                                   3065 ;	program.c:599: DEBUGPORT(0xA);
      000D45 75 82 0A         [24] 3066 	mov	dpl,#0x0a
      000D48 12r12r73         [24] 3067 	lcall	_dataout
                                   3068 ;	program.c:600: if (buffers_array[0].num_char > 0)
      000D4B 90r00r14         [24] 3069 	mov	dptr,#(_buffers_array + 0x000a)
      000D4E E0               [24] 3070 	movx	a,@dptr
      000D4F FE               [12] 3071 	mov	r6,a
      000D50 A3               [24] 3072 	inc	dptr
      000D51 E0               [24] 3073 	movx	a,@dptr
      000D52 FF               [12] 3074 	mov	r7,a
      000D53 C3               [12] 3075 	clr	c
      000D54 E4               [12] 3076 	clr	a
      000D55 9E               [12] 3077 	subb	a,r6
      000D56 74 80            [12] 3078 	mov	a,#(0x00 ^ 0x80)
      000D58 8F F0            [24] 3079 	mov	b,r7
      000D5A 63 F0 80         [24] 3080 	xrl	b,#0x80
      000D5D 95 F0            [12] 3081 	subb	a,b
      000D5F 40 03            [24] 3082 	jc	00135$
      000D61 02r0Er7C         [24] 3083 	ljmp	00107$
      000D64                       3084 00135$:
                                   3085 ;	program.c:602: printf("\n\r-------------------------HEXDUMP--------------------------------");
      000D64 74rC7            [12] 3086 	mov	a,#___str_54
      000D66 C0 E0            [24] 3087 	push	acc
      000D68 74s07            [12] 3088 	mov	a,#(___str_54 >> 8)
      000D6A C0 E0            [24] 3089 	push	acc
      000D6C 74 80            [12] 3090 	mov	a,#0x80
      000D6E C0 E0            [24] 3091 	push	acc
      000D70 12r00r00         [24] 3092 	lcall	_printf
      000D73 15 81            [12] 3093 	dec	sp
      000D75 15 81            [12] 3094 	dec	sp
      000D77 15 81            [12] 3095 	dec	sp
                                   3096 ;	program.c:603: printf("\n\r    ADDR: +0 +1 +2 +3 +4 +5 +6 +7 +8 +9 +A +B +C +D +E +F \n\r");
      000D79 74r0A            [12] 3097 	mov	a,#___str_55
      000D7B C0 E0            [24] 3098 	push	acc
      000D7D 74s08            [12] 3099 	mov	a,#(___str_55 >> 8)
      000D7F C0 E0            [24] 3100 	push	acc
      000D81 74 80            [12] 3101 	mov	a,#0x80
      000D83 C0 E0            [24] 3102 	push	acc
      000D85 12r00r00         [24] 3103 	lcall	_printf
      000D88 15 81            [12] 3104 	dec	sp
      000D8A 15 81            [12] 3105 	dec	sp
      000D8C 15 81            [12] 3106 	dec	sp
                                   3107 ;	program.c:604: int j = 16;
      000D8E 90r01r5C         [24] 3108 	mov	dptr,#_dump_buff_zero_hex_j_131073_116
      000D91 74 10            [12] 3109 	mov	a,#0x10
      000D93 F0               [24] 3110 	movx	@dptr,a
      000D94 E4               [12] 3111 	clr	a
      000D95 A3               [24] 3112 	inc	dptr
      000D96 F0               [24] 3113 	movx	@dptr,a
                                   3114 ;	program.c:606: for (int i = 0; i < buffers_array[0].num_char; i++)
      000D97 7E 00            [12] 3115 	mov	r6,#0x00
      000D99 7F 00            [12] 3116 	mov	r7,#0x00
      000D9B                       3117 00110$:
      000D9B 90r00r14         [24] 3118 	mov	dptr,#(_buffers_array + 0x000a)
      000D9E E0               [24] 3119 	movx	a,@dptr
      000D9F FC               [12] 3120 	mov	r4,a
      000DA0 A3               [24] 3121 	inc	dptr
      000DA1 E0               [24] 3122 	movx	a,@dptr
      000DA2 FD               [12] 3123 	mov	r5,a
      000DA3 C3               [12] 3124 	clr	c
      000DA4 EE               [12] 3125 	mov	a,r6
      000DA5 9C               [12] 3126 	subb	a,r4
      000DA6 EF               [12] 3127 	mov	a,r7
      000DA7 64 80            [12] 3128 	xrl	a,#0x80
      000DA9 8D F0            [24] 3129 	mov	b,r5
      000DAB 63 F0 80         [24] 3130 	xrl	b,#0x80
      000DAE 95 F0            [12] 3131 	subb	a,b
      000DB0 40 03            [24] 3132 	jc	00136$
      000DB2 02r0Er66         [24] 3133 	ljmp	00105$
      000DB5                       3134 00136$:
                                   3135 ;	program.c:608: if (j == 16)
      000DB5 90r01r5C         [24] 3136 	mov	dptr,#_dump_buff_zero_hex_j_131073_116
      000DB8 E0               [24] 3137 	movx	a,@dptr
      000DB9 FC               [12] 3138 	mov	r4,a
      000DBA A3               [24] 3139 	inc	dptr
      000DBB E0               [24] 3140 	movx	a,@dptr
      000DBC FD               [12] 3141 	mov	r5,a
      000DBD BC 10 37         [24] 3142 	cjne	r4,#0x10,00102$
      000DC0 BD 00 34         [24] 3143 	cjne	r5,#0x00,00102$
                                   3144 ;	program.c:610: printf("\n\r%p: ", (buffers_array[0].buffer_start + i));
      000DC3 90r00r0C         [24] 3145 	mov	dptr,#(_buffers_array + 0x0002)
      000DC6 E0               [24] 3146 	movx	a,@dptr
      000DC7 FB               [12] 3147 	mov	r3,a
      000DC8 A3               [24] 3148 	inc	dptr
      000DC9 E0               [24] 3149 	movx	a,@dptr
      000DCA FC               [12] 3150 	mov	r4,a
      000DCB A3               [24] 3151 	inc	dptr
      000DCC E0               [24] 3152 	movx	a,@dptr
      000DCD FD               [12] 3153 	mov	r5,a
      000DCE EE               [12] 3154 	mov	a,r6
      000DCF 2B               [12] 3155 	add	a,r3
      000DD0 FB               [12] 3156 	mov	r3,a
      000DD1 EF               [12] 3157 	mov	a,r7
      000DD2 3C               [12] 3158 	addc	a,r4
      000DD3 FC               [12] 3159 	mov	r4,a
      000DD4 C0 07            [24] 3160 	push	ar7
      000DD6 C0 06            [24] 3161 	push	ar6
      000DD8 C0 03            [24] 3162 	push	ar3
      000DDA C0 04            [24] 3163 	push	ar4
      000DDC C0 05            [24] 3164 	push	ar5
      000DDE 74r49            [12] 3165 	mov	a,#___str_56
      000DE0 C0 E0            [24] 3166 	push	acc
      000DE2 74s08            [12] 3167 	mov	a,#(___str_56 >> 8)
      000DE4 C0 E0            [24] 3168 	push	acc
      000DE6 74 80            [12] 3169 	mov	a,#0x80
      000DE8 C0 E0            [24] 3170 	push	acc
      000DEA 12r00r00         [24] 3171 	lcall	_printf
      000DED E5 81            [12] 3172 	mov	a,sp
      000DEF 24 FA            [12] 3173 	add	a,#0xfa
      000DF1 F5 81            [12] 3174 	mov	sp,a
      000DF3 D0 06            [24] 3175 	pop	ar6
      000DF5 D0 07            [24] 3176 	pop	ar7
      000DF7                       3177 00102$:
                                   3178 ;	program.c:612: printf("%x ", *(buffers_array[0].buffer_start + i));
      000DF7 90r00r0C         [24] 3179 	mov	dptr,#(_buffers_array + 0x0002)
      000DFA E0               [24] 3180 	movx	a,@dptr
      000DFB FB               [12] 3181 	mov	r3,a
      000DFC A3               [24] 3182 	inc	dptr
      000DFD E0               [24] 3183 	movx	a,@dptr
      000DFE FC               [12] 3184 	mov	r4,a
      000DFF A3               [24] 3185 	inc	dptr
      000E00 E0               [24] 3186 	movx	a,@dptr
      000E01 FD               [12] 3187 	mov	r5,a
      000E02 EE               [12] 3188 	mov	a,r6
      000E03 2B               [12] 3189 	add	a,r3
      000E04 FB               [12] 3190 	mov	r3,a
      000E05 EF               [12] 3191 	mov	a,r7
      000E06 3C               [12] 3192 	addc	a,r4
      000E07 FC               [12] 3193 	mov	r4,a
      000E08 8B 82            [24] 3194 	mov	dpl,r3
      000E0A 8C 83            [24] 3195 	mov	dph,r4
      000E0C 8D F0            [24] 3196 	mov	b,r5
      000E0E 12r00r00         [24] 3197 	lcall	__gptrget
      000E11 FB               [12] 3198 	mov	r3,a
      000E12 7D 00            [12] 3199 	mov	r5,#0x00
      000E14 C0 07            [24] 3200 	push	ar7
      000E16 C0 06            [24] 3201 	push	ar6
      000E18 C0 03            [24] 3202 	push	ar3
      000E1A C0 05            [24] 3203 	push	ar5
      000E1C 74r50            [12] 3204 	mov	a,#___str_57
      000E1E C0 E0            [24] 3205 	push	acc
      000E20 74s08            [12] 3206 	mov	a,#(___str_57 >> 8)
      000E22 C0 E0            [24] 3207 	push	acc
      000E24 74 80            [12] 3208 	mov	a,#0x80
      000E26 C0 E0            [24] 3209 	push	acc
      000E28 12r00r00         [24] 3210 	lcall	_printf
      000E2B E5 81            [12] 3211 	mov	a,sp
      000E2D 24 FB            [12] 3212 	add	a,#0xfb
      000E2F F5 81            [12] 3213 	mov	sp,a
      000E31 D0 06            [24] 3214 	pop	ar6
      000E33 D0 07            [24] 3215 	pop	ar7
                                   3216 ;	program.c:613: j--;
      000E35 90r01r5C         [24] 3217 	mov	dptr,#_dump_buff_zero_hex_j_131073_116
      000E38 E0               [24] 3218 	movx	a,@dptr
      000E39 24 FF            [12] 3219 	add	a,#0xff
      000E3B FC               [12] 3220 	mov	r4,a
      000E3C A3               [24] 3221 	inc	dptr
      000E3D E0               [24] 3222 	movx	a,@dptr
      000E3E 34 FF            [12] 3223 	addc	a,#0xff
      000E40 FD               [12] 3224 	mov	r5,a
      000E41 90r01r5C         [24] 3225 	mov	dptr,#_dump_buff_zero_hex_j_131073_116
      000E44 EC               [12] 3226 	mov	a,r4
      000E45 F0               [24] 3227 	movx	@dptr,a
      000E46 ED               [12] 3228 	mov	a,r5
      000E47 A3               [24] 3229 	inc	dptr
      000E48 F0               [24] 3230 	movx	@dptr,a
                                   3231 ;	program.c:614: if (j == 0)
      000E49 90r01r5C         [24] 3232 	mov	dptr,#_dump_buff_zero_hex_j_131073_116
      000E4C E0               [24] 3233 	movx	a,@dptr
      000E4D F5 F0            [12] 3234 	mov	b,a
      000E4F A3               [24] 3235 	inc	dptr
      000E50 E0               [24] 3236 	movx	a,@dptr
      000E51 45 F0            [12] 3237 	orl	a,b
      000E53 70 09            [24] 3238 	jnz	00111$
                                   3239 ;	program.c:615: j = 16;
      000E55 90r01r5C         [24] 3240 	mov	dptr,#_dump_buff_zero_hex_j_131073_116
      000E58 74 10            [12] 3241 	mov	a,#0x10
      000E5A F0               [24] 3242 	movx	@dptr,a
      000E5B E4               [12] 3243 	clr	a
      000E5C A3               [24] 3244 	inc	dptr
      000E5D F0               [24] 3245 	movx	@dptr,a
      000E5E                       3246 00111$:
                                   3247 ;	program.c:606: for (int i = 0; i < buffers_array[0].num_char; i++)
      000E5E 0E               [12] 3248 	inc	r6
      000E5F BE 00 01         [24] 3249 	cjne	r6,#0x00,00140$
      000E62 0F               [12] 3250 	inc	r7
      000E63                       3251 00140$:
      000E63 02r0Dr9B         [24] 3252 	ljmp	00110$
      000E66                       3253 00105$:
                                   3254 ;	program.c:617: printf("\n\n\r");
      000E66 74rAC            [12] 3255 	mov	a,#___str_52
      000E68 C0 E0            [24] 3256 	push	acc
      000E6A 74s07            [12] 3257 	mov	a,#(___str_52 >> 8)
      000E6C C0 E0            [24] 3258 	push	acc
      000E6E 74 80            [12] 3259 	mov	a,#0x80
      000E70 C0 E0            [24] 3260 	push	acc
      000E72 12r00r00         [24] 3261 	lcall	_printf
      000E75 15 81            [12] 3262 	dec	sp
      000E77 15 81            [12] 3263 	dec	sp
      000E79 15 81            [12] 3264 	dec	sp
      000E7B 22               [24] 3265 	ret
      000E7C                       3266 00107$:
                                   3267 ;	program.c:621: printf("Buffer 0 is empty...\n\r");
      000E7C 74r54            [12] 3268 	mov	a,#___str_58
      000E7E C0 E0            [24] 3269 	push	acc
      000E80 74s08            [12] 3270 	mov	a,#(___str_58 >> 8)
      000E82 C0 E0            [24] 3271 	push	acc
      000E84 74 80            [12] 3272 	mov	a,#0x80
      000E86 C0 E0            [24] 3273 	push	acc
      000E88 12r00r00         [24] 3274 	lcall	_printf
      000E8B 15 81            [12] 3275 	dec	sp
      000E8D 15 81            [12] 3276 	dec	sp
      000E8F 15 81            [12] 3277 	dec	sp
                                   3278 ;	program.c:623: }
      000E91 22               [24] 3279 	ret
                                   3280 ;------------------------------------------------------------
                                   3281 ;Allocation info for local variables in function 'print_heap_stats'
                                   3282 ;------------------------------------------------------------
                                   3283 ;	program.c:630: void print_heap_stats()
                                   3284 ;	-----------------------------------------
                                   3285 ;	 function print_heap_stats
                                   3286 ;	-----------------------------------------
      000E92                       3287 _print_heap_stats:
                                   3288 ;	program.c:632: DEBUGPORT(0xB);
      000E92 75 82 0B         [24] 3289 	mov	dpl,#0x0b
      000E95 12r12r73         [24] 3290 	lcall	_dataout
                                   3291 ;	program.c:633: printf("\n\r****************HEAP*STATS*************\n\r");
      000E98 74r6B            [12] 3292 	mov	a,#___str_59
      000E9A C0 E0            [24] 3293 	push	acc
      000E9C 74s08            [12] 3294 	mov	a,#(___str_59 >> 8)
      000E9E C0 E0            [24] 3295 	push	acc
      000EA0 74 80            [12] 3296 	mov	a,#0x80
      000EA2 C0 E0            [24] 3297 	push	acc
      000EA4 12r00r00         [24] 3298 	lcall	_printf
      000EA7 15 81            [12] 3299 	dec	sp
      000EA9 15 81            [12] 3300 	dec	sp
      000EAB 15 81            [12] 3301 	dec	sp
                                   3302 ;	program.c:634: printf("Total Heap Size: %d \n\r", program_stats.total_heap_size);
      000EAD 90r00r00         [24] 3303 	mov	dptr,#_program_stats
      000EB0 E0               [24] 3304 	movx	a,@dptr
      000EB1 FE               [12] 3305 	mov	r6,a
      000EB2 A3               [24] 3306 	inc	dptr
      000EB3 E0               [24] 3307 	movx	a,@dptr
      000EB4 FF               [12] 3308 	mov	r7,a
      000EB5 C0 06            [24] 3309 	push	ar6
      000EB7 C0 07            [24] 3310 	push	ar7
      000EB9 74r97            [12] 3311 	mov	a,#___str_60
      000EBB C0 E0            [24] 3312 	push	acc
      000EBD 74s08            [12] 3313 	mov	a,#(___str_60 >> 8)
      000EBF C0 E0            [24] 3314 	push	acc
      000EC1 74 80            [12] 3315 	mov	a,#0x80
      000EC3 C0 E0            [24] 3316 	push	acc
      000EC5 12r00r00         [24] 3317 	lcall	_printf
      000EC8 E5 81            [12] 3318 	mov	a,sp
      000ECA 24 FB            [12] 3319 	add	a,#0xfb
      000ECC F5 81            [12] 3320 	mov	sp,a
                                   3321 ;	program.c:635: printf("Allocated Heap Size: %d \n\r", program_stats.allocated_heap);
      000ECE 90r00r02         [24] 3322 	mov	dptr,#(_program_stats + 0x0002)
      000ED1 E0               [24] 3323 	movx	a,@dptr
      000ED2 FE               [12] 3324 	mov	r6,a
      000ED3 A3               [24] 3325 	inc	dptr
      000ED4 E0               [24] 3326 	movx	a,@dptr
      000ED5 FF               [12] 3327 	mov	r7,a
      000ED6 C0 06            [24] 3328 	push	ar6
      000ED8 C0 07            [24] 3329 	push	ar7
      000EDA 74rAE            [12] 3330 	mov	a,#___str_61
      000EDC C0 E0            [24] 3331 	push	acc
      000EDE 74s08            [12] 3332 	mov	a,#(___str_61 >> 8)
      000EE0 C0 E0            [24] 3333 	push	acc
      000EE2 74 80            [12] 3334 	mov	a,#0x80
      000EE4 C0 E0            [24] 3335 	push	acc
      000EE6 12r00r00         [24] 3336 	lcall	_printf
      000EE9 E5 81            [12] 3337 	mov	a,sp
      000EEB 24 FB            [12] 3338 	add	a,#0xfb
      000EED F5 81            [12] 3339 	mov	sp,a
                                   3340 ;	program.c:636: printf("All Chars: %d \n\r", program_stats.all_char_count);
      000EEF 90r00r04         [24] 3341 	mov	dptr,#(_program_stats + 0x0004)
      000EF2 E0               [24] 3342 	movx	a,@dptr
      000EF3 FE               [12] 3343 	mov	r6,a
      000EF4 A3               [24] 3344 	inc	dptr
      000EF5 E0               [24] 3345 	movx	a,@dptr
      000EF6 FF               [12] 3346 	mov	r7,a
      000EF7 C0 06            [24] 3347 	push	ar6
      000EF9 C0 07            [24] 3348 	push	ar7
      000EFB 74rC9            [12] 3349 	mov	a,#___str_62
      000EFD C0 E0            [24] 3350 	push	acc
      000EFF 74s08            [12] 3351 	mov	a,#(___str_62 >> 8)
      000F01 C0 E0            [24] 3352 	push	acc
      000F03 74 80            [12] 3353 	mov	a,#0x80
      000F05 C0 E0            [24] 3354 	push	acc
      000F07 12r00r00         [24] 3355 	lcall	_printf
      000F0A E5 81            [12] 3356 	mov	a,sp
      000F0C 24 FB            [12] 3357 	add	a,#0xfb
      000F0E F5 81            [12] 3358 	mov	sp,a
                                   3359 ;	program.c:637: printf("Storage Chars: %d \n\r", program_stats.storage_char_count);
      000F10 90r00r06         [24] 3360 	mov	dptr,#(_program_stats + 0x0006)
      000F13 E0               [24] 3361 	movx	a,@dptr
      000F14 FE               [12] 3362 	mov	r6,a
      000F15 A3               [24] 3363 	inc	dptr
      000F16 E0               [24] 3364 	movx	a,@dptr
      000F17 FF               [12] 3365 	mov	r7,a
      000F18 C0 06            [24] 3366 	push	ar6
      000F1A C0 07            [24] 3367 	push	ar7
      000F1C 74rDA            [12] 3368 	mov	a,#___str_63
      000F1E C0 E0            [24] 3369 	push	acc
      000F20 74s08            [12] 3370 	mov	a,#(___str_63 >> 8)
      000F22 C0 E0            [24] 3371 	push	acc
      000F24 74 80            [12] 3372 	mov	a,#0x80
      000F26 C0 E0            [24] 3373 	push	acc
      000F28 12r00r00         [24] 3374 	lcall	_printf
      000F2B E5 81            [12] 3375 	mov	a,sp
      000F2D 24 FB            [12] 3376 	add	a,#0xfb
      000F2F F5 81            [12] 3377 	mov	sp,a
                                   3378 ;	program.c:638: printf("Total Buffers: %d \n\r", program_stats.total_buffers);
      000F31 90r00r08         [24] 3379 	mov	dptr,#(_program_stats + 0x0008)
      000F34 E0               [24] 3380 	movx	a,@dptr
      000F35 FE               [12] 3381 	mov	r6,a
      000F36 A3               [24] 3382 	inc	dptr
      000F37 E0               [24] 3383 	movx	a,@dptr
      000F38 FF               [12] 3384 	mov	r7,a
      000F39 C0 06            [24] 3385 	push	ar6
      000F3B C0 07            [24] 3386 	push	ar7
      000F3D 74rEF            [12] 3387 	mov	a,#___str_64
      000F3F C0 E0            [24] 3388 	push	acc
      000F41 74s08            [12] 3389 	mov	a,#(___str_64 >> 8)
      000F43 C0 E0            [24] 3390 	push	acc
      000F45 74 80            [12] 3391 	mov	a,#0x80
      000F47 C0 E0            [24] 3392 	push	acc
      000F49 12r00r00         [24] 3393 	lcall	_printf
      000F4C E5 81            [12] 3394 	mov	a,sp
      000F4E 24 FB            [12] 3395 	add	a,#0xfb
      000F50 F5 81            [12] 3396 	mov	sp,a
                                   3397 ;	program.c:639: }
      000F52 22               [24] 3398 	ret
                                   3399 ;------------------------------------------------------------
                                   3400 ;Allocation info for local variables in function 'print_all_buffers'
                                   3401 ;------------------------------------------------------------
                                   3402 ;i                         Allocated with name '_print_all_buffers_i_131072_123'
                                   3403 ;------------------------------------------------------------
                                   3404 ;	program.c:646: void print_all_buffers()
                                   3405 ;	-----------------------------------------
                                   3406 ;	 function print_all_buffers
                                   3407 ;	-----------------------------------------
      000F53                       3408 _print_all_buffers:
                                   3409 ;	program.c:648: DEBUGPORT(0xC)
      000F53 75 82 0C         [24] 3410 	mov	dpl,#0x0c
      000F56 12r12r73         [24] 3411 	lcall	_dataout
                                   3412 ;	program.c:649: for (int i = 0; i < program_stats.total_buffers; i++)
      000F59 7E 00            [12] 3413 	mov	r6,#0x00
      000F5B 7F 00            [12] 3414 	mov	r7,#0x00
      000F5D                       3415 00103$:
      000F5D 90r00r08         [24] 3416 	mov	dptr,#(_program_stats + 0x0008)
      000F60 E0               [24] 3417 	movx	a,@dptr
      000F61 FC               [12] 3418 	mov	r4,a
      000F62 A3               [24] 3419 	inc	dptr
      000F63 E0               [24] 3420 	movx	a,@dptr
      000F64 FD               [12] 3421 	mov	r5,a
      000F65 C3               [12] 3422 	clr	c
      000F66 EE               [12] 3423 	mov	a,r6
      000F67 9C               [12] 3424 	subb	a,r4
      000F68 EF               [12] 3425 	mov	a,r7
      000F69 64 80            [12] 3426 	xrl	a,#0x80
      000F6B 8D F0            [24] 3427 	mov	b,r5
      000F6D 63 F0 80         [24] 3428 	xrl	b,#0x80
      000F70 95 F0            [12] 3429 	subb	a,b
      000F72 40 03            [24] 3430 	jc	00116$
      000F74 02r10rAD         [24] 3431 	ljmp	00101$
      000F77                       3432 00116$:
                                   3433 ;	program.c:651: printf("****************BUFFER*%d***************\n\r", i);
      000F77 C0 07            [24] 3434 	push	ar7
      000F79 C0 06            [24] 3435 	push	ar6
      000F7B C0 06            [24] 3436 	push	ar6
      000F7D C0 07            [24] 3437 	push	ar7
      000F7F 74r04            [12] 3438 	mov	a,#___str_65
      000F81 C0 E0            [24] 3439 	push	acc
      000F83 74s09            [12] 3440 	mov	a,#(___str_65 >> 8)
      000F85 C0 E0            [24] 3441 	push	acc
      000F87 74 80            [12] 3442 	mov	a,#0x80
      000F89 C0 E0            [24] 3443 	push	acc
      000F8B 12r00r00         [24] 3444 	lcall	_printf
      000F8E E5 81            [12] 3445 	mov	a,sp
      000F90 24 FB            [12] 3446 	add	a,#0xfb
      000F92 F5 81            [12] 3447 	mov	sp,a
      000F94 D0 06            [24] 3448 	pop	ar6
      000F96 D0 07            [24] 3449 	pop	ar7
                                   3450 ;	program.c:652: printf("Buffer#: %d \n\r", buffers_array[i].buffer_num);
      000F98 90r00r00         [24] 3451 	mov	dptr,#__mulint_PARM_2
      000F9B EE               [12] 3452 	mov	a,r6
      000F9C F0               [24] 3453 	movx	@dptr,a
      000F9D EF               [12] 3454 	mov	a,r7
      000F9E A3               [24] 3455 	inc	dptr
      000F9F F0               [24] 3456 	movx	@dptr,a
      000FA0 90 00 0C         [24] 3457 	mov	dptr,#0x000c
      000FA3 C0 07            [24] 3458 	push	ar7
      000FA5 C0 06            [24] 3459 	push	ar6
      000FA7 12r00r00         [24] 3460 	lcall	__mulint
      000FAA AC 82            [24] 3461 	mov	r4,dpl
      000FAC AD 83            [24] 3462 	mov	r5,dph
      000FAE EC               [12] 3463 	mov	a,r4
      000FAF 24r0A            [12] 3464 	add	a,#_buffers_array
      000FB1 F5 82            [12] 3465 	mov	dpl,a
      000FB3 ED               [12] 3466 	mov	a,r5
      000FB4 34s00            [12] 3467 	addc	a,#(_buffers_array >> 8)
      000FB6 F5 83            [12] 3468 	mov	dph,a
      000FB8 E0               [24] 3469 	movx	a,@dptr
      000FB9 FA               [12] 3470 	mov	r2,a
      000FBA A3               [24] 3471 	inc	dptr
      000FBB E0               [24] 3472 	movx	a,@dptr
      000FBC FB               [12] 3473 	mov	r3,a
      000FBD C0 05            [24] 3474 	push	ar5
      000FBF C0 04            [24] 3475 	push	ar4
      000FC1 C0 02            [24] 3476 	push	ar2
      000FC3 C0 03            [24] 3477 	push	ar3
      000FC5 74r2F            [12] 3478 	mov	a,#___str_66
      000FC7 C0 E0            [24] 3479 	push	acc
      000FC9 74s09            [12] 3480 	mov	a,#(___str_66 >> 8)
      000FCB C0 E0            [24] 3481 	push	acc
      000FCD 74 80            [12] 3482 	mov	a,#0x80
      000FCF C0 E0            [24] 3483 	push	acc
      000FD1 12r00r00         [24] 3484 	lcall	_printf
      000FD4 E5 81            [12] 3485 	mov	a,sp
      000FD6 24 FB            [12] 3486 	add	a,#0xfb
      000FD8 F5 81            [12] 3487 	mov	sp,a
      000FDA D0 04            [24] 3488 	pop	ar4
      000FDC D0 05            [24] 3489 	pop	ar5
                                   3490 ;	program.c:653: printf("BufferStart: %p \n\r", buffers_array[i].buffer_start);
      000FDE EC               [12] 3491 	mov	a,r4
      000FDF 24r0A            [12] 3492 	add	a,#_buffers_array
      000FE1 FC               [12] 3493 	mov	r4,a
      000FE2 ED               [12] 3494 	mov	a,r5
      000FE3 34s00            [12] 3495 	addc	a,#(_buffers_array >> 8)
      000FE5 FD               [12] 3496 	mov	r5,a
      000FE6 8C 82            [24] 3497 	mov	dpl,r4
      000FE8 8D 83            [24] 3498 	mov	dph,r5
      000FEA A3               [24] 3499 	inc	dptr
      000FEB A3               [24] 3500 	inc	dptr
      000FEC E0               [24] 3501 	movx	a,@dptr
      000FED F9               [12] 3502 	mov	r1,a
      000FEE A3               [24] 3503 	inc	dptr
      000FEF E0               [24] 3504 	movx	a,@dptr
      000FF0 FA               [12] 3505 	mov	r2,a
      000FF1 A3               [24] 3506 	inc	dptr
      000FF2 E0               [24] 3507 	movx	a,@dptr
      000FF3 FB               [12] 3508 	mov	r3,a
      000FF4 C0 05            [24] 3509 	push	ar5
      000FF6 C0 04            [24] 3510 	push	ar4
      000FF8 C0 01            [24] 3511 	push	ar1
      000FFA C0 02            [24] 3512 	push	ar2
      000FFC C0 03            [24] 3513 	push	ar3
      000FFE 74r3E            [12] 3514 	mov	a,#___str_67
      001000 C0 E0            [24] 3515 	push	acc
      001002 74s09            [12] 3516 	mov	a,#(___str_67 >> 8)
      001004 C0 E0            [24] 3517 	push	acc
      001006 74 80            [12] 3518 	mov	a,#0x80
      001008 C0 E0            [24] 3519 	push	acc
      00100A 12r00r00         [24] 3520 	lcall	_printf
      00100D E5 81            [12] 3521 	mov	a,sp
      00100F 24 FA            [12] 3522 	add	a,#0xfa
      001011 F5 81            [12] 3523 	mov	sp,a
      001013 D0 04            [24] 3524 	pop	ar4
      001015 D0 05            [24] 3525 	pop	ar5
                                   3526 ;	program.c:654: printf("BufferEnd: %p \n\r", buffers_array[i].buffer_end);
      001017 8C 82            [24] 3527 	mov	dpl,r4
      001019 8D 83            [24] 3528 	mov	dph,r5
      00101B A3               [24] 3529 	inc	dptr
      00101C A3               [24] 3530 	inc	dptr
      00101D A3               [24] 3531 	inc	dptr
      00101E A3               [24] 3532 	inc	dptr
      00101F A3               [24] 3533 	inc	dptr
      001020 E0               [24] 3534 	movx	a,@dptr
      001021 F9               [12] 3535 	mov	r1,a
      001022 A3               [24] 3536 	inc	dptr
      001023 E0               [24] 3537 	movx	a,@dptr
      001024 FA               [12] 3538 	mov	r2,a
      001025 A3               [24] 3539 	inc	dptr
      001026 E0               [24] 3540 	movx	a,@dptr
      001027 FB               [12] 3541 	mov	r3,a
      001028 C0 05            [24] 3542 	push	ar5
      00102A C0 04            [24] 3543 	push	ar4
      00102C C0 01            [24] 3544 	push	ar1
      00102E C0 02            [24] 3545 	push	ar2
      001030 C0 03            [24] 3546 	push	ar3
      001032 74r51            [12] 3547 	mov	a,#___str_68
      001034 C0 E0            [24] 3548 	push	acc
      001036 74s09            [12] 3549 	mov	a,#(___str_68 >> 8)
      001038 C0 E0            [24] 3550 	push	acc
      00103A 74 80            [12] 3551 	mov	a,#0x80
      00103C C0 E0            [24] 3552 	push	acc
      00103E 12r00r00         [24] 3553 	lcall	_printf
      001041 E5 81            [12] 3554 	mov	a,sp
      001043 24 FA            [12] 3555 	add	a,#0xfa
      001045 F5 81            [12] 3556 	mov	sp,a
      001047 D0 04            [24] 3557 	pop	ar4
      001049 D0 05            [24] 3558 	pop	ar5
                                   3559 ;	program.c:655: printf("BufferSize: %d \n\r", buffers_array[i].buff_size);
      00104B 74 08            [12] 3560 	mov	a,#0x08
      00104D 2C               [12] 3561 	add	a,r4
      00104E F5 82            [12] 3562 	mov	dpl,a
      001050 E4               [12] 3563 	clr	a
      001051 3D               [12] 3564 	addc	a,r5
      001052 F5 83            [12] 3565 	mov	dph,a
      001054 E0               [24] 3566 	movx	a,@dptr
      001055 FA               [12] 3567 	mov	r2,a
      001056 A3               [24] 3568 	inc	dptr
      001057 E0               [24] 3569 	movx	a,@dptr
      001058 FB               [12] 3570 	mov	r3,a
      001059 C0 05            [24] 3571 	push	ar5
      00105B C0 04            [24] 3572 	push	ar4
      00105D C0 02            [24] 3573 	push	ar2
      00105F C0 03            [24] 3574 	push	ar3
      001061 74r62            [12] 3575 	mov	a,#___str_69
      001063 C0 E0            [24] 3576 	push	acc
      001065 74s09            [12] 3577 	mov	a,#(___str_69 >> 8)
      001067 C0 E0            [24] 3578 	push	acc
      001069 74 80            [12] 3579 	mov	a,#0x80
      00106B C0 E0            [24] 3580 	push	acc
      00106D 12r00r00         [24] 3581 	lcall	_printf
      001070 E5 81            [12] 3582 	mov	a,sp
      001072 24 FB            [12] 3583 	add	a,#0xfb
      001074 F5 81            [12] 3584 	mov	sp,a
      001076 D0 04            [24] 3585 	pop	ar4
      001078 D0 05            [24] 3586 	pop	ar5
                                   3587 ;	program.c:656: printf("TotalUsed: %d \n\r", buffers_array[i].num_char);
      00107A 74 0A            [12] 3588 	mov	a,#0x0a
      00107C 2C               [12] 3589 	add	a,r4
      00107D F5 82            [12] 3590 	mov	dpl,a
      00107F E4               [12] 3591 	clr	a
      001080 3D               [12] 3592 	addc	a,r5
      001081 F5 83            [12] 3593 	mov	dph,a
      001083 E0               [24] 3594 	movx	a,@dptr
      001084 FC               [12] 3595 	mov	r4,a
      001085 A3               [24] 3596 	inc	dptr
      001086 E0               [24] 3597 	movx	a,@dptr
      001087 FD               [12] 3598 	mov	r5,a
      001088 C0 04            [24] 3599 	push	ar4
      00108A C0 05            [24] 3600 	push	ar5
      00108C 74r74            [12] 3601 	mov	a,#___str_70
      00108E C0 E0            [24] 3602 	push	acc
      001090 74s09            [12] 3603 	mov	a,#(___str_70 >> 8)
      001092 C0 E0            [24] 3604 	push	acc
      001094 74 80            [12] 3605 	mov	a,#0x80
      001096 C0 E0            [24] 3606 	push	acc
      001098 12r00r00         [24] 3607 	lcall	_printf
      00109B E5 81            [12] 3608 	mov	a,sp
      00109D 24 FB            [12] 3609 	add	a,#0xfb
      00109F F5 81            [12] 3610 	mov	sp,a
      0010A1 D0 06            [24] 3611 	pop	ar6
      0010A3 D0 07            [24] 3612 	pop	ar7
                                   3613 ;	program.c:649: for (int i = 0; i < program_stats.total_buffers; i++)
      0010A5 0E               [12] 3614 	inc	r6
      0010A6 BE 00 01         [24] 3615 	cjne	r6,#0x00,00117$
      0010A9 0F               [12] 3616 	inc	r7
      0010AA                       3617 00117$:
      0010AA 02r0Fr5D         [24] 3618 	ljmp	00103$
      0010AD                       3619 00101$:
                                   3620 ;	program.c:658: printf("***************************************\n\r");
      0010AD 74r85            [12] 3621 	mov	a,#___str_71
      0010AF C0 E0            [24] 3622 	push	acc
      0010B1 74s09            [12] 3623 	mov	a,#(___str_71 >> 8)
      0010B3 C0 E0            [24] 3624 	push	acc
      0010B5 74 80            [12] 3625 	mov	a,#0x80
      0010B7 C0 E0            [24] 3626 	push	acc
      0010B9 12r00r00         [24] 3627 	lcall	_printf
      0010BC 15 81            [12] 3628 	dec	sp
      0010BE 15 81            [12] 3629 	dec	sp
      0010C0 15 81            [12] 3630 	dec	sp
                                   3631 ;	program.c:659: }
      0010C2 22               [24] 3632 	ret
                                   3633 ;------------------------------------------------------------
                                   3634 ;Allocation info for local variables in function 'get_number'
                                   3635 ;------------------------------------------------------------
                                   3636 ;total_chars               Allocated with name '_get_number_total_chars_65536_125'
                                   3637 ;rec                       Allocated with name '_get_number_rec_65537_127'
                                   3638 ;num                       Allocated with name '_get_number_num_65537_127'
                                   3639 ;i                         Allocated with name '_get_number_i_131073_128'
                                   3640 ;------------------------------------------------------------
                                   3641 ;	program.c:666: int get_number(int total_chars)
                                   3642 ;	-----------------------------------------
                                   3643 ;	 function get_number
                                   3644 ;	-----------------------------------------
      0010C3                       3645 _get_number:
      0010C3 AF 83            [24] 3646 	mov	r7,dph
      0010C5 E5 82            [12] 3647 	mov	a,dpl
      0010C7 90r01r5E         [24] 3648 	mov	dptr,#_get_number_total_chars_65536_125
      0010CA F0               [24] 3649 	movx	@dptr,a
      0010CB EF               [12] 3650 	mov	a,r7
      0010CC A3               [24] 3651 	inc	dptr
      0010CD F0               [24] 3652 	movx	@dptr,a
                                   3653 ;	program.c:668: DEBUGPORT(0xD);
      0010CE 75 82 0D         [24] 3654 	mov	dpl,#0x0d
      0010D1 12r12r73         [24] 3655 	lcall	_dataout
                                   3656 ;	program.c:670: int num = 0;
      0010D4 90r01r60         [24] 3657 	mov	dptr,#_get_number_num_65537_127
      0010D7 E4               [12] 3658 	clr	a
      0010D8 F0               [24] 3659 	movx	@dptr,a
      0010D9 A3               [24] 3660 	inc	dptr
      0010DA F0               [24] 3661 	movx	@dptr,a
                                   3662 ;	program.c:671: for (int i = total_chars; i > 0; i--)
      0010DB 90r01r5E         [24] 3663 	mov	dptr,#_get_number_total_chars_65536_125
      0010DE E0               [24] 3664 	movx	a,@dptr
      0010DF FE               [12] 3665 	mov	r6,a
      0010E0 A3               [24] 3666 	inc	dptr
      0010E1 E0               [24] 3667 	movx	a,@dptr
      0010E2 FF               [12] 3668 	mov	r7,a
      0010E3                       3669 00107$:
      0010E3 C3               [12] 3670 	clr	c
      0010E4 E4               [12] 3671 	clr	a
      0010E5 9E               [12] 3672 	subb	a,r6
      0010E6 74 80            [12] 3673 	mov	a,#(0x00 ^ 0x80)
      0010E8 8F F0            [24] 3674 	mov	b,r7
      0010EA 63 F0 80         [24] 3675 	xrl	b,#0x80
      0010ED 95 F0            [12] 3676 	subb	a,b
      0010EF 40 03            [24] 3677 	jc	00127$
      0010F1 02r11r8F         [24] 3678 	ljmp	00105$
      0010F4                       3679 00127$:
                                   3680 ;	program.c:673: rec = getchar();
      0010F4 C0 07            [24] 3681 	push	ar7
      0010F6 C0 06            [24] 3682 	push	ar6
      0010F8 12r12r37         [24] 3683 	lcall	_getchar
      0010FB AC 82            [24] 3684 	mov	r4,dpl
      0010FD AD 83            [24] 3685 	mov	r5,dph
      0010FF D0 06            [24] 3686 	pop	ar6
      001101 D0 07            [24] 3687 	pop	ar7
                                   3688 ;	program.c:675: if (rec <= 0x39 && rec >= 0x30)
      001103 C3               [12] 3689 	clr	c
      001104 74 39            [12] 3690 	mov	a,#0x39
      001106 9C               [12] 3691 	subb	a,r4
      001107 74 80            [12] 3692 	mov	a,#(0x00 ^ 0x80)
      001109 8D F0            [24] 3693 	mov	b,r5
      00110B 63 F0 80         [24] 3694 	xrl	b,#0x80
      00110E 95 F0            [12] 3695 	subb	a,b
      001110 40 5C            [24] 3696 	jc	00102$
      001112 EC               [12] 3697 	mov	a,r4
      001113 94 30            [12] 3698 	subb	a,#0x30
      001115 ED               [12] 3699 	mov	a,r5
      001116 64 80            [12] 3700 	xrl	a,#0x80
      001118 94 80            [12] 3701 	subb	a,#0x80
      00111A 40 52            [24] 3702 	jc	00102$
                                   3703 ;	program.c:677: num += ((rec - 0x30) * get_num_helper(i - 1));
      00111C EC               [12] 3704 	mov	a,r4
      00111D 24 D0            [12] 3705 	add	a,#0xd0
      00111F FC               [12] 3706 	mov	r4,a
      001120 ED               [12] 3707 	mov	a,r5
      001121 34 FF            [12] 3708 	addc	a,#0xff
      001123 FD               [12] 3709 	mov	r5,a
      001124 EE               [12] 3710 	mov	a,r6
      001125 24 FF            [12] 3711 	add	a,#0xff
      001127 FA               [12] 3712 	mov	r2,a
      001128 EF               [12] 3713 	mov	a,r7
      001129 34 FF            [12] 3714 	addc	a,#0xff
      00112B FB               [12] 3715 	mov	r3,a
      00112C 8A 82            [24] 3716 	mov	dpl,r2
      00112E 8B 83            [24] 3717 	mov	dph,r3
      001130 C0 07            [24] 3718 	push	ar7
      001132 C0 06            [24] 3719 	push	ar6
      001134 C0 05            [24] 3720 	push	ar5
      001136 C0 04            [24] 3721 	push	ar4
      001138 12r11r9B         [24] 3722 	lcall	_get_num_helper
      00113B AA 82            [24] 3723 	mov	r2,dpl
      00113D AB 83            [24] 3724 	mov	r3,dph
      00113F D0 04            [24] 3725 	pop	ar4
      001141 D0 05            [24] 3726 	pop	ar5
      001143 90r00r00         [24] 3727 	mov	dptr,#__mulint_PARM_2
      001146 EA               [12] 3728 	mov	a,r2
      001147 F0               [24] 3729 	movx	@dptr,a
      001148 EB               [12] 3730 	mov	a,r3
      001149 A3               [24] 3731 	inc	dptr
      00114A F0               [24] 3732 	movx	@dptr,a
      00114B 8C 82            [24] 3733 	mov	dpl,r4
      00114D 8D 83            [24] 3734 	mov	dph,r5
      00114F 12r00r00         [24] 3735 	lcall	__mulint
      001152 AC 82            [24] 3736 	mov	r4,dpl
      001154 AD 83            [24] 3737 	mov	r5,dph
      001156 D0 06            [24] 3738 	pop	ar6
      001158 D0 07            [24] 3739 	pop	ar7
      00115A 90r01r60         [24] 3740 	mov	dptr,#_get_number_num_65537_127
      00115D E0               [24] 3741 	movx	a,@dptr
      00115E FA               [12] 3742 	mov	r2,a
      00115F A3               [24] 3743 	inc	dptr
      001160 E0               [24] 3744 	movx	a,@dptr
      001161 FB               [12] 3745 	mov	r3,a
      001162 90r01r60         [24] 3746 	mov	dptr,#_get_number_num_65537_127
      001165 EC               [12] 3747 	mov	a,r4
      001166 2A               [12] 3748 	add	a,r2
      001167 F0               [24] 3749 	movx	@dptr,a
      001168 ED               [12] 3750 	mov	a,r5
      001169 3B               [12] 3751 	addc	a,r3
      00116A A3               [24] 3752 	inc	dptr
      00116B F0               [24] 3753 	movx	@dptr,a
      00116C 80 19            [24] 3754 	sjmp	00108$
      00116E                       3755 00102$:
                                   3756 ;	program.c:681: printf("ERR,Numbers ONLY!\n\r");
      00116E 74rAF            [12] 3757 	mov	a,#___str_72
      001170 C0 E0            [24] 3758 	push	acc
      001172 74s09            [12] 3759 	mov	a,#(___str_72 >> 8)
      001174 C0 E0            [24] 3760 	push	acc
      001176 74 80            [12] 3761 	mov	a,#0x80
      001178 C0 E0            [24] 3762 	push	acc
      00117A 12r00r00         [24] 3763 	lcall	_printf
      00117D 15 81            [12] 3764 	dec	sp
      00117F 15 81            [12] 3765 	dec	sp
      001181 15 81            [12] 3766 	dec	sp
                                   3767 ;	program.c:682: return -1;
      001183 90 FF FF         [24] 3768 	mov	dptr,#0xffff
      001186 22               [24] 3769 	ret
      001187                       3770 00108$:
                                   3771 ;	program.c:671: for (int i = total_chars; i > 0; i--)
      001187 1E               [12] 3772 	dec	r6
      001188 BE FF 01         [24] 3773 	cjne	r6,#0xff,00130$
      00118B 1F               [12] 3774 	dec	r7
      00118C                       3775 00130$:
      00118C 02r10rE3         [24] 3776 	ljmp	00107$
      00118F                       3777 00105$:
                                   3778 ;	program.c:685: return num;
      00118F 90r01r60         [24] 3779 	mov	dptr,#_get_number_num_65537_127
      001192 E0               [24] 3780 	movx	a,@dptr
      001193 FE               [12] 3781 	mov	r6,a
      001194 A3               [24] 3782 	inc	dptr
      001195 E0               [24] 3783 	movx	a,@dptr
                                   3784 ;	program.c:686: }
      001196 8E 82            [24] 3785 	mov	dpl,r6
      001198 F5 83            [12] 3786 	mov	dph,a
      00119A 22               [24] 3787 	ret
                                   3788 ;------------------------------------------------------------
                                   3789 ;Allocation info for local variables in function 'get_num_helper'
                                   3790 ;------------------------------------------------------------
                                   3791 ;times                     Allocated with name '_get_num_helper_times_65536_132'
                                   3792 ;num                       Allocated with name '_get_num_helper_num_65536_133'
                                   3793 ;i                         Allocated with name '_get_num_helper_i_131072_134'
                                   3794 ;------------------------------------------------------------
                                   3795 ;	program.c:693: int get_num_helper(int times)
                                   3796 ;	-----------------------------------------
                                   3797 ;	 function get_num_helper
                                   3798 ;	-----------------------------------------
      00119B                       3799 _get_num_helper:
      00119B AF 83            [24] 3800 	mov	r7,dph
      00119D E5 82            [12] 3801 	mov	a,dpl
      00119F 90r01r62         [24] 3802 	mov	dptr,#_get_num_helper_times_65536_132
      0011A2 F0               [24] 3803 	movx	@dptr,a
      0011A3 EF               [12] 3804 	mov	a,r7
      0011A4 A3               [24] 3805 	inc	dptr
      0011A5 F0               [24] 3806 	movx	@dptr,a
                                   3807 ;	program.c:695: int num = 1;
      0011A6 90r01r64         [24] 3808 	mov	dptr,#_get_num_helper_num_65536_133
      0011A9 74 01            [12] 3809 	mov	a,#0x01
      0011AB F0               [24] 3810 	movx	@dptr,a
      0011AC E4               [12] 3811 	clr	a
      0011AD A3               [24] 3812 	inc	dptr
      0011AE F0               [24] 3813 	movx	@dptr,a
                                   3814 ;	program.c:697: for (int i = 0; i < times; i++)
      0011AF 90r01r62         [24] 3815 	mov	dptr,#_get_num_helper_times_65536_132
      0011B2 E0               [24] 3816 	movx	a,@dptr
      0011B3 FE               [12] 3817 	mov	r6,a
      0011B4 A3               [24] 3818 	inc	dptr
      0011B5 E0               [24] 3819 	movx	a,@dptr
      0011B6 FF               [12] 3820 	mov	r7,a
      0011B7 7C 00            [12] 3821 	mov	r4,#0x00
      0011B9 7D 00            [12] 3822 	mov	r5,#0x00
      0011BB                       3823 00106$:
      0011BB C3               [12] 3824 	clr	c
      0011BC EC               [12] 3825 	mov	a,r4
      0011BD 9E               [12] 3826 	subb	a,r6
      0011BE ED               [12] 3827 	mov	a,r5
      0011BF 64 80            [12] 3828 	xrl	a,#0x80
      0011C1 8F F0            [24] 3829 	mov	b,r7
      0011C3 63 F0 80         [24] 3830 	xrl	b,#0x80
      0011C6 95 F0            [12] 3831 	subb	a,b
      0011C8 50 3A            [24] 3832 	jnc	00101$
                                   3833 ;	program.c:699: num = num * 10;
      0011CA 90r01r64         [24] 3834 	mov	dptr,#_get_num_helper_num_65536_133
      0011CD E0               [24] 3835 	movx	a,@dptr
      0011CE FA               [12] 3836 	mov	r2,a
      0011CF A3               [24] 3837 	inc	dptr
      0011D0 E0               [24] 3838 	movx	a,@dptr
      0011D1 FB               [12] 3839 	mov	r3,a
      0011D2 90r00r00         [24] 3840 	mov	dptr,#__mulint_PARM_2
      0011D5 EA               [12] 3841 	mov	a,r2
      0011D6 F0               [24] 3842 	movx	@dptr,a
      0011D7 EB               [12] 3843 	mov	a,r3
      0011D8 A3               [24] 3844 	inc	dptr
      0011D9 F0               [24] 3845 	movx	@dptr,a
      0011DA 90 00 0A         [24] 3846 	mov	dptr,#0x000a
      0011DD C0 07            [24] 3847 	push	ar7
      0011DF C0 06            [24] 3848 	push	ar6
      0011E1 C0 05            [24] 3849 	push	ar5
      0011E3 C0 04            [24] 3850 	push	ar4
      0011E5 12r00r00         [24] 3851 	lcall	__mulint
      0011E8 E5 82            [12] 3852 	mov	a,dpl
      0011EA 85 83 F0         [24] 3853 	mov	b,dph
      0011ED D0 04            [24] 3854 	pop	ar4
      0011EF D0 05            [24] 3855 	pop	ar5
      0011F1 D0 06            [24] 3856 	pop	ar6
      0011F3 D0 07            [24] 3857 	pop	ar7
      0011F5 90r01r64         [24] 3858 	mov	dptr,#_get_num_helper_num_65536_133
      0011F8 F0               [24] 3859 	movx	@dptr,a
      0011F9 E5 F0            [12] 3860 	mov	a,b
      0011FB A3               [24] 3861 	inc	dptr
      0011FC F0               [24] 3862 	movx	@dptr,a
                                   3863 ;	program.c:697: for (int i = 0; i < times; i++)
      0011FD 0C               [12] 3864 	inc	r4
      0011FE BC 00 BA         [24] 3865 	cjne	r4,#0x00,00106$
      001201 0D               [12] 3866 	inc	r5
      001202 80 B7            [24] 3867 	sjmp	00106$
      001204                       3868 00101$:
                                   3869 ;	program.c:701: if (times == 0)
      001204 EE               [12] 3870 	mov	a,r6
      001205 4F               [12] 3871 	orl	a,r7
      001206 70 04            [24] 3872 	jnz	00103$
                                   3873 ;	program.c:702: return 1;
      001208 90 00 01         [24] 3874 	mov	dptr,#0x0001
      00120B 22               [24] 3875 	ret
      00120C                       3876 00103$:
                                   3877 ;	program.c:704: return num;
      00120C 90r01r64         [24] 3878 	mov	dptr,#_get_num_helper_num_65536_133
      00120F E0               [24] 3879 	movx	a,@dptr
      001210 FE               [12] 3880 	mov	r6,a
      001211 A3               [24] 3881 	inc	dptr
      001212 E0               [24] 3882 	movx	a,@dptr
                                   3883 ;	program.c:705: }
      001213 8E 82            [24] 3884 	mov	dpl,r6
      001215 F5 83            [12] 3885 	mov	dph,a
      001217 22               [24] 3886 	ret
                                   3887 ;------------------------------------------------------------
                                   3888 ;Allocation info for local variables in function 'putchar'
                                   3889 ;------------------------------------------------------------
                                   3890 ;c                         Allocated with name '_putchar_c_65536_136'
                                   3891 ;------------------------------------------------------------
                                   3892 ;	program.c:712: int putchar(int c)
                                   3893 ;	-----------------------------------------
                                   3894 ;	 function putchar
                                   3895 ;	-----------------------------------------
      001218                       3896 _putchar:
      001218 AF 83            [24] 3897 	mov	r7,dph
      00121A E5 82            [12] 3898 	mov	a,dpl
      00121C 90r01r66         [24] 3899 	mov	dptr,#_putchar_c_65536_136
      00121F F0               [24] 3900 	movx	@dptr,a
      001220 EF               [12] 3901 	mov	a,r7
      001221 A3               [24] 3902 	inc	dptr
      001222 F0               [24] 3903 	movx	@dptr,a
                                   3904 ;	program.c:714: while ((SCON & 0x02) == 0)
      001223                       3905 00101$:
      001223 E5 98            [12] 3906 	mov	a,_SCON
      001225 30 E1 FB         [24] 3907 	jnb	acc.1,00101$
                                   3908 ;	program.c:716: TI = 0;
                                   3909 ;	assignBit
      001228 C2 99            [12] 3910 	clr	_TI
                                   3911 ;	program.c:717: SBUF = c;
      00122A 90r01r66         [24] 3912 	mov	dptr,#_putchar_c_65536_136
      00122D E0               [24] 3913 	movx	a,@dptr
      00122E FE               [12] 3914 	mov	r6,a
      00122F A3               [24] 3915 	inc	dptr
      001230 E0               [24] 3916 	movx	a,@dptr
      001231 8E 99            [24] 3917 	mov	_SBUF,r6
                                   3918 ;	program.c:718: return 0;
      001233 90 00 00         [24] 3919 	mov	dptr,#0x0000
                                   3920 ;	program.c:719: }
      001236 22               [24] 3921 	ret
                                   3922 ;------------------------------------------------------------
                                   3923 ;Allocation info for local variables in function 'getchar'
                                   3924 ;------------------------------------------------------------
                                   3925 ;	program.c:726: int getchar()
                                   3926 ;	-----------------------------------------
                                   3927 ;	 function getchar
                                   3928 ;	-----------------------------------------
      001237                       3929 _getchar:
                                   3930 ;	program.c:728: while (RI == 0)
      001237                       3931 00101$:
                                   3932 ;	program.c:730: RI = 0;
                                   3933 ;	assignBit
      001237 10 98 02         [24] 3934 	jbc	_RI,00140$
      00123A 80 FB            [24] 3935 	sjmp	00101$
      00123C                       3936 00140$:
                                   3937 ;	program.c:732: if (SBUF != 0x3F && SBUF != 0x3D && SBUF != 0x40 && SBUF != 0x2B && SBUF != 0x2D)
      00123C 74 3F            [12] 3938 	mov	a,#0x3f
      00123E B5 99 02         [24] 3939 	cjne	a,_SBUF,00141$
      001241 80 27            [24] 3940 	sjmp	00105$
      001243                       3941 00141$:
      001243 74 3D            [12] 3942 	mov	a,#0x3d
      001245 B5 99 02         [24] 3943 	cjne	a,_SBUF,00142$
      001248 80 20            [24] 3944 	sjmp	00105$
      00124A                       3945 00142$:
      00124A 74 40            [12] 3946 	mov	a,#0x40
      00124C B5 99 02         [24] 3947 	cjne	a,_SBUF,00143$
      00124F 80 19            [24] 3948 	sjmp	00105$
      001251                       3949 00143$:
      001251 74 2B            [12] 3950 	mov	a,#0x2b
      001253 B5 99 02         [24] 3951 	cjne	a,_SBUF,00144$
      001256 80 12            [24] 3952 	sjmp	00105$
      001258                       3953 00144$:
      001258 74 2D            [12] 3954 	mov	a,#0x2d
      00125A B5 99 02         [24] 3955 	cjne	a,_SBUF,00145$
      00125D 80 0B            [24] 3956 	sjmp	00105$
      00125F                       3957 00145$:
                                   3958 ;	program.c:733: putchar(SBUF);
      00125F AE 99            [24] 3959 	mov	r6,_SBUF
      001261 7F 00            [12] 3960 	mov	r7,#0x00
      001263 8E 82            [24] 3961 	mov	dpl,r6
      001265 8F 83            [24] 3962 	mov	dph,r7
      001267 12r12r18         [24] 3963 	lcall	_putchar
      00126A                       3964 00105$:
                                   3965 ;	program.c:734: return SBUF;
      00126A AE 99            [24] 3966 	mov	r6,_SBUF
      00126C 7F 00            [12] 3967 	mov	r7,#0x00
      00126E 8E 82            [24] 3968 	mov	dpl,r6
      001270 8F 83            [24] 3969 	mov	dph,r7
                                   3970 ;	program.c:735: }
      001272 22               [24] 3971 	ret
                                   3972 ;------------------------------------------------------------
                                   3973 ;Allocation info for local variables in function 'dataout'
                                   3974 ;------------------------------------------------------------
                                   3975 ;data                      Allocated with name '_dataout_data_65536_139'
                                   3976 ;------------------------------------------------------------
                                   3977 ;	program.c:742: void dataout(unsigned char data)
                                   3978 ;	-----------------------------------------
                                   3979 ;	 function dataout
                                   3980 ;	-----------------------------------------
      001273                       3981 _dataout:
      001273 E5 82            [12] 3982 	mov	a,dpl
      001275 90r01r68         [24] 3983 	mov	dptr,#_dataout_data_65536_139
      001278 F0               [24] 3984 	movx	@dptr,a
                                   3985 ;	program.c:744: DEBUG_LOC = data;
      001279 E0               [24] 3986 	movx	a,@dptr
      00127A 90 80 00         [24] 3987 	mov	dptr,#_DEBUG_LOC
      00127D F0               [24] 3988 	movx	@dptr,a
                                   3989 ;	program.c:745: }
      00127E 22               [24] 3990 	ret
                                   3991 ;------------------------------------------------------------
                                   3992 ;Allocation info for local variables in function '_sdcc_external_startup'
                                   3993 ;------------------------------------------------------------
                                   3994 ;	program.c:779: _sdcc_external_startup()
                                   3995 ;	-----------------------------------------
                                   3996 ;	 function _sdcc_external_startup
                                   3997 ;	-----------------------------------------
      00127F                       3998 __sdcc_external_startup:
                                   3999 ;	program.c:781: CKCON0 |= 0x1;
      00127F 43 8F 01         [24] 4000 	orl	_CKCON0,#0x01
                                   4001 ;	program.c:783: _AUXR = 0xC;
      001282 75 8E 0C         [24] 4002 	mov	__AUXR,#0x0c
                                   4003 ;	program.c:785: SCON = 0x42;
      001285 75 98 42         [24] 4004 	mov	_SCON,#0x42
                                   4005 ;	program.c:787: PCON = 0x80;
      001288 75 87 80         [24] 4006 	mov	_PCON,#0x80
                                   4007 ;	program.c:789: TH1 = 255;
      00128B 75 8D FF         [24] 4008 	mov	_TH1,#0xff
                                   4009 ;	program.c:790: TL1 = 255;
      00128E 75 8B FF         [24] 4010 	mov	_TL1,#0xff
                                   4011 ;	program.c:792: TMOD = 0x20;
      001291 75 89 20         [24] 4012 	mov	_TMOD,#0x20
                                   4013 ;	program.c:794: REN = 1;
                                   4014 ;	assignBit
      001294 D2 9C            [12] 4015 	setb	_REN
                                   4016 ;	program.c:796: TR1 = 1;
                                   4017 ;	assignBit
      001296 D2 8E            [12] 4018 	setb	_TR1
                                   4019 ;	program.c:798: EA = 1;
                                   4020 ;	assignBit
      001298 D2 AF            [12] 4021 	setb	_EA
                                   4022 ;	program.c:800: EC = 1;
                                   4023 ;	assignBit
      00129A D2 AE            [12] 4024 	setb	_EC
                                   4025 ;	program.c:801: return 0;
      00129C 90 00 00         [24] 4026 	mov	dptr,#0x0000
                                   4027 ;	program.c:802: }
      00129F 22               [24] 4028 	ret
                                   4029 	.area CSEG    (CODE)
                                   4030 	.area CONST   (CODE)
                                   4031 	.area CONST   (CODE)
      000000                       4032 ___str_0:
      000000 0A                    4033 	.db 0x0a
      000001 0D                    4034 	.db 0x0d
      000002 20 48 45 4C 4C 4F 21  4035 	.ascii " HELLO! Started in X2 Mode "
             20 53 74 61 72 74 65
             64 20 69 6E 20 58 32
             20 4D 6F 64 65 20
      00001D 0A                    4036 	.db 0x0a
      00001E 0D                    4037 	.db 0x0d
      00001F 00                    4038 	.db 0x00
                                   4039 	.area CSEG    (CODE)
                                   4040 	.area CONST   (CODE)
      000020                       4041 ___str_1:
      000020 48 65 6C 6C 6F 2C 20  4042 	.ascii "Hello, In PCA Demo mode "
             49 6E 20 50 43 41 20
             44 65 6D 6F 20 6D 6F
             64 65 20
      000038 0A                    4043 	.db 0x0a
      000039 0D                    4044 	.db 0x0d
      00003A 00                    4045 	.db 0x00
                                   4046 	.area CSEG    (CODE)
                                   4047 	.area CONST   (CODE)
      00003B                       4048 ___str_2:
      00003B 50 6C 65 61 73 65 20  4049 	.ascii "Please make a valid choice "
             6D 61 6B 65 20 61 20
             76 61 6C 69 64 20 63
             68 6F 69 63 65 20
      000056 0A                    4050 	.db 0x0a
      000057 0D                    4051 	.db 0x0d
      000058 00                    4052 	.db 0x00
                                   4053 	.area CSEG    (CODE)
                                   4054 	.area CONST   (CODE)
      000059                       4055 ___str_3:
      000059 43 61 70 74 75 72 65  4056 	.ascii "Captured Value CCPL -> %d CCPH -> %d "
             64 20 56 61 6C 75 65
             20 43 43 50 4C 20 2D
             3E 20 25 64 20 43 43
             50 48 20 2D 3E 20 25
             64 20
      00007E 0A                    4057 	.db 0x0a
      00007F 0D                    4058 	.db 0x0d
      000080 00                    4059 	.db 0x00
                                   4060 	.area CSEG    (CODE)
                                   4061 	.area CONST   (CODE)
      000081                       4062 ___str_4:
      000081 54 69 6D 65 72 20 49  4063 	.ascii "Timer Interrupt on CCF1!!! "
             6E 74 65 72 72 75 70
             74 20 6F 6E 20 43 43
             46 31 21 21 21 20
      00009C 0A                    4064 	.db 0x0a
      00009D 0D                    4065 	.db 0x0d
      00009E 00                    4066 	.db 0x00
                                   4067 	.area CSEG    (CODE)
                                   4068 	.area CONST   (CODE)
      00009F                       4069 ___str_5:
      00009F 53 65 74 74 69 6E 67  4070 	.ascii "Setting P1.3 as falling edge detector, enabling PCA interrup"
             20 50 31 2E 33 20 61
             73 20 66 61 6C 6C 69
             6E 67 20 65 64 67 65
             20 64 65 74 65 63 74
             6F 72 2C 20 65 6E 61
             62 6C 69 6E 67 20 50
             43 41 20 69 6E 74 65
             72 72 75 70
      0000DB 74 20                 4071 	.ascii "t "
      0000DD 0A                    4072 	.db 0x0a
      0000DE 0D                    4073 	.db 0x0d
      0000DF 00                    4074 	.db 0x00
                                   4075 	.area CSEG    (CODE)
                                   4076 	.area CONST   (CODE)
      0000E0                       4077 ___str_6:
      0000E0 45 6E 74 65 72 69 6E  4078 	.ascii "Entering Software Timer Mode "
             67 20 53 6F 66 74 77
             61 72 65 20 54 69 6D
             65 72 20 4D 6F 64 65
             20
      0000FD 0A                    4079 	.db 0x0a
      0000FE 0D                    4080 	.db 0x0d
      0000FF 00                    4081 	.db 0x00
                                   4082 	.area CSEG    (CODE)
                                   4083 	.area CONST   (CODE)
      000100                       4084 ___str_7:
      000100 45 6E 74 65 72 69 6E  4085 	.ascii "Entering High Speed Toggle Mode"
             67 20 48 69 67 68 20
             53 70 65 65 64 20 54
             6F 67 67 6C 65 20 4D
             6F 64 65
      00011F 0A                    4086 	.db 0x0a
      000120 0D                    4087 	.db 0x0d
      000121 00                    4088 	.db 0x00
                                   4089 	.area CSEG    (CODE)
                                   4090 	.area CONST   (CODE)
      000122                       4091 ___str_8:
      000122 45 6E 74 65 72 69 6E  4092 	.ascii "Entering PWM Mode, 25 percent Duty Cycle"
             67 20 50 57 4D 20 4D
             6F 64 65 2C 20 32 35
             20 70 65 72 63 65 6E
             74 20 44 75 74 79 20
             43 79 63 6C 65
      00014A 0A                    4093 	.db 0x0a
      00014B 0D                    4094 	.db 0x0d
      00014C 00                    4095 	.db 0x00
                                   4096 	.area CSEG    (CODE)
                                   4097 	.area CONST   (CODE)
      00014D                       4098 ___str_9:
      00014D 45 6E 61 62 6C 69 6E  4099 	.ascii "Enabling Watchdog Timer.."
             67 20 57 61 74 63 68
             64 6F 67 20 54 69 6D
             65 72 2E 2E
      000166 0A                    4100 	.db 0x0a
      000167 0D                    4101 	.db 0x0d
      000168 00                    4102 	.db 0x00
                                   4103 	.area CSEG    (CODE)
                                   4104 	.area CONST   (CODE)
      000169                       4105 ___str_10:
      000169 45 6E 74 65 72 69 6E  4106 	.ascii "Entering Idle, Will Exit on external interrupt 0"
             67 20 49 64 6C 65 2C
             20 57 69 6C 6C 20 45
             78 69 74 20 6F 6E 20
             65 78 74 65 72 6E 61
             6C 20 69 6E 74 65 72
             72 75 70 74 20 30
      000199 0A                    4107 	.db 0x0a
      00019A 0D                    4108 	.db 0x0d
      00019B 00                    4109 	.db 0x00
                                   4110 	.area CSEG    (CODE)
                                   4111 	.area CONST   (CODE)
      00019C                       4112 ___str_11:
      00019C 57 6F 6B 65 20 75 70  4113 	.ascii "Woke up from Idle/Power down, going to main menu "
             20 66 72 6F 6D 20 49
             64 6C 65 2F 50 6F 77
             65 72 20 64 6F 77 6E
             2C 20 67 6F 69 6E 67
             20 74 6F 20 6D 61 69
             6E 20 6D 65 6E 75 20
      0001CD 0A                    4114 	.db 0x0a
      0001CE 0D                    4115 	.db 0x0d
      0001CF 00                    4116 	.db 0x00
                                   4117 	.area CSEG    (CODE)
                                   4118 	.area CONST   (CODE)
      0001D0                       4119 ___str_12:
      0001D0 45 6E 74 65 72 69 6E  4120 	.ascii "Entering power down, Will Exit on external interrupt 0"
             67 20 70 6F 77 65 72
             20 64 6F 77 6E 2C 20
             57 69 6C 6C 20 45 78
             69 74 20 6F 6E 20 65
             78 74 65 72 6E 61 6C
             20 69 6E 74 65 72 72
             75 70 74 20 30
      000206 0A                    4121 	.db 0x0a
      000207 0D                    4122 	.db 0x0d
      000208 00                    4123 	.db 0x00
                                   4124 	.area CSEG    (CODE)
                                   4125 	.area CONST   (CODE)
      000209                       4126 ___str_13:
      000209 43 68 61 6E 67 69 6E  4127 	.ascii "Changing Clock prescalar to go to lowest frequency in X2 Mod"
             67 20 43 6C 6F 63 6B
             20 70 72 65 73 63 61
             6C 61 72 20 74 6F 20
             67 6F 20 74 6F 20 6C
             6F 77 65 73 74 20 66
             72 65 71 75 65 6E 63
             79 20 69 6E 20 58 32
             20 4D 6F 64
      000245 65 2E 2E              4128 	.ascii "e.."
      000248 0A                    4129 	.db 0x0a
      000249 0D                    4130 	.db 0x0d
      00024A 00                    4131 	.db 0x00
                                   4132 	.area CSEG    (CODE)
                                   4133 	.area CONST   (CODE)
      00024B                       4134 ___str_14:
      00024B 0A                    4135 	.db 0x0a
      00024C 0A                    4136 	.db 0x0a
      00024D 0D                    4137 	.db 0x0d
      00024E 5E 5E 5E 5E 5E 5E 5E  4138 	.ascii "^^^^^^^^^^^^^^^^^^^-MENU-^^^^^^^^^^^^^^^^^^^^^^^^^^ "
             5E 5E 5E 5E 5E 5E 5E
             5E 5E 5E 5E 5E 2D 4D
             45 4E 55 2D 5E 5E 5E
             5E 5E 5E 5E 5E 5E 5E
             5E 5E 5E 5E 5E 5E 5E
             5E 5E 5E 5E 5E 5E 5E
             5E 5E 20
      000282 0A                    4139 	.db 0x0a
      000283 0A                    4140 	.db 0x0a
      000284 0D                    4141 	.db 0x0d
      000285 00                    4142 	.db 0x00
                                   4143 	.area CSEG    (CODE)
                                   4144 	.area CONST   (CODE)
      000286                       4145 ___str_15:
      000286 27 48 27 20 2D 3E 20  4146 	.ascii "'H' -> Enter Heap Demo Mode "
             45 6E 74 65 72 20 48
             65 61 70 20 44 65 6D
             6F 20 4D 6F 64 65 20
      0002A2 0A                    4147 	.db 0x0a
      0002A3 0D                    4148 	.db 0x0d
      0002A4 00                    4149 	.db 0x00
                                   4150 	.area CSEG    (CODE)
                                   4151 	.area CONST   (CODE)
      0002A5                       4152 ___str_16:
      0002A5 27 50 27 20 2D 3E 20  4153 	.ascii "'P' -> Enter PCA Demo Mode "
             45 6E 74 65 72 20 50
             43 41 20 44 65 6D 6F
             20 4D 6F 64 65 20
      0002C0 0A                    4154 	.db 0x0a
      0002C1 0D                    4155 	.db 0x0d
      0002C2 00                    4156 	.db 0x00
                                   4157 	.area CSEG    (CODE)
                                   4158 	.area CONST   (CODE)
      0002C3                       4159 ___str_17:
      0002C3 27 41 27 20 2D 3E 20  4160 	.ascii "'A' -> Assembly C Mix "
             41 73 73 65 6D 62 6C
             79 20 43 20 4D 69 78
             20
      0002D9 0A                    4161 	.db 0x0a
      0002DA 0D                    4162 	.db 0x0d
      0002DB 00                    4163 	.db 0x00
                                   4164 	.area CSEG    (CODE)
                                   4165 	.area CONST   (CODE)
      0002DC                       4166 ___str_18:
      0002DC 0A                    4167 	.db 0x0a
      0002DD 0D                    4168 	.db 0x0d
      0002DE 20 47 69 76 65 20 70  4169 	.ascii " Give param 1, 8bit "
             61 72 61 6D 20 31 2C
             20 38 62 69 74 20
      0002F2 0A                    4170 	.db 0x0a
      0002F3 0D                    4171 	.db 0x0d
      0002F4 00                    4172 	.db 0x00
                                   4173 	.area CSEG    (CODE)
                                   4174 	.area CONST   (CODE)
      0002F5                       4175 ___str_19:
      0002F5 0A                    4176 	.db 0x0a
      0002F6 0D                    4177 	.db 0x0d
      0002F7 20 47 69 76 65 20 70  4178 	.ascii " Give param 2, 8bit "
             61 72 61 6D 20 32 2C
             20 38 62 69 74 20
      00030B 0A                    4179 	.db 0x0a
      00030C 0D                    4180 	.db 0x0d
      00030D 00                    4181 	.db 0x00
                                   4182 	.area CSEG    (CODE)
                                   4183 	.area CONST   (CODE)
      00030E                       4184 ___str_20:
      00030E 0A                    4185 	.db 0x0a
      00030F 0D                    4186 	.db 0x0d
      000310 20 47 69 76 65 20 70  4187 	.ascii " Give param 3, 8bit "
             61 72 61 6D 20 33 2C
             20 38 62 69 74 20
      000324 0A                    4188 	.db 0x0a
      000325 0D                    4189 	.db 0x0d
      000326 00                    4190 	.db 0x00
                                   4191 	.area CSEG    (CODE)
                                   4192 	.area CONST   (CODE)
      000327                       4193 ___str_21:
      000327 0A                    4194 	.db 0x0a
      000328 0D                    4195 	.db 0x0d
      000329 20 52 45 53 55 4C 54  4196 	.ascii " RESULT-> param3<Mod>param2 * param1 = %d "
             2D 3E 20 70 61 72 61
             6D 33 3C 4D 6F 64 3E
             70 61 72 61 6D 32 20
             2A 20 70 61 72 61 6D
             31 20 3D 20 25 64 20
      000353 0A                    4197 	.db 0x0a
      000354 0D                    4198 	.db 0x0d
      000355 00                    4199 	.db 0x00
                                   4200 	.area CSEG    (CODE)
                                   4201 	.area CONST   (CODE)
      000356                       4202 ___str_22:
      000356 42 75 66 66 65 72 20  4203 	.ascii "Buffer %d Freed ...."
             25 64 20 46 72 65 65
             64 20 2E 2E 2E 2E
      00036A 0A                    4204 	.db 0x0a
      00036B 0D                    4205 	.db 0x0d
      00036C 00                    4206 	.db 0x00
                                   4207 	.area CSEG    (CODE)
                                   4208 	.area CONST   (CODE)
      00036D                       4209 ___str_23:
      00036D 4C 65 74 27 73 20 62  4210 	.ascii "Let's begin again.."
             65 67 69 6E 20 61 67
             61 69 6E 2E 2E
      000380 0A                    4211 	.db 0x0a
      000381 0D                    4212 	.db 0x0d
      000382 00                    4213 	.db 0x00
                                   4214 	.area CSEG    (CODE)
                                   4215 	.area CONST   (CODE)
      000383                       4216 ___str_24:
      000383 0A                    4217 	.db 0x0a
      000384 0D                    4218 	.db 0x0d
      000385 47 69 76 65 20 56 61  4219 	.ascii "Give Valid Buffer Number to delete(1-%d) in 3 digits"
             6C 69 64 20 42 75 66
             66 65 72 20 4E 75 6D
             62 65 72 20 74 6F 20
             64 65 6C 65 74 65 28
             31 2D 25 64 29 20 69
             6E 20 33 20 64 69 67
             69 74 73
      0003B9 0A                    4220 	.db 0x0a
      0003BA 0D                    4221 	.db 0x0d
      0003BB 00                    4222 	.db 0x00
                                   4223 	.area CSEG    (CODE)
                                   4224 	.area CONST   (CODE)
      0003BC                       4225 ___str_25:
      0003BC 42 75 66 66 65 72 20  4226 	.ascii "Buffer %d Successfully Deleted.. "
             25 64 20 53 75 63 63
             65 73 73 66 75 6C 6C
             79 20 44 65 6C 65 74
             65 64 2E 2E 20
      0003DD 0A                    4227 	.db 0x0a
      0003DE 0D                    4228 	.db 0x0d
      0003DF 00                    4229 	.db 0x00
                                   4230 	.area CSEG    (CODE)
                                   4231 	.area CONST   (CODE)
      0003E0                       4232 ___str_26:
      0003E0 0A                    4233 	.db 0x0a
      0003E1 0A                    4234 	.db 0x0a
      0003E2 0D                    4235 	.db 0x0d
      0003E3 5E 5E 5E 5E 5E 5E 5E  4236 	.ascii "^^^^^^^^^^^^^^^^^^^-PCA-MENU-^^^^^^^^^^^^^^^^^^^^^^^^^^ "
             5E 5E 5E 5E 5E 5E 5E
             5E 5E 5E 5E 5E 2D 50
             43 41 2D 4D 45 4E 55
             2D 5E 5E 5E 5E 5E 5E
             5E 5E 5E 5E 5E 5E 5E
             5E 5E 5E 5E 5E 5E 5E
             5E 5E 5E 5E 5E 5E 20
      00041B 0A                    4237 	.db 0x0a
      00041C 0A                    4238 	.db 0x0a
      00041D 0D                    4239 	.db 0x0d
      00041E 00                    4240 	.db 0x00
                                   4241 	.area CSEG    (CODE)
                                   4242 	.area CONST   (CODE)
      00041F                       4243 ___str_27:
      00041F 27 46 27 20 2D 3E 20  4244 	.ascii "'F' -> Falling Edge Capture Mode"
             46 61 6C 6C 69 6E 67
             20 45 64 67 65 20 43
             61 70 74 75 72 65 20
             4D 6F 64 65
      00043F 0A                    4245 	.db 0x0a
      000440 0D                    4246 	.db 0x0d
      000441 00                    4247 	.db 0x00
                                   4248 	.area CSEG    (CODE)
                                   4249 	.area CONST   (CODE)
      000442                       4250 ___str_28:
      000442 27 53 27 20 2D 3E 20  4251 	.ascii "'S' -> Software Timer Mode"
             53 6F 66 74 77 61 72
             65 20 54 69 6D 65 72
             20 4D 6F 64 65
      00045C 0A                    4252 	.db 0x0a
      00045D 0D                    4253 	.db 0x0d
      00045E 00                    4254 	.db 0x00
                                   4255 	.area CSEG    (CODE)
                                   4256 	.area CONST   (CODE)
      00045F                       4257 ___str_29:
      00045F 27 48 27 20 2D 3E 20  4258 	.ascii "'H' -> High Speed Output Mode"
             48 69 67 68 20 53 70
             65 65 64 20 4F 75 74
             70 75 74 20 4D 6F 64
             65
      00047C 0A                    4259 	.db 0x0a
      00047D 0D                    4260 	.db 0x0d
      00047E 00                    4261 	.db 0x00
                                   4262 	.area CSEG    (CODE)
                                   4263 	.area CONST   (CODE)
      00047F                       4264 ___str_30:
      00047F 27 50 27 20 2D 3E 20  4265 	.ascii "'P' -> PWM Mode "
             50 57 4D 20 4D 6F 64
             65 20
      00048F 0A                    4266 	.db 0x0a
      000490 0D                    4267 	.db 0x0d
      000491 00                    4268 	.db 0x00
                                   4269 	.area CSEG    (CODE)
                                   4270 	.area CONST   (CODE)
      000492                       4271 ___str_31:
      000492 27 57 27 20 2D 3E 20  4272 	.ascii "'W' -> Watchdog Timer Mode"
             57 61 74 63 68 64 6F
             67 20 54 69 6D 65 72
             20 4D 6F 64 65
      0004AC 0A                    4273 	.db 0x0a
      0004AD 0D                    4274 	.db 0x0d
      0004AE 00                    4275 	.db 0x00
                                   4276 	.area CSEG    (CODE)
                                   4277 	.area CONST   (CODE)
      0004AF                       4278 ___str_32:
      0004AF 27 49 27 20 2D 3E 20  4279 	.ascii "'I' -> Idle Mode with PWM"
             49 64 6C 65 20 4D 6F
             64 65 20 77 69 74 68
             20 50 57 4D
      0004C8 0A                    4280 	.db 0x0a
      0004C9 0D                    4281 	.db 0x0d
      0004CA 00                    4282 	.db 0x00
                                   4283 	.area CSEG    (CODE)
                                   4284 	.area CONST   (CODE)
      0004CB                       4285 ___str_33:
      0004CB 27 4C 27 20 2D 3E 20  4286 	.ascii "'L' -> Change Prescalar to lowest frequency"
             43 68 61 6E 67 65 20
             50 72 65 73 63 61 6C
             61 72 20 74 6F 20 6C
             6F 77 65 73 74 20 66
             72 65 71 75 65 6E 63
             79
      0004F6 0A                    4287 	.db 0x0a
      0004F7 0D                    4288 	.db 0x0d
      0004F8 00                    4289 	.db 0x00
                                   4290 	.area CSEG    (CODE)
                                   4291 	.area CONST   (CODE)
      0004F9                       4292 ___str_34:
      0004F9 27 44 27 20 2D 3E 20  4293 	.ascii "'D' -> Power Down Mode"
             50 6F 77 65 72 20 44
             6F 77 6E 20 4D 6F 64
             65
      00050F 0A                    4294 	.db 0x0a
      000510 0A                    4295 	.db 0x0a
      000511 0D                    4296 	.db 0x0d
      000512 00                    4297 	.db 0x00
                                   4298 	.area CSEG    (CODE)
                                   4299 	.area CONST   (CODE)
      000513                       4300 ___str_35:
      000513 27 4D 27 20 2D 3E 20  4301 	.ascii "'M' -> Go to Main Menu "
             47 6F 20 74 6F 20 4D
             61 69 6E 20 4D 65 6E
             75 20
      00052A 0A                    4302 	.db 0x0a
      00052B 0A                    4303 	.db 0x0a
      00052C 0D                    4304 	.db 0x0d
      00052D 00                    4305 	.db 0x00
                                   4306 	.area CSEG    (CODE)
                                   4307 	.area CONST   (CODE)
      00052E                       4308 ___str_36:
      00052E 0A                    4309 	.db 0x0a
      00052F 0A                    4310 	.db 0x0a
      000530 0D                    4311 	.db 0x0d
      000531 5E 5E 5E 5E 5E 5E 5E  4312 	.ascii "^^^^^^^^^^^^^^^^^^^-HEAP-MENU-^^^^^^^^^^^^^^^^^^^^^^^^^^ "
             5E 5E 5E 5E 5E 5E 5E
             5E 5E 5E 5E 5E 2D 48
             45 41 50 2D 4D 45 4E
             55 2D 5E 5E 5E 5E 5E
             5E 5E 5E 5E 5E 5E 5E
             5E 5E 5E 5E 5E 5E 5E
             5E 5E 5E 5E 5E 5E 5E
             20
      00056A 0A                    4313 	.db 0x0a
      00056B 0A                    4314 	.db 0x0a
      00056C 0D                    4315 	.db 0x0d
      00056D 00                    4316 	.db 0x00
                                   4317 	.area CSEG    (CODE)
                                   4318 	.area CONST   (CODE)
      00056E                       4319 ___str_37:
      00056E 59 6F 75 20 63 61 6E  4320 	.ascii "You can enter characters or use commands from below "
             20 65 6E 74 65 72 20
             63 68 61 72 61 63 74
             65 72 73 20 6F 72 20
             75 73 65 20 63 6F 6D
             6D 61 6E 64 73 20 66
             72 6F 6D 20 62 65 6C
             6F 77 20
      0005A2 0A                    4321 	.db 0x0a
      0005A3 0D                    4322 	.db 0x0d
      0005A4 00                    4323 	.db 0x00
                                   4324 	.area CSEG    (CODE)
                                   4325 	.area CONST   (CODE)
      0005A5                       4326 ___str_38:
      0005A5 27 3F 27 20 2D 3E 20  4327 	.ascii "'?' -> Show heap status, dump & clear Buffer 0 "
             53 68 6F 77 20 68 65
             61 70 20 73 74 61 74
             75 73 2C 20 64 75 6D
             70 20 26 20 63 6C 65
             61 72 20 42 75 66 66
             65 72 20 30 20
      0005D4 0A                    4328 	.db 0x0a
      0005D5 0D                    4329 	.db 0x0d
      0005D6 00                    4330 	.db 0x00
                                   4331 	.area CSEG    (CODE)
                                   4332 	.area CONST   (CODE)
      0005D7                       4333 ___str_39:
      0005D7 27 2B 27 20 2D 3E 20  4334 	.ascii "'+' -> Add a new Buffer"
             41 64 64 20 61 20 6E
             65 77 20 42 75 66 66
             65 72
      0005EE 0A                    4335 	.db 0x0a
      0005EF 0D                    4336 	.db 0x0d
      0005F0 00                    4337 	.db 0x00
                                   4338 	.area CSEG    (CODE)
                                   4339 	.area CONST   (CODE)
      0005F1                       4340 ___str_40:
      0005F1 27 2D 27 20 2D 3E 20  4341 	.ascii "'-' -> Delete existing Buffer"
             44 65 6C 65 74 65 20
             65 78 69 73 74 69 6E
             67 20 42 75 66 66 65
             72
      00060E 0A                    4342 	.db 0x0a
      00060F 0D                    4343 	.db 0x0d
      000610 00                    4344 	.db 0x00
                                   4345 	.area CSEG    (CODE)
                                   4346 	.area CONST   (CODE)
      000611                       4347 ___str_41:
      000611 27 3D 27 20 2D 3E 20  4348 	.ascii "'=' -> Dump Buffer 0 in hex"
             44 75 6D 70 20 42 75
             66 66 65 72 20 30 20
             69 6E 20 68 65 78
      00062C 0A                    4349 	.db 0x0a
      00062D 0D                    4350 	.db 0x0d
      00062E 00                    4351 	.db 0x00
                                   4352 	.area CSEG    (CODE)
                                   4353 	.area CONST   (CODE)
      00062F                       4354 ___str_42:
      00062F 27 40 27 20 2D 3E 20  4355 	.ascii "'@' -> Free all Heap & begin again"
             46 72 65 65 20 61 6C
             6C 20 48 65 61 70 20
             26 20 62 65 67 69 6E
             20 61 67 61 69 6E
      000651 0A                    4356 	.db 0x0a
      000652 0A                    4357 	.db 0x0a
      000653 0D                    4358 	.db 0x0d
      000654 00                    4359 	.db 0x00
                                   4360 	.area CSEG    (CODE)
                                   4361 	.area CONST   (CODE)
      000655                       4362 ___str_43:
      000655 0A                    4363 	.db 0x0a
      000656 0D                    4364 	.db 0x0d
      000657 47 69 76 65 20 56 61  4365 	.ascii "Give Valid Buffer Size(030-300):"
             6C 69 64 20 42 75 66
             66 65 72 20 53 69 7A
             65 28 30 33 30 2D 33
             30 30 29 3A
      000677 00                    4366 	.db 0x00
                                   4367 	.area CSEG    (CODE)
                                   4368 	.area CONST   (CODE)
      000678                       4369 ___str_44:
      000678 46 61 69 6C 65 64 2C  4370 	.ascii "Failed, give smaller buffer"
             20 67 69 76 65 20 73
             6D 61 6C 6C 65 72 20
             62 75 66 66 65 72
      000693 0A                    4371 	.db 0x0a
      000694 0D                    4372 	.db 0x0d
      000695 00                    4373 	.db 0x00
                                   4374 	.area CSEG    (CODE)
                                   4375 	.area CONST   (CODE)
      000696                       4376 ___str_45:
      000696 0A                    4377 	.db 0x0a
      000697 0A                    4378 	.db 0x0a
      000698 0D                    4379 	.db 0x0d
      000699 23 23 23 23 53 55 43  4380 	.ascii "####SUCCESS, BUFFER Created####"
             43 45 53 53 2C 20 42
             55 46 46 45 52 20 43
             72 65 61 74 65 64 23
             23 23 23
      0006B8 0A                    4381 	.db 0x0a
      0006B9 0A                    4382 	.db 0x0a
      0006BA 0D                    4383 	.db 0x0d
      0006BB 00                    4384 	.db 0x00
                                   4385 	.area CSEG    (CODE)
                                   4386 	.area CONST   (CODE)
      0006BC                       4387 ___str_46:
      0006BC 4E 6F 20 48 65 61 70  4388 	.ascii "No Heap Memory Left, Delete some buffers..."
             20 4D 65 6D 6F 72 79
             20 4C 65 66 74 2C 20
             44 65 6C 65 74 65 20
             73 6F 6D 65 20 62 75
             66 66 65 72 73 2E 2E
             2E
      0006E7 0A                    4389 	.db 0x0a
      0006E8 0D                    4390 	.db 0x0d
      0006E9 00                    4391 	.db 0x00
                                   4392 	.area CSEG    (CODE)
                                   4393 	.area CONST   (CODE)
      0006EA                       4394 ___str_47:
      0006EA 0A                    4395 	.db 0x0a
      0006EB 0D                    4396 	.db 0x0d
      0006EC 47 69 76 65 20 56 61  4397 	.ascii "Give Valid Initial Buffer Size(0048-4800):"
             6C 69 64 20 49 6E 69
             74 69 61 6C 20 42 75
             66 66 65 72 20 53 69
             7A 65 28 30 30 34 38
             2D 34 38 30 30 29 3A
      000716 00                    4398 	.db 0x00
                                   4399 	.area CSEG    (CODE)
                                   4400 	.area CONST   (CODE)
      000717                       4401 ___str_48:
      000717 0A                    4402 	.db 0x0a
      000718 0D                    4403 	.db 0x0d
      000719 23 23 23 23 46 41 49  4404 	.ascii "####FAIL, Please give a smaller buffer size####"
             4C 2C 20 50 6C 65 61
             73 65 20 67 69 76 65
             20 61 20 73 6D 61 6C
             6C 65 72 20 62 75 66
             66 65 72 20 73 69 7A
             65 23 23 23 23
      000748 0A                    4405 	.db 0x0a
      000749 0A                    4406 	.db 0x0a
      00074A 0D                    4407 	.db 0x0d
      00074B 00                    4408 	.db 0x00
                                   4409 	.area CSEG    (CODE)
                                   4410 	.area CONST   (CODE)
      00074C                       4411 ___str_49:
      00074C 0A                    4412 	.db 0x0a
      00074D 0A                    4413 	.db 0x0a
      00074E 0D                    4414 	.db 0x0d
      00074F 23 23 23 23 53 55 43  4415 	.ascii "####SUCCESS, INITIAL BUFFERS Created####"
             43 45 53 53 2C 20 49
             4E 49 54 49 41 4C 20
             42 55 46 46 45 52 53
             20 43 72 65 61 74 65
             64 23 23 23 23
      000777 0A                    4416 	.db 0x0a
      000778 0A                    4417 	.db 0x0a
      000779 0D                    4418 	.db 0x0d
      00077A 00                    4419 	.db 0x00
                                   4420 	.area CSEG    (CODE)
                                   4421 	.area CONST   (CODE)
      00077B                       4422 ___str_50:
      00077B 0A                    4423 	.db 0x0a
      00077C 0A                    4424 	.db 0x0a
      00077D 0D                    4425 	.db 0x0d
      00077E 2A 2A 2A 2A 2A 2A 2A  4426 	.ascii "***********Buffer-0-Contents*********** "
             2A 2A 2A 2A 42 75 66
             66 65 72 2D 30 2D 43
             6F 6E 74 65 6E 74 73
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 20
      0007A6 0A                    4427 	.db 0x0a
      0007A7 0D                    4428 	.db 0x0d
      0007A8 00                    4429 	.db 0x00
                                   4430 	.area CSEG    (CODE)
                                   4431 	.area CONST   (CODE)
      0007A9                       4432 ___str_51:
      0007A9 0A                    4433 	.db 0x0a
      0007AA 0D                    4434 	.db 0x0d
      0007AB 00                    4435 	.db 0x00
                                   4436 	.area CSEG    (CODE)
                                   4437 	.area CONST   (CODE)
      0007AC                       4438 ___str_52:
      0007AC 0A                    4439 	.db 0x0a
      0007AD 0A                    4440 	.db 0x0a
      0007AE 0D                    4441 	.db 0x0d
      0007AF 00                    4442 	.db 0x00
                                   4443 	.area CSEG    (CODE)
                                   4444 	.area CONST   (CODE)
      0007B0                       4445 ___str_53:
      0007B0 42 75 66 66 65 72 30  4446 	.ascii "Buffer0 is Empty...."
             20 69 73 20 45 6D 70
             74 79 2E 2E 2E 2E
      0007C4 0A                    4447 	.db 0x0a
      0007C5 0D                    4448 	.db 0x0d
      0007C6 00                    4449 	.db 0x00
                                   4450 	.area CSEG    (CODE)
                                   4451 	.area CONST   (CODE)
      0007C7                       4452 ___str_54:
      0007C7 0A                    4453 	.db 0x0a
      0007C8 0D                    4454 	.db 0x0d
      0007C9 2D 2D 2D 2D 2D 2D 2D  4455 	.ascii "-------------------------HEXDUMP----------------------------"
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 48 45 58
             44 55 4D 50 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D
      000805 2D 2D 2D 2D           4456 	.ascii "----"
      000809 00                    4457 	.db 0x00
                                   4458 	.area CSEG    (CODE)
                                   4459 	.area CONST   (CODE)
      00080A                       4460 ___str_55:
      00080A 0A                    4461 	.db 0x0a
      00080B 0D                    4462 	.db 0x0d
      00080C 20 20 20 20 41 44 44  4463 	.ascii "    ADDR: +0 +1 +2 +3 +4 +5 +6 +7 +8 +9 +A +B +C +D +E +F "
             52 3A 20 2B 30 20 2B
             31 20 2B 32 20 2B 33
             20 2B 34 20 2B 35 20
             2B 36 20 2B 37 20 2B
             38 20 2B 39 20 2B 41
             20 2B 42 20 2B 43 20
             2B 44 20 2B 45 20 2B
             46 20
      000846 0A                    4464 	.db 0x0a
      000847 0D                    4465 	.db 0x0d
      000848 00                    4466 	.db 0x00
                                   4467 	.area CSEG    (CODE)
                                   4468 	.area CONST   (CODE)
      000849                       4469 ___str_56:
      000849 0A                    4470 	.db 0x0a
      00084A 0D                    4471 	.db 0x0d
      00084B 25 70 3A 20           4472 	.ascii "%p: "
      00084F 00                    4473 	.db 0x00
                                   4474 	.area CSEG    (CODE)
                                   4475 	.area CONST   (CODE)
      000850                       4476 ___str_57:
      000850 25 78 20              4477 	.ascii "%x "
      000853 00                    4478 	.db 0x00
                                   4479 	.area CSEG    (CODE)
                                   4480 	.area CONST   (CODE)
      000854                       4481 ___str_58:
      000854 42 75 66 66 65 72 20  4482 	.ascii "Buffer 0 is empty..."
             30 20 69 73 20 65 6D
             70 74 79 2E 2E 2E
      000868 0A                    4483 	.db 0x0a
      000869 0D                    4484 	.db 0x0d
      00086A 00                    4485 	.db 0x00
                                   4486 	.area CSEG    (CODE)
                                   4487 	.area CONST   (CODE)
      00086B                       4488 ___str_59:
      00086B 0A                    4489 	.db 0x0a
      00086C 0D                    4490 	.db 0x0d
      00086D 2A 2A 2A 2A 2A 2A 2A  4491 	.ascii "****************HEAP*STATS*************"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 48 45 41 50 2A
             53 54 41 54 53 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A
      000894 0A                    4492 	.db 0x0a
      000895 0D                    4493 	.db 0x0d
      000896 00                    4494 	.db 0x00
                                   4495 	.area CSEG    (CODE)
                                   4496 	.area CONST   (CODE)
      000897                       4497 ___str_60:
      000897 54 6F 74 61 6C 20 48  4498 	.ascii "Total Heap Size: %d "
             65 61 70 20 53 69 7A
             65 3A 20 25 64 20
      0008AB 0A                    4499 	.db 0x0a
      0008AC 0D                    4500 	.db 0x0d
      0008AD 00                    4501 	.db 0x00
                                   4502 	.area CSEG    (CODE)
                                   4503 	.area CONST   (CODE)
      0008AE                       4504 ___str_61:
      0008AE 41 6C 6C 6F 63 61 74  4505 	.ascii "Allocated Heap Size: %d "
             65 64 20 48 65 61 70
             20 53 69 7A 65 3A 20
             25 64 20
      0008C6 0A                    4506 	.db 0x0a
      0008C7 0D                    4507 	.db 0x0d
      0008C8 00                    4508 	.db 0x00
                                   4509 	.area CSEG    (CODE)
                                   4510 	.area CONST   (CODE)
      0008C9                       4511 ___str_62:
      0008C9 41 6C 6C 20 43 68 61  4512 	.ascii "All Chars: %d "
             72 73 3A 20 25 64 20
      0008D7 0A                    4513 	.db 0x0a
      0008D8 0D                    4514 	.db 0x0d
      0008D9 00                    4515 	.db 0x00
                                   4516 	.area CSEG    (CODE)
                                   4517 	.area CONST   (CODE)
      0008DA                       4518 ___str_63:
      0008DA 53 74 6F 72 61 67 65  4519 	.ascii "Storage Chars: %d "
             20 43 68 61 72 73 3A
             20 25 64 20
      0008EC 0A                    4520 	.db 0x0a
      0008ED 0D                    4521 	.db 0x0d
      0008EE 00                    4522 	.db 0x00
                                   4523 	.area CSEG    (CODE)
                                   4524 	.area CONST   (CODE)
      0008EF                       4525 ___str_64:
      0008EF 54 6F 74 61 6C 20 42  4526 	.ascii "Total Buffers: %d "
             75 66 66 65 72 73 3A
             20 25 64 20
      000901 0A                    4527 	.db 0x0a
      000902 0D                    4528 	.db 0x0d
      000903 00                    4529 	.db 0x00
                                   4530 	.area CSEG    (CODE)
                                   4531 	.area CONST   (CODE)
      000904                       4532 ___str_65:
      000904 2A 2A 2A 2A 2A 2A 2A  4533 	.ascii "****************BUFFER*%d***************"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 42 55 46 46 45
             52 2A 25 64 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A
      00092C 0A                    4534 	.db 0x0a
      00092D 0D                    4535 	.db 0x0d
      00092E 00                    4536 	.db 0x00
                                   4537 	.area CSEG    (CODE)
                                   4538 	.area CONST   (CODE)
      00092F                       4539 ___str_66:
      00092F 42 75 66 66 65 72 23  4540 	.ascii "Buffer#: %d "
             3A 20 25 64 20
      00093B 0A                    4541 	.db 0x0a
      00093C 0D                    4542 	.db 0x0d
      00093D 00                    4543 	.db 0x00
                                   4544 	.area CSEG    (CODE)
                                   4545 	.area CONST   (CODE)
      00093E                       4546 ___str_67:
      00093E 42 75 66 66 65 72 53  4547 	.ascii "BufferStart: %p "
             74 61 72 74 3A 20 25
             70 20
      00094E 0A                    4548 	.db 0x0a
      00094F 0D                    4549 	.db 0x0d
      000950 00                    4550 	.db 0x00
                                   4551 	.area CSEG    (CODE)
                                   4552 	.area CONST   (CODE)
      000951                       4553 ___str_68:
      000951 42 75 66 66 65 72 45  4554 	.ascii "BufferEnd: %p "
             6E 64 3A 20 25 70 20
      00095F 0A                    4555 	.db 0x0a
      000960 0D                    4556 	.db 0x0d
      000961 00                    4557 	.db 0x00
                                   4558 	.area CSEG    (CODE)
                                   4559 	.area CONST   (CODE)
      000962                       4560 ___str_69:
      000962 42 75 66 66 65 72 53  4561 	.ascii "BufferSize: %d "
             69 7A 65 3A 20 25 64
             20
      000971 0A                    4562 	.db 0x0a
      000972 0D                    4563 	.db 0x0d
      000973 00                    4564 	.db 0x00
                                   4565 	.area CSEG    (CODE)
                                   4566 	.area CONST   (CODE)
      000974                       4567 ___str_70:
      000974 54 6F 74 61 6C 55 73  4568 	.ascii "TotalUsed: %d "
             65 64 3A 20 25 64 20
      000982 0A                    4569 	.db 0x0a
      000983 0D                    4570 	.db 0x0d
      000984 00                    4571 	.db 0x00
                                   4572 	.area CSEG    (CODE)
                                   4573 	.area CONST   (CODE)
      000985                       4574 ___str_71:
      000985 2A 2A 2A 2A 2A 2A 2A  4575 	.ascii "***************************************"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A
      0009AC 0A                    4576 	.db 0x0a
      0009AD 0D                    4577 	.db 0x0d
      0009AE 00                    4578 	.db 0x00
                                   4579 	.area CSEG    (CODE)
                                   4580 	.area CONST   (CODE)
      0009AF                       4581 ___str_72:
      0009AF 45 52 52 2C 4E 75 6D  4582 	.ascii "ERR,Numbers ONLY!"
             62 65 72 73 20 4F 4E
             4C 59 21
      0009C0 0A                    4583 	.db 0x0a
      0009C1 0D                    4584 	.db 0x0d
      0009C2 00                    4585 	.db 0x00
                                   4586 	.area CSEG    (CODE)
                                   4587 	.area XINIT   (CODE)
      000000                       4588 __xinit__global_var_test:
      000000 02                    4589 	.db #0x02	; 2
                                   4590 	.area CABS    (ABS,CODE)
