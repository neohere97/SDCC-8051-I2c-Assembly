                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.0 #12072 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module program
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl __sdcc_external_startup
                                     12 	.globl _main
                                     13 	.globl _printf
                                     14 	.globl _free
                                     15 	.globl _malloc
                                     16 	.globl _TF1
                                     17 	.globl _TR1
                                     18 	.globl _TF0
                                     19 	.globl _TR0
                                     20 	.globl _IE1
                                     21 	.globl _IT1
                                     22 	.globl _IE0
                                     23 	.globl _IT0
                                     24 	.globl _SM0
                                     25 	.globl _SM1
                                     26 	.globl _SM2
                                     27 	.globl _REN
                                     28 	.globl _TB8
                                     29 	.globl _RB8
                                     30 	.globl _TI
                                     31 	.globl _RI
                                     32 	.globl _CY
                                     33 	.globl _AC
                                     34 	.globl _F0
                                     35 	.globl _RS1
                                     36 	.globl _RS0
                                     37 	.globl _OV
                                     38 	.globl _F1
                                     39 	.globl _P
                                     40 	.globl _RD
                                     41 	.globl _WR
                                     42 	.globl _T1
                                     43 	.globl _T0
                                     44 	.globl _INT1
                                     45 	.globl _INT0
                                     46 	.globl _TXD0
                                     47 	.globl _TXD
                                     48 	.globl _RXD0
                                     49 	.globl _RXD
                                     50 	.globl _P3_7
                                     51 	.globl _P3_6
                                     52 	.globl _P3_5
                                     53 	.globl _P3_4
                                     54 	.globl _P3_3
                                     55 	.globl _P3_2
                                     56 	.globl _P3_1
                                     57 	.globl _P3_0
                                     58 	.globl _P2_7
                                     59 	.globl _P2_6
                                     60 	.globl _P2_5
                                     61 	.globl _P2_4
                                     62 	.globl _P2_3
                                     63 	.globl _P2_2
                                     64 	.globl _P2_1
                                     65 	.globl _P2_0
                                     66 	.globl _P1_7
                                     67 	.globl _P1_6
                                     68 	.globl _P1_5
                                     69 	.globl _P1_4
                                     70 	.globl _P1_3
                                     71 	.globl _P1_2
                                     72 	.globl _P1_1
                                     73 	.globl _P1_0
                                     74 	.globl _P0_7
                                     75 	.globl _P0_6
                                     76 	.globl _P0_5
                                     77 	.globl _P0_4
                                     78 	.globl _P0_3
                                     79 	.globl _P0_2
                                     80 	.globl _P0_1
                                     81 	.globl _P0_0
                                     82 	.globl _PS
                                     83 	.globl _PT1
                                     84 	.globl _PX1
                                     85 	.globl _PT0
                                     86 	.globl _PX0
                                     87 	.globl _EA
                                     88 	.globl _ES
                                     89 	.globl _ET1
                                     90 	.globl _EX1
                                     91 	.globl _ET0
                                     92 	.globl _EX0
                                     93 	.globl _BREG_F7
                                     94 	.globl _BREG_F6
                                     95 	.globl _BREG_F5
                                     96 	.globl _BREG_F4
                                     97 	.globl _BREG_F3
                                     98 	.globl _BREG_F2
                                     99 	.globl _BREG_F1
                                    100 	.globl _BREG_F0
                                    101 	.globl _P5_7
                                    102 	.globl _P5_6
                                    103 	.globl _P5_5
                                    104 	.globl _P5_4
                                    105 	.globl _P5_3
                                    106 	.globl _P5_2
                                    107 	.globl _P5_1
                                    108 	.globl _P5_0
                                    109 	.globl _P4_7
                                    110 	.globl _P4_6
                                    111 	.globl _P4_5
                                    112 	.globl _P4_4
                                    113 	.globl _P4_3
                                    114 	.globl _P4_2
                                    115 	.globl _P4_1
                                    116 	.globl _P4_0
                                    117 	.globl _PX0L
                                    118 	.globl _PT0L
                                    119 	.globl _PX1L
                                    120 	.globl _PT1L
                                    121 	.globl _PSL
                                    122 	.globl _PT2L
                                    123 	.globl _PPCL
                                    124 	.globl _EC
                                    125 	.globl _CCF0
                                    126 	.globl _CCF1
                                    127 	.globl _CCF2
                                    128 	.globl _CCF3
                                    129 	.globl _CCF4
                                    130 	.globl _CR
                                    131 	.globl _CF
                                    132 	.globl _TF2
                                    133 	.globl _EXF2
                                    134 	.globl _RCLK
                                    135 	.globl _TCLK
                                    136 	.globl _EXEN2
                                    137 	.globl _TR2
                                    138 	.globl _C_T2
                                    139 	.globl _CP_RL2
                                    140 	.globl _T2CON_7
                                    141 	.globl _T2CON_6
                                    142 	.globl _T2CON_5
                                    143 	.globl _T2CON_4
                                    144 	.globl _T2CON_3
                                    145 	.globl _T2CON_2
                                    146 	.globl _T2CON_1
                                    147 	.globl _T2CON_0
                                    148 	.globl _PT2
                                    149 	.globl _ET2
                                    150 	.globl __AUXR
                                    151 	.globl _TMOD
                                    152 	.globl _TL1
                                    153 	.globl _TL0
                                    154 	.globl _TH1
                                    155 	.globl _TH0
                                    156 	.globl _TCON
                                    157 	.globl _SP
                                    158 	.globl _SCON
                                    159 	.globl _SBUF0
                                    160 	.globl _SBUF
                                    161 	.globl _PSW
                                    162 	.globl _PCON
                                    163 	.globl _P3
                                    164 	.globl _P2
                                    165 	.globl _P1
                                    166 	.globl _P0
                                    167 	.globl _IP
                                    168 	.globl _IE
                                    169 	.globl _DP0L
                                    170 	.globl _DPL
                                    171 	.globl _DP0H
                                    172 	.globl _DPH
                                    173 	.globl _B
                                    174 	.globl _ACC
                                    175 	.globl _EECON
                                    176 	.globl _KBF
                                    177 	.globl _KBE
                                    178 	.globl _KBLS
                                    179 	.globl _BRL
                                    180 	.globl _BDRCON
                                    181 	.globl _T2MOD
                                    182 	.globl _SPDAT
                                    183 	.globl _SPSTA
                                    184 	.globl _SPCON
                                    185 	.globl _SADEN
                                    186 	.globl _SADDR
                                    187 	.globl _WDTPRG
                                    188 	.globl _WDTRST
                                    189 	.globl _P5
                                    190 	.globl _P4
                                    191 	.globl _IPH1
                                    192 	.globl _IPL1
                                    193 	.globl _IPH0
                                    194 	.globl _IPL0
                                    195 	.globl _IEN1
                                    196 	.globl _IEN0
                                    197 	.globl _CMOD
                                    198 	.globl _CL
                                    199 	.globl _CH
                                    200 	.globl _CCON
                                    201 	.globl _CCAPM4
                                    202 	.globl _CCAPM3
                                    203 	.globl _CCAPM2
                                    204 	.globl _CCAPM1
                                    205 	.globl _CCAPM0
                                    206 	.globl _CCAP4L
                                    207 	.globl _CCAP3L
                                    208 	.globl _CCAP2L
                                    209 	.globl _CCAP1L
                                    210 	.globl _CCAP0L
                                    211 	.globl _CCAP4H
                                    212 	.globl _CCAP3H
                                    213 	.globl _CCAP2H
                                    214 	.globl _CCAP1H
                                    215 	.globl _CCAP0H
                                    216 	.globl _CKCON1
                                    217 	.globl _CKCON0
                                    218 	.globl _CKRL
                                    219 	.globl _AUXR1
                                    220 	.globl _AUXR
                                    221 	.globl _TH2
                                    222 	.globl _TL2
                                    223 	.globl _RCAP2H
                                    224 	.globl _RCAP2L
                                    225 	.globl _T2CON
                                    226 	.globl _debug_loc
                                    227 	.globl _buffers_array
                                    228 	.globl _program_stats
                                    229 	.globl _user_interface
                                    230 	.globl _at_clear_all_buffers
                                    231 	.globl _delete_buffer
                                    232 	.globl _print_menu
                                    233 	.globl _create_new_buffer
                                    234 	.globl _create_initial_buffers
                                    235 	.globl _enter_chars
                                    236 	.globl _dump_buff_zero_ascii
                                    237 	.globl _dump_buff_zero_hex
                                    238 	.globl _print_heap_stats
                                    239 	.globl _print_all_buffers
                                    240 	.globl _get_number
                                    241 	.globl _get_num_helper
                                    242 	.globl _putchar
                                    243 	.globl _getchar
                                    244 ;--------------------------------------------------------
                                    245 ; special function registers
                                    246 ;--------------------------------------------------------
                                    247 	.area RSEG    (ABS,DATA)
      000000                        248 	.org 0x0000
                           0000C8   249 _T2CON	=	0x00c8
                           0000CA   250 _RCAP2L	=	0x00ca
                           0000CB   251 _RCAP2H	=	0x00cb
                           0000CC   252 _TL2	=	0x00cc
                           0000CD   253 _TH2	=	0x00cd
                           00008E   254 _AUXR	=	0x008e
                           0000A2   255 _AUXR1	=	0x00a2
                           000097   256 _CKRL	=	0x0097
                           00008F   257 _CKCON0	=	0x008f
                           0000AF   258 _CKCON1	=	0x00af
                           0000FA   259 _CCAP0H	=	0x00fa
                           0000FB   260 _CCAP1H	=	0x00fb
                           0000FC   261 _CCAP2H	=	0x00fc
                           0000FD   262 _CCAP3H	=	0x00fd
                           0000FE   263 _CCAP4H	=	0x00fe
                           0000EA   264 _CCAP0L	=	0x00ea
                           0000EB   265 _CCAP1L	=	0x00eb
                           0000EC   266 _CCAP2L	=	0x00ec
                           0000ED   267 _CCAP3L	=	0x00ed
                           0000EE   268 _CCAP4L	=	0x00ee
                           0000DA   269 _CCAPM0	=	0x00da
                           0000DB   270 _CCAPM1	=	0x00db
                           0000DC   271 _CCAPM2	=	0x00dc
                           0000DD   272 _CCAPM3	=	0x00dd
                           0000DE   273 _CCAPM4	=	0x00de
                           0000D8   274 _CCON	=	0x00d8
                           0000F9   275 _CH	=	0x00f9
                           0000E9   276 _CL	=	0x00e9
                           0000D9   277 _CMOD	=	0x00d9
                           0000A8   278 _IEN0	=	0x00a8
                           0000B1   279 _IEN1	=	0x00b1
                           0000B8   280 _IPL0	=	0x00b8
                           0000B7   281 _IPH0	=	0x00b7
                           0000B2   282 _IPL1	=	0x00b2
                           0000B3   283 _IPH1	=	0x00b3
                           0000C0   284 _P4	=	0x00c0
                           0000E8   285 _P5	=	0x00e8
                           0000A6   286 _WDTRST	=	0x00a6
                           0000A7   287 _WDTPRG	=	0x00a7
                           0000A9   288 _SADDR	=	0x00a9
                           0000B9   289 _SADEN	=	0x00b9
                           0000C3   290 _SPCON	=	0x00c3
                           0000C4   291 _SPSTA	=	0x00c4
                           0000C5   292 _SPDAT	=	0x00c5
                           0000C9   293 _T2MOD	=	0x00c9
                           00009B   294 _BDRCON	=	0x009b
                           00009A   295 _BRL	=	0x009a
                           00009C   296 _KBLS	=	0x009c
                           00009D   297 _KBE	=	0x009d
                           00009E   298 _KBF	=	0x009e
                           0000D2   299 _EECON	=	0x00d2
                           0000E0   300 _ACC	=	0x00e0
                           0000F0   301 _B	=	0x00f0
                           000083   302 _DPH	=	0x0083
                           000083   303 _DP0H	=	0x0083
                           000082   304 _DPL	=	0x0082
                           000082   305 _DP0L	=	0x0082
                           0000A8   306 _IE	=	0x00a8
                           0000B8   307 _IP	=	0x00b8
                           000080   308 _P0	=	0x0080
                           000090   309 _P1	=	0x0090
                           0000A0   310 _P2	=	0x00a0
                           0000B0   311 _P3	=	0x00b0
                           000087   312 _PCON	=	0x0087
                           0000D0   313 _PSW	=	0x00d0
                           000099   314 _SBUF	=	0x0099
                           000099   315 _SBUF0	=	0x0099
                           000098   316 _SCON	=	0x0098
                           000081   317 _SP	=	0x0081
                           000088   318 _TCON	=	0x0088
                           00008C   319 _TH0	=	0x008c
                           00008D   320 _TH1	=	0x008d
                           00008A   321 _TL0	=	0x008a
                           00008B   322 _TL1	=	0x008b
                           000089   323 _TMOD	=	0x0089
                           00008E   324 __AUXR	=	0x008e
                                    325 ;--------------------------------------------------------
                                    326 ; special function bits
                                    327 ;--------------------------------------------------------
                                    328 	.area RSEG    (ABS,DATA)
      000000                        329 	.org 0x0000
                           0000AD   330 _ET2	=	0x00ad
                           0000BD   331 _PT2	=	0x00bd
                           0000C8   332 _T2CON_0	=	0x00c8
                           0000C9   333 _T2CON_1	=	0x00c9
                           0000CA   334 _T2CON_2	=	0x00ca
                           0000CB   335 _T2CON_3	=	0x00cb
                           0000CC   336 _T2CON_4	=	0x00cc
                           0000CD   337 _T2CON_5	=	0x00cd
                           0000CE   338 _T2CON_6	=	0x00ce
                           0000CF   339 _T2CON_7	=	0x00cf
                           0000C8   340 _CP_RL2	=	0x00c8
                           0000C9   341 _C_T2	=	0x00c9
                           0000CA   342 _TR2	=	0x00ca
                           0000CB   343 _EXEN2	=	0x00cb
                           0000CC   344 _TCLK	=	0x00cc
                           0000CD   345 _RCLK	=	0x00cd
                           0000CE   346 _EXF2	=	0x00ce
                           0000CF   347 _TF2	=	0x00cf
                           0000DF   348 _CF	=	0x00df
                           0000DE   349 _CR	=	0x00de
                           0000DC   350 _CCF4	=	0x00dc
                           0000DB   351 _CCF3	=	0x00db
                           0000DA   352 _CCF2	=	0x00da
                           0000D9   353 _CCF1	=	0x00d9
                           0000D8   354 _CCF0	=	0x00d8
                           0000AE   355 _EC	=	0x00ae
                           0000BE   356 _PPCL	=	0x00be
                           0000BD   357 _PT2L	=	0x00bd
                           0000BC   358 _PSL	=	0x00bc
                           0000BB   359 _PT1L	=	0x00bb
                           0000BA   360 _PX1L	=	0x00ba
                           0000B9   361 _PT0L	=	0x00b9
                           0000B8   362 _PX0L	=	0x00b8
                           0000C0   363 _P4_0	=	0x00c0
                           0000C1   364 _P4_1	=	0x00c1
                           0000C2   365 _P4_2	=	0x00c2
                           0000C3   366 _P4_3	=	0x00c3
                           0000C4   367 _P4_4	=	0x00c4
                           0000C5   368 _P4_5	=	0x00c5
                           0000C6   369 _P4_6	=	0x00c6
                           0000C7   370 _P4_7	=	0x00c7
                           0000E8   371 _P5_0	=	0x00e8
                           0000E9   372 _P5_1	=	0x00e9
                           0000EA   373 _P5_2	=	0x00ea
                           0000EB   374 _P5_3	=	0x00eb
                           0000EC   375 _P5_4	=	0x00ec
                           0000ED   376 _P5_5	=	0x00ed
                           0000EE   377 _P5_6	=	0x00ee
                           0000EF   378 _P5_7	=	0x00ef
                           0000F0   379 _BREG_F0	=	0x00f0
                           0000F1   380 _BREG_F1	=	0x00f1
                           0000F2   381 _BREG_F2	=	0x00f2
                           0000F3   382 _BREG_F3	=	0x00f3
                           0000F4   383 _BREG_F4	=	0x00f4
                           0000F5   384 _BREG_F5	=	0x00f5
                           0000F6   385 _BREG_F6	=	0x00f6
                           0000F7   386 _BREG_F7	=	0x00f7
                           0000A8   387 _EX0	=	0x00a8
                           0000A9   388 _ET0	=	0x00a9
                           0000AA   389 _EX1	=	0x00aa
                           0000AB   390 _ET1	=	0x00ab
                           0000AC   391 _ES	=	0x00ac
                           0000AF   392 _EA	=	0x00af
                           0000B8   393 _PX0	=	0x00b8
                           0000B9   394 _PT0	=	0x00b9
                           0000BA   395 _PX1	=	0x00ba
                           0000BB   396 _PT1	=	0x00bb
                           0000BC   397 _PS	=	0x00bc
                           000080   398 _P0_0	=	0x0080
                           000081   399 _P0_1	=	0x0081
                           000082   400 _P0_2	=	0x0082
                           000083   401 _P0_3	=	0x0083
                           000084   402 _P0_4	=	0x0084
                           000085   403 _P0_5	=	0x0085
                           000086   404 _P0_6	=	0x0086
                           000087   405 _P0_7	=	0x0087
                           000090   406 _P1_0	=	0x0090
                           000091   407 _P1_1	=	0x0091
                           000092   408 _P1_2	=	0x0092
                           000093   409 _P1_3	=	0x0093
                           000094   410 _P1_4	=	0x0094
                           000095   411 _P1_5	=	0x0095
                           000096   412 _P1_6	=	0x0096
                           000097   413 _P1_7	=	0x0097
                           0000A0   414 _P2_0	=	0x00a0
                           0000A1   415 _P2_1	=	0x00a1
                           0000A2   416 _P2_2	=	0x00a2
                           0000A3   417 _P2_3	=	0x00a3
                           0000A4   418 _P2_4	=	0x00a4
                           0000A5   419 _P2_5	=	0x00a5
                           0000A6   420 _P2_6	=	0x00a6
                           0000A7   421 _P2_7	=	0x00a7
                           0000B0   422 _P3_0	=	0x00b0
                           0000B1   423 _P3_1	=	0x00b1
                           0000B2   424 _P3_2	=	0x00b2
                           0000B3   425 _P3_3	=	0x00b3
                           0000B4   426 _P3_4	=	0x00b4
                           0000B5   427 _P3_5	=	0x00b5
                           0000B6   428 _P3_6	=	0x00b6
                           0000B7   429 _P3_7	=	0x00b7
                           0000B0   430 _RXD	=	0x00b0
                           0000B0   431 _RXD0	=	0x00b0
                           0000B1   432 _TXD	=	0x00b1
                           0000B1   433 _TXD0	=	0x00b1
                           0000B2   434 _INT0	=	0x00b2
                           0000B3   435 _INT1	=	0x00b3
                           0000B4   436 _T0	=	0x00b4
                           0000B5   437 _T1	=	0x00b5
                           0000B6   438 _WR	=	0x00b6
                           0000B7   439 _RD	=	0x00b7
                           0000D0   440 _P	=	0x00d0
                           0000D1   441 _F1	=	0x00d1
                           0000D2   442 _OV	=	0x00d2
                           0000D3   443 _RS0	=	0x00d3
                           0000D4   444 _RS1	=	0x00d4
                           0000D5   445 _F0	=	0x00d5
                           0000D6   446 _AC	=	0x00d6
                           0000D7   447 _CY	=	0x00d7
                           000098   448 _RI	=	0x0098
                           000099   449 _TI	=	0x0099
                           00009A   450 _RB8	=	0x009a
                           00009B   451 _TB8	=	0x009b
                           00009C   452 _REN	=	0x009c
                           00009D   453 _SM2	=	0x009d
                           00009E   454 _SM1	=	0x009e
                           00009F   455 _SM0	=	0x009f
                           000088   456 _IT0	=	0x0088
                           000089   457 _IE0	=	0x0089
                           00008A   458 _IT1	=	0x008a
                           00008B   459 _IE1	=	0x008b
                           00008C   460 _TR0	=	0x008c
                           00008D   461 _TF0	=	0x008d
                           00008E   462 _TR1	=	0x008e
                           00008F   463 _TF1	=	0x008f
                                    464 ;--------------------------------------------------------
                                    465 ; overlayable register banks
                                    466 ;--------------------------------------------------------
                                    467 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        468 	.ds 8
                                    469 ;--------------------------------------------------------
                                    470 ; internal ram data
                                    471 ;--------------------------------------------------------
                                    472 	.area DSEG    (DATA)
      000000                        473 _delete_buffer_sloc0_1_0:
      000000                        474 	.ds 2
      000002                        475 _delete_buffer_sloc1_1_0:
      000002                        476 	.ds 2
      000004                        477 _delete_buffer_sloc2_1_0:
      000004                        478 	.ds 3
                                    479 ;--------------------------------------------------------
                                    480 ; overlayable items in internal ram 
                                    481 ;--------------------------------------------------------
                                    482 ;--------------------------------------------------------
                                    483 ; Stack segment in internal ram 
                                    484 ;--------------------------------------------------------
                                    485 	.area	SSEG
      000000                        486 __start__stack:
      000000                        487 	.ds	1
                                    488 
                                    489 ;--------------------------------------------------------
                                    490 ; indirectly addressable internal ram data
                                    491 ;--------------------------------------------------------
                                    492 	.area ISEG    (DATA)
                                    493 ;--------------------------------------------------------
                                    494 ; absolute internal ram data
                                    495 ;--------------------------------------------------------
                                    496 	.area IABS    (ABS,DATA)
                                    497 	.area IABS    (ABS,DATA)
                                    498 ;--------------------------------------------------------
                                    499 ; bit data
                                    500 ;--------------------------------------------------------
                                    501 	.area BSEG    (BIT)
                                    502 ;--------------------------------------------------------
                                    503 ; paged external ram data
                                    504 ;--------------------------------------------------------
                                    505 	.area PSEG    (PAG,XDATA)
                                    506 ;--------------------------------------------------------
                                    507 ; external ram data
                                    508 ;--------------------------------------------------------
                                    509 	.area XSEG    (XDATA)
      000000                        510 _program_stats::
      000000                        511 	.ds 10
      00000A                        512 _buffers_array::
      00000A                        513 	.ds 300
      000136                        514 _debug_loc::
      000136                        515 	.ds 2
      000138                        516 _create_new_buffer_buff_65536_58:
      000138                        517 	.ds 12
      000144                        518 _create_initial_buffers_buff_65537_64:
      000144                        519 	.ds 12
      000150                        520 _create_initial_buffers_buff1_65537_64:
      000150                        521 	.ds 12
      00015C                        522 _dump_buff_zero_ascii_j_65536_79:
      00015C                        523 	.ds 2
      00015E                        524 _dump_buff_zero_hex_j_131073_87:
      00015E                        525 	.ds 2
      000160                        526 _get_number_total_chars_65536_96:
      000160                        527 	.ds 2
      000162                        528 _get_number_num_65536_97:
      000162                        529 	.ds 2
      000164                        530 _get_num_helper_times_65536_102:
      000164                        531 	.ds 2
      000166                        532 _get_num_helper_num_65536_103:
      000166                        533 	.ds 2
      000168                        534 _putchar_c_65536_106:
      000168                        535 	.ds 2
                                    536 ;--------------------------------------------------------
                                    537 ; absolute external ram data
                                    538 ;--------------------------------------------------------
                                    539 	.area XABS    (ABS,XDATA)
                                    540 ;--------------------------------------------------------
                                    541 ; external initialized ram data
                                    542 ;--------------------------------------------------------
                                    543 	.area XISEG   (XDATA)
                                    544 	.area HOME    (CODE)
                                    545 	.area GSINIT0 (CODE)
                                    546 	.area GSINIT1 (CODE)
                                    547 	.area GSINIT2 (CODE)
                                    548 	.area GSINIT3 (CODE)
                                    549 	.area GSINIT4 (CODE)
                                    550 	.area GSINIT5 (CODE)
                                    551 	.area GSINIT  (CODE)
                                    552 	.area GSFINAL (CODE)
                                    553 	.area CSEG    (CODE)
                                    554 ;--------------------------------------------------------
                                    555 ; interrupt vector 
                                    556 ;--------------------------------------------------------
                                    557 	.area HOME    (CODE)
      000000                        558 __interrupt_vect:
      000000 02r00r00         [24]  559 	ljmp	__sdcc_gsinit_startup
                                    560 ;--------------------------------------------------------
                                    561 ; global & static initialisations
                                    562 ;--------------------------------------------------------
                                    563 	.area HOME    (CODE)
                                    564 	.area GSINIT  (CODE)
                                    565 	.area GSFINAL (CODE)
                                    566 	.area GSINIT  (CODE)
                                    567 	.globl __sdcc_gsinit_startup
                                    568 	.globl __sdcc_program_startup
                                    569 	.globl __start__stack
                                    570 	.globl __mcs51_genXINIT
                                    571 	.globl __mcs51_genXRAMCLEAR
                                    572 	.globl __mcs51_genRAMCLEAR
                                    573 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  574 	ljmp	__sdcc_program_startup
                                    575 ;--------------------------------------------------------
                                    576 ; Home
                                    577 ;--------------------------------------------------------
                                    578 	.area HOME    (CODE)
                                    579 	.area HOME    (CODE)
      000003                        580 __sdcc_program_startup:
      000003 02r00r00         [24]  581 	ljmp	_main
                                    582 ;	return from main will return to caller
                                    583 ;--------------------------------------------------------
                                    584 ; code
                                    585 ;--------------------------------------------------------
                                    586 	.area CSEG    (CODE)
                                    587 ;------------------------------------------------------------
                                    588 ;Allocation info for local variables in function 'main'
                                    589 ;------------------------------------------------------------
                                    590 ;	program.c:70: void main(void)
                                    591 ;	-----------------------------------------
                                    592 ;	 function main
                                    593 ;	-----------------------------------------
      000000                        594 _main:
                           000007   595 	ar7 = 0x07
                           000006   596 	ar6 = 0x06
                           000005   597 	ar5 = 0x05
                           000004   598 	ar4 = 0x04
                           000003   599 	ar3 = 0x03
                           000002   600 	ar2 = 0x02
                           000001   601 	ar1 = 0x01
                           000000   602 	ar0 = 0x00
                                    603 ;	program.c:72: printf("HELLO! \n\r");
      000000 74r00            [12]  604 	mov	a,#___str_0
      000002 C0 E0            [24]  605 	push	acc
      000004 74s00            [12]  606 	mov	a,#(___str_0 >> 8)
      000006 C0 E0            [24]  607 	push	acc
      000008 74 80            [12]  608 	mov	a,#0x80
      00000A C0 E0            [24]  609 	push	acc
      00000C 12r00r00         [24]  610 	lcall	_printf
      00000F 15 81            [12]  611 	dec	sp
      000011 15 81            [12]  612 	dec	sp
      000013 15 81            [12]  613 	dec	sp
                                    614 ;	program.c:73: user_interface();
                                    615 ;	program.c:74: }
      000015 02r00r18         [24]  616 	ljmp	_user_interface
                                    617 ;------------------------------------------------------------
                                    618 ;Allocation info for local variables in function 'user_interface'
                                    619 ;------------------------------------------------------------
                                    620 ;	program.c:81: void user_interface()
                                    621 ;	-----------------------------------------
                                    622 ;	 function user_interface
                                    623 ;	-----------------------------------------
      000018                        624 _user_interface:
                                    625 ;	program.c:83: create_initial_buffers();
      000018 12r04r93         [24]  626 	lcall	_create_initial_buffers
                                    627 ;	program.c:84: print_all_buffers();
      00001B 12r0Ar9A         [24]  628 	lcall	_print_all_buffers
                                    629 ;	program.c:85: enter_chars();
                                    630 ;	program.c:86: }
      00001E 02r06r6A         [24]  631 	ljmp	_enter_chars
                                    632 ;------------------------------------------------------------
                                    633 ;Allocation info for local variables in function 'at_clear_all_buffers'
                                    634 ;------------------------------------------------------------
                                    635 ;i                         Allocated with name '_at_clear_all_buffers_i_131072_49'
                                    636 ;------------------------------------------------------------
                                    637 ;	program.c:94: void at_clear_all_buffers()
                                    638 ;	-----------------------------------------
                                    639 ;	 function at_clear_all_buffers
                                    640 ;	-----------------------------------------
      000021                        641 _at_clear_all_buffers:
                                    642 ;	program.c:96: for (int i = 0; i < program_stats.total_buffers; i++)
      000021 7E 00            [12]  643 	mov	r6,#0x00
      000023 7F 00            [12]  644 	mov	r7,#0x00
      000025                        645 00103$:
      000025 90r00r08         [24]  646 	mov	dptr,#(_program_stats + 0x0008)
      000028 E0               [24]  647 	movx	a,@dptr
      000029 FC               [12]  648 	mov	r4,a
      00002A A3               [24]  649 	inc	dptr
      00002B E0               [24]  650 	movx	a,@dptr
      00002C FD               [12]  651 	mov	r5,a
      00002D C3               [12]  652 	clr	c
      00002E EE               [12]  653 	mov	a,r6
      00002F 9C               [12]  654 	subb	a,r4
      000030 EF               [12]  655 	mov	a,r7
      000031 64 80            [12]  656 	xrl	a,#0x80
      000033 8D F0            [24]  657 	mov	b,r5
      000035 63 F0 80         [24]  658 	xrl	b,#0x80
      000038 95 F0            [12]  659 	subb	a,b
      00003A 50 61            [24]  660 	jnc	00101$
                                    661 ;	program.c:98: free(buffers_array[i].buffer_start);
      00003C 90r00r00         [24]  662 	mov	dptr,#__mulint_PARM_2
      00003F EE               [12]  663 	mov	a,r6
      000040 F0               [24]  664 	movx	@dptr,a
      000041 EF               [12]  665 	mov	a,r7
      000042 A3               [24]  666 	inc	dptr
      000043 F0               [24]  667 	movx	@dptr,a
      000044 90 00 0C         [24]  668 	mov	dptr,#0x000c
      000047 C0 07            [24]  669 	push	ar7
      000049 C0 06            [24]  670 	push	ar6
      00004B 12r00r00         [24]  671 	lcall	__mulint
      00004E AC 82            [24]  672 	mov	r4,dpl
      000050 AD 83            [24]  673 	mov	r5,dph
      000052 EC               [12]  674 	mov	a,r4
      000053 24r0A            [12]  675 	add	a,#_buffers_array
      000055 FC               [12]  676 	mov	r4,a
      000056 ED               [12]  677 	mov	a,r5
      000057 34s00            [12]  678 	addc	a,#(_buffers_array >> 8)
      000059 FD               [12]  679 	mov	r5,a
      00005A 8C 82            [24]  680 	mov	dpl,r4
      00005C 8D 83            [24]  681 	mov	dph,r5
      00005E A3               [24]  682 	inc	dptr
      00005F A3               [24]  683 	inc	dptr
      000060 E0               [24]  684 	movx	a,@dptr
      000061 FB               [12]  685 	mov	r3,a
      000062 A3               [24]  686 	inc	dptr
      000063 E0               [24]  687 	movx	a,@dptr
      000064 FC               [12]  688 	mov	r4,a
      000065 A3               [24]  689 	inc	dptr
      000066 E0               [24]  690 	movx	a,@dptr
      000067 FD               [12]  691 	mov	r5,a
      000068 8B 82            [24]  692 	mov	dpl,r3
      00006A 8C 83            [24]  693 	mov	dph,r4
      00006C 8D F0            [24]  694 	mov	b,r5
      00006E 12r00r00         [24]  695 	lcall	_free
      000071 D0 06            [24]  696 	pop	ar6
      000073 D0 07            [24]  697 	pop	ar7
                                    698 ;	program.c:99: printf("Buffer %d Freed ....\n\r", i);
      000075 C0 07            [24]  699 	push	ar7
      000077 C0 06            [24]  700 	push	ar6
      000079 C0 06            [24]  701 	push	ar6
      00007B C0 07            [24]  702 	push	ar7
      00007D 74r0A            [12]  703 	mov	a,#___str_1
      00007F C0 E0            [24]  704 	push	acc
      000081 74s00            [12]  705 	mov	a,#(___str_1 >> 8)
      000083 C0 E0            [24]  706 	push	acc
      000085 74 80            [12]  707 	mov	a,#0x80
      000087 C0 E0            [24]  708 	push	acc
      000089 12r00r00         [24]  709 	lcall	_printf
      00008C E5 81            [12]  710 	mov	a,sp
      00008E 24 FB            [12]  711 	add	a,#0xfb
      000090 F5 81            [12]  712 	mov	sp,a
      000092 D0 06            [24]  713 	pop	ar6
      000094 D0 07            [24]  714 	pop	ar7
                                    715 ;	program.c:96: for (int i = 0; i < program_stats.total_buffers; i++)
      000096 0E               [12]  716 	inc	r6
      000097 BE 00 8B         [24]  717 	cjne	r6,#0x00,00103$
      00009A 0F               [12]  718 	inc	r7
      00009B 80 88            [24]  719 	sjmp	00103$
      00009D                        720 00101$:
                                    721 ;	program.c:101: printf("Let's begin again..\n\r");
      00009D 74r21            [12]  722 	mov	a,#___str_2
      00009F C0 E0            [24]  723 	push	acc
      0000A1 74s00            [12]  724 	mov	a,#(___str_2 >> 8)
      0000A3 C0 E0            [24]  725 	push	acc
      0000A5 74 80            [12]  726 	mov	a,#0x80
      0000A7 C0 E0            [24]  727 	push	acc
      0000A9 12r00r00         [24]  728 	lcall	_printf
      0000AC 15 81            [12]  729 	dec	sp
      0000AE 15 81            [12]  730 	dec	sp
      0000B0 15 81            [12]  731 	dec	sp
                                    732 ;	program.c:102: user_interface();
                                    733 ;	program.c:103: }
      0000B2 02r00r18         [24]  734 	ljmp	_user_interface
                                    735 ;------------------------------------------------------------
                                    736 ;Allocation info for local variables in function 'delete_buffer'
                                    737 ;------------------------------------------------------------
                                    738 ;sloc0                     Allocated with name '_delete_buffer_sloc0_1_0'
                                    739 ;sloc1                     Allocated with name '_delete_buffer_sloc1_1_0'
                                    740 ;sloc2                     Allocated with name '_delete_buffer_sloc2_1_0'
                                    741 ;buff_number               Allocated with name '_delete_buffer_buff_number_65536_51'
                                    742 ;buff_to_free              Allocated with name '_delete_buffer_buff_to_free_65536_51'
                                    743 ;buffer_freed_size         Allocated with name '_delete_buffer_buffer_freed_size_65536_51'
                                    744 ;i                         Allocated with name '_delete_buffer_i_196608_53'
                                    745 ;------------------------------------------------------------
                                    746 ;	program.c:110: int delete_buffer()
                                    747 ;	-----------------------------------------
                                    748 ;	 function delete_buffer
                                    749 ;	-----------------------------------------
      0000B5                        750 _delete_buffer:
                                    751 ;	program.c:115: get_del_num:
      0000B5                        752 00101$:
                                    753 ;	program.c:116: printf("\n\rGive Valid Buffer Number to delete(1-%d) in 3 digits\n\r", (program_stats.total_buffers - 1));
      0000B5 90r00r08         [24]  754 	mov	dptr,#(_program_stats + 0x0008)
      0000B8 E0               [24]  755 	movx	a,@dptr
      0000B9 FE               [12]  756 	mov	r6,a
      0000BA A3               [24]  757 	inc	dptr
      0000BB E0               [24]  758 	movx	a,@dptr
      0000BC FF               [12]  759 	mov	r7,a
      0000BD 1E               [12]  760 	dec	r6
      0000BE BE FF 01         [24]  761 	cjne	r6,#0xff,00139$
      0000C1 1F               [12]  762 	dec	r7
      0000C2                        763 00139$:
      0000C2 C0 06            [24]  764 	push	ar6
      0000C4 C0 07            [24]  765 	push	ar7
      0000C6 74r37            [12]  766 	mov	a,#___str_3
      0000C8 C0 E0            [24]  767 	push	acc
      0000CA 74s00            [12]  768 	mov	a,#(___str_3 >> 8)
      0000CC C0 E0            [24]  769 	push	acc
      0000CE 74 80            [12]  770 	mov	a,#0x80
      0000D0 C0 E0            [24]  771 	push	acc
      0000D2 12r00r00         [24]  772 	lcall	_printf
      0000D5 E5 81            [12]  773 	mov	a,sp
      0000D7 24 FB            [12]  774 	add	a,#0xfb
      0000D9 F5 81            [12]  775 	mov	sp,a
                                    776 ;	program.c:117: buff_number = get_number(3);
      0000DB 90 00 03         [24]  777 	mov	dptr,#0x0003
      0000DE 12r0Cr04         [24]  778 	lcall	_get_number
      0000E1 AE 82            [24]  779 	mov	r6,dpl
      0000E3 AF 83            [24]  780 	mov	r7,dph
                                    781 ;	program.c:119: if (buff_number > 0 && buff_number < program_stats.total_buffers)
      0000E5 C3               [12]  782 	clr	c
      0000E6 E4               [12]  783 	clr	a
      0000E7 9E               [12]  784 	subb	a,r6
      0000E8 74 80            [12]  785 	mov	a,#(0x00 ^ 0x80)
      0000EA 8F F0            [24]  786 	mov	b,r7
      0000EC 63 F0 80         [24]  787 	xrl	b,#0x80
      0000EF 95 F0            [12]  788 	subb	a,b
      0000F1 50 C2            [24]  789 	jnc	00101$
      0000F3 90r00r08         [24]  790 	mov	dptr,#(_program_stats + 0x0008)
      0000F6 E0               [24]  791 	movx	a,@dptr
      0000F7 FC               [12]  792 	mov	r4,a
      0000F8 A3               [24]  793 	inc	dptr
      0000F9 E0               [24]  794 	movx	a,@dptr
      0000FA FD               [12]  795 	mov	r5,a
      0000FB C3               [12]  796 	clr	c
      0000FC EE               [12]  797 	mov	a,r6
      0000FD 9C               [12]  798 	subb	a,r4
      0000FE EF               [12]  799 	mov	a,r7
      0000FF 64 80            [12]  800 	xrl	a,#0x80
      000101 8D F0            [24]  801 	mov	b,r5
      000103 63 F0 80         [24]  802 	xrl	b,#0x80
      000106 95 F0            [12]  803 	subb	a,b
      000108 50 AB            [24]  804 	jnc	00101$
                                    805 ;	program.c:121: buff_to_free = buffers_array[buff_number].buffer_start;
      00010A 90r00r00         [24]  806 	mov	dptr,#__mulint_PARM_2
      00010D EE               [12]  807 	mov	a,r6
      00010E F0               [24]  808 	movx	@dptr,a
      00010F EF               [12]  809 	mov	a,r7
      000110 A3               [24]  810 	inc	dptr
      000111 F0               [24]  811 	movx	@dptr,a
      000112 90 00 0C         [24]  812 	mov	dptr,#0x000c
      000115 C0 07            [24]  813 	push	ar7
      000117 C0 06            [24]  814 	push	ar6
      000119 12r00r00         [24]  815 	lcall	__mulint
      00011C AC 82            [24]  816 	mov	r4,dpl
      00011E AD 83            [24]  817 	mov	r5,dph
      000120 D0 06            [24]  818 	pop	ar6
      000122 D0 07            [24]  819 	pop	ar7
      000124 EC               [12]  820 	mov	a,r4
      000125 24r0A            [12]  821 	add	a,#_buffers_array
      000127 FC               [12]  822 	mov	r4,a
      000128 ED               [12]  823 	mov	a,r5
      000129 34s00            [12]  824 	addc	a,#(_buffers_array >> 8)
      00012B FD               [12]  825 	mov	r5,a
      00012C 8C 82            [24]  826 	mov	dpl,r4
      00012E 8D 83            [24]  827 	mov	dph,r5
      000130 A3               [24]  828 	inc	dptr
      000131 A3               [24]  829 	inc	dptr
      000132 E0               [24]  830 	movx	a,@dptr
      000133 F5*04            [12]  831 	mov	_delete_buffer_sloc2_1_0,a
      000135 A3               [24]  832 	inc	dptr
      000136 E0               [24]  833 	movx	a,@dptr
      000137 F5*05            [12]  834 	mov	(_delete_buffer_sloc2_1_0 + 1),a
      000139 A3               [24]  835 	inc	dptr
      00013A E0               [24]  836 	movx	a,@dptr
      00013B F5*06            [12]  837 	mov	(_delete_buffer_sloc2_1_0 + 2),a
                                    838 ;	program.c:122: buffer_freed_size = buffers_array[buff_number].buff_size;
      00013D 74 08            [12]  839 	mov	a,#0x08
      00013F 2C               [12]  840 	add	a,r4
      000140 F5 82            [12]  841 	mov	dpl,a
      000142 E4               [12]  842 	clr	a
      000143 3D               [12]  843 	addc	a,r5
      000144 F5 83            [12]  844 	mov	dph,a
      000146 E0               [24]  845 	movx	a,@dptr
      000147 FC               [12]  846 	mov	r4,a
      000148 A3               [24]  847 	inc	dptr
      000149 E0               [24]  848 	movx	a,@dptr
      00014A FD               [12]  849 	mov	r5,a
                                    850 ;	program.c:123: for (int i = 0; i < (program_stats.total_buffers - 1); i++)
      00014B E4               [12]  851 	clr	a
      00014C F5*00            [12]  852 	mov	_delete_buffer_sloc0_1_0,a
      00014E F5*01            [12]  853 	mov	(_delete_buffer_sloc0_1_0 + 1),a
      000150                        854 00110$:
      000150 C0 04            [24]  855 	push	ar4
      000152 C0 05            [24]  856 	push	ar5
      000154 90r00r08         [24]  857 	mov	dptr,#(_program_stats + 0x0008)
      000157 E0               [24]  858 	movx	a,@dptr
      000158 F5*02            [12]  859 	mov	_delete_buffer_sloc1_1_0,a
      00015A A3               [24]  860 	inc	dptr
      00015B E0               [24]  861 	movx	a,@dptr
      00015C F5*03            [12]  862 	mov	(_delete_buffer_sloc1_1_0 + 1),a
      00015E E5*02            [12]  863 	mov	a,_delete_buffer_sloc1_1_0
      000160 24 FF            [12]  864 	add	a,#0xff
      000162 F8               [12]  865 	mov	r0,a
      000163 E5*03            [12]  866 	mov	a,(_delete_buffer_sloc1_1_0 + 1)
      000165 34 FF            [12]  867 	addc	a,#0xff
      000167 FD               [12]  868 	mov	r5,a
      000168 C3               [12]  869 	clr	c
      000169 E5*00            [12]  870 	mov	a,_delete_buffer_sloc0_1_0
      00016B 98               [12]  871 	subb	a,r0
      00016C E5*01            [12]  872 	mov	a,(_delete_buffer_sloc0_1_0 + 1)
      00016E 64 80            [12]  873 	xrl	a,#0x80
      000170 8D F0            [24]  874 	mov	b,r5
      000172 63 F0 80         [24]  875 	xrl	b,#0x80
      000175 95 F0            [12]  876 	subb	a,b
      000177 D0 05            [24]  877 	pop	ar5
      000179 D0 04            [24]  878 	pop	ar4
      00017B 40 03            [24]  879 	jc	00142$
      00017D 02r02r2E         [24]  880 	ljmp	00104$
      000180                        881 00142$:
                                    882 ;	program.c:125: if (i >= buff_number)
      000180 C3               [12]  883 	clr	c
      000181 E5*00            [12]  884 	mov	a,_delete_buffer_sloc0_1_0
      000183 9E               [12]  885 	subb	a,r6
      000184 E5*01            [12]  886 	mov	a,(_delete_buffer_sloc0_1_0 + 1)
      000186 64 80            [12]  887 	xrl	a,#0x80
      000188 8F F0            [24]  888 	mov	b,r7
      00018A 63 F0 80         [24]  889 	xrl	b,#0x80
      00018D 95 F0            [12]  890 	subb	a,b
      00018F 50 03            [24]  891 	jnc	00143$
      000191 02r02r23         [24]  892 	ljmp	00111$
      000194                        893 00143$:
                                    894 ;	program.c:127: buffers_array[i + 1].buffer_num = i;
      000194 C0 04            [24]  895 	push	ar4
      000196 C0 05            [24]  896 	push	ar5
      000198 90r00r00         [24]  897 	mov	dptr,#__mulint_PARM_2
      00019B 74 01            [12]  898 	mov	a,#0x01
      00019D 25*00            [12]  899 	add	a,_delete_buffer_sloc0_1_0
      00019F F0               [24]  900 	movx	@dptr,a
      0001A0 E4               [12]  901 	clr	a
      0001A1 35*01            [12]  902 	addc	a,(_delete_buffer_sloc0_1_0 + 1)
      0001A3 A3               [24]  903 	inc	dptr
      0001A4 F0               [24]  904 	movx	@dptr,a
      0001A5 90 00 0C         [24]  905 	mov	dptr,#0x000c
      0001A8 C0 07            [24]  906 	push	ar7
      0001AA C0 06            [24]  907 	push	ar6
      0001AC C0 04            [24]  908 	push	ar4
      0001AE 12r00r00         [24]  909 	lcall	__mulint
      0001B1 A8 82            [24]  910 	mov	r0,dpl
      0001B3 AD 83            [24]  911 	mov	r5,dph
      0001B5 D0 04            [24]  912 	pop	ar4
      0001B7 E8               [12]  913 	mov	a,r0
      0001B8 24r0A            [12]  914 	add	a,#_buffers_array
      0001BA F5 82            [12]  915 	mov	dpl,a
      0001BC ED               [12]  916 	mov	a,r5
      0001BD 34s00            [12]  917 	addc	a,#(_buffers_array >> 8)
      0001BF F5 83            [12]  918 	mov	dph,a
      0001C1 E5*00            [12]  919 	mov	a,_delete_buffer_sloc0_1_0
      0001C3 F0               [24]  920 	movx	@dptr,a
      0001C4 E5*01            [12]  921 	mov	a,(_delete_buffer_sloc0_1_0 + 1)
      0001C6 A3               [24]  922 	inc	dptr
      0001C7 F0               [24]  923 	movx	@dptr,a
                                    924 ;	program.c:128: buffers_array[i] = buffers_array[i + 1];
      0001C8 90r00r00         [24]  925 	mov	dptr,#__mulint_PARM_2
      0001CB E5*00            [12]  926 	mov	a,_delete_buffer_sloc0_1_0
      0001CD F0               [24]  927 	movx	@dptr,a
      0001CE E5*01            [12]  928 	mov	a,(_delete_buffer_sloc0_1_0 + 1)
      0001D0 A3               [24]  929 	inc	dptr
      0001D1 F0               [24]  930 	movx	@dptr,a
      0001D2 90 00 0C         [24]  931 	mov	dptr,#0x000c
      0001D5 C0 05            [24]  932 	push	ar5
      0001D7 C0 00            [24]  933 	push	ar0
      0001D9 12r00r00         [24]  934 	lcall	__mulint
      0001DC AB 82            [24]  935 	mov	r3,dpl
      0001DE AC 83            [24]  936 	mov	r4,dph
      0001E0 D0 00            [24]  937 	pop	ar0
      0001E2 D0 05            [24]  938 	pop	ar5
      0001E4 EB               [12]  939 	mov	a,r3
      0001E5 24r0A            [12]  940 	add	a,#_buffers_array
      0001E7 FB               [12]  941 	mov	r3,a
      0001E8 EC               [12]  942 	mov	a,r4
      0001E9 34s00            [12]  943 	addc	a,#(_buffers_array >> 8)
      0001EB FC               [12]  944 	mov	r4,a
      0001EC 7A 00            [12]  945 	mov	r2,#0x00
      0001EE E8               [12]  946 	mov	a,r0
      0001EF 24r0A            [12]  947 	add	a,#_buffers_array
      0001F1 F8               [12]  948 	mov	r0,a
      0001F2 ED               [12]  949 	mov	a,r5
      0001F3 34s00            [12]  950 	addc	a,#(_buffers_array >> 8)
      0001F5 FD               [12]  951 	mov	r5,a
      0001F6 90r00r00         [24]  952 	mov	dptr,#___memcpy_PARM_2
      0001F9 E8               [12]  953 	mov	a,r0
      0001FA F0               [24]  954 	movx	@dptr,a
      0001FB ED               [12]  955 	mov	a,r5
      0001FC A3               [24]  956 	inc	dptr
      0001FD F0               [24]  957 	movx	@dptr,a
      0001FE E4               [12]  958 	clr	a
      0001FF A3               [24]  959 	inc	dptr
      000200 F0               [24]  960 	movx	@dptr,a
      000201 90r00r00         [24]  961 	mov	dptr,#___memcpy_PARM_3
      000204 74 0C            [12]  962 	mov	a,#0x0c
      000206 F0               [24]  963 	movx	@dptr,a
      000207 E4               [12]  964 	clr	a
      000208 A3               [24]  965 	inc	dptr
      000209 F0               [24]  966 	movx	@dptr,a
      00020A 8B 82            [24]  967 	mov	dpl,r3
      00020C 8C 83            [24]  968 	mov	dph,r4
      00020E 8A F0            [24]  969 	mov	b,r2
      000210 C0 05            [24]  970 	push	ar5
      000212 C0 04            [24]  971 	push	ar4
      000214 12r00r00         [24]  972 	lcall	___memcpy
      000217 D0 04            [24]  973 	pop	ar4
      000219 D0 05            [24]  974 	pop	ar5
      00021B D0 06            [24]  975 	pop	ar6
      00021D D0 07            [24]  976 	pop	ar7
                                    977 ;	program.c:139: goto get_del_num;
      00021F D0 05            [24]  978 	pop	ar5
      000221 D0 04            [24]  979 	pop	ar4
                                    980 ;	program.c:128: buffers_array[i] = buffers_array[i + 1];
      000223                        981 00111$:
                                    982 ;	program.c:123: for (int i = 0; i < (program_stats.total_buffers - 1); i++)
      000223 05*00            [12]  983 	inc	_delete_buffer_sloc0_1_0
      000225 E4               [12]  984 	clr	a
      000226 B5*00 02         [24]  985 	cjne	a,_delete_buffer_sloc0_1_0,00144$
      000229 05*01            [12]  986 	inc	(_delete_buffer_sloc0_1_0 + 1)
      00022B                        987 00144$:
      00022B 02r01r50         [24]  988 	ljmp	00110$
      00022E                        989 00104$:
                                    990 ;	program.c:131: program_stats.total_buffers -= 1;
      00022E E5*02            [12]  991 	mov	a,_delete_buffer_sloc1_1_0
      000230 24 FF            [12]  992 	add	a,#0xff
      000232 FA               [12]  993 	mov	r2,a
      000233 E5*03            [12]  994 	mov	a,(_delete_buffer_sloc1_1_0 + 1)
      000235 34 FF            [12]  995 	addc	a,#0xff
      000237 FB               [12]  996 	mov	r3,a
      000238 90r00r08         [24]  997 	mov	dptr,#(_program_stats + 0x0008)
      00023B EA               [12]  998 	mov	a,r2
      00023C F0               [24]  999 	movx	@dptr,a
      00023D EB               [12] 1000 	mov	a,r3
      00023E A3               [24] 1001 	inc	dptr
      00023F F0               [24] 1002 	movx	@dptr,a
                                   1003 ;	program.c:132: program_stats.allocated_heap -= buffer_freed_size;
      000240 90r00r02         [24] 1004 	mov	dptr,#(_program_stats + 0x0002)
      000243 E0               [24] 1005 	movx	a,@dptr
      000244 FA               [12] 1006 	mov	r2,a
      000245 A3               [24] 1007 	inc	dptr
      000246 E0               [24] 1008 	movx	a,@dptr
      000247 FB               [12] 1009 	mov	r3,a
      000248 EA               [12] 1010 	mov	a,r2
      000249 C3               [12] 1011 	clr	c
      00024A 9C               [12] 1012 	subb	a,r4
      00024B FC               [12] 1013 	mov	r4,a
      00024C EB               [12] 1014 	mov	a,r3
      00024D 9D               [12] 1015 	subb	a,r5
      00024E FD               [12] 1016 	mov	r5,a
      00024F 90r00r02         [24] 1017 	mov	dptr,#(_program_stats + 0x0002)
      000252 EC               [12] 1018 	mov	a,r4
      000253 F0               [24] 1019 	movx	@dptr,a
      000254 ED               [12] 1020 	mov	a,r5
      000255 A3               [24] 1021 	inc	dptr
      000256 F0               [24] 1022 	movx	@dptr,a
                                   1023 ;	program.c:133: free(buff_to_free);
      000257 AB*04            [24] 1024 	mov	r3,_delete_buffer_sloc2_1_0
      000259 AC*05            [24] 1025 	mov	r4,(_delete_buffer_sloc2_1_0 + 1)
      00025B AD*06            [24] 1026 	mov	r5,(_delete_buffer_sloc2_1_0 + 2)
      00025D 8B 82            [24] 1027 	mov	dpl,r3
      00025F 8C 83            [24] 1028 	mov	dph,r4
      000261 8D F0            [24] 1029 	mov	b,r5
      000263 C0 07            [24] 1030 	push	ar7
      000265 C0 06            [24] 1031 	push	ar6
      000267 12r00r00         [24] 1032 	lcall	_free
      00026A D0 06            [24] 1033 	pop	ar6
      00026C D0 07            [24] 1034 	pop	ar7
                                   1035 ;	program.c:134: printf("Buffer %d Successfully Deleted.. \n\r", buff_number);
      00026E C0 06            [24] 1036 	push	ar6
      000270 C0 07            [24] 1037 	push	ar7
      000272 74r70            [12] 1038 	mov	a,#___str_4
      000274 C0 E0            [24] 1039 	push	acc
      000276 74s00            [12] 1040 	mov	a,#(___str_4 >> 8)
      000278 C0 E0            [24] 1041 	push	acc
      00027A 74 80            [12] 1042 	mov	a,#0x80
      00027C C0 E0            [24] 1043 	push	acc
      00027E 12r00r00         [24] 1044 	lcall	_printf
      000281 E5 81            [12] 1045 	mov	a,sp
      000283 24 FB            [12] 1046 	add	a,#0xfb
      000285 F5 81            [12] 1047 	mov	sp,a
                                   1048 ;	program.c:135: return 0;
      000287 90 00 00         [24] 1049 	mov	dptr,#0x0000
                                   1050 ;	program.c:139: goto get_del_num;
                                   1051 ;	program.c:141: }
      00028A 22               [24] 1052 	ret
                                   1053 ;------------------------------------------------------------
                                   1054 ;Allocation info for local variables in function 'print_menu'
                                   1055 ;------------------------------------------------------------
                                   1056 ;	program.c:148: void print_menu()
                                   1057 ;	-----------------------------------------
                                   1058 ;	 function print_menu
                                   1059 ;	-----------------------------------------
      00028B                       1060 _print_menu:
                                   1061 ;	program.c:150: printf("\n\n\r^^^^^^^^^^^^^^^^^^^-MENU-^^^^^^^^^^^^^^^^^^^^^^^^^^ \n\n\r");
      00028B 74r94            [12] 1062 	mov	a,#___str_5
      00028D C0 E0            [24] 1063 	push	acc
      00028F 74s00            [12] 1064 	mov	a,#(___str_5 >> 8)
      000291 C0 E0            [24] 1065 	push	acc
      000293 74 80            [12] 1066 	mov	a,#0x80
      000295 C0 E0            [24] 1067 	push	acc
      000297 12r00r00         [24] 1068 	lcall	_printf
      00029A 15 81            [12] 1069 	dec	sp
      00029C 15 81            [12] 1070 	dec	sp
      00029E 15 81            [12] 1071 	dec	sp
                                   1072 ;	program.c:151: printf("You can enter characters or use commands from below \n\r");
      0002A0 74rCF            [12] 1073 	mov	a,#___str_6
      0002A2 C0 E0            [24] 1074 	push	acc
      0002A4 74s00            [12] 1075 	mov	a,#(___str_6 >> 8)
      0002A6 C0 E0            [24] 1076 	push	acc
      0002A8 74 80            [12] 1077 	mov	a,#0x80
      0002AA C0 E0            [24] 1078 	push	acc
      0002AC 12r00r00         [24] 1079 	lcall	_printf
      0002AF 15 81            [12] 1080 	dec	sp
      0002B1 15 81            [12] 1081 	dec	sp
      0002B3 15 81            [12] 1082 	dec	sp
                                   1083 ;	program.c:152: printf("'?' -> Show heap status, dump & clear Buffer 0 \n\r");
      0002B5 74r06            [12] 1084 	mov	a,#___str_7
      0002B7 C0 E0            [24] 1085 	push	acc
      0002B9 74s01            [12] 1086 	mov	a,#(___str_7 >> 8)
      0002BB C0 E0            [24] 1087 	push	acc
      0002BD 74 80            [12] 1088 	mov	a,#0x80
      0002BF C0 E0            [24] 1089 	push	acc
      0002C1 12r00r00         [24] 1090 	lcall	_printf
      0002C4 15 81            [12] 1091 	dec	sp
      0002C6 15 81            [12] 1092 	dec	sp
      0002C8 15 81            [12] 1093 	dec	sp
                                   1094 ;	program.c:153: printf("'+' -> Add a new Buffer\n\r");
      0002CA 74r38            [12] 1095 	mov	a,#___str_8
      0002CC C0 E0            [24] 1096 	push	acc
      0002CE 74s01            [12] 1097 	mov	a,#(___str_8 >> 8)
      0002D0 C0 E0            [24] 1098 	push	acc
      0002D2 74 80            [12] 1099 	mov	a,#0x80
      0002D4 C0 E0            [24] 1100 	push	acc
      0002D6 12r00r00         [24] 1101 	lcall	_printf
      0002D9 15 81            [12] 1102 	dec	sp
      0002DB 15 81            [12] 1103 	dec	sp
      0002DD 15 81            [12] 1104 	dec	sp
                                   1105 ;	program.c:154: printf("'-' -> Delete existing Buffer\n\r");
      0002DF 74r52            [12] 1106 	mov	a,#___str_9
      0002E1 C0 E0            [24] 1107 	push	acc
      0002E3 74s01            [12] 1108 	mov	a,#(___str_9 >> 8)
      0002E5 C0 E0            [24] 1109 	push	acc
      0002E7 74 80            [12] 1110 	mov	a,#0x80
      0002E9 C0 E0            [24] 1111 	push	acc
      0002EB 12r00r00         [24] 1112 	lcall	_printf
      0002EE 15 81            [12] 1113 	dec	sp
      0002F0 15 81            [12] 1114 	dec	sp
      0002F2 15 81            [12] 1115 	dec	sp
                                   1116 ;	program.c:155: printf("'=' -> Dump Buffer 0 in hex\n\r");
      0002F4 74r72            [12] 1117 	mov	a,#___str_10
      0002F6 C0 E0            [24] 1118 	push	acc
      0002F8 74s01            [12] 1119 	mov	a,#(___str_10 >> 8)
      0002FA C0 E0            [24] 1120 	push	acc
      0002FC 74 80            [12] 1121 	mov	a,#0x80
      0002FE C0 E0            [24] 1122 	push	acc
      000300 12r00r00         [24] 1123 	lcall	_printf
      000303 15 81            [12] 1124 	dec	sp
      000305 15 81            [12] 1125 	dec	sp
      000307 15 81            [12] 1126 	dec	sp
                                   1127 ;	program.c:156: printf("'@' -> Free all Heap & begin again\n\n\r");    
      000309 74r90            [12] 1128 	mov	a,#___str_11
      00030B C0 E0            [24] 1129 	push	acc
      00030D 74s01            [12] 1130 	mov	a,#(___str_11 >> 8)
      00030F C0 E0            [24] 1131 	push	acc
      000311 74 80            [12] 1132 	mov	a,#0x80
      000313 C0 E0            [24] 1133 	push	acc
      000315 12r00r00         [24] 1134 	lcall	_printf
      000318 15 81            [12] 1135 	dec	sp
      00031A 15 81            [12] 1136 	dec	sp
      00031C 15 81            [12] 1137 	dec	sp
                                   1138 ;	program.c:157: }
      00031E 22               [24] 1139 	ret
                                   1140 ;------------------------------------------------------------
                                   1141 ;Allocation info for local variables in function 'create_new_buffer'
                                   1142 ;------------------------------------------------------------
                                   1143 ;buff_size                 Allocated with name '_create_new_buffer_buff_size_65536_58'
                                   1144 ;buff                      Allocated with name '_create_new_buffer_buff_65536_58'
                                   1145 ;------------------------------------------------------------
                                   1146 ;	program.c:165: int create_new_buffer()
                                   1147 ;	-----------------------------------------
                                   1148 ;	 function create_new_buffer
                                   1149 ;	-----------------------------------------
      00031F                       1150 _create_new_buffer:
                                   1151 ;	program.c:169: if (program_stats.allocated_heap == program_stats.total_heap_size)
      00031F 90r00r02         [24] 1152 	mov	dptr,#(_program_stats + 0x0002)
      000322 E0               [24] 1153 	movx	a,@dptr
      000323 FE               [12] 1154 	mov	r6,a
      000324 A3               [24] 1155 	inc	dptr
      000325 E0               [24] 1156 	movx	a,@dptr
      000326 FF               [12] 1157 	mov	r7,a
      000327 90r00r00         [24] 1158 	mov	dptr,#_program_stats
      00032A E0               [24] 1159 	movx	a,@dptr
      00032B FC               [12] 1160 	mov	r4,a
      00032C A3               [24] 1161 	inc	dptr
      00032D E0               [24] 1162 	movx	a,@dptr
      00032E FD               [12] 1163 	mov	r5,a
      00032F EE               [12] 1164 	mov	a,r6
      000330 B5 04 07         [24] 1165 	cjne	a,ar4,00133$
      000333 EF               [12] 1166 	mov	a,r7
      000334 B5 05 03         [24] 1167 	cjne	a,ar5,00133$
      000337 02r04r7A         [24] 1168 	ljmp	00111$
      00033A                       1169 00133$:
                                   1170 ;	program.c:172: get_new_buff:
      00033A                       1171 00103$:
                                   1172 ;	program.c:173: printf("\n\rGive Valid Buffer Size(030-300):");
      00033A 74rB6            [12] 1173 	mov	a,#___str_12
      00033C C0 E0            [24] 1174 	push	acc
      00033E 74s01            [12] 1175 	mov	a,#(___str_12 >> 8)
      000340 C0 E0            [24] 1176 	push	acc
      000342 74 80            [12] 1177 	mov	a,#0x80
      000344 C0 E0            [24] 1178 	push	acc
      000346 12r00r00         [24] 1179 	lcall	_printf
      000349 15 81            [12] 1180 	dec	sp
      00034B 15 81            [12] 1181 	dec	sp
      00034D 15 81            [12] 1182 	dec	sp
                                   1183 ;	program.c:174: buff_size = get_number(3);
      00034F 90 00 03         [24] 1184 	mov	dptr,#0x0003
      000352 12r0Cr04         [24] 1185 	lcall	_get_number
      000355 AE 82            [24] 1186 	mov	r6,dpl
      000357 AF 83            [24] 1187 	mov	r7,dph
                                   1188 ;	program.c:175: if (buff_size >= 30 && buff_size <= 300)
      000359 C3               [12] 1189 	clr	c
      00035A EE               [12] 1190 	mov	a,r6
      00035B 94 1E            [12] 1191 	subb	a,#0x1e
      00035D EF               [12] 1192 	mov	a,r7
      00035E 64 80            [12] 1193 	xrl	a,#0x80
      000360 94 80            [12] 1194 	subb	a,#0x80
      000362 40 D6            [24] 1195 	jc	00103$
      000364 74 2C            [12] 1196 	mov	a,#0x2c
      000366 9E               [12] 1197 	subb	a,r6
      000367 74 81            [12] 1198 	mov	a,#(0x01 ^ 0x80)
      000369 8F F0            [24] 1199 	mov	b,r7
      00036B 63 F0 80         [24] 1200 	xrl	b,#0x80
      00036E 95 F0            [12] 1201 	subb	a,b
      000370 40 C8            [24] 1202 	jc	00103$
                                   1203 ;	program.c:177: buff.buffer_start = malloc(buff_size);
      000372 8E 82            [24] 1204 	mov	dpl,r6
      000374 8F 83            [24] 1205 	mov	dph,r7
      000376 C0 07            [24] 1206 	push	ar7
      000378 C0 06            [24] 1207 	push	ar6
      00037A 12r00r00         [24] 1208 	lcall	_malloc
      00037D AC 82            [24] 1209 	mov	r4,dpl
      00037F AD 83            [24] 1210 	mov	r5,dph
      000381 D0 06            [24] 1211 	pop	ar6
      000383 D0 07            [24] 1212 	pop	ar7
      000385 7B 00            [12] 1213 	mov	r3,#0x00
      000387 90r01r3A         [24] 1214 	mov	dptr,#(_create_new_buffer_buff_65536_58 + 0x0002)
      00038A EC               [12] 1215 	mov	a,r4
      00038B F0               [24] 1216 	movx	@dptr,a
      00038C ED               [12] 1217 	mov	a,r5
      00038D A3               [24] 1218 	inc	dptr
      00038E F0               [24] 1219 	movx	@dptr,a
      00038F EB               [12] 1220 	mov	a,r3
      000390 A3               [24] 1221 	inc	dptr
      000391 F0               [24] 1222 	movx	@dptr,a
                                   1223 ;	program.c:178: if (buff.buffer_start == NULL)
      000392 EC               [12] 1224 	mov	a,r4
      000393 4D               [12] 1225 	orl	a,r5
      000394 70 18            [24] 1226 	jnz	00105$
                                   1227 ;	program.c:180: printf("Failed, give smaller buffer\n\r");
      000396 74rD9            [12] 1228 	mov	a,#___str_13
      000398 C0 E0            [24] 1229 	push	acc
      00039A 74s01            [12] 1230 	mov	a,#(___str_13 >> 8)
      00039C C0 E0            [24] 1231 	push	acc
      00039E 74 80            [12] 1232 	mov	a,#0x80
      0003A0 C0 E0            [24] 1233 	push	acc
      0003A2 12r00r00         [24] 1234 	lcall	_printf
      0003A5 15 81            [12] 1235 	dec	sp
      0003A7 15 81            [12] 1236 	dec	sp
      0003A9 15 81            [12] 1237 	dec	sp
      0003AB 02r04r76         [24] 1238 	ljmp	00106$
      0003AE                       1239 00105$:
                                   1240 ;	program.c:184: printf("\n\n\r####SUCCESS, BUFFER Created####\n\n\r");
      0003AE C0 07            [24] 1241 	push	ar7
      0003B0 C0 06            [24] 1242 	push	ar6
      0003B2 74rF7            [12] 1243 	mov	a,#___str_14
      0003B4 C0 E0            [24] 1244 	push	acc
      0003B6 74s01            [12] 1245 	mov	a,#(___str_14 >> 8)
      0003B8 C0 E0            [24] 1246 	push	acc
      0003BA 74 80            [12] 1247 	mov	a,#0x80
      0003BC C0 E0            [24] 1248 	push	acc
      0003BE 12r00r00         [24] 1249 	lcall	_printf
      0003C1 15 81            [12] 1250 	dec	sp
      0003C3 15 81            [12] 1251 	dec	sp
      0003C5 15 81            [12] 1252 	dec	sp
      0003C7 D0 06            [24] 1253 	pop	ar6
      0003C9 D0 07            [24] 1254 	pop	ar7
                                   1255 ;	program.c:185: program_stats.allocated_heap += buff_size;
      0003CB 90r00r02         [24] 1256 	mov	dptr,#(_program_stats + 0x0002)
      0003CE E0               [24] 1257 	movx	a,@dptr
      0003CF FC               [12] 1258 	mov	r4,a
      0003D0 A3               [24] 1259 	inc	dptr
      0003D1 E0               [24] 1260 	movx	a,@dptr
      0003D2 FD               [12] 1261 	mov	r5,a
      0003D3 EE               [12] 1262 	mov	a,r6
      0003D4 2C               [12] 1263 	add	a,r4
      0003D5 FC               [12] 1264 	mov	r4,a
      0003D6 EF               [12] 1265 	mov	a,r7
      0003D7 3D               [12] 1266 	addc	a,r5
      0003D8 FD               [12] 1267 	mov	r5,a
      0003D9 90r00r02         [24] 1268 	mov	dptr,#(_program_stats + 0x0002)
      0003DC EC               [12] 1269 	mov	a,r4
      0003DD F0               [24] 1270 	movx	@dptr,a
      0003DE ED               [12] 1271 	mov	a,r5
      0003DF A3               [24] 1272 	inc	dptr
      0003E0 F0               [24] 1273 	movx	@dptr,a
                                   1274 ;	program.c:186: buff.buff_size = buff_size;
      0003E1 90r01r40         [24] 1275 	mov	dptr,#(_create_new_buffer_buff_65536_58 + 0x0008)
      0003E4 EE               [12] 1276 	mov	a,r6
      0003E5 F0               [24] 1277 	movx	@dptr,a
      0003E6 EF               [12] 1278 	mov	a,r7
      0003E7 A3               [24] 1279 	inc	dptr
      0003E8 F0               [24] 1280 	movx	@dptr,a
                                   1281 ;	program.c:187: buff.buffer_num = program_stats.total_buffers;
      0003E9 90r00r08         [24] 1282 	mov	dptr,#(_program_stats + 0x0008)
      0003EC E0               [24] 1283 	movx	a,@dptr
      0003ED FC               [12] 1284 	mov	r4,a
      0003EE A3               [24] 1285 	inc	dptr
      0003EF E0               [24] 1286 	movx	a,@dptr
      0003F0 FD               [12] 1287 	mov	r5,a
      0003F1 90r01r38         [24] 1288 	mov	dptr,#_create_new_buffer_buff_65536_58
      0003F4 EC               [12] 1289 	mov	a,r4
      0003F5 F0               [24] 1290 	movx	@dptr,a
      0003F6 ED               [12] 1291 	mov	a,r5
      0003F7 A3               [24] 1292 	inc	dptr
      0003F8 F0               [24] 1293 	movx	@dptr,a
                                   1294 ;	program.c:188: buff.buffer_end = buff.buffer_start + buff_size;
      0003F9 90r01r3A         [24] 1295 	mov	dptr,#(_create_new_buffer_buff_65536_58 + 0x0002)
      0003FC E0               [24] 1296 	movx	a,@dptr
      0003FD FB               [12] 1297 	mov	r3,a
      0003FE A3               [24] 1298 	inc	dptr
      0003FF E0               [24] 1299 	movx	a,@dptr
      000400 FC               [12] 1300 	mov	r4,a
      000401 A3               [24] 1301 	inc	dptr
      000402 E0               [24] 1302 	movx	a,@dptr
      000403 FD               [12] 1303 	mov	r5,a
      000404 EE               [12] 1304 	mov	a,r6
      000405 2B               [12] 1305 	add	a,r3
      000406 FE               [12] 1306 	mov	r6,a
      000407 EF               [12] 1307 	mov	a,r7
      000408 3C               [12] 1308 	addc	a,r4
      000409 FF               [12] 1309 	mov	r7,a
      00040A 8D 02            [24] 1310 	mov	ar2,r5
      00040C 90r01r3D         [24] 1311 	mov	dptr,#(_create_new_buffer_buff_65536_58 + 0x0005)
      00040F EE               [12] 1312 	mov	a,r6
      000410 F0               [24] 1313 	movx	@dptr,a
      000411 EF               [12] 1314 	mov	a,r7
      000412 A3               [24] 1315 	inc	dptr
      000413 F0               [24] 1316 	movx	@dptr,a
      000414 EA               [12] 1317 	mov	a,r2
      000415 A3               [24] 1318 	inc	dptr
      000416 F0               [24] 1319 	movx	@dptr,a
                                   1320 ;	program.c:189: buff.num_char = 0;
      000417 90r01r42         [24] 1321 	mov	dptr,#(_create_new_buffer_buff_65536_58 + 0x000a)
      00041A E4               [12] 1322 	clr	a
      00041B F0               [24] 1323 	movx	@dptr,a
      00041C A3               [24] 1324 	inc	dptr
      00041D F0               [24] 1325 	movx	@dptr,a
                                   1326 ;	program.c:190: buffers_array[program_stats.total_buffers] = buff;
      00041E 90r00r08         [24] 1327 	mov	dptr,#(_program_stats + 0x0008)
      000421 E0               [24] 1328 	movx	a,@dptr
      000422 FE               [12] 1329 	mov	r6,a
      000423 A3               [24] 1330 	inc	dptr
      000424 E0               [24] 1331 	movx	a,@dptr
      000425 FF               [12] 1332 	mov	r7,a
      000426 90r00r00         [24] 1333 	mov	dptr,#__mulint_PARM_2
      000429 EE               [12] 1334 	mov	a,r6
      00042A F0               [24] 1335 	movx	@dptr,a
      00042B EF               [12] 1336 	mov	a,r7
      00042C A3               [24] 1337 	inc	dptr
      00042D F0               [24] 1338 	movx	@dptr,a
      00042E 90 00 0C         [24] 1339 	mov	dptr,#0x000c
      000431 12r00r00         [24] 1340 	lcall	__mulint
      000434 AE 82            [24] 1341 	mov	r6,dpl
      000436 AF 83            [24] 1342 	mov	r7,dph
      000438 EE               [12] 1343 	mov	a,r6
      000439 24r0A            [12] 1344 	add	a,#_buffers_array
      00043B FE               [12] 1345 	mov	r6,a
      00043C EF               [12] 1346 	mov	a,r7
      00043D 34s00            [12] 1347 	addc	a,#(_buffers_array >> 8)
      00043F FF               [12] 1348 	mov	r7,a
      000440 7D 00            [12] 1349 	mov	r5,#0x00
      000442 90r00r00         [24] 1350 	mov	dptr,#___memcpy_PARM_2
      000445 74r38            [12] 1351 	mov	a,#_create_new_buffer_buff_65536_58
      000447 F0               [24] 1352 	movx	@dptr,a
      000448 74s01            [12] 1353 	mov	a,#(_create_new_buffer_buff_65536_58 >> 8)
      00044A A3               [24] 1354 	inc	dptr
      00044B F0               [24] 1355 	movx	@dptr,a
      00044C E4               [12] 1356 	clr	a
      00044D A3               [24] 1357 	inc	dptr
      00044E F0               [24] 1358 	movx	@dptr,a
      00044F 90r00r00         [24] 1359 	mov	dptr,#___memcpy_PARM_3
      000452 74 0C            [12] 1360 	mov	a,#0x0c
      000454 F0               [24] 1361 	movx	@dptr,a
      000455 E4               [12] 1362 	clr	a
      000456 A3               [24] 1363 	inc	dptr
      000457 F0               [24] 1364 	movx	@dptr,a
      000458 8E 82            [24] 1365 	mov	dpl,r6
      00045A 8F 83            [24] 1366 	mov	dph,r7
      00045C 8D F0            [24] 1367 	mov	b,r5
      00045E 12r00r00         [24] 1368 	lcall	___memcpy
                                   1369 ;	program.c:191: program_stats.total_buffers += 1;
      000461 90r00r08         [24] 1370 	mov	dptr,#(_program_stats + 0x0008)
      000464 E0               [24] 1371 	movx	a,@dptr
      000465 FE               [12] 1372 	mov	r6,a
      000466 A3               [24] 1373 	inc	dptr
      000467 E0               [24] 1374 	movx	a,@dptr
      000468 FF               [12] 1375 	mov	r7,a
      000469 0E               [12] 1376 	inc	r6
      00046A BE 00 01         [24] 1377 	cjne	r6,#0x00,00137$
      00046D 0F               [12] 1378 	inc	r7
      00046E                       1379 00137$:
      00046E 90r00r08         [24] 1380 	mov	dptr,#(_program_stats + 0x0008)
      000471 EE               [12] 1381 	mov	a,r6
      000472 F0               [24] 1382 	movx	@dptr,a
      000473 EF               [12] 1383 	mov	a,r7
      000474 A3               [24] 1384 	inc	dptr
      000475 F0               [24] 1385 	movx	@dptr,a
      000476                       1386 00106$:
                                   1387 ;	program.c:193: return 0;
      000476 90 00 00         [24] 1388 	mov	dptr,#0x0000
                                   1389 ;	program.c:199: no_heap_left:
      000479 22               [24] 1390 	ret
      00047A                       1391 00111$:
                                   1392 ;	program.c:200: printf("No Heap Memory Left, Delete some buffers...\n\r");
      00047A 74r1D            [12] 1393 	mov	a,#___str_15
      00047C C0 E0            [24] 1394 	push	acc
      00047E 74s02            [12] 1395 	mov	a,#(___str_15 >> 8)
      000480 C0 E0            [24] 1396 	push	acc
      000482 74 80            [12] 1397 	mov	a,#0x80
      000484 C0 E0            [24] 1398 	push	acc
      000486 12r00r00         [24] 1399 	lcall	_printf
      000489 15 81            [12] 1400 	dec	sp
      00048B 15 81            [12] 1401 	dec	sp
      00048D 15 81            [12] 1402 	dec	sp
                                   1403 ;	program.c:201: return 0;
      00048F 90 00 00         [24] 1404 	mov	dptr,#0x0000
                                   1405 ;	program.c:202: }
      000492 22               [24] 1406 	ret
                                   1407 ;------------------------------------------------------------
                                   1408 ;Allocation info for local variables in function 'create_initial_buffers'
                                   1409 ;------------------------------------------------------------
                                   1410 ;buff_size                 Allocated with name '_create_initial_buffers_buff_size_65536_63'
                                   1411 ;buff                      Allocated with name '_create_initial_buffers_buff_65537_64'
                                   1412 ;buff1                     Allocated with name '_create_initial_buffers_buff1_65537_64'
                                   1413 ;------------------------------------------------------------
                                   1414 ;	program.c:210: void create_initial_buffers()
                                   1415 ;	-----------------------------------------
                                   1416 ;	 function create_initial_buffers
                                   1417 ;	-----------------------------------------
      000493                       1418 _create_initial_buffers:
                                   1419 ;	program.c:214: get_buff:
      000493                       1420 00101$:
                                   1421 ;	program.c:215: printf("\n\rGive Valid Initial Buffer Size(0048-4800):");
      000493 74r4B            [12] 1422 	mov	a,#___str_16
      000495 C0 E0            [24] 1423 	push	acc
      000497 74s02            [12] 1424 	mov	a,#(___str_16 >> 8)
      000499 C0 E0            [24] 1425 	push	acc
      00049B 74 80            [12] 1426 	mov	a,#0x80
      00049D C0 E0            [24] 1427 	push	acc
      00049F 12r00r00         [24] 1428 	lcall	_printf
      0004A2 15 81            [12] 1429 	dec	sp
      0004A4 15 81            [12] 1430 	dec	sp
      0004A6 15 81            [12] 1431 	dec	sp
                                   1432 ;	program.c:216: buff_size = get_number(4);
      0004A8 90 00 04         [24] 1433 	mov	dptr,#0x0004
      0004AB 12r0Cr04         [24] 1434 	lcall	_get_number
      0004AE AE 82            [24] 1435 	mov	r6,dpl
      0004B0 AF 83            [24] 1436 	mov	r7,dph
                                   1437 ;	program.c:219: if (buff_size >= 48 && buff_size <= 4800)
      0004B2 C3               [12] 1438 	clr	c
      0004B3 EE               [12] 1439 	mov	a,r6
      0004B4 94 30            [12] 1440 	subb	a,#0x30
      0004B6 EF               [12] 1441 	mov	a,r7
      0004B7 64 80            [12] 1442 	xrl	a,#0x80
      0004B9 94 80            [12] 1443 	subb	a,#0x80
      0004BB 40 D6            [24] 1444 	jc	00101$
      0004BD 74 C0            [12] 1445 	mov	a,#0xc0
      0004BF 9E               [12] 1446 	subb	a,r6
      0004C0 74 92            [12] 1447 	mov	a,#(0x12 ^ 0x80)
      0004C2 8F F0            [24] 1448 	mov	b,r7
      0004C4 63 F0 80         [24] 1449 	xrl	b,#0x80
      0004C7 95 F0            [12] 1450 	subb	a,b
      0004C9 40 C8            [24] 1451 	jc	00101$
                                   1452 ;	program.c:221: buff.buffer_start = malloc(buff_size);
      0004CB 8E 82            [24] 1453 	mov	dpl,r6
      0004CD 8F 83            [24] 1454 	mov	dph,r7
      0004CF C0 07            [24] 1455 	push	ar7
      0004D1 C0 06            [24] 1456 	push	ar6
      0004D3 12r00r00         [24] 1457 	lcall	_malloc
      0004D6 AC 82            [24] 1458 	mov	r4,dpl
      0004D8 AD 83            [24] 1459 	mov	r5,dph
      0004DA D0 06            [24] 1460 	pop	ar6
      0004DC D0 07            [24] 1461 	pop	ar7
      0004DE 7B 00            [12] 1462 	mov	r3,#0x00
      0004E0 90r01r46         [24] 1463 	mov	dptr,#(_create_initial_buffers_buff_65537_64 + 0x0002)
      0004E3 EC               [12] 1464 	mov	a,r4
      0004E4 F0               [24] 1465 	movx	@dptr,a
      0004E5 ED               [12] 1466 	mov	a,r5
      0004E6 A3               [24] 1467 	inc	dptr
      0004E7 F0               [24] 1468 	movx	@dptr,a
      0004E8 EB               [12] 1469 	mov	a,r3
      0004E9 A3               [24] 1470 	inc	dptr
      0004EA F0               [24] 1471 	movx	@dptr,a
                                   1472 ;	program.c:222: buff1.buffer_start = malloc(buff_size);
      0004EB 8E 82            [24] 1473 	mov	dpl,r6
      0004ED 8F 83            [24] 1474 	mov	dph,r7
      0004EF C0 07            [24] 1475 	push	ar7
      0004F1 C0 06            [24] 1476 	push	ar6
      0004F3 12r00r00         [24] 1477 	lcall	_malloc
      0004F6 AC 82            [24] 1478 	mov	r4,dpl
      0004F8 AD 83            [24] 1479 	mov	r5,dph
      0004FA D0 06            [24] 1480 	pop	ar6
      0004FC D0 07            [24] 1481 	pop	ar7
      0004FE 7B 00            [12] 1482 	mov	r3,#0x00
      000500 90r01r52         [24] 1483 	mov	dptr,#(_create_initial_buffers_buff1_65537_64 + 0x0002)
      000503 EC               [12] 1484 	mov	a,r4
      000504 F0               [24] 1485 	movx	@dptr,a
      000505 ED               [12] 1486 	mov	a,r5
      000506 A3               [24] 1487 	inc	dptr
      000507 F0               [24] 1488 	movx	@dptr,a
      000508 EB               [12] 1489 	mov	a,r3
      000509 A3               [24] 1490 	inc	dptr
      00050A F0               [24] 1491 	movx	@dptr,a
                                   1492 ;	program.c:223: if (buff.buffer_start == NULL || buff1.buffer_start == NULL)
      00050B 90r01r46         [24] 1493 	mov	dptr,#(_create_initial_buffers_buff_65537_64 + 0x0002)
      00050E E0               [24] 1494 	movx	a,@dptr
      00050F FB               [12] 1495 	mov	r3,a
      000510 A3               [24] 1496 	inc	dptr
      000511 E0               [24] 1497 	movx	a,@dptr
      000512 FC               [12] 1498 	mov	r4,a
      000513 A3               [24] 1499 	inc	dptr
      000514 E0               [24] 1500 	movx	a,@dptr
      000515 EB               [12] 1501 	mov	a,r3
      000516 4C               [12] 1502 	orl	a,r4
      000517 60 0F            [24] 1503 	jz	00106$
      000519 90r01r52         [24] 1504 	mov	dptr,#(_create_initial_buffers_buff1_65537_64 + 0x0002)
      00051C E0               [24] 1505 	movx	a,@dptr
      00051D FB               [12] 1506 	mov	r3,a
      00051E A3               [24] 1507 	inc	dptr
      00051F E0               [24] 1508 	movx	a,@dptr
      000520 FC               [12] 1509 	mov	r4,a
      000521 A3               [24] 1510 	inc	dptr
      000522 E0               [24] 1511 	movx	a,@dptr
      000523 FD               [12] 1512 	mov	r5,a
      000524 EB               [12] 1513 	mov	a,r3
      000525 4C               [12] 1514 	orl	a,r4
      000526 70 60            [24] 1515 	jnz	00107$
      000528                       1516 00106$:
                                   1517 ;	program.c:225: printf("\n\r####FAIL, Please give a smaller buffer size####\n\n\r");
      000528 74r78            [12] 1518 	mov	a,#___str_17
      00052A C0 E0            [24] 1519 	push	acc
      00052C 74s02            [12] 1520 	mov	a,#(___str_17 >> 8)
      00052E C0 E0            [24] 1521 	push	acc
      000530 74 80            [12] 1522 	mov	a,#0x80
      000532 C0 E0            [24] 1523 	push	acc
      000534 12r00r00         [24] 1524 	lcall	_printf
      000537 15 81            [12] 1525 	dec	sp
      000539 15 81            [12] 1526 	dec	sp
      00053B 15 81            [12] 1527 	dec	sp
                                   1528 ;	program.c:227: if (buff.buffer_start != NULL)
      00053D 90r01r46         [24] 1529 	mov	dptr,#(_create_initial_buffers_buff_65537_64 + 0x0002)
      000540 E0               [24] 1530 	movx	a,@dptr
      000541 FB               [12] 1531 	mov	r3,a
      000542 A3               [24] 1532 	inc	dptr
      000543 E0               [24] 1533 	movx	a,@dptr
      000544 FC               [12] 1534 	mov	r4,a
      000545 A3               [24] 1535 	inc	dptr
      000546 E0               [24] 1536 	movx	a,@dptr
      000547 EB               [12] 1537 	mov	a,r3
      000548 4C               [12] 1538 	orl	a,r4
      000549 60 14            [24] 1539 	jz	00103$
                                   1540 ;	program.c:228: free(buff.buffer_start);
      00054B 90r01r46         [24] 1541 	mov	dptr,#(_create_initial_buffers_buff_65537_64 + 0x0002)
      00054E E0               [24] 1542 	movx	a,@dptr
      00054F FB               [12] 1543 	mov	r3,a
      000550 A3               [24] 1544 	inc	dptr
      000551 E0               [24] 1545 	movx	a,@dptr
      000552 FC               [12] 1546 	mov	r4,a
      000553 A3               [24] 1547 	inc	dptr
      000554 E0               [24] 1548 	movx	a,@dptr
      000555 FD               [12] 1549 	mov	r5,a
      000556 8B 82            [24] 1550 	mov	dpl,r3
      000558 8C 83            [24] 1551 	mov	dph,r4
      00055A 8D F0            [24] 1552 	mov	b,r5
      00055C 12r00r00         [24] 1553 	lcall	_free
      00055F                       1554 00103$:
                                   1555 ;	program.c:229: if (buff1.buffer_start != NULL)
      00055F 90r01r52         [24] 1556 	mov	dptr,#(_create_initial_buffers_buff1_65537_64 + 0x0002)
      000562 E0               [24] 1557 	movx	a,@dptr
      000563 FB               [12] 1558 	mov	r3,a
      000564 A3               [24] 1559 	inc	dptr
      000565 E0               [24] 1560 	movx	a,@dptr
      000566 FC               [12] 1561 	mov	r4,a
      000567 A3               [24] 1562 	inc	dptr
      000568 E0               [24] 1563 	movx	a,@dptr
      000569 FD               [12] 1564 	mov	r5,a
      00056A EB               [12] 1565 	mov	a,r3
      00056B 4C               [12] 1566 	orl	a,r4
      00056C 70 03            [24] 1567 	jnz	00145$
      00056E 02r04r93         [24] 1568 	ljmp	00101$
      000571                       1569 00145$:
                                   1570 ;	program.c:230: free(buff1.buffer_start);
      000571 90r01r52         [24] 1571 	mov	dptr,#(_create_initial_buffers_buff1_65537_64 + 0x0002)
      000574 E0               [24] 1572 	movx	a,@dptr
      000575 FB               [12] 1573 	mov	r3,a
      000576 A3               [24] 1574 	inc	dptr
      000577 E0               [24] 1575 	movx	a,@dptr
      000578 FC               [12] 1576 	mov	r4,a
      000579 A3               [24] 1577 	inc	dptr
      00057A E0               [24] 1578 	movx	a,@dptr
      00057B FD               [12] 1579 	mov	r5,a
      00057C 8B 82            [24] 1580 	mov	dpl,r3
      00057E 8C 83            [24] 1581 	mov	dph,r4
      000580 8D F0            [24] 1582 	mov	b,r5
      000582 12r00r00         [24] 1583 	lcall	_free
                                   1584 ;	program.c:232: goto get_buff;
      000585 02r04r93         [24] 1585 	ljmp	00101$
      000588                       1586 00107$:
                                   1587 ;	program.c:236: printf("\n\n\r####SUCCESS, INITIAL BUFFERS Created####\n\n\r");
      000588 C0 07            [24] 1588 	push	ar7
      00058A C0 06            [24] 1589 	push	ar6
      00058C 74rAD            [12] 1590 	mov	a,#___str_18
      00058E C0 E0            [24] 1591 	push	acc
      000590 74s02            [12] 1592 	mov	a,#(___str_18 >> 8)
      000592 C0 E0            [24] 1593 	push	acc
      000594 74 80            [12] 1594 	mov	a,#0x80
      000596 C0 E0            [24] 1595 	push	acc
      000598 12r00r00         [24] 1596 	lcall	_printf
      00059B 15 81            [12] 1597 	dec	sp
      00059D 15 81            [12] 1598 	dec	sp
      00059F 15 81            [12] 1599 	dec	sp
      0005A1 D0 06            [24] 1600 	pop	ar6
      0005A3 D0 07            [24] 1601 	pop	ar7
                                   1602 ;	program.c:237: program_stats.allocated_heap = 2 * buff_size;
      0005A5 EE               [12] 1603 	mov	a,r6
      0005A6 2E               [12] 1604 	add	a,r6
      0005A7 FC               [12] 1605 	mov	r4,a
      0005A8 EF               [12] 1606 	mov	a,r7
      0005A9 33               [12] 1607 	rlc	a
      0005AA FD               [12] 1608 	mov	r5,a
      0005AB 90r00r02         [24] 1609 	mov	dptr,#(_program_stats + 0x0002)
      0005AE EC               [12] 1610 	mov	a,r4
      0005AF F0               [24] 1611 	movx	@dptr,a
      0005B0 ED               [12] 1612 	mov	a,r5
      0005B1 A3               [24] 1613 	inc	dptr
      0005B2 F0               [24] 1614 	movx	@dptr,a
                                   1615 ;	program.c:238: program_stats.total_heap_size = 4996;
      0005B3 90r00r00         [24] 1616 	mov	dptr,#_program_stats
      0005B6 74 84            [12] 1617 	mov	a,#0x84
      0005B8 F0               [24] 1618 	movx	@dptr,a
      0005B9 74 13            [12] 1619 	mov	a,#0x13
      0005BB A3               [24] 1620 	inc	dptr
      0005BC F0               [24] 1621 	movx	@dptr,a
                                   1622 ;	program.c:239: program_stats.total_buffers = 2;
      0005BD 90r00r08         [24] 1623 	mov	dptr,#(_program_stats + 0x0008)
      0005C0 74 02            [12] 1624 	mov	a,#0x02
      0005C2 F0               [24] 1625 	movx	@dptr,a
      0005C3 E4               [12] 1626 	clr	a
      0005C4 A3               [24] 1627 	inc	dptr
      0005C5 F0               [24] 1628 	movx	@dptr,a
                                   1629 ;	program.c:241: buff.buff_size = buff_size;
      0005C6 90r01r4C         [24] 1630 	mov	dptr,#(_create_initial_buffers_buff_65537_64 + 0x0008)
      0005C9 EE               [12] 1631 	mov	a,r6
      0005CA F0               [24] 1632 	movx	@dptr,a
      0005CB EF               [12] 1633 	mov	a,r7
      0005CC A3               [24] 1634 	inc	dptr
      0005CD F0               [24] 1635 	movx	@dptr,a
                                   1636 ;	program.c:242: buff1.buff_size = buff_size;
      0005CE 90r01r58         [24] 1637 	mov	dptr,#(_create_initial_buffers_buff1_65537_64 + 0x0008)
      0005D1 EE               [12] 1638 	mov	a,r6
      0005D2 F0               [24] 1639 	movx	@dptr,a
      0005D3 EF               [12] 1640 	mov	a,r7
      0005D4 A3               [24] 1641 	inc	dptr
      0005D5 F0               [24] 1642 	movx	@dptr,a
                                   1643 ;	program.c:243: buff.buffer_num = 0;
      0005D6 90r01r44         [24] 1644 	mov	dptr,#_create_initial_buffers_buff_65537_64
      0005D9 E4               [12] 1645 	clr	a
      0005DA F0               [24] 1646 	movx	@dptr,a
      0005DB A3               [24] 1647 	inc	dptr
      0005DC F0               [24] 1648 	movx	@dptr,a
                                   1649 ;	program.c:244: buff1.buffer_num = 1;
      0005DD 90r01r50         [24] 1650 	mov	dptr,#_create_initial_buffers_buff1_65537_64
      0005E0 04               [12] 1651 	inc	a
      0005E1 F0               [24] 1652 	movx	@dptr,a
      0005E2 E4               [12] 1653 	clr	a
      0005E3 A3               [24] 1654 	inc	dptr
      0005E4 F0               [24] 1655 	movx	@dptr,a
                                   1656 ;	program.c:245: buff1.buffer_end = buff1.buffer_start + buff_size;
      0005E5 90r01r52         [24] 1657 	mov	dptr,#(_create_initial_buffers_buff1_65537_64 + 0x0002)
      0005E8 E0               [24] 1658 	movx	a,@dptr
      0005E9 FB               [12] 1659 	mov	r3,a
      0005EA A3               [24] 1660 	inc	dptr
      0005EB E0               [24] 1661 	movx	a,@dptr
      0005EC FC               [12] 1662 	mov	r4,a
      0005ED A3               [24] 1663 	inc	dptr
      0005EE E0               [24] 1664 	movx	a,@dptr
      0005EF FD               [12] 1665 	mov	r5,a
      0005F0 EE               [12] 1666 	mov	a,r6
      0005F1 2B               [12] 1667 	add	a,r3
      0005F2 FB               [12] 1668 	mov	r3,a
      0005F3 EF               [12] 1669 	mov	a,r7
      0005F4 3C               [12] 1670 	addc	a,r4
      0005F5 FC               [12] 1671 	mov	r4,a
      0005F6 90r01r55         [24] 1672 	mov	dptr,#(_create_initial_buffers_buff1_65537_64 + 0x0005)
      0005F9 EB               [12] 1673 	mov	a,r3
      0005FA F0               [24] 1674 	movx	@dptr,a
      0005FB EC               [12] 1675 	mov	a,r4
      0005FC A3               [24] 1676 	inc	dptr
      0005FD F0               [24] 1677 	movx	@dptr,a
      0005FE ED               [12] 1678 	mov	a,r5
      0005FF A3               [24] 1679 	inc	dptr
      000600 F0               [24] 1680 	movx	@dptr,a
                                   1681 ;	program.c:246: buff.buffer_end = buff.buffer_start + buff_size;
      000601 90r01r46         [24] 1682 	mov	dptr,#(_create_initial_buffers_buff_65537_64 + 0x0002)
      000604 E0               [24] 1683 	movx	a,@dptr
      000605 FB               [12] 1684 	mov	r3,a
      000606 A3               [24] 1685 	inc	dptr
      000607 E0               [24] 1686 	movx	a,@dptr
      000608 FC               [12] 1687 	mov	r4,a
      000609 A3               [24] 1688 	inc	dptr
      00060A E0               [24] 1689 	movx	a,@dptr
      00060B FD               [12] 1690 	mov	r5,a
      00060C EE               [12] 1691 	mov	a,r6
      00060D 2B               [12] 1692 	add	a,r3
      00060E FE               [12] 1693 	mov	r6,a
      00060F EF               [12] 1694 	mov	a,r7
      000610 3C               [12] 1695 	addc	a,r4
      000611 FF               [12] 1696 	mov	r7,a
      000612 8D 02            [24] 1697 	mov	ar2,r5
      000614 90r01r49         [24] 1698 	mov	dptr,#(_create_initial_buffers_buff_65537_64 + 0x0005)
      000617 EE               [12] 1699 	mov	a,r6
      000618 F0               [24] 1700 	movx	@dptr,a
      000619 EF               [12] 1701 	mov	a,r7
      00061A A3               [24] 1702 	inc	dptr
      00061B F0               [24] 1703 	movx	@dptr,a
      00061C EA               [12] 1704 	mov	a,r2
      00061D A3               [24] 1705 	inc	dptr
      00061E F0               [24] 1706 	movx	@dptr,a
                                   1707 ;	program.c:247: buff.num_char = 0;
      00061F 90r01r4E         [24] 1708 	mov	dptr,#(_create_initial_buffers_buff_65537_64 + 0x000a)
      000622 E4               [12] 1709 	clr	a
      000623 F0               [24] 1710 	movx	@dptr,a
      000624 A3               [24] 1711 	inc	dptr
      000625 F0               [24] 1712 	movx	@dptr,a
                                   1713 ;	program.c:248: buff1.num_char = 0;
      000626 90r01r5A         [24] 1714 	mov	dptr,#(_create_initial_buffers_buff1_65537_64 + 0x000a)
      000629 F0               [24] 1715 	movx	@dptr,a
      00062A A3               [24] 1716 	inc	dptr
      00062B F0               [24] 1717 	movx	@dptr,a
                                   1718 ;	program.c:250: buffers_array[0] = buff;
      00062C 90r00r00         [24] 1719 	mov	dptr,#___memcpy_PARM_2
      00062F 74r44            [12] 1720 	mov	a,#_create_initial_buffers_buff_65537_64
      000631 F0               [24] 1721 	movx	@dptr,a
      000632 74s01            [12] 1722 	mov	a,#(_create_initial_buffers_buff_65537_64 >> 8)
      000634 A3               [24] 1723 	inc	dptr
      000635 F0               [24] 1724 	movx	@dptr,a
      000636 E4               [12] 1725 	clr	a
      000637 A3               [24] 1726 	inc	dptr
      000638 F0               [24] 1727 	movx	@dptr,a
      000639 90r00r00         [24] 1728 	mov	dptr,#___memcpy_PARM_3
      00063C 74 0C            [12] 1729 	mov	a,#0x0c
      00063E F0               [24] 1730 	movx	@dptr,a
      00063F E4               [12] 1731 	clr	a
      000640 A3               [24] 1732 	inc	dptr
      000641 F0               [24] 1733 	movx	@dptr,a
      000642 90r00r0A         [24] 1734 	mov	dptr,#_buffers_array
      000645 75 F0 00         [24] 1735 	mov	b,#0x00
      000648 12r00r00         [24] 1736 	lcall	___memcpy
                                   1737 ;	program.c:251: buffers_array[1] = buff1;
      00064B 90r00r00         [24] 1738 	mov	dptr,#___memcpy_PARM_2
      00064E 74r50            [12] 1739 	mov	a,#_create_initial_buffers_buff1_65537_64
      000650 F0               [24] 1740 	movx	@dptr,a
      000651 74s01            [12] 1741 	mov	a,#(_create_initial_buffers_buff1_65537_64 >> 8)
      000653 A3               [24] 1742 	inc	dptr
      000654 F0               [24] 1743 	movx	@dptr,a
      000655 E4               [12] 1744 	clr	a
      000656 A3               [24] 1745 	inc	dptr
      000657 F0               [24] 1746 	movx	@dptr,a
      000658 90r00r00         [24] 1747 	mov	dptr,#___memcpy_PARM_3
      00065B 74 0C            [12] 1748 	mov	a,#0x0c
      00065D F0               [24] 1749 	movx	@dptr,a
      00065E E4               [12] 1750 	clr	a
      00065F A3               [24] 1751 	inc	dptr
      000660 F0               [24] 1752 	movx	@dptr,a
      000661 90r00r16         [24] 1753 	mov	dptr,#(_buffers_array + 0x000c)
      000664 75 F0 00         [24] 1754 	mov	b,#0x00
                                   1755 ;	program.c:255: goto get_buff;
                                   1756 ;	program.c:256: }
      000667 02r00r00         [24] 1757 	ljmp	___memcpy
                                   1758 ;------------------------------------------------------------
                                   1759 ;Allocation info for local variables in function 'enter_chars'
                                   1760 ;------------------------------------------------------------
                                   1761 ;rec                       Allocated with name '_enter_chars_rec_65537_69'
                                   1762 ;------------------------------------------------------------
                                   1763 ;	program.c:264: void enter_chars()
                                   1764 ;	-----------------------------------------
                                   1765 ;	 function enter_chars
                                   1766 ;	-----------------------------------------
      00066A                       1767 _enter_chars:
                                   1768 ;	program.c:266: print_menu();
      00066A 12r02r8B         [24] 1769 	lcall	_print_menu
                                   1770 ;	program.c:268: while (1)
      00066D                       1771 00123$:
                                   1772 ;	program.c:270: rec = getchar();
      00066D 12r0Dr72         [24] 1773 	lcall	_getchar
      000670 AE 82            [24] 1774 	mov	r6,dpl
      000672 AF 83            [24] 1775 	mov	r7,dph
                                   1776 ;	program.c:271: if (rec > 0x60 && rec < 0x7B)
      000674 C3               [12] 1777 	clr	c
      000675 74 60            [12] 1778 	mov	a,#0x60
      000677 9E               [12] 1779 	subb	a,r6
      000678 74 80            [12] 1780 	mov	a,#(0x00 ^ 0x80)
      00067A 8F F0            [24] 1781 	mov	b,r7
      00067C 63 F0 80         [24] 1782 	xrl	b,#0x80
      00067F 95 F0            [12] 1783 	subb	a,b
      000681 40 03            [24] 1784 	jc	00163$
      000683 02r07r12         [24] 1785 	ljmp	00119$
      000686                       1786 00163$:
      000686 C3               [12] 1787 	clr	c
      000687 EE               [12] 1788 	mov	a,r6
      000688 94 7B            [12] 1789 	subb	a,#0x7b
      00068A EF               [12] 1790 	mov	a,r7
      00068B 64 80            [12] 1791 	xrl	a,#0x80
      00068D 94 80            [12] 1792 	subb	a,#0x80
      00068F 40 03            [24] 1793 	jc	00164$
      000691 02r07r12         [24] 1794 	ljmp	00119$
      000694                       1795 00164$:
                                   1796 ;	program.c:273: if (buffers_array[0].num_char < buffers_array[0].buff_size)
      000694 90r00r14         [24] 1797 	mov	dptr,#(_buffers_array + 0x000a)
      000697 E0               [24] 1798 	movx	a,@dptr
      000698 FC               [12] 1799 	mov	r4,a
      000699 A3               [24] 1800 	inc	dptr
      00069A E0               [24] 1801 	movx	a,@dptr
      00069B FD               [12] 1802 	mov	r5,a
      00069C 90r00r12         [24] 1803 	mov	dptr,#(_buffers_array + 0x0008)
      00069F E0               [24] 1804 	movx	a,@dptr
      0006A0 FA               [12] 1805 	mov	r2,a
      0006A1 A3               [24] 1806 	inc	dptr
      0006A2 E0               [24] 1807 	movx	a,@dptr
      0006A3 FB               [12] 1808 	mov	r3,a
      0006A4 C3               [12] 1809 	clr	c
      0006A5 EC               [12] 1810 	mov	a,r4
      0006A6 9A               [12] 1811 	subb	a,r2
      0006A7 ED               [12] 1812 	mov	a,r5
      0006A8 64 80            [12] 1813 	xrl	a,#0x80
      0006AA 8B F0            [24] 1814 	mov	b,r3
      0006AC 63 F0 80         [24] 1815 	xrl	b,#0x80
      0006AF 95 F0            [12] 1816 	subb	a,b
      0006B1 50 32            [24] 1817 	jnc	00102$
                                   1818 ;	program.c:275: *(buffers_array[0].buffer_start + buffers_array[0].num_char) = rec;
      0006B3 90r00r0C         [24] 1819 	mov	dptr,#(_buffers_array + 0x0002)
      0006B6 E0               [24] 1820 	movx	a,@dptr
      0006B7 F9               [12] 1821 	mov	r1,a
      0006B8 A3               [24] 1822 	inc	dptr
      0006B9 E0               [24] 1823 	movx	a,@dptr
      0006BA FA               [12] 1824 	mov	r2,a
      0006BB A3               [24] 1825 	inc	dptr
      0006BC E0               [24] 1826 	movx	a,@dptr
      0006BD FB               [12] 1827 	mov	r3,a
      0006BE EC               [12] 1828 	mov	a,r4
      0006BF 29               [12] 1829 	add	a,r1
      0006C0 F9               [12] 1830 	mov	r1,a
      0006C1 ED               [12] 1831 	mov	a,r5
      0006C2 3A               [12] 1832 	addc	a,r2
      0006C3 FA               [12] 1833 	mov	r2,a
      0006C4 8E 05            [24] 1834 	mov	ar5,r6
      0006C6 89 82            [24] 1835 	mov	dpl,r1
      0006C8 8A 83            [24] 1836 	mov	dph,r2
      0006CA 8B F0            [24] 1837 	mov	b,r3
      0006CC ED               [12] 1838 	mov	a,r5
      0006CD 12r00r00         [24] 1839 	lcall	__gptrput
                                   1840 ;	program.c:276: buffers_array[0].num_char += 1;
      0006D0 90r00r14         [24] 1841 	mov	dptr,#(_buffers_array + 0x000a)
      0006D3 E0               [24] 1842 	movx	a,@dptr
      0006D4 FC               [12] 1843 	mov	r4,a
      0006D5 A3               [24] 1844 	inc	dptr
      0006D6 E0               [24] 1845 	movx	a,@dptr
      0006D7 FD               [12] 1846 	mov	r5,a
      0006D8 0C               [12] 1847 	inc	r4
      0006D9 BC 00 01         [24] 1848 	cjne	r4,#0x00,00166$
      0006DC 0D               [12] 1849 	inc	r5
      0006DD                       1850 00166$:
      0006DD 90r00r14         [24] 1851 	mov	dptr,#(_buffers_array + 0x000a)
      0006E0 EC               [12] 1852 	mov	a,r4
      0006E1 F0               [24] 1853 	movx	@dptr,a
      0006E2 ED               [12] 1854 	mov	a,r5
      0006E3 A3               [24] 1855 	inc	dptr
      0006E4 F0               [24] 1856 	movx	@dptr,a
      0006E5                       1857 00102$:
                                   1858 ;	program.c:278: program_stats.all_char_count += 1;
      0006E5 90r00r04         [24] 1859 	mov	dptr,#(_program_stats + 0x0004)
      0006E8 E0               [24] 1860 	movx	a,@dptr
      0006E9 FC               [12] 1861 	mov	r4,a
      0006EA A3               [24] 1862 	inc	dptr
      0006EB E0               [24] 1863 	movx	a,@dptr
      0006EC FD               [12] 1864 	mov	r5,a
      0006ED 0C               [12] 1865 	inc	r4
      0006EE BC 00 01         [24] 1866 	cjne	r4,#0x00,00167$
      0006F1 0D               [12] 1867 	inc	r5
      0006F2                       1868 00167$:
      0006F2 90r00r04         [24] 1869 	mov	dptr,#(_program_stats + 0x0004)
      0006F5 EC               [12] 1870 	mov	a,r4
      0006F6 F0               [24] 1871 	movx	@dptr,a
      0006F7 ED               [12] 1872 	mov	a,r5
      0006F8 A3               [24] 1873 	inc	dptr
      0006F9 F0               [24] 1874 	movx	@dptr,a
                                   1875 ;	program.c:279: program_stats.storage_char_count += 1;
      0006FA 90r00r06         [24] 1876 	mov	dptr,#(_program_stats + 0x0006)
      0006FD E0               [24] 1877 	movx	a,@dptr
      0006FE FC               [12] 1878 	mov	r4,a
      0006FF A3               [24] 1879 	inc	dptr
      000700 E0               [24] 1880 	movx	a,@dptr
      000701 FD               [12] 1881 	mov	r5,a
      000702 0C               [12] 1882 	inc	r4
      000703 BC 00 01         [24] 1883 	cjne	r4,#0x00,00168$
      000706 0D               [12] 1884 	inc	r5
      000707                       1885 00168$:
      000707 90r00r06         [24] 1886 	mov	dptr,#(_program_stats + 0x0006)
      00070A EC               [12] 1887 	mov	a,r4
      00070B F0               [24] 1888 	movx	@dptr,a
      00070C ED               [12] 1889 	mov	a,r5
      00070D A3               [24] 1890 	inc	dptr
      00070E F0               [24] 1891 	movx	@dptr,a
      00070F 02r06r6D         [24] 1892 	ljmp	00123$
      000712                       1893 00119$:
                                   1894 ;	program.c:281: else if (rec == 0x3F)
      000712 BE 3F 1F         [24] 1895 	cjne	r6,#0x3f,00116$
      000715 BF 00 1C         [24] 1896 	cjne	r7,#0x00,00116$
                                   1897 ;	program.c:283: print_heap_stats();
      000718 12r09rDF         [24] 1898 	lcall	_print_heap_stats
                                   1899 ;	program.c:284: print_all_buffers();
      00071B 12r0Ar9A         [24] 1900 	lcall	_print_all_buffers
                                   1901 ;	program.c:285: dump_buff_zero_ascii();
      00071E 12r07r88         [24] 1902 	lcall	_dump_buff_zero_ascii
                                   1903 ;	program.c:286: program_stats.all_char_count = 0;
      000721 90r00r04         [24] 1904 	mov	dptr,#(_program_stats + 0x0004)
      000724 E4               [12] 1905 	clr	a
      000725 F0               [24] 1906 	movx	@dptr,a
      000726 A3               [24] 1907 	inc	dptr
      000727 F0               [24] 1908 	movx	@dptr,a
                                   1909 ;	program.c:287: program_stats.storage_char_count = 0;
      000728 90r00r06         [24] 1910 	mov	dptr,#(_program_stats + 0x0006)
      00072B F0               [24] 1911 	movx	@dptr,a
      00072C A3               [24] 1912 	inc	dptr
      00072D F0               [24] 1913 	movx	@dptr,a
                                   1914 ;	program.c:288: print_menu();
      00072E 12r02r8B         [24] 1915 	lcall	_print_menu
      000731 02r06r6D         [24] 1916 	ljmp	00123$
      000734                       1917 00116$:
                                   1918 ;	program.c:290: else if (rec == 0x3D)
      000734 BE 3D 0C         [24] 1919 	cjne	r6,#0x3d,00113$
      000737 BF 00 09         [24] 1920 	cjne	r7,#0x00,00113$
                                   1921 ;	program.c:292: dump_buff_zero_hex();
      00073A 12r08r98         [24] 1922 	lcall	_dump_buff_zero_hex
                                   1923 ;	program.c:293: print_menu();
      00073D 12r02r8B         [24] 1924 	lcall	_print_menu
      000740 02r06r6D         [24] 1925 	ljmp	00123$
      000743                       1926 00113$:
                                   1927 ;	program.c:295: else if (rec == 0x40)
      000743 BE 40 0C         [24] 1928 	cjne	r6,#0x40,00110$
      000746 BF 00 09         [24] 1929 	cjne	r7,#0x00,00110$
                                   1930 ;	program.c:297: at_clear_all_buffers();
      000749 12r00r21         [24] 1931 	lcall	_at_clear_all_buffers
                                   1932 ;	program.c:298: print_menu();
      00074C 12r02r8B         [24] 1933 	lcall	_print_menu
      00074F 02r06r6D         [24] 1934 	ljmp	00123$
      000752                       1935 00110$:
                                   1936 ;	program.c:300: else if (rec == 0x2B)
      000752 BE 2B 0C         [24] 1937 	cjne	r6,#0x2b,00107$
      000755 BF 00 09         [24] 1938 	cjne	r7,#0x00,00107$
                                   1939 ;	program.c:302: create_new_buffer();
      000758 12r03r1F         [24] 1940 	lcall	_create_new_buffer
                                   1941 ;	program.c:303: print_menu();
      00075B 12r02r8B         [24] 1942 	lcall	_print_menu
      00075E 02r06r6D         [24] 1943 	ljmp	00123$
      000761                       1944 00107$:
                                   1945 ;	program.c:305: else if (rec == 0x2D)
      000761 BE 2D 0C         [24] 1946 	cjne	r6,#0x2d,00104$
      000764 BF 00 09         [24] 1947 	cjne	r7,#0x00,00104$
                                   1948 ;	program.c:307: delete_buffer();
      000767 12r00rB5         [24] 1949 	lcall	_delete_buffer
                                   1950 ;	program.c:308: print_menu();
      00076A 12r02r8B         [24] 1951 	lcall	_print_menu
      00076D 02r06r6D         [24] 1952 	ljmp	00123$
      000770                       1953 00104$:
                                   1954 ;	program.c:312: program_stats.all_char_count += 1;
      000770 90r00r04         [24] 1955 	mov	dptr,#(_program_stats + 0x0004)
      000773 E0               [24] 1956 	movx	a,@dptr
      000774 FE               [12] 1957 	mov	r6,a
      000775 A3               [24] 1958 	inc	dptr
      000776 E0               [24] 1959 	movx	a,@dptr
      000777 FF               [12] 1960 	mov	r7,a
      000778 0E               [12] 1961 	inc	r6
      000779 BE 00 01         [24] 1962 	cjne	r6,#0x00,00179$
      00077C 0F               [12] 1963 	inc	r7
      00077D                       1964 00179$:
      00077D 90r00r04         [24] 1965 	mov	dptr,#(_program_stats + 0x0004)
      000780 EE               [12] 1966 	mov	a,r6
      000781 F0               [24] 1967 	movx	@dptr,a
      000782 EF               [12] 1968 	mov	a,r7
      000783 A3               [24] 1969 	inc	dptr
      000784 F0               [24] 1970 	movx	@dptr,a
                                   1971 ;	program.c:315: }
      000785 02r06r6D         [24] 1972 	ljmp	00123$
                                   1973 ;------------------------------------------------------------
                                   1974 ;Allocation info for local variables in function 'dump_buff_zero_ascii'
                                   1975 ;------------------------------------------------------------
                                   1976 ;j                         Allocated with name '_dump_buff_zero_ascii_j_65536_79'
                                   1977 ;i                         Allocated with name '_dump_buff_zero_ascii_i_196608_81'
                                   1978 ;------------------------------------------------------------
                                   1979 ;	program.c:323: void dump_buff_zero_ascii()
                                   1980 ;	-----------------------------------------
                                   1981 ;	 function dump_buff_zero_ascii
                                   1982 ;	-----------------------------------------
      000788                       1983 _dump_buff_zero_ascii:
                                   1984 ;	program.c:325: int j = 64;
      000788 90r01r5C         [24] 1985 	mov	dptr,#_dump_buff_zero_ascii_j_65536_79
      00078B 74 40            [12] 1986 	mov	a,#0x40
      00078D F0               [24] 1987 	movx	@dptr,a
      00078E E4               [12] 1988 	clr	a
      00078F A3               [24] 1989 	inc	dptr
      000790 F0               [24] 1990 	movx	@dptr,a
                                   1991 ;	program.c:326: if (buffers_array[0].num_char > 0)
      000791 90r00r14         [24] 1992 	mov	dptr,#(_buffers_array + 0x000a)
      000794 E0               [24] 1993 	movx	a,@dptr
      000795 FE               [12] 1994 	mov	r6,a
      000796 A3               [24] 1995 	inc	dptr
      000797 E0               [24] 1996 	movx	a,@dptr
      000798 FF               [12] 1997 	mov	r7,a
      000799 C3               [12] 1998 	clr	c
      00079A E4               [12] 1999 	clr	a
      00079B 9E               [12] 2000 	subb	a,r6
      00079C 74 80            [12] 2001 	mov	a,#(0x00 ^ 0x80)
      00079E 8F F0            [24] 2002 	mov	b,r7
      0007A0 63 F0 80         [24] 2003 	xrl	b,#0x80
      0007A3 95 F0            [12] 2004 	subb	a,b
      0007A5 40 03            [24] 2005 	jc	00135$
      0007A7 02r08r82         [24] 2006 	ljmp	00107$
      0007AA                       2007 00135$:
                                   2008 ;	program.c:328: printf("\n\n\r***********Buffer-0-Contents*********** \n\r");
      0007AA 74rDC            [12] 2009 	mov	a,#___str_19
      0007AC C0 E0            [24] 2010 	push	acc
      0007AE 74s02            [12] 2011 	mov	a,#(___str_19 >> 8)
      0007B0 C0 E0            [24] 2012 	push	acc
      0007B2 74 80            [12] 2013 	mov	a,#0x80
      0007B4 C0 E0            [24] 2014 	push	acc
      0007B6 12r00r00         [24] 2015 	lcall	_printf
      0007B9 15 81            [12] 2016 	dec	sp
      0007BB 15 81            [12] 2017 	dec	sp
      0007BD 15 81            [12] 2018 	dec	sp
                                   2019 ;	program.c:329: for (int i = 0; i < buffers_array[0].num_char; i++)
      0007BF 7E 00            [12] 2020 	mov	r6,#0x00
      0007C1 7F 00            [12] 2021 	mov	r7,#0x00
      0007C3                       2022 00110$:
      0007C3 90r00r14         [24] 2023 	mov	dptr,#(_buffers_array + 0x000a)
      0007C6 E0               [24] 2024 	movx	a,@dptr
      0007C7 FC               [12] 2025 	mov	r4,a
      0007C8 A3               [24] 2026 	inc	dptr
      0007C9 E0               [24] 2027 	movx	a,@dptr
      0007CA FD               [12] 2028 	mov	r5,a
      0007CB C3               [12] 2029 	clr	c
      0007CC EE               [12] 2030 	mov	a,r6
      0007CD 9C               [12] 2031 	subb	a,r4
      0007CE EF               [12] 2032 	mov	a,r7
      0007CF 64 80            [12] 2033 	xrl	a,#0x80
      0007D1 8D F0            [24] 2034 	mov	b,r5
      0007D3 63 F0 80         [24] 2035 	xrl	b,#0x80
      0007D6 95 F0            [12] 2036 	subb	a,b
      0007D8 40 03            [24] 2037 	jc	00136$
      0007DA 02r08r65         [24] 2038 	ljmp	00105$
      0007DD                       2039 00136$:
                                   2040 ;	program.c:331: if (j == 64)
      0007DD 90r01r5C         [24] 2041 	mov	dptr,#_dump_buff_zero_ascii_j_65536_79
      0007E0 E0               [24] 2042 	movx	a,@dptr
      0007E1 FC               [12] 2043 	mov	r4,a
      0007E2 A3               [24] 2044 	inc	dptr
      0007E3 E0               [24] 2045 	movx	a,@dptr
      0007E4 FD               [12] 2046 	mov	r5,a
      0007E5 BC 40 20         [24] 2047 	cjne	r4,#0x40,00102$
      0007E8 BD 00 1D         [24] 2048 	cjne	r5,#0x00,00102$
                                   2049 ;	program.c:333: printf("\n\r");
      0007EB C0 07            [24] 2050 	push	ar7
      0007ED C0 06            [24] 2051 	push	ar6
      0007EF 74r0A            [12] 2052 	mov	a,#___str_20
      0007F1 C0 E0            [24] 2053 	push	acc
      0007F3 74s03            [12] 2054 	mov	a,#(___str_20 >> 8)
      0007F5 C0 E0            [24] 2055 	push	acc
      0007F7 74 80            [12] 2056 	mov	a,#0x80
      0007F9 C0 E0            [24] 2057 	push	acc
      0007FB 12r00r00         [24] 2058 	lcall	_printf
      0007FE 15 81            [12] 2059 	dec	sp
      000800 15 81            [12] 2060 	dec	sp
      000802 15 81            [12] 2061 	dec	sp
      000804 D0 06            [24] 2062 	pop	ar6
      000806 D0 07            [24] 2063 	pop	ar7
      000808                       2064 00102$:
                                   2065 ;	program.c:335: putchar(*(buffers_array[0].buffer_start + i));
      000808 90r00r0C         [24] 2066 	mov	dptr,#(_buffers_array + 0x0002)
      00080B E0               [24] 2067 	movx	a,@dptr
      00080C FB               [12] 2068 	mov	r3,a
      00080D A3               [24] 2069 	inc	dptr
      00080E E0               [24] 2070 	movx	a,@dptr
      00080F FC               [12] 2071 	mov	r4,a
      000810 A3               [24] 2072 	inc	dptr
      000811 E0               [24] 2073 	movx	a,@dptr
      000812 FD               [12] 2074 	mov	r5,a
      000813 EE               [12] 2075 	mov	a,r6
      000814 2B               [12] 2076 	add	a,r3
      000815 FB               [12] 2077 	mov	r3,a
      000816 EF               [12] 2078 	mov	a,r7
      000817 3C               [12] 2079 	addc	a,r4
      000818 FC               [12] 2080 	mov	r4,a
      000819 8B 82            [24] 2081 	mov	dpl,r3
      00081B 8C 83            [24] 2082 	mov	dph,r4
      00081D 8D F0            [24] 2083 	mov	b,r5
      00081F 12r00r00         [24] 2084 	lcall	__gptrget
      000822 FB               [12] 2085 	mov	r3,a
      000823 7D 00            [12] 2086 	mov	r5,#0x00
      000825 8B 82            [24] 2087 	mov	dpl,r3
      000827 8D 83            [24] 2088 	mov	dph,r5
      000829 C0 07            [24] 2089 	push	ar7
      00082B C0 06            [24] 2090 	push	ar6
      00082D 12r0Dr53         [24] 2091 	lcall	_putchar
      000830 D0 06            [24] 2092 	pop	ar6
      000832 D0 07            [24] 2093 	pop	ar7
                                   2094 ;	program.c:336: j--;
      000834 90r01r5C         [24] 2095 	mov	dptr,#_dump_buff_zero_ascii_j_65536_79
      000837 E0               [24] 2096 	movx	a,@dptr
      000838 24 FF            [12] 2097 	add	a,#0xff
      00083A FC               [12] 2098 	mov	r4,a
      00083B A3               [24] 2099 	inc	dptr
      00083C E0               [24] 2100 	movx	a,@dptr
      00083D 34 FF            [12] 2101 	addc	a,#0xff
      00083F FD               [12] 2102 	mov	r5,a
      000840 90r01r5C         [24] 2103 	mov	dptr,#_dump_buff_zero_ascii_j_65536_79
      000843 EC               [12] 2104 	mov	a,r4
      000844 F0               [24] 2105 	movx	@dptr,a
      000845 ED               [12] 2106 	mov	a,r5
      000846 A3               [24] 2107 	inc	dptr
      000847 F0               [24] 2108 	movx	@dptr,a
                                   2109 ;	program.c:337: if (j == 0)
      000848 90r01r5C         [24] 2110 	mov	dptr,#_dump_buff_zero_ascii_j_65536_79
      00084B E0               [24] 2111 	movx	a,@dptr
      00084C F5 F0            [12] 2112 	mov	b,a
      00084E A3               [24] 2113 	inc	dptr
      00084F E0               [24] 2114 	movx	a,@dptr
      000850 45 F0            [12] 2115 	orl	a,b
      000852 70 09            [24] 2116 	jnz	00111$
                                   2117 ;	program.c:338: j = 64;
      000854 90r01r5C         [24] 2118 	mov	dptr,#_dump_buff_zero_ascii_j_65536_79
      000857 74 40            [12] 2119 	mov	a,#0x40
      000859 F0               [24] 2120 	movx	@dptr,a
      00085A E4               [12] 2121 	clr	a
      00085B A3               [24] 2122 	inc	dptr
      00085C F0               [24] 2123 	movx	@dptr,a
      00085D                       2124 00111$:
                                   2125 ;	program.c:329: for (int i = 0; i < buffers_array[0].num_char; i++)
      00085D 0E               [12] 2126 	inc	r6
      00085E BE 00 01         [24] 2127 	cjne	r6,#0x00,00140$
      000861 0F               [12] 2128 	inc	r7
      000862                       2129 00140$:
      000862 02r07rC3         [24] 2130 	ljmp	00110$
      000865                       2131 00105$:
                                   2132 ;	program.c:340: buffers_array[0].num_char = 0;
      000865 90r00r14         [24] 2133 	mov	dptr,#(_buffers_array + 0x000a)
      000868 E4               [12] 2134 	clr	a
      000869 F0               [24] 2135 	movx	@dptr,a
      00086A A3               [24] 2136 	inc	dptr
      00086B F0               [24] 2137 	movx	@dptr,a
                                   2138 ;	program.c:341: printf("\n\n\r");
      00086C 74r0D            [12] 2139 	mov	a,#___str_21
      00086E C0 E0            [24] 2140 	push	acc
      000870 74s03            [12] 2141 	mov	a,#(___str_21 >> 8)
      000872 C0 E0            [24] 2142 	push	acc
      000874 74 80            [12] 2143 	mov	a,#0x80
      000876 C0 E0            [24] 2144 	push	acc
      000878 12r00r00         [24] 2145 	lcall	_printf
      00087B 15 81            [12] 2146 	dec	sp
      00087D 15 81            [12] 2147 	dec	sp
      00087F 15 81            [12] 2148 	dec	sp
      000881 22               [24] 2149 	ret
      000882                       2150 00107$:
                                   2151 ;	program.c:345: printf("Buffer0 is Empty....\n\r");
      000882 74r11            [12] 2152 	mov	a,#___str_22
      000884 C0 E0            [24] 2153 	push	acc
      000886 74s03            [12] 2154 	mov	a,#(___str_22 >> 8)
      000888 C0 E0            [24] 2155 	push	acc
      00088A 74 80            [12] 2156 	mov	a,#0x80
      00088C C0 E0            [24] 2157 	push	acc
      00088E 12r00r00         [24] 2158 	lcall	_printf
      000891 15 81            [12] 2159 	dec	sp
      000893 15 81            [12] 2160 	dec	sp
      000895 15 81            [12] 2161 	dec	sp
                                   2162 ;	program.c:347: }
      000897 22               [24] 2163 	ret
                                   2164 ;------------------------------------------------------------
                                   2165 ;Allocation info for local variables in function 'dump_buff_zero_hex'
                                   2166 ;------------------------------------------------------------
                                   2167 ;j                         Allocated with name '_dump_buff_zero_hex_j_131073_87'
                                   2168 ;i                         Allocated with name '_dump_buff_zero_hex_i_196609_88'
                                   2169 ;------------------------------------------------------------
                                   2170 ;	program.c:354: void dump_buff_zero_hex()
                                   2171 ;	-----------------------------------------
                                   2172 ;	 function dump_buff_zero_hex
                                   2173 ;	-----------------------------------------
      000898                       2174 _dump_buff_zero_hex:
                                   2175 ;	program.c:356: if (buffers_array[0].num_char > 0)
      000898 90r00r14         [24] 2176 	mov	dptr,#(_buffers_array + 0x000a)
      00089B E0               [24] 2177 	movx	a,@dptr
      00089C FE               [12] 2178 	mov	r6,a
      00089D A3               [24] 2179 	inc	dptr
      00089E E0               [24] 2180 	movx	a,@dptr
      00089F FF               [12] 2181 	mov	r7,a
      0008A0 C3               [12] 2182 	clr	c
      0008A1 E4               [12] 2183 	clr	a
      0008A2 9E               [12] 2184 	subb	a,r6
      0008A3 74 80            [12] 2185 	mov	a,#(0x00 ^ 0x80)
      0008A5 8F F0            [24] 2186 	mov	b,r7
      0008A7 63 F0 80         [24] 2187 	xrl	b,#0x80
      0008AA 95 F0            [12] 2188 	subb	a,b
      0008AC 40 03            [24] 2189 	jc	00135$
      0008AE 02r09rC9         [24] 2190 	ljmp	00107$
      0008B1                       2191 00135$:
                                   2192 ;	program.c:358: printf("\n\r-------------------------HEXDUMP--------------------------------");
      0008B1 74r28            [12] 2193 	mov	a,#___str_23
      0008B3 C0 E0            [24] 2194 	push	acc
      0008B5 74s03            [12] 2195 	mov	a,#(___str_23 >> 8)
      0008B7 C0 E0            [24] 2196 	push	acc
      0008B9 74 80            [12] 2197 	mov	a,#0x80
      0008BB C0 E0            [24] 2198 	push	acc
      0008BD 12r00r00         [24] 2199 	lcall	_printf
      0008C0 15 81            [12] 2200 	dec	sp
      0008C2 15 81            [12] 2201 	dec	sp
      0008C4 15 81            [12] 2202 	dec	sp
                                   2203 ;	program.c:359: printf("\n\r    ADDR: +0 +1 +2 +3 +4 +5 +6 +7 +8 +9 +A +B +C +D +E +F \n\r");
      0008C6 74r6B            [12] 2204 	mov	a,#___str_24
      0008C8 C0 E0            [24] 2205 	push	acc
      0008CA 74s03            [12] 2206 	mov	a,#(___str_24 >> 8)
      0008CC C0 E0            [24] 2207 	push	acc
      0008CE 74 80            [12] 2208 	mov	a,#0x80
      0008D0 C0 E0            [24] 2209 	push	acc
      0008D2 12r00r00         [24] 2210 	lcall	_printf
      0008D5 15 81            [12] 2211 	dec	sp
      0008D7 15 81            [12] 2212 	dec	sp
      0008D9 15 81            [12] 2213 	dec	sp
                                   2214 ;	program.c:360: int j = 16;
      0008DB 90r01r5E         [24] 2215 	mov	dptr,#_dump_buff_zero_hex_j_131073_87
      0008DE 74 10            [12] 2216 	mov	a,#0x10
      0008E0 F0               [24] 2217 	movx	@dptr,a
      0008E1 E4               [12] 2218 	clr	a
      0008E2 A3               [24] 2219 	inc	dptr
      0008E3 F0               [24] 2220 	movx	@dptr,a
                                   2221 ;	program.c:361: for (int i = 0; i < buffers_array[0].num_char; i++)
      0008E4 7E 00            [12] 2222 	mov	r6,#0x00
      0008E6 7F 00            [12] 2223 	mov	r7,#0x00
      0008E8                       2224 00110$:
      0008E8 90r00r14         [24] 2225 	mov	dptr,#(_buffers_array + 0x000a)
      0008EB E0               [24] 2226 	movx	a,@dptr
      0008EC FC               [12] 2227 	mov	r4,a
      0008ED A3               [24] 2228 	inc	dptr
      0008EE E0               [24] 2229 	movx	a,@dptr
      0008EF FD               [12] 2230 	mov	r5,a
      0008F0 C3               [12] 2231 	clr	c
      0008F1 EE               [12] 2232 	mov	a,r6
      0008F2 9C               [12] 2233 	subb	a,r4
      0008F3 EF               [12] 2234 	mov	a,r7
      0008F4 64 80            [12] 2235 	xrl	a,#0x80
      0008F6 8D F0            [24] 2236 	mov	b,r5
      0008F8 63 F0 80         [24] 2237 	xrl	b,#0x80
      0008FB 95 F0            [12] 2238 	subb	a,b
      0008FD 40 03            [24] 2239 	jc	00136$
      0008FF 02r09rB3         [24] 2240 	ljmp	00105$
      000902                       2241 00136$:
                                   2242 ;	program.c:363: if (j == 16)
      000902 90r01r5E         [24] 2243 	mov	dptr,#_dump_buff_zero_hex_j_131073_87
      000905 E0               [24] 2244 	movx	a,@dptr
      000906 FC               [12] 2245 	mov	r4,a
      000907 A3               [24] 2246 	inc	dptr
      000908 E0               [24] 2247 	movx	a,@dptr
      000909 FD               [12] 2248 	mov	r5,a
      00090A BC 10 37         [24] 2249 	cjne	r4,#0x10,00102$
      00090D BD 00 34         [24] 2250 	cjne	r5,#0x00,00102$
                                   2251 ;	program.c:365: printf("\n\r%p: ", (buffers_array[0].buffer_start + i));
      000910 90r00r0C         [24] 2252 	mov	dptr,#(_buffers_array + 0x0002)
      000913 E0               [24] 2253 	movx	a,@dptr
      000914 FB               [12] 2254 	mov	r3,a
      000915 A3               [24] 2255 	inc	dptr
      000916 E0               [24] 2256 	movx	a,@dptr
      000917 FC               [12] 2257 	mov	r4,a
      000918 A3               [24] 2258 	inc	dptr
      000919 E0               [24] 2259 	movx	a,@dptr
      00091A FD               [12] 2260 	mov	r5,a
      00091B EE               [12] 2261 	mov	a,r6
      00091C 2B               [12] 2262 	add	a,r3
      00091D FB               [12] 2263 	mov	r3,a
      00091E EF               [12] 2264 	mov	a,r7
      00091F 3C               [12] 2265 	addc	a,r4
      000920 FC               [12] 2266 	mov	r4,a
      000921 C0 07            [24] 2267 	push	ar7
      000923 C0 06            [24] 2268 	push	ar6
      000925 C0 03            [24] 2269 	push	ar3
      000927 C0 04            [24] 2270 	push	ar4
      000929 C0 05            [24] 2271 	push	ar5
      00092B 74rAA            [12] 2272 	mov	a,#___str_25
      00092D C0 E0            [24] 2273 	push	acc
      00092F 74s03            [12] 2274 	mov	a,#(___str_25 >> 8)
      000931 C0 E0            [24] 2275 	push	acc
      000933 74 80            [12] 2276 	mov	a,#0x80
      000935 C0 E0            [24] 2277 	push	acc
      000937 12r00r00         [24] 2278 	lcall	_printf
      00093A E5 81            [12] 2279 	mov	a,sp
      00093C 24 FA            [12] 2280 	add	a,#0xfa
      00093E F5 81            [12] 2281 	mov	sp,a
      000940 D0 06            [24] 2282 	pop	ar6
      000942 D0 07            [24] 2283 	pop	ar7
      000944                       2284 00102$:
                                   2285 ;	program.c:367: printf("%x ", *(buffers_array[0].buffer_start + i));
      000944 90r00r0C         [24] 2286 	mov	dptr,#(_buffers_array + 0x0002)
      000947 E0               [24] 2287 	movx	a,@dptr
      000948 FB               [12] 2288 	mov	r3,a
      000949 A3               [24] 2289 	inc	dptr
      00094A E0               [24] 2290 	movx	a,@dptr
      00094B FC               [12] 2291 	mov	r4,a
      00094C A3               [24] 2292 	inc	dptr
      00094D E0               [24] 2293 	movx	a,@dptr
      00094E FD               [12] 2294 	mov	r5,a
      00094F EE               [12] 2295 	mov	a,r6
      000950 2B               [12] 2296 	add	a,r3
      000951 FB               [12] 2297 	mov	r3,a
      000952 EF               [12] 2298 	mov	a,r7
      000953 3C               [12] 2299 	addc	a,r4
      000954 FC               [12] 2300 	mov	r4,a
      000955 8B 82            [24] 2301 	mov	dpl,r3
      000957 8C 83            [24] 2302 	mov	dph,r4
      000959 8D F0            [24] 2303 	mov	b,r5
      00095B 12r00r00         [24] 2304 	lcall	__gptrget
      00095E FB               [12] 2305 	mov	r3,a
      00095F 7D 00            [12] 2306 	mov	r5,#0x00
      000961 C0 07            [24] 2307 	push	ar7
      000963 C0 06            [24] 2308 	push	ar6
      000965 C0 03            [24] 2309 	push	ar3
      000967 C0 05            [24] 2310 	push	ar5
      000969 74rB1            [12] 2311 	mov	a,#___str_26
      00096B C0 E0            [24] 2312 	push	acc
      00096D 74s03            [12] 2313 	mov	a,#(___str_26 >> 8)
      00096F C0 E0            [24] 2314 	push	acc
      000971 74 80            [12] 2315 	mov	a,#0x80
      000973 C0 E0            [24] 2316 	push	acc
      000975 12r00r00         [24] 2317 	lcall	_printf
      000978 E5 81            [12] 2318 	mov	a,sp
      00097A 24 FB            [12] 2319 	add	a,#0xfb
      00097C F5 81            [12] 2320 	mov	sp,a
      00097E D0 06            [24] 2321 	pop	ar6
      000980 D0 07            [24] 2322 	pop	ar7
                                   2323 ;	program.c:368: j--;
      000982 90r01r5E         [24] 2324 	mov	dptr,#_dump_buff_zero_hex_j_131073_87
      000985 E0               [24] 2325 	movx	a,@dptr
      000986 24 FF            [12] 2326 	add	a,#0xff
      000988 FC               [12] 2327 	mov	r4,a
      000989 A3               [24] 2328 	inc	dptr
      00098A E0               [24] 2329 	movx	a,@dptr
      00098B 34 FF            [12] 2330 	addc	a,#0xff
      00098D FD               [12] 2331 	mov	r5,a
      00098E 90r01r5E         [24] 2332 	mov	dptr,#_dump_buff_zero_hex_j_131073_87
      000991 EC               [12] 2333 	mov	a,r4
      000992 F0               [24] 2334 	movx	@dptr,a
      000993 ED               [12] 2335 	mov	a,r5
      000994 A3               [24] 2336 	inc	dptr
      000995 F0               [24] 2337 	movx	@dptr,a
                                   2338 ;	program.c:369: if (j == 0)
      000996 90r01r5E         [24] 2339 	mov	dptr,#_dump_buff_zero_hex_j_131073_87
      000999 E0               [24] 2340 	movx	a,@dptr
      00099A F5 F0            [12] 2341 	mov	b,a
      00099C A3               [24] 2342 	inc	dptr
      00099D E0               [24] 2343 	movx	a,@dptr
      00099E 45 F0            [12] 2344 	orl	a,b
      0009A0 70 09            [24] 2345 	jnz	00111$
                                   2346 ;	program.c:370: j = 16;
      0009A2 90r01r5E         [24] 2347 	mov	dptr,#_dump_buff_zero_hex_j_131073_87
      0009A5 74 10            [12] 2348 	mov	a,#0x10
      0009A7 F0               [24] 2349 	movx	@dptr,a
      0009A8 E4               [12] 2350 	clr	a
      0009A9 A3               [24] 2351 	inc	dptr
      0009AA F0               [24] 2352 	movx	@dptr,a
      0009AB                       2353 00111$:
                                   2354 ;	program.c:361: for (int i = 0; i < buffers_array[0].num_char; i++)
      0009AB 0E               [12] 2355 	inc	r6
      0009AC BE 00 01         [24] 2356 	cjne	r6,#0x00,00140$
      0009AF 0F               [12] 2357 	inc	r7
      0009B0                       2358 00140$:
      0009B0 02r08rE8         [24] 2359 	ljmp	00110$
      0009B3                       2360 00105$:
                                   2361 ;	program.c:372: printf("\n\n\r");
      0009B3 74r0D            [12] 2362 	mov	a,#___str_21
      0009B5 C0 E0            [24] 2363 	push	acc
      0009B7 74s03            [12] 2364 	mov	a,#(___str_21 >> 8)
      0009B9 C0 E0            [24] 2365 	push	acc
      0009BB 74 80            [12] 2366 	mov	a,#0x80
      0009BD C0 E0            [24] 2367 	push	acc
      0009BF 12r00r00         [24] 2368 	lcall	_printf
      0009C2 15 81            [12] 2369 	dec	sp
      0009C4 15 81            [12] 2370 	dec	sp
      0009C6 15 81            [12] 2371 	dec	sp
      0009C8 22               [24] 2372 	ret
      0009C9                       2373 00107$:
                                   2374 ;	program.c:376: printf("Buffer 0 is empty...\n\r");
      0009C9 74rB5            [12] 2375 	mov	a,#___str_27
      0009CB C0 E0            [24] 2376 	push	acc
      0009CD 74s03            [12] 2377 	mov	a,#(___str_27 >> 8)
      0009CF C0 E0            [24] 2378 	push	acc
      0009D1 74 80            [12] 2379 	mov	a,#0x80
      0009D3 C0 E0            [24] 2380 	push	acc
      0009D5 12r00r00         [24] 2381 	lcall	_printf
      0009D8 15 81            [12] 2382 	dec	sp
      0009DA 15 81            [12] 2383 	dec	sp
      0009DC 15 81            [12] 2384 	dec	sp
                                   2385 ;	program.c:378: }
      0009DE 22               [24] 2386 	ret
                                   2387 ;------------------------------------------------------------
                                   2388 ;Allocation info for local variables in function 'print_heap_stats'
                                   2389 ;------------------------------------------------------------
                                   2390 ;	program.c:385: void print_heap_stats()
                                   2391 ;	-----------------------------------------
                                   2392 ;	 function print_heap_stats
                                   2393 ;	-----------------------------------------
      0009DF                       2394 _print_heap_stats:
                                   2395 ;	program.c:387: printf("\n\r****************HEAP*STATS*************\n\r");
      0009DF 74rCC            [12] 2396 	mov	a,#___str_28
      0009E1 C0 E0            [24] 2397 	push	acc
      0009E3 74s03            [12] 2398 	mov	a,#(___str_28 >> 8)
      0009E5 C0 E0            [24] 2399 	push	acc
      0009E7 74 80            [12] 2400 	mov	a,#0x80
      0009E9 C0 E0            [24] 2401 	push	acc
      0009EB 12r00r00         [24] 2402 	lcall	_printf
      0009EE 15 81            [12] 2403 	dec	sp
      0009F0 15 81            [12] 2404 	dec	sp
      0009F2 15 81            [12] 2405 	dec	sp
                                   2406 ;	program.c:388: printf("Total Heap Size: %d \n\r", program_stats.total_heap_size);
      0009F4 90r00r00         [24] 2407 	mov	dptr,#_program_stats
      0009F7 E0               [24] 2408 	movx	a,@dptr
      0009F8 FE               [12] 2409 	mov	r6,a
      0009F9 A3               [24] 2410 	inc	dptr
      0009FA E0               [24] 2411 	movx	a,@dptr
      0009FB FF               [12] 2412 	mov	r7,a
      0009FC C0 06            [24] 2413 	push	ar6
      0009FE C0 07            [24] 2414 	push	ar7
      000A00 74rF8            [12] 2415 	mov	a,#___str_29
      000A02 C0 E0            [24] 2416 	push	acc
      000A04 74s03            [12] 2417 	mov	a,#(___str_29 >> 8)
      000A06 C0 E0            [24] 2418 	push	acc
      000A08 74 80            [12] 2419 	mov	a,#0x80
      000A0A C0 E0            [24] 2420 	push	acc
      000A0C 12r00r00         [24] 2421 	lcall	_printf
      000A0F E5 81            [12] 2422 	mov	a,sp
      000A11 24 FB            [12] 2423 	add	a,#0xfb
      000A13 F5 81            [12] 2424 	mov	sp,a
                                   2425 ;	program.c:389: printf("Allocated Heap Size: %d \n\r", program_stats.allocated_heap);
      000A15 90r00r02         [24] 2426 	mov	dptr,#(_program_stats + 0x0002)
      000A18 E0               [24] 2427 	movx	a,@dptr
      000A19 FE               [12] 2428 	mov	r6,a
      000A1A A3               [24] 2429 	inc	dptr
      000A1B E0               [24] 2430 	movx	a,@dptr
      000A1C FF               [12] 2431 	mov	r7,a
      000A1D C0 06            [24] 2432 	push	ar6
      000A1F C0 07            [24] 2433 	push	ar7
      000A21 74r0F            [12] 2434 	mov	a,#___str_30
      000A23 C0 E0            [24] 2435 	push	acc
      000A25 74s04            [12] 2436 	mov	a,#(___str_30 >> 8)
      000A27 C0 E0            [24] 2437 	push	acc
      000A29 74 80            [12] 2438 	mov	a,#0x80
      000A2B C0 E0            [24] 2439 	push	acc
      000A2D 12r00r00         [24] 2440 	lcall	_printf
      000A30 E5 81            [12] 2441 	mov	a,sp
      000A32 24 FB            [12] 2442 	add	a,#0xfb
      000A34 F5 81            [12] 2443 	mov	sp,a
                                   2444 ;	program.c:390: printf("All Chars: %d \n\r", program_stats.all_char_count);
      000A36 90r00r04         [24] 2445 	mov	dptr,#(_program_stats + 0x0004)
      000A39 E0               [24] 2446 	movx	a,@dptr
      000A3A FE               [12] 2447 	mov	r6,a
      000A3B A3               [24] 2448 	inc	dptr
      000A3C E0               [24] 2449 	movx	a,@dptr
      000A3D FF               [12] 2450 	mov	r7,a
      000A3E C0 06            [24] 2451 	push	ar6
      000A40 C0 07            [24] 2452 	push	ar7
      000A42 74r2A            [12] 2453 	mov	a,#___str_31
      000A44 C0 E0            [24] 2454 	push	acc
      000A46 74s04            [12] 2455 	mov	a,#(___str_31 >> 8)
      000A48 C0 E0            [24] 2456 	push	acc
      000A4A 74 80            [12] 2457 	mov	a,#0x80
      000A4C C0 E0            [24] 2458 	push	acc
      000A4E 12r00r00         [24] 2459 	lcall	_printf
      000A51 E5 81            [12] 2460 	mov	a,sp
      000A53 24 FB            [12] 2461 	add	a,#0xfb
      000A55 F5 81            [12] 2462 	mov	sp,a
                                   2463 ;	program.c:391: printf("Storage Chars: %d \n\r", program_stats.storage_char_count);
      000A57 90r00r06         [24] 2464 	mov	dptr,#(_program_stats + 0x0006)
      000A5A E0               [24] 2465 	movx	a,@dptr
      000A5B FE               [12] 2466 	mov	r6,a
      000A5C A3               [24] 2467 	inc	dptr
      000A5D E0               [24] 2468 	movx	a,@dptr
      000A5E FF               [12] 2469 	mov	r7,a
      000A5F C0 06            [24] 2470 	push	ar6
      000A61 C0 07            [24] 2471 	push	ar7
      000A63 74r3B            [12] 2472 	mov	a,#___str_32
      000A65 C0 E0            [24] 2473 	push	acc
      000A67 74s04            [12] 2474 	mov	a,#(___str_32 >> 8)
      000A69 C0 E0            [24] 2475 	push	acc
      000A6B 74 80            [12] 2476 	mov	a,#0x80
      000A6D C0 E0            [24] 2477 	push	acc
      000A6F 12r00r00         [24] 2478 	lcall	_printf
      000A72 E5 81            [12] 2479 	mov	a,sp
      000A74 24 FB            [12] 2480 	add	a,#0xfb
      000A76 F5 81            [12] 2481 	mov	sp,a
                                   2482 ;	program.c:392: printf("Total Buffers: %d \n\r", program_stats.total_buffers);
      000A78 90r00r08         [24] 2483 	mov	dptr,#(_program_stats + 0x0008)
      000A7B E0               [24] 2484 	movx	a,@dptr
      000A7C FE               [12] 2485 	mov	r6,a
      000A7D A3               [24] 2486 	inc	dptr
      000A7E E0               [24] 2487 	movx	a,@dptr
      000A7F FF               [12] 2488 	mov	r7,a
      000A80 C0 06            [24] 2489 	push	ar6
      000A82 C0 07            [24] 2490 	push	ar7
      000A84 74r50            [12] 2491 	mov	a,#___str_33
      000A86 C0 E0            [24] 2492 	push	acc
      000A88 74s04            [12] 2493 	mov	a,#(___str_33 >> 8)
      000A8A C0 E0            [24] 2494 	push	acc
      000A8C 74 80            [12] 2495 	mov	a,#0x80
      000A8E C0 E0            [24] 2496 	push	acc
      000A90 12r00r00         [24] 2497 	lcall	_printf
      000A93 E5 81            [12] 2498 	mov	a,sp
      000A95 24 FB            [12] 2499 	add	a,#0xfb
      000A97 F5 81            [12] 2500 	mov	sp,a
                                   2501 ;	program.c:393: }
      000A99 22               [24] 2502 	ret
                                   2503 ;------------------------------------------------------------
                                   2504 ;Allocation info for local variables in function 'print_all_buffers'
                                   2505 ;------------------------------------------------------------
                                   2506 ;i                         Allocated with name '_print_all_buffers_i_131072_94'
                                   2507 ;------------------------------------------------------------
                                   2508 ;	program.c:400: void print_all_buffers()
                                   2509 ;	-----------------------------------------
                                   2510 ;	 function print_all_buffers
                                   2511 ;	-----------------------------------------
      000A9A                       2512 _print_all_buffers:
                                   2513 ;	program.c:402: for (int i = 0; i < program_stats.total_buffers; i++)
      000A9A 7E 00            [12] 2514 	mov	r6,#0x00
      000A9C 7F 00            [12] 2515 	mov	r7,#0x00
      000A9E                       2516 00103$:
      000A9E 90r00r08         [24] 2517 	mov	dptr,#(_program_stats + 0x0008)
      000AA1 E0               [24] 2518 	movx	a,@dptr
      000AA2 FC               [12] 2519 	mov	r4,a
      000AA3 A3               [24] 2520 	inc	dptr
      000AA4 E0               [24] 2521 	movx	a,@dptr
      000AA5 FD               [12] 2522 	mov	r5,a
      000AA6 C3               [12] 2523 	clr	c
      000AA7 EE               [12] 2524 	mov	a,r6
      000AA8 9C               [12] 2525 	subb	a,r4
      000AA9 EF               [12] 2526 	mov	a,r7
      000AAA 64 80            [12] 2527 	xrl	a,#0x80
      000AAC 8D F0            [24] 2528 	mov	b,r5
      000AAE 63 F0 80         [24] 2529 	xrl	b,#0x80
      000AB1 95 F0            [12] 2530 	subb	a,b
      000AB3 40 03            [24] 2531 	jc	00116$
      000AB5 02r0BrEE         [24] 2532 	ljmp	00101$
      000AB8                       2533 00116$:
                                   2534 ;	program.c:404: printf("****************BUFFER*%d***************\n\r", i);
      000AB8 C0 07            [24] 2535 	push	ar7
      000ABA C0 06            [24] 2536 	push	ar6
      000ABC C0 06            [24] 2537 	push	ar6
      000ABE C0 07            [24] 2538 	push	ar7
      000AC0 74r65            [12] 2539 	mov	a,#___str_34
      000AC2 C0 E0            [24] 2540 	push	acc
      000AC4 74s04            [12] 2541 	mov	a,#(___str_34 >> 8)
      000AC6 C0 E0            [24] 2542 	push	acc
      000AC8 74 80            [12] 2543 	mov	a,#0x80
      000ACA C0 E0            [24] 2544 	push	acc
      000ACC 12r00r00         [24] 2545 	lcall	_printf
      000ACF E5 81            [12] 2546 	mov	a,sp
      000AD1 24 FB            [12] 2547 	add	a,#0xfb
      000AD3 F5 81            [12] 2548 	mov	sp,a
      000AD5 D0 06            [24] 2549 	pop	ar6
      000AD7 D0 07            [24] 2550 	pop	ar7
                                   2551 ;	program.c:405: printf("Buffer#: %d \n\r", buffers_array[i].buffer_num);
      000AD9 90r00r00         [24] 2552 	mov	dptr,#__mulint_PARM_2
      000ADC EE               [12] 2553 	mov	a,r6
      000ADD F0               [24] 2554 	movx	@dptr,a
      000ADE EF               [12] 2555 	mov	a,r7
      000ADF A3               [24] 2556 	inc	dptr
      000AE0 F0               [24] 2557 	movx	@dptr,a
      000AE1 90 00 0C         [24] 2558 	mov	dptr,#0x000c
      000AE4 C0 07            [24] 2559 	push	ar7
      000AE6 C0 06            [24] 2560 	push	ar6
      000AE8 12r00r00         [24] 2561 	lcall	__mulint
      000AEB AC 82            [24] 2562 	mov	r4,dpl
      000AED AD 83            [24] 2563 	mov	r5,dph
      000AEF EC               [12] 2564 	mov	a,r4
      000AF0 24r0A            [12] 2565 	add	a,#_buffers_array
      000AF2 F5 82            [12] 2566 	mov	dpl,a
      000AF4 ED               [12] 2567 	mov	a,r5
      000AF5 34s00            [12] 2568 	addc	a,#(_buffers_array >> 8)
      000AF7 F5 83            [12] 2569 	mov	dph,a
      000AF9 E0               [24] 2570 	movx	a,@dptr
      000AFA FA               [12] 2571 	mov	r2,a
      000AFB A3               [24] 2572 	inc	dptr
      000AFC E0               [24] 2573 	movx	a,@dptr
      000AFD FB               [12] 2574 	mov	r3,a
      000AFE C0 05            [24] 2575 	push	ar5
      000B00 C0 04            [24] 2576 	push	ar4
      000B02 C0 02            [24] 2577 	push	ar2
      000B04 C0 03            [24] 2578 	push	ar3
      000B06 74r90            [12] 2579 	mov	a,#___str_35
      000B08 C0 E0            [24] 2580 	push	acc
      000B0A 74s04            [12] 2581 	mov	a,#(___str_35 >> 8)
      000B0C C0 E0            [24] 2582 	push	acc
      000B0E 74 80            [12] 2583 	mov	a,#0x80
      000B10 C0 E0            [24] 2584 	push	acc
      000B12 12r00r00         [24] 2585 	lcall	_printf
      000B15 E5 81            [12] 2586 	mov	a,sp
      000B17 24 FB            [12] 2587 	add	a,#0xfb
      000B19 F5 81            [12] 2588 	mov	sp,a
      000B1B D0 04            [24] 2589 	pop	ar4
      000B1D D0 05            [24] 2590 	pop	ar5
                                   2591 ;	program.c:406: printf("BufferStart: %p \n\r", buffers_array[i].buffer_start);
      000B1F EC               [12] 2592 	mov	a,r4
      000B20 24r0A            [12] 2593 	add	a,#_buffers_array
      000B22 FC               [12] 2594 	mov	r4,a
      000B23 ED               [12] 2595 	mov	a,r5
      000B24 34s00            [12] 2596 	addc	a,#(_buffers_array >> 8)
      000B26 FD               [12] 2597 	mov	r5,a
      000B27 8C 82            [24] 2598 	mov	dpl,r4
      000B29 8D 83            [24] 2599 	mov	dph,r5
      000B2B A3               [24] 2600 	inc	dptr
      000B2C A3               [24] 2601 	inc	dptr
      000B2D E0               [24] 2602 	movx	a,@dptr
      000B2E F9               [12] 2603 	mov	r1,a
      000B2F A3               [24] 2604 	inc	dptr
      000B30 E0               [24] 2605 	movx	a,@dptr
      000B31 FA               [12] 2606 	mov	r2,a
      000B32 A3               [24] 2607 	inc	dptr
      000B33 E0               [24] 2608 	movx	a,@dptr
      000B34 FB               [12] 2609 	mov	r3,a
      000B35 C0 05            [24] 2610 	push	ar5
      000B37 C0 04            [24] 2611 	push	ar4
      000B39 C0 01            [24] 2612 	push	ar1
      000B3B C0 02            [24] 2613 	push	ar2
      000B3D C0 03            [24] 2614 	push	ar3
      000B3F 74r9F            [12] 2615 	mov	a,#___str_36
      000B41 C0 E0            [24] 2616 	push	acc
      000B43 74s04            [12] 2617 	mov	a,#(___str_36 >> 8)
      000B45 C0 E0            [24] 2618 	push	acc
      000B47 74 80            [12] 2619 	mov	a,#0x80
      000B49 C0 E0            [24] 2620 	push	acc
      000B4B 12r00r00         [24] 2621 	lcall	_printf
      000B4E E5 81            [12] 2622 	mov	a,sp
      000B50 24 FA            [12] 2623 	add	a,#0xfa
      000B52 F5 81            [12] 2624 	mov	sp,a
      000B54 D0 04            [24] 2625 	pop	ar4
      000B56 D0 05            [24] 2626 	pop	ar5
                                   2627 ;	program.c:407: printf("BufferEnd: %p \n\r", buffers_array[i].buffer_end);
      000B58 8C 82            [24] 2628 	mov	dpl,r4
      000B5A 8D 83            [24] 2629 	mov	dph,r5
      000B5C A3               [24] 2630 	inc	dptr
      000B5D A3               [24] 2631 	inc	dptr
      000B5E A3               [24] 2632 	inc	dptr
      000B5F A3               [24] 2633 	inc	dptr
      000B60 A3               [24] 2634 	inc	dptr
      000B61 E0               [24] 2635 	movx	a,@dptr
      000B62 F9               [12] 2636 	mov	r1,a
      000B63 A3               [24] 2637 	inc	dptr
      000B64 E0               [24] 2638 	movx	a,@dptr
      000B65 FA               [12] 2639 	mov	r2,a
      000B66 A3               [24] 2640 	inc	dptr
      000B67 E0               [24] 2641 	movx	a,@dptr
      000B68 FB               [12] 2642 	mov	r3,a
      000B69 C0 05            [24] 2643 	push	ar5
      000B6B C0 04            [24] 2644 	push	ar4
      000B6D C0 01            [24] 2645 	push	ar1
      000B6F C0 02            [24] 2646 	push	ar2
      000B71 C0 03            [24] 2647 	push	ar3
      000B73 74rB2            [12] 2648 	mov	a,#___str_37
      000B75 C0 E0            [24] 2649 	push	acc
      000B77 74s04            [12] 2650 	mov	a,#(___str_37 >> 8)
      000B79 C0 E0            [24] 2651 	push	acc
      000B7B 74 80            [12] 2652 	mov	a,#0x80
      000B7D C0 E0            [24] 2653 	push	acc
      000B7F 12r00r00         [24] 2654 	lcall	_printf
      000B82 E5 81            [12] 2655 	mov	a,sp
      000B84 24 FA            [12] 2656 	add	a,#0xfa
      000B86 F5 81            [12] 2657 	mov	sp,a
      000B88 D0 04            [24] 2658 	pop	ar4
      000B8A D0 05            [24] 2659 	pop	ar5
                                   2660 ;	program.c:408: printf("BufferSize: %d \n\r", buffers_array[i].buff_size);
      000B8C 74 08            [12] 2661 	mov	a,#0x08
      000B8E 2C               [12] 2662 	add	a,r4
      000B8F F5 82            [12] 2663 	mov	dpl,a
      000B91 E4               [12] 2664 	clr	a
      000B92 3D               [12] 2665 	addc	a,r5
      000B93 F5 83            [12] 2666 	mov	dph,a
      000B95 E0               [24] 2667 	movx	a,@dptr
      000B96 FA               [12] 2668 	mov	r2,a
      000B97 A3               [24] 2669 	inc	dptr
      000B98 E0               [24] 2670 	movx	a,@dptr
      000B99 FB               [12] 2671 	mov	r3,a
      000B9A C0 05            [24] 2672 	push	ar5
      000B9C C0 04            [24] 2673 	push	ar4
      000B9E C0 02            [24] 2674 	push	ar2
      000BA0 C0 03            [24] 2675 	push	ar3
      000BA2 74rC3            [12] 2676 	mov	a,#___str_38
      000BA4 C0 E0            [24] 2677 	push	acc
      000BA6 74s04            [12] 2678 	mov	a,#(___str_38 >> 8)
      000BA8 C0 E0            [24] 2679 	push	acc
      000BAA 74 80            [12] 2680 	mov	a,#0x80
      000BAC C0 E0            [24] 2681 	push	acc
      000BAE 12r00r00         [24] 2682 	lcall	_printf
      000BB1 E5 81            [12] 2683 	mov	a,sp
      000BB3 24 FB            [12] 2684 	add	a,#0xfb
      000BB5 F5 81            [12] 2685 	mov	sp,a
      000BB7 D0 04            [24] 2686 	pop	ar4
      000BB9 D0 05            [24] 2687 	pop	ar5
                                   2688 ;	program.c:409: printf("TotalUsed: %d \n\r", buffers_array[i].num_char);
      000BBB 74 0A            [12] 2689 	mov	a,#0x0a
      000BBD 2C               [12] 2690 	add	a,r4
      000BBE F5 82            [12] 2691 	mov	dpl,a
      000BC0 E4               [12] 2692 	clr	a
      000BC1 3D               [12] 2693 	addc	a,r5
      000BC2 F5 83            [12] 2694 	mov	dph,a
      000BC4 E0               [24] 2695 	movx	a,@dptr
      000BC5 FC               [12] 2696 	mov	r4,a
      000BC6 A3               [24] 2697 	inc	dptr
      000BC7 E0               [24] 2698 	movx	a,@dptr
      000BC8 FD               [12] 2699 	mov	r5,a
      000BC9 C0 04            [24] 2700 	push	ar4
      000BCB C0 05            [24] 2701 	push	ar5
      000BCD 74rD5            [12] 2702 	mov	a,#___str_39
      000BCF C0 E0            [24] 2703 	push	acc
      000BD1 74s04            [12] 2704 	mov	a,#(___str_39 >> 8)
      000BD3 C0 E0            [24] 2705 	push	acc
      000BD5 74 80            [12] 2706 	mov	a,#0x80
      000BD7 C0 E0            [24] 2707 	push	acc
      000BD9 12r00r00         [24] 2708 	lcall	_printf
      000BDC E5 81            [12] 2709 	mov	a,sp
      000BDE 24 FB            [12] 2710 	add	a,#0xfb
      000BE0 F5 81            [12] 2711 	mov	sp,a
      000BE2 D0 06            [24] 2712 	pop	ar6
      000BE4 D0 07            [24] 2713 	pop	ar7
                                   2714 ;	program.c:402: for (int i = 0; i < program_stats.total_buffers; i++)
      000BE6 0E               [12] 2715 	inc	r6
      000BE7 BE 00 01         [24] 2716 	cjne	r6,#0x00,00117$
      000BEA 0F               [12] 2717 	inc	r7
      000BEB                       2718 00117$:
      000BEB 02r0Ar9E         [24] 2719 	ljmp	00103$
      000BEE                       2720 00101$:
                                   2721 ;	program.c:411: printf("***************************************\n\r");
      000BEE 74rE6            [12] 2722 	mov	a,#___str_40
      000BF0 C0 E0            [24] 2723 	push	acc
      000BF2 74s04            [12] 2724 	mov	a,#(___str_40 >> 8)
      000BF4 C0 E0            [24] 2725 	push	acc
      000BF6 74 80            [12] 2726 	mov	a,#0x80
      000BF8 C0 E0            [24] 2727 	push	acc
      000BFA 12r00r00         [24] 2728 	lcall	_printf
      000BFD 15 81            [12] 2729 	dec	sp
      000BFF 15 81            [12] 2730 	dec	sp
      000C01 15 81            [12] 2731 	dec	sp
                                   2732 ;	program.c:412: }
      000C03 22               [24] 2733 	ret
                                   2734 ;------------------------------------------------------------
                                   2735 ;Allocation info for local variables in function 'get_number'
                                   2736 ;------------------------------------------------------------
                                   2737 ;total_chars               Allocated with name '_get_number_total_chars_65536_96'
                                   2738 ;rec                       Allocated with name '_get_number_rec_65536_97'
                                   2739 ;num                       Allocated with name '_get_number_num_65536_97'
                                   2740 ;i                         Allocated with name '_get_number_i_131072_98'
                                   2741 ;------------------------------------------------------------
                                   2742 ;	program.c:419: int get_number(int total_chars)
                                   2743 ;	-----------------------------------------
                                   2744 ;	 function get_number
                                   2745 ;	-----------------------------------------
      000C04                       2746 _get_number:
      000C04 AF 83            [24] 2747 	mov	r7,dph
      000C06 E5 82            [12] 2748 	mov	a,dpl
      000C08 90r01r60         [24] 2749 	mov	dptr,#_get_number_total_chars_65536_96
      000C0B F0               [24] 2750 	movx	@dptr,a
      000C0C EF               [12] 2751 	mov	a,r7
      000C0D A3               [24] 2752 	inc	dptr
      000C0E F0               [24] 2753 	movx	@dptr,a
                                   2754 ;	program.c:422: int num = 0;
      000C0F 90r01r62         [24] 2755 	mov	dptr,#_get_number_num_65536_97
      000C12 E4               [12] 2756 	clr	a
      000C13 F0               [24] 2757 	movx	@dptr,a
      000C14 A3               [24] 2758 	inc	dptr
      000C15 F0               [24] 2759 	movx	@dptr,a
                                   2760 ;	program.c:423: for (int i = total_chars; i > 0; i--)
      000C16 90r01r60         [24] 2761 	mov	dptr,#_get_number_total_chars_65536_96
      000C19 E0               [24] 2762 	movx	a,@dptr
      000C1A FE               [12] 2763 	mov	r6,a
      000C1B A3               [24] 2764 	inc	dptr
      000C1C E0               [24] 2765 	movx	a,@dptr
      000C1D FF               [12] 2766 	mov	r7,a
      000C1E                       2767 00107$:
      000C1E C3               [12] 2768 	clr	c
      000C1F E4               [12] 2769 	clr	a
      000C20 9E               [12] 2770 	subb	a,r6
      000C21 74 80            [12] 2771 	mov	a,#(0x00 ^ 0x80)
      000C23 8F F0            [24] 2772 	mov	b,r7
      000C25 63 F0 80         [24] 2773 	xrl	b,#0x80
      000C28 95 F0            [12] 2774 	subb	a,b
      000C2A 40 03            [24] 2775 	jc	00127$
      000C2C 02r0CrCA         [24] 2776 	ljmp	00105$
      000C2F                       2777 00127$:
                                   2778 ;	program.c:426: rec = getchar();
      000C2F C0 07            [24] 2779 	push	ar7
      000C31 C0 06            [24] 2780 	push	ar6
      000C33 12r0Dr72         [24] 2781 	lcall	_getchar
      000C36 AC 82            [24] 2782 	mov	r4,dpl
      000C38 AD 83            [24] 2783 	mov	r5,dph
      000C3A D0 06            [24] 2784 	pop	ar6
      000C3C D0 07            [24] 2785 	pop	ar7
                                   2786 ;	program.c:427: if (rec <= 0x39 && rec >= 0x30)
      000C3E C3               [12] 2787 	clr	c
      000C3F 74 39            [12] 2788 	mov	a,#0x39
      000C41 9C               [12] 2789 	subb	a,r4
      000C42 74 80            [12] 2790 	mov	a,#(0x00 ^ 0x80)
      000C44 8D F0            [24] 2791 	mov	b,r5
      000C46 63 F0 80         [24] 2792 	xrl	b,#0x80
      000C49 95 F0            [12] 2793 	subb	a,b
      000C4B 40 5C            [24] 2794 	jc	00102$
      000C4D EC               [12] 2795 	mov	a,r4
      000C4E 94 30            [12] 2796 	subb	a,#0x30
      000C50 ED               [12] 2797 	mov	a,r5
      000C51 64 80            [12] 2798 	xrl	a,#0x80
      000C53 94 80            [12] 2799 	subb	a,#0x80
      000C55 40 52            [24] 2800 	jc	00102$
                                   2801 ;	program.c:430: num += ((rec - 0x30) * get_num_helper(i - 1));
      000C57 EC               [12] 2802 	mov	a,r4
      000C58 24 D0            [12] 2803 	add	a,#0xd0
      000C5A FC               [12] 2804 	mov	r4,a
      000C5B ED               [12] 2805 	mov	a,r5
      000C5C 34 FF            [12] 2806 	addc	a,#0xff
      000C5E FD               [12] 2807 	mov	r5,a
      000C5F EE               [12] 2808 	mov	a,r6
      000C60 24 FF            [12] 2809 	add	a,#0xff
      000C62 FA               [12] 2810 	mov	r2,a
      000C63 EF               [12] 2811 	mov	a,r7
      000C64 34 FF            [12] 2812 	addc	a,#0xff
      000C66 FB               [12] 2813 	mov	r3,a
      000C67 8A 82            [24] 2814 	mov	dpl,r2
      000C69 8B 83            [24] 2815 	mov	dph,r3
      000C6B C0 07            [24] 2816 	push	ar7
      000C6D C0 06            [24] 2817 	push	ar6
      000C6F C0 05            [24] 2818 	push	ar5
      000C71 C0 04            [24] 2819 	push	ar4
      000C73 12r0CrD6         [24] 2820 	lcall	_get_num_helper
      000C76 AA 82            [24] 2821 	mov	r2,dpl
      000C78 AB 83            [24] 2822 	mov	r3,dph
      000C7A D0 04            [24] 2823 	pop	ar4
      000C7C D0 05            [24] 2824 	pop	ar5
      000C7E 90r00r00         [24] 2825 	mov	dptr,#__mulint_PARM_2
      000C81 EA               [12] 2826 	mov	a,r2
      000C82 F0               [24] 2827 	movx	@dptr,a
      000C83 EB               [12] 2828 	mov	a,r3
      000C84 A3               [24] 2829 	inc	dptr
      000C85 F0               [24] 2830 	movx	@dptr,a
      000C86 8C 82            [24] 2831 	mov	dpl,r4
      000C88 8D 83            [24] 2832 	mov	dph,r5
      000C8A 12r00r00         [24] 2833 	lcall	__mulint
      000C8D AC 82            [24] 2834 	mov	r4,dpl
      000C8F AD 83            [24] 2835 	mov	r5,dph
      000C91 D0 06            [24] 2836 	pop	ar6
      000C93 D0 07            [24] 2837 	pop	ar7
      000C95 90r01r62         [24] 2838 	mov	dptr,#_get_number_num_65536_97
      000C98 E0               [24] 2839 	movx	a,@dptr
      000C99 FA               [12] 2840 	mov	r2,a
      000C9A A3               [24] 2841 	inc	dptr
      000C9B E0               [24] 2842 	movx	a,@dptr
      000C9C FB               [12] 2843 	mov	r3,a
      000C9D 90r01r62         [24] 2844 	mov	dptr,#_get_number_num_65536_97
      000CA0 EC               [12] 2845 	mov	a,r4
      000CA1 2A               [12] 2846 	add	a,r2
      000CA2 F0               [24] 2847 	movx	@dptr,a
      000CA3 ED               [12] 2848 	mov	a,r5
      000CA4 3B               [12] 2849 	addc	a,r3
      000CA5 A3               [24] 2850 	inc	dptr
      000CA6 F0               [24] 2851 	movx	@dptr,a
      000CA7 80 19            [24] 2852 	sjmp	00108$
      000CA9                       2853 00102$:
                                   2854 ;	program.c:434: printf("ERR,Numbers ONLY!\n\r");
      000CA9 74r10            [12] 2855 	mov	a,#___str_41
      000CAB C0 E0            [24] 2856 	push	acc
      000CAD 74s05            [12] 2857 	mov	a,#(___str_41 >> 8)
      000CAF C0 E0            [24] 2858 	push	acc
      000CB1 74 80            [12] 2859 	mov	a,#0x80
      000CB3 C0 E0            [24] 2860 	push	acc
      000CB5 12r00r00         [24] 2861 	lcall	_printf
      000CB8 15 81            [12] 2862 	dec	sp
      000CBA 15 81            [12] 2863 	dec	sp
      000CBC 15 81            [12] 2864 	dec	sp
                                   2865 ;	program.c:435: return -1;
      000CBE 90 FF FF         [24] 2866 	mov	dptr,#0xffff
      000CC1 22               [24] 2867 	ret
      000CC2                       2868 00108$:
                                   2869 ;	program.c:423: for (int i = total_chars; i > 0; i--)
      000CC2 1E               [12] 2870 	dec	r6
      000CC3 BE FF 01         [24] 2871 	cjne	r6,#0xff,00130$
      000CC6 1F               [12] 2872 	dec	r7
      000CC7                       2873 00130$:
      000CC7 02r0Cr1E         [24] 2874 	ljmp	00107$
      000CCA                       2875 00105$:
                                   2876 ;	program.c:438: return num;
      000CCA 90r01r62         [24] 2877 	mov	dptr,#_get_number_num_65536_97
      000CCD E0               [24] 2878 	movx	a,@dptr
      000CCE FE               [12] 2879 	mov	r6,a
      000CCF A3               [24] 2880 	inc	dptr
      000CD0 E0               [24] 2881 	movx	a,@dptr
                                   2882 ;	program.c:439: }
      000CD1 8E 82            [24] 2883 	mov	dpl,r6
      000CD3 F5 83            [12] 2884 	mov	dph,a
      000CD5 22               [24] 2885 	ret
                                   2886 ;------------------------------------------------------------
                                   2887 ;Allocation info for local variables in function 'get_num_helper'
                                   2888 ;------------------------------------------------------------
                                   2889 ;times                     Allocated with name '_get_num_helper_times_65536_102'
                                   2890 ;num                       Allocated with name '_get_num_helper_num_65536_103'
                                   2891 ;i                         Allocated with name '_get_num_helper_i_131072_104'
                                   2892 ;------------------------------------------------------------
                                   2893 ;	program.c:446: int get_num_helper(int times)
                                   2894 ;	-----------------------------------------
                                   2895 ;	 function get_num_helper
                                   2896 ;	-----------------------------------------
      000CD6                       2897 _get_num_helper:
      000CD6 AF 83            [24] 2898 	mov	r7,dph
      000CD8 E5 82            [12] 2899 	mov	a,dpl
      000CDA 90r01r64         [24] 2900 	mov	dptr,#_get_num_helper_times_65536_102
      000CDD F0               [24] 2901 	movx	@dptr,a
      000CDE EF               [12] 2902 	mov	a,r7
      000CDF A3               [24] 2903 	inc	dptr
      000CE0 F0               [24] 2904 	movx	@dptr,a
                                   2905 ;	program.c:448: int num = 1;
      000CE1 90r01r66         [24] 2906 	mov	dptr,#_get_num_helper_num_65536_103
      000CE4 74 01            [12] 2907 	mov	a,#0x01
      000CE6 F0               [24] 2908 	movx	@dptr,a
      000CE7 E4               [12] 2909 	clr	a
      000CE8 A3               [24] 2910 	inc	dptr
      000CE9 F0               [24] 2911 	movx	@dptr,a
                                   2912 ;	program.c:449: for (int i = 0; i < times; i++)
      000CEA 90r01r64         [24] 2913 	mov	dptr,#_get_num_helper_times_65536_102
      000CED E0               [24] 2914 	movx	a,@dptr
      000CEE FE               [12] 2915 	mov	r6,a
      000CEF A3               [24] 2916 	inc	dptr
      000CF0 E0               [24] 2917 	movx	a,@dptr
      000CF1 FF               [12] 2918 	mov	r7,a
      000CF2 7C 00            [12] 2919 	mov	r4,#0x00
      000CF4 7D 00            [12] 2920 	mov	r5,#0x00
      000CF6                       2921 00106$:
      000CF6 C3               [12] 2922 	clr	c
      000CF7 EC               [12] 2923 	mov	a,r4
      000CF8 9E               [12] 2924 	subb	a,r6
      000CF9 ED               [12] 2925 	mov	a,r5
      000CFA 64 80            [12] 2926 	xrl	a,#0x80
      000CFC 8F F0            [24] 2927 	mov	b,r7
      000CFE 63 F0 80         [24] 2928 	xrl	b,#0x80
      000D01 95 F0            [12] 2929 	subb	a,b
      000D03 50 3A            [24] 2930 	jnc	00101$
                                   2931 ;	program.c:451: num = num * 10;
      000D05 90r01r66         [24] 2932 	mov	dptr,#_get_num_helper_num_65536_103
      000D08 E0               [24] 2933 	movx	a,@dptr
      000D09 FA               [12] 2934 	mov	r2,a
      000D0A A3               [24] 2935 	inc	dptr
      000D0B E0               [24] 2936 	movx	a,@dptr
      000D0C FB               [12] 2937 	mov	r3,a
      000D0D 90r00r00         [24] 2938 	mov	dptr,#__mulint_PARM_2
      000D10 EA               [12] 2939 	mov	a,r2
      000D11 F0               [24] 2940 	movx	@dptr,a
      000D12 EB               [12] 2941 	mov	a,r3
      000D13 A3               [24] 2942 	inc	dptr
      000D14 F0               [24] 2943 	movx	@dptr,a
      000D15 90 00 0A         [24] 2944 	mov	dptr,#0x000a
      000D18 C0 07            [24] 2945 	push	ar7
      000D1A C0 06            [24] 2946 	push	ar6
      000D1C C0 05            [24] 2947 	push	ar5
      000D1E C0 04            [24] 2948 	push	ar4
      000D20 12r00r00         [24] 2949 	lcall	__mulint
      000D23 E5 82            [12] 2950 	mov	a,dpl
      000D25 85 83 F0         [24] 2951 	mov	b,dph
      000D28 D0 04            [24] 2952 	pop	ar4
      000D2A D0 05            [24] 2953 	pop	ar5
      000D2C D0 06            [24] 2954 	pop	ar6
      000D2E D0 07            [24] 2955 	pop	ar7
      000D30 90r01r66         [24] 2956 	mov	dptr,#_get_num_helper_num_65536_103
      000D33 F0               [24] 2957 	movx	@dptr,a
      000D34 E5 F0            [12] 2958 	mov	a,b
      000D36 A3               [24] 2959 	inc	dptr
      000D37 F0               [24] 2960 	movx	@dptr,a
                                   2961 ;	program.c:449: for (int i = 0; i < times; i++)
      000D38 0C               [12] 2962 	inc	r4
      000D39 BC 00 BA         [24] 2963 	cjne	r4,#0x00,00106$
      000D3C 0D               [12] 2964 	inc	r5
      000D3D 80 B7            [24] 2965 	sjmp	00106$
      000D3F                       2966 00101$:
                                   2967 ;	program.c:453: if (times == 0)
      000D3F EE               [12] 2968 	mov	a,r6
      000D40 4F               [12] 2969 	orl	a,r7
      000D41 70 04            [24] 2970 	jnz	00103$
                                   2971 ;	program.c:454: return 1;
      000D43 90 00 01         [24] 2972 	mov	dptr,#0x0001
      000D46 22               [24] 2973 	ret
      000D47                       2974 00103$:
                                   2975 ;	program.c:456: return num;
      000D47 90r01r66         [24] 2976 	mov	dptr,#_get_num_helper_num_65536_103
      000D4A E0               [24] 2977 	movx	a,@dptr
      000D4B FE               [12] 2978 	mov	r6,a
      000D4C A3               [24] 2979 	inc	dptr
      000D4D E0               [24] 2980 	movx	a,@dptr
                                   2981 ;	program.c:457: }
      000D4E 8E 82            [24] 2982 	mov	dpl,r6
      000D50 F5 83            [12] 2983 	mov	dph,a
      000D52 22               [24] 2984 	ret
                                   2985 ;------------------------------------------------------------
                                   2986 ;Allocation info for local variables in function 'putchar'
                                   2987 ;------------------------------------------------------------
                                   2988 ;c                         Allocated with name '_putchar_c_65536_106'
                                   2989 ;------------------------------------------------------------
                                   2990 ;	program.c:464: int putchar(int c)
                                   2991 ;	-----------------------------------------
                                   2992 ;	 function putchar
                                   2993 ;	-----------------------------------------
      000D53                       2994 _putchar:
      000D53 AF 83            [24] 2995 	mov	r7,dph
      000D55 E5 82            [12] 2996 	mov	a,dpl
      000D57 90r01r68         [24] 2997 	mov	dptr,#_putchar_c_65536_106
      000D5A F0               [24] 2998 	movx	@dptr,a
      000D5B EF               [12] 2999 	mov	a,r7
      000D5C A3               [24] 3000 	inc	dptr
      000D5D F0               [24] 3001 	movx	@dptr,a
                                   3002 ;	program.c:466: while ((SCON & 0x02) == 0)
      000D5E                       3003 00101$:
      000D5E E5 98            [12] 3004 	mov	a,_SCON
      000D60 30 E1 FB         [24] 3005 	jnb	acc.1,00101$
                                   3006 ;	program.c:468: TI = 0;
                                   3007 ;	assignBit
      000D63 C2 99            [12] 3008 	clr	_TI
                                   3009 ;	program.c:469: SBUF = c;
      000D65 90r01r68         [24] 3010 	mov	dptr,#_putchar_c_65536_106
      000D68 E0               [24] 3011 	movx	a,@dptr
      000D69 FE               [12] 3012 	mov	r6,a
      000D6A A3               [24] 3013 	inc	dptr
      000D6B E0               [24] 3014 	movx	a,@dptr
      000D6C 8E 99            [24] 3015 	mov	_SBUF,r6
                                   3016 ;	program.c:470: return 0;
      000D6E 90 00 00         [24] 3017 	mov	dptr,#0x0000
                                   3018 ;	program.c:471: }
      000D71 22               [24] 3019 	ret
                                   3020 ;------------------------------------------------------------
                                   3021 ;Allocation info for local variables in function 'getchar'
                                   3022 ;------------------------------------------------------------
                                   3023 ;	program.c:478: int getchar()
                                   3024 ;	-----------------------------------------
                                   3025 ;	 function getchar
                                   3026 ;	-----------------------------------------
      000D72                       3027 _getchar:
                                   3028 ;	program.c:480: while (RI == 0)
      000D72                       3029 00101$:
                                   3030 ;	program.c:482: RI = 0;
                                   3031 ;	assignBit
      000D72 10 98 02         [24] 3032 	jbc	_RI,00140$
      000D75 80 FB            [24] 3033 	sjmp	00101$
      000D77                       3034 00140$:
                                   3035 ;	program.c:483: if (SBUF != 0x3F && SBUF != 0x3D && SBUF != 0x40 && SBUF != 0x2B && SBUF != 0x2D)
      000D77 74 3F            [12] 3036 	mov	a,#0x3f
      000D79 B5 99 02         [24] 3037 	cjne	a,_SBUF,00141$
      000D7C 80 27            [24] 3038 	sjmp	00105$
      000D7E                       3039 00141$:
      000D7E 74 3D            [12] 3040 	mov	a,#0x3d
      000D80 B5 99 02         [24] 3041 	cjne	a,_SBUF,00142$
      000D83 80 20            [24] 3042 	sjmp	00105$
      000D85                       3043 00142$:
      000D85 74 40            [12] 3044 	mov	a,#0x40
      000D87 B5 99 02         [24] 3045 	cjne	a,_SBUF,00143$
      000D8A 80 19            [24] 3046 	sjmp	00105$
      000D8C                       3047 00143$:
      000D8C 74 2B            [12] 3048 	mov	a,#0x2b
      000D8E B5 99 02         [24] 3049 	cjne	a,_SBUF,00144$
      000D91 80 12            [24] 3050 	sjmp	00105$
      000D93                       3051 00144$:
      000D93 74 2D            [12] 3052 	mov	a,#0x2d
      000D95 B5 99 02         [24] 3053 	cjne	a,_SBUF,00145$
      000D98 80 0B            [24] 3054 	sjmp	00105$
      000D9A                       3055 00145$:
                                   3056 ;	program.c:484: putchar(SBUF);
      000D9A AE 99            [24] 3057 	mov	r6,_SBUF
      000D9C 7F 00            [12] 3058 	mov	r7,#0x00
      000D9E 8E 82            [24] 3059 	mov	dpl,r6
      000DA0 8F 83            [24] 3060 	mov	dph,r7
      000DA2 12r0Dr53         [24] 3061 	lcall	_putchar
      000DA5                       3062 00105$:
                                   3063 ;	program.c:485: return SBUF;
      000DA5 AE 99            [24] 3064 	mov	r6,_SBUF
      000DA7 7F 00            [12] 3065 	mov	r7,#0x00
      000DA9 8E 82            [24] 3066 	mov	dpl,r6
      000DAB 8F 83            [24] 3067 	mov	dph,r7
                                   3068 ;	program.c:486: }
      000DAD 22               [24] 3069 	ret
                                   3070 ;------------------------------------------------------------
                                   3071 ;Allocation info for local variables in function '_sdcc_external_startup'
                                   3072 ;------------------------------------------------------------
                                   3073 ;	program.c:494: _sdcc_external_startup()
                                   3074 ;	-----------------------------------------
                                   3075 ;	 function _sdcc_external_startup
                                   3076 ;	-----------------------------------------
      000DAE                       3077 __sdcc_external_startup:
                                   3078 ;	program.c:496: _AUXR = 0xC;
      000DAE 75 8E 0C         [24] 3079 	mov	__AUXR,#0x0c
                                   3080 ;	program.c:498: SCON = 0x42;
      000DB1 75 98 42         [24] 3081 	mov	_SCON,#0x42
                                   3082 ;	program.c:500: PCON = 0x80;
      000DB4 75 87 80         [24] 3083 	mov	_PCON,#0x80
                                   3084 ;	program.c:502: TH1 = 255;
      000DB7 75 8D FF         [24] 3085 	mov	_TH1,#0xff
                                   3086 ;	program.c:503: TL1 = 255;
      000DBA 75 8B FF         [24] 3087 	mov	_TL1,#0xff
                                   3088 ;	program.c:505: TMOD = 0x20;
      000DBD 75 89 20         [24] 3089 	mov	_TMOD,#0x20
                                   3090 ;	program.c:507: REN = 1;
                                   3091 ;	assignBit
      000DC0 D2 9C            [12] 3092 	setb	_REN
                                   3093 ;	program.c:509: TR1 = 1;
                                   3094 ;	assignBit
      000DC2 D2 8E            [12] 3095 	setb	_TR1
                                   3096 ;	program.c:511: return 0;
      000DC4 90 00 00         [24] 3097 	mov	dptr,#0x0000
                                   3098 ;	program.c:512: }
      000DC7 22               [24] 3099 	ret
                                   3100 	.area CSEG    (CODE)
                                   3101 	.area CONST   (CODE)
                                   3102 	.area CONST   (CODE)
      000000                       3103 ___str_0:
      000000 48 45 4C 4C 4F 21 20  3104 	.ascii "HELLO! "
      000007 0A                    3105 	.db 0x0a
      000008 0D                    3106 	.db 0x0d
      000009 00                    3107 	.db 0x00
                                   3108 	.area CSEG    (CODE)
                                   3109 	.area CONST   (CODE)
      00000A                       3110 ___str_1:
      00000A 42 75 66 66 65 72 20  3111 	.ascii "Buffer %d Freed ...."
             25 64 20 46 72 65 65
             64 20 2E 2E 2E 2E
      00001E 0A                    3112 	.db 0x0a
      00001F 0D                    3113 	.db 0x0d
      000020 00                    3114 	.db 0x00
                                   3115 	.area CSEG    (CODE)
                                   3116 	.area CONST   (CODE)
      000021                       3117 ___str_2:
      000021 4C 65 74 27 73 20 62  3118 	.ascii "Let's begin again.."
             65 67 69 6E 20 61 67
             61 69 6E 2E 2E
      000034 0A                    3119 	.db 0x0a
      000035 0D                    3120 	.db 0x0d
      000036 00                    3121 	.db 0x00
                                   3122 	.area CSEG    (CODE)
                                   3123 	.area CONST   (CODE)
      000037                       3124 ___str_3:
      000037 0A                    3125 	.db 0x0a
      000038 0D                    3126 	.db 0x0d
      000039 47 69 76 65 20 56 61  3127 	.ascii "Give Valid Buffer Number to delete(1-%d) in 3 digits"
             6C 69 64 20 42 75 66
             66 65 72 20 4E 75 6D
             62 65 72 20 74 6F 20
             64 65 6C 65 74 65 28
             31 2D 25 64 29 20 69
             6E 20 33 20 64 69 67
             69 74 73
      00006D 0A                    3128 	.db 0x0a
      00006E 0D                    3129 	.db 0x0d
      00006F 00                    3130 	.db 0x00
                                   3131 	.area CSEG    (CODE)
                                   3132 	.area CONST   (CODE)
      000070                       3133 ___str_4:
      000070 42 75 66 66 65 72 20  3134 	.ascii "Buffer %d Successfully Deleted.. "
             25 64 20 53 75 63 63
             65 73 73 66 75 6C 6C
             79 20 44 65 6C 65 74
             65 64 2E 2E 20
      000091 0A                    3135 	.db 0x0a
      000092 0D                    3136 	.db 0x0d
      000093 00                    3137 	.db 0x00
                                   3138 	.area CSEG    (CODE)
                                   3139 	.area CONST   (CODE)
      000094                       3140 ___str_5:
      000094 0A                    3141 	.db 0x0a
      000095 0A                    3142 	.db 0x0a
      000096 0D                    3143 	.db 0x0d
      000097 5E 5E 5E 5E 5E 5E 5E  3144 	.ascii "^^^^^^^^^^^^^^^^^^^-MENU-^^^^^^^^^^^^^^^^^^^^^^^^^^ "
             5E 5E 5E 5E 5E 5E 5E
             5E 5E 5E 5E 5E 2D 4D
             45 4E 55 2D 5E 5E 5E
             5E 5E 5E 5E 5E 5E 5E
             5E 5E 5E 5E 5E 5E 5E
             5E 5E 5E 5E 5E 5E 5E
             5E 5E 20
      0000CB 0A                    3145 	.db 0x0a
      0000CC 0A                    3146 	.db 0x0a
      0000CD 0D                    3147 	.db 0x0d
      0000CE 00                    3148 	.db 0x00
                                   3149 	.area CSEG    (CODE)
                                   3150 	.area CONST   (CODE)
      0000CF                       3151 ___str_6:
      0000CF 59 6F 75 20 63 61 6E  3152 	.ascii "You can enter characters or use commands from below "
             20 65 6E 74 65 72 20
             63 68 61 72 61 63 74
             65 72 73 20 6F 72 20
             75 73 65 20 63 6F 6D
             6D 61 6E 64 73 20 66
             72 6F 6D 20 62 65 6C
             6F 77 20
      000103 0A                    3153 	.db 0x0a
      000104 0D                    3154 	.db 0x0d
      000105 00                    3155 	.db 0x00
                                   3156 	.area CSEG    (CODE)
                                   3157 	.area CONST   (CODE)
      000106                       3158 ___str_7:
      000106 27 3F 27 20 2D 3E 20  3159 	.ascii "'?' -> Show heap status, dump & clear Buffer 0 "
             53 68 6F 77 20 68 65
             61 70 20 73 74 61 74
             75 73 2C 20 64 75 6D
             70 20 26 20 63 6C 65
             61 72 20 42 75 66 66
             65 72 20 30 20
      000135 0A                    3160 	.db 0x0a
      000136 0D                    3161 	.db 0x0d
      000137 00                    3162 	.db 0x00
                                   3163 	.area CSEG    (CODE)
                                   3164 	.area CONST   (CODE)
      000138                       3165 ___str_8:
      000138 27 2B 27 20 2D 3E 20  3166 	.ascii "'+' -> Add a new Buffer"
             41 64 64 20 61 20 6E
             65 77 20 42 75 66 66
             65 72
      00014F 0A                    3167 	.db 0x0a
      000150 0D                    3168 	.db 0x0d
      000151 00                    3169 	.db 0x00
                                   3170 	.area CSEG    (CODE)
                                   3171 	.area CONST   (CODE)
      000152                       3172 ___str_9:
      000152 27 2D 27 20 2D 3E 20  3173 	.ascii "'-' -> Delete existing Buffer"
             44 65 6C 65 74 65 20
             65 78 69 73 74 69 6E
             67 20 42 75 66 66 65
             72
      00016F 0A                    3174 	.db 0x0a
      000170 0D                    3175 	.db 0x0d
      000171 00                    3176 	.db 0x00
                                   3177 	.area CSEG    (CODE)
                                   3178 	.area CONST   (CODE)
      000172                       3179 ___str_10:
      000172 27 3D 27 20 2D 3E 20  3180 	.ascii "'=' -> Dump Buffer 0 in hex"
             44 75 6D 70 20 42 75
             66 66 65 72 20 30 20
             69 6E 20 68 65 78
      00018D 0A                    3181 	.db 0x0a
      00018E 0D                    3182 	.db 0x0d
      00018F 00                    3183 	.db 0x00
                                   3184 	.area CSEG    (CODE)
                                   3185 	.area CONST   (CODE)
      000190                       3186 ___str_11:
      000190 27 40 27 20 2D 3E 20  3187 	.ascii "'@' -> Free all Heap & begin again"
             46 72 65 65 20 61 6C
             6C 20 48 65 61 70 20
             26 20 62 65 67 69 6E
             20 61 67 61 69 6E
      0001B2 0A                    3188 	.db 0x0a
      0001B3 0A                    3189 	.db 0x0a
      0001B4 0D                    3190 	.db 0x0d
      0001B5 00                    3191 	.db 0x00
                                   3192 	.area CSEG    (CODE)
                                   3193 	.area CONST   (CODE)
      0001B6                       3194 ___str_12:
      0001B6 0A                    3195 	.db 0x0a
      0001B7 0D                    3196 	.db 0x0d
      0001B8 47 69 76 65 20 56 61  3197 	.ascii "Give Valid Buffer Size(030-300):"
             6C 69 64 20 42 75 66
             66 65 72 20 53 69 7A
             65 28 30 33 30 2D 33
             30 30 29 3A
      0001D8 00                    3198 	.db 0x00
                                   3199 	.area CSEG    (CODE)
                                   3200 	.area CONST   (CODE)
      0001D9                       3201 ___str_13:
      0001D9 46 61 69 6C 65 64 2C  3202 	.ascii "Failed, give smaller buffer"
             20 67 69 76 65 20 73
             6D 61 6C 6C 65 72 20
             62 75 66 66 65 72
      0001F4 0A                    3203 	.db 0x0a
      0001F5 0D                    3204 	.db 0x0d
      0001F6 00                    3205 	.db 0x00
                                   3206 	.area CSEG    (CODE)
                                   3207 	.area CONST   (CODE)
      0001F7                       3208 ___str_14:
      0001F7 0A                    3209 	.db 0x0a
      0001F8 0A                    3210 	.db 0x0a
      0001F9 0D                    3211 	.db 0x0d
      0001FA 23 23 23 23 53 55 43  3212 	.ascii "####SUCCESS, BUFFER Created####"
             43 45 53 53 2C 20 42
             55 46 46 45 52 20 43
             72 65 61 74 65 64 23
             23 23 23
      000219 0A                    3213 	.db 0x0a
      00021A 0A                    3214 	.db 0x0a
      00021B 0D                    3215 	.db 0x0d
      00021C 00                    3216 	.db 0x00
                                   3217 	.area CSEG    (CODE)
                                   3218 	.area CONST   (CODE)
      00021D                       3219 ___str_15:
      00021D 4E 6F 20 48 65 61 70  3220 	.ascii "No Heap Memory Left, Delete some buffers..."
             20 4D 65 6D 6F 72 79
             20 4C 65 66 74 2C 20
             44 65 6C 65 74 65 20
             73 6F 6D 65 20 62 75
             66 66 65 72 73 2E 2E
             2E
      000248 0A                    3221 	.db 0x0a
      000249 0D                    3222 	.db 0x0d
      00024A 00                    3223 	.db 0x00
                                   3224 	.area CSEG    (CODE)
                                   3225 	.area CONST   (CODE)
      00024B                       3226 ___str_16:
      00024B 0A                    3227 	.db 0x0a
      00024C 0D                    3228 	.db 0x0d
      00024D 47 69 76 65 20 56 61  3229 	.ascii "Give Valid Initial Buffer Size(0048-4800):"
             6C 69 64 20 49 6E 69
             74 69 61 6C 20 42 75
             66 66 65 72 20 53 69
             7A 65 28 30 30 34 38
             2D 34 38 30 30 29 3A
      000277 00                    3230 	.db 0x00
                                   3231 	.area CSEG    (CODE)
                                   3232 	.area CONST   (CODE)
      000278                       3233 ___str_17:
      000278 0A                    3234 	.db 0x0a
      000279 0D                    3235 	.db 0x0d
      00027A 23 23 23 23 46 41 49  3236 	.ascii "####FAIL, Please give a smaller buffer size####"
             4C 2C 20 50 6C 65 61
             73 65 20 67 69 76 65
             20 61 20 73 6D 61 6C
             6C 65 72 20 62 75 66
             66 65 72 20 73 69 7A
             65 23 23 23 23
      0002A9 0A                    3237 	.db 0x0a
      0002AA 0A                    3238 	.db 0x0a
      0002AB 0D                    3239 	.db 0x0d
      0002AC 00                    3240 	.db 0x00
                                   3241 	.area CSEG    (CODE)
                                   3242 	.area CONST   (CODE)
      0002AD                       3243 ___str_18:
      0002AD 0A                    3244 	.db 0x0a
      0002AE 0A                    3245 	.db 0x0a
      0002AF 0D                    3246 	.db 0x0d
      0002B0 23 23 23 23 53 55 43  3247 	.ascii "####SUCCESS, INITIAL BUFFERS Created####"
             43 45 53 53 2C 20 49
             4E 49 54 49 41 4C 20
             42 55 46 46 45 52 53
             20 43 72 65 61 74 65
             64 23 23 23 23
      0002D8 0A                    3248 	.db 0x0a
      0002D9 0A                    3249 	.db 0x0a
      0002DA 0D                    3250 	.db 0x0d
      0002DB 00                    3251 	.db 0x00
                                   3252 	.area CSEG    (CODE)
                                   3253 	.area CONST   (CODE)
      0002DC                       3254 ___str_19:
      0002DC 0A                    3255 	.db 0x0a
      0002DD 0A                    3256 	.db 0x0a
      0002DE 0D                    3257 	.db 0x0d
      0002DF 2A 2A 2A 2A 2A 2A 2A  3258 	.ascii "***********Buffer-0-Contents*********** "
             2A 2A 2A 2A 42 75 66
             66 65 72 2D 30 2D 43
             6F 6E 74 65 6E 74 73
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 20
      000307 0A                    3259 	.db 0x0a
      000308 0D                    3260 	.db 0x0d
      000309 00                    3261 	.db 0x00
                                   3262 	.area CSEG    (CODE)
                                   3263 	.area CONST   (CODE)
      00030A                       3264 ___str_20:
      00030A 0A                    3265 	.db 0x0a
      00030B 0D                    3266 	.db 0x0d
      00030C 00                    3267 	.db 0x00
                                   3268 	.area CSEG    (CODE)
                                   3269 	.area CONST   (CODE)
      00030D                       3270 ___str_21:
      00030D 0A                    3271 	.db 0x0a
      00030E 0A                    3272 	.db 0x0a
      00030F 0D                    3273 	.db 0x0d
      000310 00                    3274 	.db 0x00
                                   3275 	.area CSEG    (CODE)
                                   3276 	.area CONST   (CODE)
      000311                       3277 ___str_22:
      000311 42 75 66 66 65 72 30  3278 	.ascii "Buffer0 is Empty...."
             20 69 73 20 45 6D 70
             74 79 2E 2E 2E 2E
      000325 0A                    3279 	.db 0x0a
      000326 0D                    3280 	.db 0x0d
      000327 00                    3281 	.db 0x00
                                   3282 	.area CSEG    (CODE)
                                   3283 	.area CONST   (CODE)
      000328                       3284 ___str_23:
      000328 0A                    3285 	.db 0x0a
      000329 0D                    3286 	.db 0x0d
      00032A 2D 2D 2D 2D 2D 2D 2D  3287 	.ascii "-------------------------HEXDUMP----------------------------"
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 48 45 58
             44 55 4D 50 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D
      000366 2D 2D 2D 2D           3288 	.ascii "----"
      00036A 00                    3289 	.db 0x00
                                   3290 	.area CSEG    (CODE)
                                   3291 	.area CONST   (CODE)
      00036B                       3292 ___str_24:
      00036B 0A                    3293 	.db 0x0a
      00036C 0D                    3294 	.db 0x0d
      00036D 20 20 20 20 41 44 44  3295 	.ascii "    ADDR: +0 +1 +2 +3 +4 +5 +6 +7 +8 +9 +A +B +C +D +E +F "
             52 3A 20 2B 30 20 2B
             31 20 2B 32 20 2B 33
             20 2B 34 20 2B 35 20
             2B 36 20 2B 37 20 2B
             38 20 2B 39 20 2B 41
             20 2B 42 20 2B 43 20
             2B 44 20 2B 45 20 2B
             46 20
      0003A7 0A                    3296 	.db 0x0a
      0003A8 0D                    3297 	.db 0x0d
      0003A9 00                    3298 	.db 0x00
                                   3299 	.area CSEG    (CODE)
                                   3300 	.area CONST   (CODE)
      0003AA                       3301 ___str_25:
      0003AA 0A                    3302 	.db 0x0a
      0003AB 0D                    3303 	.db 0x0d
      0003AC 25 70 3A 20           3304 	.ascii "%p: "
      0003B0 00                    3305 	.db 0x00
                                   3306 	.area CSEG    (CODE)
                                   3307 	.area CONST   (CODE)
      0003B1                       3308 ___str_26:
      0003B1 25 78 20              3309 	.ascii "%x "
      0003B4 00                    3310 	.db 0x00
                                   3311 	.area CSEG    (CODE)
                                   3312 	.area CONST   (CODE)
      0003B5                       3313 ___str_27:
      0003B5 42 75 66 66 65 72 20  3314 	.ascii "Buffer 0 is empty..."
             30 20 69 73 20 65 6D
             70 74 79 2E 2E 2E
      0003C9 0A                    3315 	.db 0x0a
      0003CA 0D                    3316 	.db 0x0d
      0003CB 00                    3317 	.db 0x00
                                   3318 	.area CSEG    (CODE)
                                   3319 	.area CONST   (CODE)
      0003CC                       3320 ___str_28:
      0003CC 0A                    3321 	.db 0x0a
      0003CD 0D                    3322 	.db 0x0d
      0003CE 2A 2A 2A 2A 2A 2A 2A  3323 	.ascii "****************HEAP*STATS*************"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 48 45 41 50 2A
             53 54 41 54 53 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A
      0003F5 0A                    3324 	.db 0x0a
      0003F6 0D                    3325 	.db 0x0d
      0003F7 00                    3326 	.db 0x00
                                   3327 	.area CSEG    (CODE)
                                   3328 	.area CONST   (CODE)
      0003F8                       3329 ___str_29:
      0003F8 54 6F 74 61 6C 20 48  3330 	.ascii "Total Heap Size: %d "
             65 61 70 20 53 69 7A
             65 3A 20 25 64 20
      00040C 0A                    3331 	.db 0x0a
      00040D 0D                    3332 	.db 0x0d
      00040E 00                    3333 	.db 0x00
                                   3334 	.area CSEG    (CODE)
                                   3335 	.area CONST   (CODE)
      00040F                       3336 ___str_30:
      00040F 41 6C 6C 6F 63 61 74  3337 	.ascii "Allocated Heap Size: %d "
             65 64 20 48 65 61 70
             20 53 69 7A 65 3A 20
             25 64 20
      000427 0A                    3338 	.db 0x0a
      000428 0D                    3339 	.db 0x0d
      000429 00                    3340 	.db 0x00
                                   3341 	.area CSEG    (CODE)
                                   3342 	.area CONST   (CODE)
      00042A                       3343 ___str_31:
      00042A 41 6C 6C 20 43 68 61  3344 	.ascii "All Chars: %d "
             72 73 3A 20 25 64 20
      000438 0A                    3345 	.db 0x0a
      000439 0D                    3346 	.db 0x0d
      00043A 00                    3347 	.db 0x00
                                   3348 	.area CSEG    (CODE)
                                   3349 	.area CONST   (CODE)
      00043B                       3350 ___str_32:
      00043B 53 74 6F 72 61 67 65  3351 	.ascii "Storage Chars: %d "
             20 43 68 61 72 73 3A
             20 25 64 20
      00044D 0A                    3352 	.db 0x0a
      00044E 0D                    3353 	.db 0x0d
      00044F 00                    3354 	.db 0x00
                                   3355 	.area CSEG    (CODE)
                                   3356 	.area CONST   (CODE)
      000450                       3357 ___str_33:
      000450 54 6F 74 61 6C 20 42  3358 	.ascii "Total Buffers: %d "
             75 66 66 65 72 73 3A
             20 25 64 20
      000462 0A                    3359 	.db 0x0a
      000463 0D                    3360 	.db 0x0d
      000464 00                    3361 	.db 0x00
                                   3362 	.area CSEG    (CODE)
                                   3363 	.area CONST   (CODE)
      000465                       3364 ___str_34:
      000465 2A 2A 2A 2A 2A 2A 2A  3365 	.ascii "****************BUFFER*%d***************"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 42 55 46 46 45
             52 2A 25 64 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A
      00048D 0A                    3366 	.db 0x0a
      00048E 0D                    3367 	.db 0x0d
      00048F 00                    3368 	.db 0x00
                                   3369 	.area CSEG    (CODE)
                                   3370 	.area CONST   (CODE)
      000490                       3371 ___str_35:
      000490 42 75 66 66 65 72 23  3372 	.ascii "Buffer#: %d "
             3A 20 25 64 20
      00049C 0A                    3373 	.db 0x0a
      00049D 0D                    3374 	.db 0x0d
      00049E 00                    3375 	.db 0x00
                                   3376 	.area CSEG    (CODE)
                                   3377 	.area CONST   (CODE)
      00049F                       3378 ___str_36:
      00049F 42 75 66 66 65 72 53  3379 	.ascii "BufferStart: %p "
             74 61 72 74 3A 20 25
             70 20
      0004AF 0A                    3380 	.db 0x0a
      0004B0 0D                    3381 	.db 0x0d
      0004B1 00                    3382 	.db 0x00
                                   3383 	.area CSEG    (CODE)
                                   3384 	.area CONST   (CODE)
      0004B2                       3385 ___str_37:
      0004B2 42 75 66 66 65 72 45  3386 	.ascii "BufferEnd: %p "
             6E 64 3A 20 25 70 20
      0004C0 0A                    3387 	.db 0x0a
      0004C1 0D                    3388 	.db 0x0d
      0004C2 00                    3389 	.db 0x00
                                   3390 	.area CSEG    (CODE)
                                   3391 	.area CONST   (CODE)
      0004C3                       3392 ___str_38:
      0004C3 42 75 66 66 65 72 53  3393 	.ascii "BufferSize: %d "
             69 7A 65 3A 20 25 64
             20
      0004D2 0A                    3394 	.db 0x0a
      0004D3 0D                    3395 	.db 0x0d
      0004D4 00                    3396 	.db 0x00
                                   3397 	.area CSEG    (CODE)
                                   3398 	.area CONST   (CODE)
      0004D5                       3399 ___str_39:
      0004D5 54 6F 74 61 6C 55 73  3400 	.ascii "TotalUsed: %d "
             65 64 3A 20 25 64 20
      0004E3 0A                    3401 	.db 0x0a
      0004E4 0D                    3402 	.db 0x0d
      0004E5 00                    3403 	.db 0x00
                                   3404 	.area CSEG    (CODE)
                                   3405 	.area CONST   (CODE)
      0004E6                       3406 ___str_40:
      0004E6 2A 2A 2A 2A 2A 2A 2A  3407 	.ascii "***************************************"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A
      00050D 0A                    3408 	.db 0x0a
      00050E 0D                    3409 	.db 0x0d
      00050F 00                    3410 	.db 0x00
                                   3411 	.area CSEG    (CODE)
                                   3412 	.area CONST   (CODE)
      000510                       3413 ___str_41:
      000510 45 52 52 2C 4E 75 6D  3414 	.ascii "ERR,Numbers ONLY!"
             62 65 72 73 20 4F 4E
             4C 59 21
      000521 0A                    3415 	.db 0x0a
      000522 0D                    3416 	.db 0x0d
      000523 00                    3417 	.db 0x00
                                   3418 	.area CSEG    (CODE)
                                   3419 	.area XINIT   (CODE)
                                   3420 	.area CABS    (ABS,CODE)
