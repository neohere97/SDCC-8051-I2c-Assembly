                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.0 #12072 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module program
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl __sdcc_external_startup
                                     12 	.globl _idle_interrupt
                                     13 	.globl _pca_interrupt
                                     14 	.globl _main
                                     15 	.globl _i2c_read_val
                                     16 	.globl _i2c_read_init
                                     17 	.globl _i2c_write_val
                                     18 	.globl _i2c_addr
                                     19 	.globl _i2c_write_init
                                     20 	.globl _i2c_stop
                                     21 	.globl _i2c_init
                                     22 	.globl _asmtest
                                     23 	.globl _printf
                                     24 	.globl _free
                                     25 	.globl _malloc
                                     26 	.globl _TF1
                                     27 	.globl _TR1
                                     28 	.globl _TF0
                                     29 	.globl _TR0
                                     30 	.globl _IE1
                                     31 	.globl _IT1
                                     32 	.globl _IE0
                                     33 	.globl _IT0
                                     34 	.globl _SM0
                                     35 	.globl _SM1
                                     36 	.globl _SM2
                                     37 	.globl _REN
                                     38 	.globl _TB8
                                     39 	.globl _RB8
                                     40 	.globl _TI
                                     41 	.globl _RI
                                     42 	.globl _CY
                                     43 	.globl _AC
                                     44 	.globl _F0
                                     45 	.globl _RS1
                                     46 	.globl _RS0
                                     47 	.globl _OV
                                     48 	.globl _F1
                                     49 	.globl _P
                                     50 	.globl _RD
                                     51 	.globl _WR
                                     52 	.globl _T1
                                     53 	.globl _T0
                                     54 	.globl _INT1
                                     55 	.globl _INT0
                                     56 	.globl _TXD0
                                     57 	.globl _TXD
                                     58 	.globl _RXD0
                                     59 	.globl _RXD
                                     60 	.globl _P3_7
                                     61 	.globl _P3_6
                                     62 	.globl _P3_5
                                     63 	.globl _P3_4
                                     64 	.globl _P3_3
                                     65 	.globl _P3_2
                                     66 	.globl _P3_1
                                     67 	.globl _P3_0
                                     68 	.globl _P2_7
                                     69 	.globl _P2_6
                                     70 	.globl _P2_5
                                     71 	.globl _P2_4
                                     72 	.globl _P2_3
                                     73 	.globl _P2_2
                                     74 	.globl _P2_1
                                     75 	.globl _P2_0
                                     76 	.globl _P1_7
                                     77 	.globl _P1_6
                                     78 	.globl _P1_5
                                     79 	.globl _P1_4
                                     80 	.globl _P1_3
                                     81 	.globl _P1_2
                                     82 	.globl _P1_1
                                     83 	.globl _P1_0
                                     84 	.globl _P0_7
                                     85 	.globl _P0_6
                                     86 	.globl _P0_5
                                     87 	.globl _P0_4
                                     88 	.globl _P0_3
                                     89 	.globl _P0_2
                                     90 	.globl _P0_1
                                     91 	.globl _P0_0
                                     92 	.globl _PS
                                     93 	.globl _PT1
                                     94 	.globl _PX1
                                     95 	.globl _PT0
                                     96 	.globl _PX0
                                     97 	.globl _EA
                                     98 	.globl _ES
                                     99 	.globl _ET1
                                    100 	.globl _EX1
                                    101 	.globl _ET0
                                    102 	.globl _EX0
                                    103 	.globl _BREG_F7
                                    104 	.globl _BREG_F6
                                    105 	.globl _BREG_F5
                                    106 	.globl _BREG_F4
                                    107 	.globl _BREG_F3
                                    108 	.globl _BREG_F2
                                    109 	.globl _BREG_F1
                                    110 	.globl _BREG_F0
                                    111 	.globl _P5_7
                                    112 	.globl _P5_6
                                    113 	.globl _P5_5
                                    114 	.globl _P5_4
                                    115 	.globl _P5_3
                                    116 	.globl _P5_2
                                    117 	.globl _P5_1
                                    118 	.globl _P5_0
                                    119 	.globl _P4_7
                                    120 	.globl _P4_6
                                    121 	.globl _P4_5
                                    122 	.globl _P4_4
                                    123 	.globl _P4_3
                                    124 	.globl _P4_2
                                    125 	.globl _P4_1
                                    126 	.globl _P4_0
                                    127 	.globl _PX0L
                                    128 	.globl _PT0L
                                    129 	.globl _PX1L
                                    130 	.globl _PT1L
                                    131 	.globl _PSL
                                    132 	.globl _PT2L
                                    133 	.globl _PPCL
                                    134 	.globl _EC
                                    135 	.globl _CCF0
                                    136 	.globl _CCF1
                                    137 	.globl _CCF2
                                    138 	.globl _CCF3
                                    139 	.globl _CCF4
                                    140 	.globl _CR
                                    141 	.globl _CF
                                    142 	.globl _TF2
                                    143 	.globl _EXF2
                                    144 	.globl _RCLK
                                    145 	.globl _TCLK
                                    146 	.globl _EXEN2
                                    147 	.globl _TR2
                                    148 	.globl _C_T2
                                    149 	.globl _CP_RL2
                                    150 	.globl _T2CON_7
                                    151 	.globl _T2CON_6
                                    152 	.globl _T2CON_5
                                    153 	.globl _T2CON_4
                                    154 	.globl _T2CON_3
                                    155 	.globl _T2CON_2
                                    156 	.globl _T2CON_1
                                    157 	.globl _T2CON_0
                                    158 	.globl _PT2
                                    159 	.globl _ET2
                                    160 	.globl __AUXR
                                    161 	.globl _TMOD
                                    162 	.globl _TL1
                                    163 	.globl _TL0
                                    164 	.globl _TH1
                                    165 	.globl _TH0
                                    166 	.globl _TCON
                                    167 	.globl _SP
                                    168 	.globl _SCON
                                    169 	.globl _SBUF0
                                    170 	.globl _SBUF
                                    171 	.globl _PSW
                                    172 	.globl _PCON
                                    173 	.globl _P3
                                    174 	.globl _P2
                                    175 	.globl _P1
                                    176 	.globl _P0
                                    177 	.globl _IP
                                    178 	.globl _IE
                                    179 	.globl _DP0L
                                    180 	.globl _DPL
                                    181 	.globl _DP0H
                                    182 	.globl _DPH
                                    183 	.globl _B
                                    184 	.globl _ACC
                                    185 	.globl _EECON
                                    186 	.globl _KBF
                                    187 	.globl _KBE
                                    188 	.globl _KBLS
                                    189 	.globl _BRL
                                    190 	.globl _BDRCON
                                    191 	.globl _T2MOD
                                    192 	.globl _SPDAT
                                    193 	.globl _SPSTA
                                    194 	.globl _SPCON
                                    195 	.globl _SADEN
                                    196 	.globl _SADDR
                                    197 	.globl _WDTPRG
                                    198 	.globl _WDTRST
                                    199 	.globl _P5
                                    200 	.globl _P4
                                    201 	.globl _IPH1
                                    202 	.globl _IPL1
                                    203 	.globl _IPH0
                                    204 	.globl _IPL0
                                    205 	.globl _IEN1
                                    206 	.globl _IEN0
                                    207 	.globl _CMOD
                                    208 	.globl _CL
                                    209 	.globl _CH
                                    210 	.globl _CCON
                                    211 	.globl _CCAPM4
                                    212 	.globl _CCAPM3
                                    213 	.globl _CCAPM2
                                    214 	.globl _CCAPM1
                                    215 	.globl _CCAPM0
                                    216 	.globl _CCAP4L
                                    217 	.globl _CCAP3L
                                    218 	.globl _CCAP2L
                                    219 	.globl _CCAP1L
                                    220 	.globl _CCAP0L
                                    221 	.globl _CCAP4H
                                    222 	.globl _CCAP3H
                                    223 	.globl _CCAP2H
                                    224 	.globl _CCAP1H
                                    225 	.globl _CCAP0H
                                    226 	.globl _CKCON1
                                    227 	.globl _CKCON0
                                    228 	.globl _CKRL
                                    229 	.globl _AUXR1
                                    230 	.globl _AUXR
                                    231 	.globl _TH2
                                    232 	.globl _TL2
                                    233 	.globl _RCAP2H
                                    234 	.globl _RCAP2L
                                    235 	.globl _T2CON
                                    236 	.globl _watchdog_flag
                                    237 	.globl _global_var_test
                                    238 	.globl _buffers_array
                                    239 	.globl _program_stats
                                    240 	.globl _DEBUG_LOC
                                    241 	.globl _user_interface_heap
                                    242 	.globl _user_interface_PCA
                                    243 	.globl _pca_falling_edge
                                    244 	.globl _pca_software_timer
                                    245 	.globl _pca_high_speed
                                    246 	.globl _pca_pwm
                                    247 	.globl _pca_watchdog
                                    248 	.globl _hardware_watchdog
                                    249 	.globl _pca_idle
                                    250 	.globl _pca_pdown
                                    251 	.globl _fclk_lowest
                                    252 	.globl _main_menu
                                    253 	.globl _i2c_testasm
                                    254 	.globl _asm_clang
                                    255 	.globl _at_clear_all_buffers
                                    256 	.globl _delete_buffer
                                    257 	.globl _print_pca_menu
                                    258 	.globl _print_heap_menu
                                    259 	.globl _create_new_buffer
                                    260 	.globl _create_initial_buffers
                                    261 	.globl _enter_chars
                                    262 	.globl _dump_buff_zero_ascii
                                    263 	.globl _dump_buff_zero_hex
                                    264 	.globl _print_heap_stats
                                    265 	.globl _print_all_buffers
                                    266 	.globl _get_number
                                    267 	.globl _get_num_helper
                                    268 	.globl _putchar
                                    269 	.globl _getchar
                                    270 	.globl _dataout
                                    271 	.globl _asm_call
                                    272 ;--------------------------------------------------------
                                    273 ; special function registers
                                    274 ;--------------------------------------------------------
                                    275 	.area RSEG    (ABS,DATA)
      000000                        276 	.org 0x0000
                           0000C8   277 _T2CON	=	0x00c8
                           0000CA   278 _RCAP2L	=	0x00ca
                           0000CB   279 _RCAP2H	=	0x00cb
                           0000CC   280 _TL2	=	0x00cc
                           0000CD   281 _TH2	=	0x00cd
                           00008E   282 _AUXR	=	0x008e
                           0000A2   283 _AUXR1	=	0x00a2
                           000097   284 _CKRL	=	0x0097
                           00008F   285 _CKCON0	=	0x008f
                           0000AF   286 _CKCON1	=	0x00af
                           0000FA   287 _CCAP0H	=	0x00fa
                           0000FB   288 _CCAP1H	=	0x00fb
                           0000FC   289 _CCAP2H	=	0x00fc
                           0000FD   290 _CCAP3H	=	0x00fd
                           0000FE   291 _CCAP4H	=	0x00fe
                           0000EA   292 _CCAP0L	=	0x00ea
                           0000EB   293 _CCAP1L	=	0x00eb
                           0000EC   294 _CCAP2L	=	0x00ec
                           0000ED   295 _CCAP3L	=	0x00ed
                           0000EE   296 _CCAP4L	=	0x00ee
                           0000DA   297 _CCAPM0	=	0x00da
                           0000DB   298 _CCAPM1	=	0x00db
                           0000DC   299 _CCAPM2	=	0x00dc
                           0000DD   300 _CCAPM3	=	0x00dd
                           0000DE   301 _CCAPM4	=	0x00de
                           0000D8   302 _CCON	=	0x00d8
                           0000F9   303 _CH	=	0x00f9
                           0000E9   304 _CL	=	0x00e9
                           0000D9   305 _CMOD	=	0x00d9
                           0000A8   306 _IEN0	=	0x00a8
                           0000B1   307 _IEN1	=	0x00b1
                           0000B8   308 _IPL0	=	0x00b8
                           0000B7   309 _IPH0	=	0x00b7
                           0000B2   310 _IPL1	=	0x00b2
                           0000B3   311 _IPH1	=	0x00b3
                           0000C0   312 _P4	=	0x00c0
                           0000E8   313 _P5	=	0x00e8
                           0000A6   314 _WDTRST	=	0x00a6
                           0000A7   315 _WDTPRG	=	0x00a7
                           0000A9   316 _SADDR	=	0x00a9
                           0000B9   317 _SADEN	=	0x00b9
                           0000C3   318 _SPCON	=	0x00c3
                           0000C4   319 _SPSTA	=	0x00c4
                           0000C5   320 _SPDAT	=	0x00c5
                           0000C9   321 _T2MOD	=	0x00c9
                           00009B   322 _BDRCON	=	0x009b
                           00009A   323 _BRL	=	0x009a
                           00009C   324 _KBLS	=	0x009c
                           00009D   325 _KBE	=	0x009d
                           00009E   326 _KBF	=	0x009e
                           0000D2   327 _EECON	=	0x00d2
                           0000E0   328 _ACC	=	0x00e0
                           0000F0   329 _B	=	0x00f0
                           000083   330 _DPH	=	0x0083
                           000083   331 _DP0H	=	0x0083
                           000082   332 _DPL	=	0x0082
                           000082   333 _DP0L	=	0x0082
                           0000A8   334 _IE	=	0x00a8
                           0000B8   335 _IP	=	0x00b8
                           000080   336 _P0	=	0x0080
                           000090   337 _P1	=	0x0090
                           0000A0   338 _P2	=	0x00a0
                           0000B0   339 _P3	=	0x00b0
                           000087   340 _PCON	=	0x0087
                           0000D0   341 _PSW	=	0x00d0
                           000099   342 _SBUF	=	0x0099
                           000099   343 _SBUF0	=	0x0099
                           000098   344 _SCON	=	0x0098
                           000081   345 _SP	=	0x0081
                           000088   346 _TCON	=	0x0088
                           00008C   347 _TH0	=	0x008c
                           00008D   348 _TH1	=	0x008d
                           00008A   349 _TL0	=	0x008a
                           00008B   350 _TL1	=	0x008b
                           000089   351 _TMOD	=	0x0089
                           00008E   352 __AUXR	=	0x008e
                                    353 ;--------------------------------------------------------
                                    354 ; special function bits
                                    355 ;--------------------------------------------------------
                                    356 	.area RSEG    (ABS,DATA)
      000000                        357 	.org 0x0000
                           0000AD   358 _ET2	=	0x00ad
                           0000BD   359 _PT2	=	0x00bd
                           0000C8   360 _T2CON_0	=	0x00c8
                           0000C9   361 _T2CON_1	=	0x00c9
                           0000CA   362 _T2CON_2	=	0x00ca
                           0000CB   363 _T2CON_3	=	0x00cb
                           0000CC   364 _T2CON_4	=	0x00cc
                           0000CD   365 _T2CON_5	=	0x00cd
                           0000CE   366 _T2CON_6	=	0x00ce
                           0000CF   367 _T2CON_7	=	0x00cf
                           0000C8   368 _CP_RL2	=	0x00c8
                           0000C9   369 _C_T2	=	0x00c9
                           0000CA   370 _TR2	=	0x00ca
                           0000CB   371 _EXEN2	=	0x00cb
                           0000CC   372 _TCLK	=	0x00cc
                           0000CD   373 _RCLK	=	0x00cd
                           0000CE   374 _EXF2	=	0x00ce
                           0000CF   375 _TF2	=	0x00cf
                           0000DF   376 _CF	=	0x00df
                           0000DE   377 _CR	=	0x00de
                           0000DC   378 _CCF4	=	0x00dc
                           0000DB   379 _CCF3	=	0x00db
                           0000DA   380 _CCF2	=	0x00da
                           0000D9   381 _CCF1	=	0x00d9
                           0000D8   382 _CCF0	=	0x00d8
                           0000AE   383 _EC	=	0x00ae
                           0000BE   384 _PPCL	=	0x00be
                           0000BD   385 _PT2L	=	0x00bd
                           0000BC   386 _PSL	=	0x00bc
                           0000BB   387 _PT1L	=	0x00bb
                           0000BA   388 _PX1L	=	0x00ba
                           0000B9   389 _PT0L	=	0x00b9
                           0000B8   390 _PX0L	=	0x00b8
                           0000C0   391 _P4_0	=	0x00c0
                           0000C1   392 _P4_1	=	0x00c1
                           0000C2   393 _P4_2	=	0x00c2
                           0000C3   394 _P4_3	=	0x00c3
                           0000C4   395 _P4_4	=	0x00c4
                           0000C5   396 _P4_5	=	0x00c5
                           0000C6   397 _P4_6	=	0x00c6
                           0000C7   398 _P4_7	=	0x00c7
                           0000E8   399 _P5_0	=	0x00e8
                           0000E9   400 _P5_1	=	0x00e9
                           0000EA   401 _P5_2	=	0x00ea
                           0000EB   402 _P5_3	=	0x00eb
                           0000EC   403 _P5_4	=	0x00ec
                           0000ED   404 _P5_5	=	0x00ed
                           0000EE   405 _P5_6	=	0x00ee
                           0000EF   406 _P5_7	=	0x00ef
                           0000F0   407 _BREG_F0	=	0x00f0
                           0000F1   408 _BREG_F1	=	0x00f1
                           0000F2   409 _BREG_F2	=	0x00f2
                           0000F3   410 _BREG_F3	=	0x00f3
                           0000F4   411 _BREG_F4	=	0x00f4
                           0000F5   412 _BREG_F5	=	0x00f5
                           0000F6   413 _BREG_F6	=	0x00f6
                           0000F7   414 _BREG_F7	=	0x00f7
                           0000A8   415 _EX0	=	0x00a8
                           0000A9   416 _ET0	=	0x00a9
                           0000AA   417 _EX1	=	0x00aa
                           0000AB   418 _ET1	=	0x00ab
                           0000AC   419 _ES	=	0x00ac
                           0000AF   420 _EA	=	0x00af
                           0000B8   421 _PX0	=	0x00b8
                           0000B9   422 _PT0	=	0x00b9
                           0000BA   423 _PX1	=	0x00ba
                           0000BB   424 _PT1	=	0x00bb
                           0000BC   425 _PS	=	0x00bc
                           000080   426 _P0_0	=	0x0080
                           000081   427 _P0_1	=	0x0081
                           000082   428 _P0_2	=	0x0082
                           000083   429 _P0_3	=	0x0083
                           000084   430 _P0_4	=	0x0084
                           000085   431 _P0_5	=	0x0085
                           000086   432 _P0_6	=	0x0086
                           000087   433 _P0_7	=	0x0087
                           000090   434 _P1_0	=	0x0090
                           000091   435 _P1_1	=	0x0091
                           000092   436 _P1_2	=	0x0092
                           000093   437 _P1_3	=	0x0093
                           000094   438 _P1_4	=	0x0094
                           000095   439 _P1_5	=	0x0095
                           000096   440 _P1_6	=	0x0096
                           000097   441 _P1_7	=	0x0097
                           0000A0   442 _P2_0	=	0x00a0
                           0000A1   443 _P2_1	=	0x00a1
                           0000A2   444 _P2_2	=	0x00a2
                           0000A3   445 _P2_3	=	0x00a3
                           0000A4   446 _P2_4	=	0x00a4
                           0000A5   447 _P2_5	=	0x00a5
                           0000A6   448 _P2_6	=	0x00a6
                           0000A7   449 _P2_7	=	0x00a7
                           0000B0   450 _P3_0	=	0x00b0
                           0000B1   451 _P3_1	=	0x00b1
                           0000B2   452 _P3_2	=	0x00b2
                           0000B3   453 _P3_3	=	0x00b3
                           0000B4   454 _P3_4	=	0x00b4
                           0000B5   455 _P3_5	=	0x00b5
                           0000B6   456 _P3_6	=	0x00b6
                           0000B7   457 _P3_7	=	0x00b7
                           0000B0   458 _RXD	=	0x00b0
                           0000B0   459 _RXD0	=	0x00b0
                           0000B1   460 _TXD	=	0x00b1
                           0000B1   461 _TXD0	=	0x00b1
                           0000B2   462 _INT0	=	0x00b2
                           0000B3   463 _INT1	=	0x00b3
                           0000B4   464 _T0	=	0x00b4
                           0000B5   465 _T1	=	0x00b5
                           0000B6   466 _WR	=	0x00b6
                           0000B7   467 _RD	=	0x00b7
                           0000D0   468 _P	=	0x00d0
                           0000D1   469 _F1	=	0x00d1
                           0000D2   470 _OV	=	0x00d2
                           0000D3   471 _RS0	=	0x00d3
                           0000D4   472 _RS1	=	0x00d4
                           0000D5   473 _F0	=	0x00d5
                           0000D6   474 _AC	=	0x00d6
                           0000D7   475 _CY	=	0x00d7
                           000098   476 _RI	=	0x0098
                           000099   477 _TI	=	0x0099
                           00009A   478 _RB8	=	0x009a
                           00009B   479 _TB8	=	0x009b
                           00009C   480 _REN	=	0x009c
                           00009D   481 _SM2	=	0x009d
                           00009E   482 _SM1	=	0x009e
                           00009F   483 _SM0	=	0x009f
                           000088   484 _IT0	=	0x0088
                           000089   485 _IE0	=	0x0089
                           00008A   486 _IT1	=	0x008a
                           00008B   487 _IE1	=	0x008b
                           00008C   488 _TR0	=	0x008c
                           00008D   489 _TF0	=	0x008d
                           00008E   490 _TR1	=	0x008e
                           00008F   491 _TF1	=	0x008f
                                    492 ;--------------------------------------------------------
                                    493 ; overlayable register banks
                                    494 ;--------------------------------------------------------
                                    495 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        496 	.ds 8
                                    497 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        498 	.ds 8
                                    499 ;--------------------------------------------------------
                                    500 ; overlayable bit register bank
                                    501 ;--------------------------------------------------------
                                    502 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        503 bits:
      000000                        504 	.ds 1
                           008000   505 	b0 = bits[0]
                           008100   506 	b1 = bits[1]
                           008200   507 	b2 = bits[2]
                           008300   508 	b3 = bits[3]
                           008400   509 	b4 = bits[4]
                           008500   510 	b5 = bits[5]
                           008600   511 	b6 = bits[6]
                           008700   512 	b7 = bits[7]
                                    513 ;--------------------------------------------------------
                                    514 ; internal ram data
                                    515 ;--------------------------------------------------------
                                    516 	.area DSEG    (DATA)
      000000                        517 _delete_buffer_sloc0_1_0:
      000000                        518 	.ds 2
      000002                        519 _delete_buffer_sloc1_1_0:
      000002                        520 	.ds 2
      000004                        521 _delete_buffer_sloc2_1_0:
      000004                        522 	.ds 3
                                    523 ;--------------------------------------------------------
                                    524 ; overlayable items in internal ram 
                                    525 ;--------------------------------------------------------
                                    526 ;--------------------------------------------------------
                                    527 ; Stack segment in internal ram 
                                    528 ;--------------------------------------------------------
                                    529 	.area	SSEG
      000000                        530 __start__stack:
      000000                        531 	.ds	1
                                    532 
                                    533 ;--------------------------------------------------------
                                    534 ; indirectly addressable internal ram data
                                    535 ;--------------------------------------------------------
                                    536 	.area ISEG    (DATA)
                                    537 ;--------------------------------------------------------
                                    538 ; absolute internal ram data
                                    539 ;--------------------------------------------------------
                                    540 	.area IABS    (ABS,DATA)
                                    541 	.area IABS    (ABS,DATA)
                                    542 ;--------------------------------------------------------
                                    543 ; bit data
                                    544 ;--------------------------------------------------------
                                    545 	.area BSEG    (BIT)
                                    546 ;--------------------------------------------------------
                                    547 ; paged external ram data
                                    548 ;--------------------------------------------------------
                                    549 	.area PSEG    (PAG,XDATA)
                                    550 ;--------------------------------------------------------
                                    551 ; external ram data
                                    552 ;--------------------------------------------------------
                                    553 	.area XSEG    (XDATA)
                           008000   554 _DEBUG_LOC	=	0x8000
      000000                        555 _program_stats::
      000000                        556 	.ds 10
      00000A                        557 _buffers_array::
      00000A                        558 	.ds 300
      000136                        559 _create_new_buffer_buff_65537_103:
      000136                        560 	.ds 12
      000142                        561 _create_initial_buffers_buff_65538_110:
      000142                        562 	.ds 12
      00014E                        563 _create_initial_buffers_buff1_65538_110:
      00014E                        564 	.ds 12
      00015A                        565 _dump_buff_zero_ascii_j_65537_127:
      00015A                        566 	.ds 2
      00015C                        567 _dump_buff_zero_hex_j_131073_135:
      00015C                        568 	.ds 2
      00015E                        569 _get_number_total_chars_65536_144:
      00015E                        570 	.ds 2
      000160                        571 _get_number_num_65537_146:
      000160                        572 	.ds 2
      000162                        573 _get_num_helper_times_65536_151:
      000162                        574 	.ds 2
      000164                        575 _get_num_helper_num_65536_152:
      000164                        576 	.ds 2
      000166                        577 _putchar_c_65536_155:
      000166                        578 	.ds 2
      000168                        579 _dataout_data_65536_158:
      000168                        580 	.ds 1
      000169                        581 _asm_call_sent_from_asm_65536_160:
      000169                        582 	.ds 1
                                    583 ;--------------------------------------------------------
                                    584 ; absolute external ram data
                                    585 ;--------------------------------------------------------
                                    586 	.area XABS    (ABS,XDATA)
                                    587 ;--------------------------------------------------------
                                    588 ; external initialized ram data
                                    589 ;--------------------------------------------------------
                                    590 	.area XISEG   (XDATA)
      000000                        591 _global_var_test::
      000000                        592 	.ds 1
      000001                        593 _watchdog_flag::
      000001                        594 	.ds 2
                                    595 	.area HOME    (CODE)
                                    596 	.area GSINIT0 (CODE)
                                    597 	.area GSINIT1 (CODE)
                                    598 	.area GSINIT2 (CODE)
                                    599 	.area GSINIT3 (CODE)
                                    600 	.area GSINIT4 (CODE)
                                    601 	.area GSINIT5 (CODE)
                                    602 	.area GSINIT  (CODE)
                                    603 	.area GSFINAL (CODE)
                                    604 	.area CSEG    (CODE)
                                    605 ;--------------------------------------------------------
                                    606 ; interrupt vector 
                                    607 ;--------------------------------------------------------
                                    608 	.area HOME    (CODE)
      000000                        609 __interrupt_vect:
      000000 02r00r00         [24]  610 	ljmp	__sdcc_gsinit_startup
      000003 02r01r80         [24]  611 	ljmp	_idle_interrupt
      000006                        612 	.ds	5
      00000B 32               [24]  613 	reti
      00000C                        614 	.ds	7
      000013 32               [24]  615 	reti
      000014                        616 	.ds	7
      00001B 32               [24]  617 	reti
      00001C                        618 	.ds	7
      000023 32               [24]  619 	reti
      000024                        620 	.ds	7
      00002B 32               [24]  621 	reti
      00002C                        622 	.ds	7
      000033 02r00rD8         [24]  623 	ljmp	_pca_interrupt
                                    624 ;--------------------------------------------------------
                                    625 ; global & static initialisations
                                    626 ;--------------------------------------------------------
                                    627 	.area HOME    (CODE)
                                    628 	.area GSINIT  (CODE)
                                    629 	.area GSFINAL (CODE)
                                    630 	.area GSINIT  (CODE)
                                    631 	.globl __sdcc_gsinit_startup
                                    632 	.globl __sdcc_program_startup
                                    633 	.globl __start__stack
                                    634 	.globl __mcs51_genXINIT
                                    635 	.globl __mcs51_genXRAMCLEAR
                                    636 	.globl __mcs51_genRAMCLEAR
                                    637 	.area GSFINAL (CODE)
      000000 02r00r36         [24]  638 	ljmp	__sdcc_program_startup
                                    639 ;--------------------------------------------------------
                                    640 ; Home
                                    641 ;--------------------------------------------------------
                                    642 	.area HOME    (CODE)
                                    643 	.area HOME    (CODE)
      000036                        644 __sdcc_program_startup:
      000036 02r00r00         [24]  645 	ljmp	_main
                                    646 ;	return from main will return to caller
                                    647 ;--------------------------------------------------------
                                    648 ; code
                                    649 ;--------------------------------------------------------
                                    650 	.area CSEG    (CODE)
                                    651 ;------------------------------------------------------------
                                    652 ;Allocation info for local variables in function 'main'
                                    653 ;------------------------------------------------------------
                                    654 ;	program.c:97: void main(void)
                                    655 ;	-----------------------------------------
                                    656 ;	 function main
                                    657 ;	-----------------------------------------
      000000                        658 _main:
                           000007   659 	ar7 = 0x07
                           000006   660 	ar6 = 0x06
                           000005   661 	ar5 = 0x05
                           000004   662 	ar4 = 0x04
                           000003   663 	ar3 = 0x03
                           000002   664 	ar2 = 0x02
                           000001   665 	ar1 = 0x01
                           000000   666 	ar0 = 0x00
                                    667 ;	program.c:104: i2c_testasm();
                                    668 ;	program.c:105: }
      000000 02r04r72         [24]  669 	ljmp	_i2c_testasm
                                    670 ;------------------------------------------------------------
                                    671 ;Allocation info for local variables in function 'user_interface_heap'
                                    672 ;------------------------------------------------------------
                                    673 ;	program.c:112: void user_interface_heap()
                                    674 ;	-----------------------------------------
                                    675 ;	 function user_interface_heap
                                    676 ;	-----------------------------------------
      000003                        677 _user_interface_heap:
                                    678 ;	program.c:114: DEBUGPORT(0x02);
      000003 75 82 02         [24]  679 	mov	dpl,#0x02
      000006 12r14r6F         [24]  680 	lcall	_dataout
                                    681 ;	program.c:115: create_initial_buffers();
      000009 12r0Br1E         [24]  682 	lcall	_create_initial_buffers
                                    683 ;	program.c:116: print_all_buffers();
      00000C 12r11r4F         [24]  684 	lcall	_print_all_buffers
                                    685 ;	program.c:117: enter_chars();
                                    686 ;	program.c:118: }
      00000F 02r0CrFB         [24]  687 	ljmp	_enter_chars
                                    688 ;------------------------------------------------------------
                                    689 ;Allocation info for local variables in function 'user_interface_PCA'
                                    690 ;------------------------------------------------------------
                                    691 ;inp                       Allocated with name '_user_interface_PCA_inp_65537_58'
                                    692 ;------------------------------------------------------------
                                    693 ;	program.c:125: void user_interface_PCA()
                                    694 ;	-----------------------------------------
                                    695 ;	 function user_interface_PCA
                                    696 ;	-----------------------------------------
      000012                        697 _user_interface_PCA:
                                    698 ;	program.c:127: DEBUGPORT(0xAA);
      000012 75 82 AA         [24]  699 	mov	dpl,#0xaa
      000015 12r14r6F         [24]  700 	lcall	_dataout
                                    701 ;	program.c:128: printf("Hello, In PCA Demo mode \n\r");
      000018 74r00            [12]  702 	mov	a,#___str_0
      00001A C0 E0            [24]  703 	push	acc
      00001C 74s00            [12]  704 	mov	a,#(___str_0 >> 8)
      00001E C0 E0            [24]  705 	push	acc
      000020 74 80            [12]  706 	mov	a,#0x80
      000022 C0 E0            [24]  707 	push	acc
      000024 12r00r00         [24]  708 	lcall	_printf
      000027 15 81            [12]  709 	dec	sp
      000029 15 81            [12]  710 	dec	sp
      00002B 15 81            [12]  711 	dec	sp
                                    712 ;	program.c:129: print_pca_menu();
      00002D 12r08r07         [24]  713 	lcall	_print_pca_menu
                                    714 ;	program.c:132: wrong_choice_pca:
      000030                        715 00101$:
                                    716 ;	program.c:133: printf("Please make a valid choice \n\r");
      000030 74r1B            [12]  717 	mov	a,#___str_1
      000032 C0 E0            [24]  718 	push	acc
      000034 74s00            [12]  719 	mov	a,#(___str_1 >> 8)
      000036 C0 E0            [24]  720 	push	acc
      000038 74 80            [12]  721 	mov	a,#0x80
      00003A C0 E0            [24]  722 	push	acc
      00003C 12r00r00         [24]  723 	lcall	_printf
      00003F 15 81            [12]  724 	dec	sp
      000041 15 81            [12]  725 	dec	sp
      000043 15 81            [12]  726 	dec	sp
                                    727 ;	program.c:134: inp = getchar();
      000045 12r14r33         [24]  728 	lcall	_getchar
      000048 AE 82            [24]  729 	mov	r6,dpl
      00004A AF 83            [24]  730 	mov	r7,dph
                                    731 ;	program.c:135: if (inp == 0x46)
      00004C BE 46 09         [24]  732 	cjne	r6,#0x46,00127$
      00004F BF 00 06         [24]  733 	cjne	r7,#0x00,00127$
                                    734 ;	program.c:136: pca_falling_edge();
      000052 12r01rF5         [24]  735 	lcall	_pca_falling_edge
      000055 02r00rB3         [24]  736 	ljmp	00145$
      000058                        737 00127$:
                                    738 ;	program.c:137: else if (inp == 0x53)
      000058 BE 53 08         [24]  739 	cjne	r6,#0x53,00124$
      00005B BF 00 05         [24]  740 	cjne	r7,#0x00,00124$
                                    741 ;	program.c:138: pca_software_timer();
      00005E 12r02r10         [24]  742 	lcall	_pca_software_timer
      000061 80 50            [24]  743 	sjmp	00145$
      000063                        744 00124$:
                                    745 ;	program.c:139: else if (inp == 0x48)
      000063 BE 48 08         [24]  746 	cjne	r6,#0x48,00121$
      000066 BF 00 05         [24]  747 	cjne	r7,#0x00,00121$
                                    748 ;	program.c:140: pca_high_speed();
      000069 12r02r41         [24]  749 	lcall	_pca_high_speed
      00006C 80 45            [24]  750 	sjmp	00145$
      00006E                        751 00121$:
                                    752 ;	program.c:141: else if (inp == 0x50)
      00006E BE 50 08         [24]  753 	cjne	r6,#0x50,00118$
      000071 BF 00 05         [24]  754 	cjne	r7,#0x00,00118$
                                    755 ;	program.c:142: pca_pwm();
      000074 12r02r65         [24]  756 	lcall	_pca_pwm
      000077 80 3A            [24]  757 	sjmp	00145$
      000079                        758 00118$:
                                    759 ;	program.c:143: else if (inp == 0x57)
      000079 BE 57 08         [24]  760 	cjne	r6,#0x57,00115$
      00007C BF 00 05         [24]  761 	cjne	r7,#0x00,00115$
                                    762 ;	program.c:144: pca_watchdog();
      00007F 12r02r89         [24]  763 	lcall	_pca_watchdog
      000082 80 2F            [24]  764 	sjmp	00145$
      000084                        765 00115$:
                                    766 ;	program.c:145: else if (inp == 0x49)
      000084 BE 49 08         [24]  767 	cjne	r6,#0x49,00112$
      000087 BF 00 05         [24]  768 	cjne	r7,#0x00,00112$
                                    769 ;	program.c:146: pca_idle();
      00008A 12r03r2D         [24]  770 	lcall	_pca_idle
      00008D 80 24            [24]  771 	sjmp	00145$
      00008F                        772 00112$:
                                    773 ;	program.c:147: else if (inp == 0x44)
      00008F BE 44 08         [24]  774 	cjne	r6,#0x44,00109$
      000092 BF 00 05         [24]  775 	cjne	r7,#0x00,00109$
                                    776 ;	program.c:148: pca_pdown();
      000095 12r03r62         [24]  777 	lcall	_pca_pdown
      000098 80 19            [24]  778 	sjmp	00145$
      00009A                        779 00109$:
                                    780 ;	program.c:149: else if (inp == 0x4C)
      00009A BE 4C 08         [24]  781 	cjne	r6,#0x4c,00106$
      00009D BF 00 05         [24]  782 	cjne	r7,#0x00,00106$
                                    783 ;	program.c:150: fclk_lowest();
      0000A0 12r03r97         [24]  784 	lcall	_fclk_lowest
      0000A3 80 0E            [24]  785 	sjmp	00145$
      0000A5                        786 00106$:
                                    787 ;	program.c:151: else if (inp == 0x55)
      0000A5 BE 55 05         [24]  788 	cjne	r6,#0x55,00199$
      0000A8 BF 00 02         [24]  789 	cjne	r7,#0x00,00199$
      0000AB 80 03            [24]  790 	sjmp	00200$
      0000AD                        791 00199$:
      0000AD 02r00r30         [24]  792 	ljmp	00101$
      0000B0                        793 00200$:
                                    794 ;	program.c:152: hardware_watchdog();
      0000B0 12r02rE4         [24]  795 	lcall	_hardware_watchdog
                                    796 ;	program.c:156: exit_choice:
      0000B3                        797 00145$:
      0000B3                        798 00129$:
                                    799 ;	program.c:157: printf("Please 'E' to exit or Reset \n\r");
      0000B3 74r39            [12]  800 	mov	a,#___str_2
      0000B5 C0 E0            [24]  801 	push	acc
      0000B7 74s00            [12]  802 	mov	a,#(___str_2 >> 8)
      0000B9 C0 E0            [24]  803 	push	acc
      0000BB 74 80            [12]  804 	mov	a,#0x80
      0000BD C0 E0            [24]  805 	push	acc
      0000BF 12r00r00         [24]  806 	lcall	_printf
      0000C2 15 81            [12]  807 	dec	sp
      0000C4 15 81            [12]  808 	dec	sp
      0000C6 15 81            [12]  809 	dec	sp
                                    810 ;	program.c:158: inp = getchar();
      0000C8 12r14r33         [24]  811 	lcall	_getchar
      0000CB AE 82            [24]  812 	mov	r6,dpl
      0000CD AF 83            [24]  813 	mov	r7,dph
                                    814 ;	program.c:159: if (inp == 0x45)
      0000CF BE 45 E1         [24]  815 	cjne	r6,#0x45,00129$
      0000D2 BF 00 DE         [24]  816 	cjne	r7,#0x00,00129$
                                    817 ;	program.c:160: user_interface_PCA();
                                    818 ;	program.c:162: goto exit_choice;
                                    819 ;	program.c:163: }
      0000D5 02r00r12         [24]  820 	ljmp	_user_interface_PCA
                                    821 ;------------------------------------------------------------
                                    822 ;Allocation info for local variables in function 'pca_interrupt'
                                    823 ;------------------------------------------------------------
                                    824 ;	program.c:170: void pca_interrupt() __interrupt(6) __using(1)
                                    825 ;	-----------------------------------------
                                    826 ;	 function pca_interrupt
                                    827 ;	-----------------------------------------
      0000D8                        828 _pca_interrupt:
                           00000F   829 	ar7 = 0x0f
                           00000E   830 	ar6 = 0x0e
                           00000D   831 	ar5 = 0x0d
                           00000C   832 	ar4 = 0x0c
                           00000B   833 	ar3 = 0x0b
                           00000A   834 	ar2 = 0x0a
                           000009   835 	ar1 = 0x09
                           000008   836 	ar0 = 0x08
      0000D8 C0*00            [24]  837 	push	bits
      0000DA C0 E0            [24]  838 	push	acc
      0000DC C0 F0            [24]  839 	push	b
      0000DE C0 82            [24]  840 	push	dpl
      0000E0 C0 83            [24]  841 	push	dph
      0000E2 C0 07            [24]  842 	push	(0+7)
      0000E4 C0 06            [24]  843 	push	(0+6)
      0000E6 C0 05            [24]  844 	push	(0+5)
      0000E8 C0 04            [24]  845 	push	(0+4)
      0000EA C0 03            [24]  846 	push	(0+3)
      0000EC C0 02            [24]  847 	push	(0+2)
      0000EE C0 01            [24]  848 	push	(0+1)
      0000F0 C0 00            [24]  849 	push	(0+0)
      0000F2 C0 D0            [24]  850 	push	psw
      0000F4 75 D0 08         [24]  851 	mov	psw,#0x08
                                    852 ;	program.c:172: if (CCF0)
      0000F7 30 D8 2D         [24]  853 	jnb	_CCF0,00102$
                                    854 ;	program.c:174: printf("Captured Value CCPL -> %d CCPH -> %d \n\r", CCAP0L, CCAP0H);
      0000FA AE FA            [24]  855 	mov	r6,_CCAP0H
      0000FC 7F 00            [12]  856 	mov	r7,#0x00
      0000FE AC EA            [24]  857 	mov	r4,_CCAP0L
      000100 7D 00            [12]  858 	mov	r5,#0x00
      000102 C0 0E            [24]  859 	push	ar6
      000104 C0 0F            [24]  860 	push	ar7
      000106 C0 0C            [24]  861 	push	ar4
      000108 C0 0D            [24]  862 	push	ar5
      00010A 74r58            [12]  863 	mov	a,#___str_3
      00010C C0 E0            [24]  864 	push	acc
      00010E 74s00            [12]  865 	mov	a,#(___str_3 >> 8)
      000110 C0 E0            [24]  866 	push	acc
      000112 74 80            [12]  867 	mov	a,#0x80
      000114 C0 E0            [24]  868 	push	acc
      000116 75 D0 00         [24]  869 	mov	psw,#0x00
      000119 12r00r00         [24]  870 	lcall	_printf
      00011C 75 D0 08         [24]  871 	mov	psw,#0x08
      00011F E5 81            [12]  872 	mov	a,sp
      000121 24 F9            [12]  873 	add	a,#0xf9
      000123 F5 81            [12]  874 	mov	sp,a
                                    875 ;	program.c:176: CCF0 = 0;
                                    876 ;	assignBit
      000125 C2 D8            [12]  877 	clr	_CCF0
      000127                        878 00102$:
                                    879 ;	program.c:178: if (CCF1)
                                    880 ;	program.c:180: CCF1 = 0;
                                    881 ;	assignBit
      000127 10 D9 02         [24]  882 	jbc	_CCF1,00128$
      00012A 80 06            [24]  883 	sjmp	00104$
      00012C                        884 00128$:
                                    885 ;	program.c:181: CH = 0;
      00012C 75 F9 00         [24]  886 	mov	_CH,#0x00
                                    887 ;	program.c:182: CL = 0;
      00012F 75 E9 00         [24]  888 	mov	_CL,#0x00
      000132                        889 00104$:
                                    890 ;	program.c:185: if (CCF2)
                                    891 ;	program.c:187: CCF2 = 0;
                                    892 ;	assignBit
      000132 10 DA 02         [24]  893 	jbc	_CCF2,00129$
      000135 80 0C            [24]  894 	sjmp	00106$
      000137                        895 00129$:
                                    896 ;	program.c:188: CH = 0;
      000137 75 F9 00         [24]  897 	mov	_CH,#0x00
                                    898 ;	program.c:189: CL = 0;
      00013A 75 E9 00         [24]  899 	mov	_CL,#0x00
                                    900 ;	program.c:190: WDTRST = 0x01E;
      00013D 75 A6 1E         [24]  901 	mov	_WDTRST,#0x1e
                                    902 ;	program.c:191: WDTRST = 0x0E1;
      000140 75 A6 E1         [24]  903 	mov	_WDTRST,#0xe1
      000143                        904 00106$:
                                    905 ;	program.c:193: if (CCF3)
                                    906 ;	program.c:195: CCF3 = 0;
                                    907 ;	assignBit
      000143 10 DB 02         [24]  908 	jbc	_CCF3,00130$
      000146 80 1B            [24]  909 	sjmp	00109$
      000148                        910 00130$:
                                    911 ;	program.c:196: printf("Timer Interrupt\n\r");
      000148 74r80            [12]  912 	mov	a,#___str_4
      00014A C0 E0            [24]  913 	push	acc
      00014C 74s00            [12]  914 	mov	a,#(___str_4 >> 8)
      00014E C0 E0            [24]  915 	push	acc
      000150 74 80            [12]  916 	mov	a,#0x80
      000152 C0 E0            [24]  917 	push	acc
      000154 75 D0 00         [24]  918 	mov	psw,#0x00
      000157 12r00r00         [24]  919 	lcall	_printf
      00015A 75 D0 08         [24]  920 	mov	psw,#0x08
      00015D 15 81            [12]  921 	dec	sp
      00015F 15 81            [12]  922 	dec	sp
      000161 15 81            [12]  923 	dec	sp
      000163                        924 00109$:
                                    925 ;	program.c:198: }
      000163 D0 D0            [24]  926 	pop	psw
      000165 D0 00            [24]  927 	pop	(0+0)
      000167 D0 01            [24]  928 	pop	(0+1)
      000169 D0 02            [24]  929 	pop	(0+2)
      00016B D0 03            [24]  930 	pop	(0+3)
      00016D D0 04            [24]  931 	pop	(0+4)
      00016F D0 05            [24]  932 	pop	(0+5)
      000171 D0 06            [24]  933 	pop	(0+6)
      000173 D0 07            [24]  934 	pop	(0+7)
      000175 D0 83            [24]  935 	pop	dph
      000177 D0 82            [24]  936 	pop	dpl
      000179 D0 F0            [24]  937 	pop	b
      00017B D0 E0            [24]  938 	pop	acc
      00017D D0*00            [24]  939 	pop	bits
      00017F 32               [24]  940 	reti
                                    941 ;------------------------------------------------------------
                                    942 ;Allocation info for local variables in function 'idle_interrupt'
                                    943 ;------------------------------------------------------------
                                    944 ;	program.c:205: void idle_interrupt() __interrupt(0) __using(1)
                                    945 ;	-----------------------------------------
                                    946 ;	 function idle_interrupt
                                    947 ;	-----------------------------------------
      000180                        948 _idle_interrupt:
      000180 C0*00            [24]  949 	push	bits
      000182 C0 E0            [24]  950 	push	acc
      000184 C0 F0            [24]  951 	push	b
      000186 C0 82            [24]  952 	push	dpl
      000188 C0 83            [24]  953 	push	dph
      00018A C0 07            [24]  954 	push	(0+7)
      00018C C0 06            [24]  955 	push	(0+6)
      00018E C0 05            [24]  956 	push	(0+5)
      000190 C0 04            [24]  957 	push	(0+4)
      000192 C0 03            [24]  958 	push	(0+3)
      000194 C0 02            [24]  959 	push	(0+2)
      000196 C0 01            [24]  960 	push	(0+1)
      000198 C0 00            [24]  961 	push	(0+0)
      00019A C0 D0            [24]  962 	push	psw
      00019C 75 D0 08         [24]  963 	mov	psw,#0x08
                                    964 ;	program.c:207: EX0 = 0;
                                    965 ;	assignBit
      00019F C2 A8            [12]  966 	clr	_EX0
                                    967 ;	program.c:208: PCON = 0x80;
      0001A1 75 87 80         [24]  968 	mov	_PCON,#0x80
                                    969 ;	program.c:209: CR = 0;
                                    970 ;	assignBit
      0001A4 C2 DE            [12]  971 	clr	_CR
                                    972 ;	program.c:210: CKRL = 255;
      0001A6 75 97 FF         [24]  973 	mov	_CKRL,#0xff
                                    974 ;	program.c:211: CCAPM0 = 0;
                                    975 ;	program.c:212: CCAPM1 = 0;
                                    976 ;	program.c:213: CCAPM2 = 0;
                                    977 ;	program.c:214: CCAPM3 = 0;
                                    978 ;	program.c:215: CCAPM4 = 0;
                                    979 ;	program.c:216: printf("Going to main menu.. \n\r");
      0001A9 E4               [12]  980 	clr	a
      0001AA F5 DA            [12]  981 	mov	_CCAPM0,a
      0001AC F5 DB            [12]  982 	mov	_CCAPM1,a
      0001AE F5 DC            [12]  983 	mov	_CCAPM2,a
      0001B0 F5 DD            [12]  984 	mov	_CCAPM3,a
      0001B2 F5 DE            [12]  985 	mov	_CCAPM4,a
      0001B4 74r92            [12]  986 	mov	a,#___str_5
      0001B6 C0 E0            [24]  987 	push	acc
      0001B8 74s00            [12]  988 	mov	a,#(___str_5 >> 8)
      0001BA C0 E0            [24]  989 	push	acc
      0001BC 74 80            [12]  990 	mov	a,#0x80
      0001BE C0 E0            [24]  991 	push	acc
      0001C0 75 D0 00         [24]  992 	mov	psw,#0x00
      0001C3 12r00r00         [24]  993 	lcall	_printf
      0001C6 75 D0 08         [24]  994 	mov	psw,#0x08
      0001C9 15 81            [12]  995 	dec	sp
      0001CB 15 81            [12]  996 	dec	sp
      0001CD 15 81            [12]  997 	dec	sp
                                    998 ;	program.c:217: main_menu();
      0001CF 75 D0 00         [24]  999 	mov	psw,#0x00
      0001D2 12r03rC9         [24] 1000 	lcall	_main_menu
      0001D5 75 D0 08         [24] 1001 	mov	psw,#0x08
                                   1002 ;	program.c:218: }
      0001D8 D0 D0            [24] 1003 	pop	psw
      0001DA D0 00            [24] 1004 	pop	(0+0)
      0001DC D0 01            [24] 1005 	pop	(0+1)
      0001DE D0 02            [24] 1006 	pop	(0+2)
      0001E0 D0 03            [24] 1007 	pop	(0+3)
      0001E2 D0 04            [24] 1008 	pop	(0+4)
      0001E4 D0 05            [24] 1009 	pop	(0+5)
      0001E6 D0 06            [24] 1010 	pop	(0+6)
      0001E8 D0 07            [24] 1011 	pop	(0+7)
      0001EA D0 83            [24] 1012 	pop	dph
      0001EC D0 82            [24] 1013 	pop	dpl
      0001EE D0 F0            [24] 1014 	pop	b
      0001F0 D0 E0            [24] 1015 	pop	acc
      0001F2 D0*00            [24] 1016 	pop	bits
      0001F4 32               [24] 1017 	reti
                                   1018 ;------------------------------------------------------------
                                   1019 ;Allocation info for local variables in function 'pca_falling_edge'
                                   1020 ;------------------------------------------------------------
                                   1021 ;	program.c:225: void pca_falling_edge()
                                   1022 ;	-----------------------------------------
                                   1023 ;	 function pca_falling_edge
                                   1024 ;	-----------------------------------------
      0001F5                       1025 _pca_falling_edge:
                           000007  1026 	ar7 = 0x07
                           000006  1027 	ar6 = 0x06
                           000005  1028 	ar5 = 0x05
                           000004  1029 	ar4 = 0x04
                           000003  1030 	ar3 = 0x03
                           000002  1031 	ar2 = 0x02
                           000001  1032 	ar1 = 0x01
                           000000  1033 	ar0 = 0x00
                                   1034 ;	program.c:227: printf("Setting P1.3 as falling edge detector, enabling PCA interrupt \n\r");
      0001F5 74rAA            [12] 1035 	mov	a,#___str_6
      0001F7 C0 E0            [24] 1036 	push	acc
      0001F9 74s00            [12] 1037 	mov	a,#(___str_6 >> 8)
      0001FB C0 E0            [24] 1038 	push	acc
      0001FD 74 80            [12] 1039 	mov	a,#0x80
      0001FF C0 E0            [24] 1040 	push	acc
      000201 12r00r00         [24] 1041 	lcall	_printf
      000204 15 81            [12] 1042 	dec	sp
      000206 15 81            [12] 1043 	dec	sp
      000208 15 81            [12] 1044 	dec	sp
                                   1045 ;	program.c:228: CCAPM0 = 0x21;
      00020A 75 DA 21         [24] 1046 	mov	_CCAPM0,#0x21
                                   1047 ;	program.c:229: CR = 1;
                                   1048 ;	assignBit
      00020D D2 DE            [12] 1049 	setb	_CR
                                   1050 ;	program.c:230: }
      00020F 22               [24] 1051 	ret
                                   1052 ;------------------------------------------------------------
                                   1053 ;Allocation info for local variables in function 'pca_software_timer'
                                   1054 ;------------------------------------------------------------
                                   1055 ;rec                       Allocated with name '_pca_software_timer_rec_65537_67'
                                   1056 ;------------------------------------------------------------
                                   1057 ;	program.c:237: void pca_software_timer()
                                   1058 ;	-----------------------------------------
                                   1059 ;	 function pca_software_timer
                                   1060 ;	-----------------------------------------
      000210                       1061 _pca_software_timer:
                                   1062 ;	program.c:239: printf("Entering Software Timer Mode \n\r");
      000210 74rEB            [12] 1063 	mov	a,#___str_7
      000212 C0 E0            [24] 1064 	push	acc
      000214 74s00            [12] 1065 	mov	a,#(___str_7 >> 8)
      000216 C0 E0            [24] 1066 	push	acc
      000218 74 80            [12] 1067 	mov	a,#0x80
      00021A C0 E0            [24] 1068 	push	acc
      00021C 12r00r00         [24] 1069 	lcall	_printf
      00021F 15 81            [12] 1070 	dec	sp
      000221 15 81            [12] 1071 	dec	sp
      000223 15 81            [12] 1072 	dec	sp
                                   1073 ;	program.c:240: CCAP3L = 255;
      000225 75 ED FF         [24] 1074 	mov	_CCAP3L,#0xff
                                   1075 ;	program.c:241: CCAP3H = 255;
      000228 75 FD FF         [24] 1076 	mov	_CCAP3H,#0xff
                                   1077 ;	program.c:242: CCAPM3 = 0x49;
      00022B 75 DD 49         [24] 1078 	mov	_CCAPM3,#0x49
                                   1079 ;	program.c:243: CR = 1;
                                   1080 ;	assignBit
      00022E D2 DE            [12] 1081 	setb	_CR
                                   1082 ;	program.c:245: get_f:
      000230                       1083 00101$:
                                   1084 ;	program.c:246: rec = getchar();
      000230 12r14r33         [24] 1085 	lcall	_getchar
      000233 AE 82            [24] 1086 	mov	r6,dpl
      000235 AF 83            [24] 1087 	mov	r7,dph
                                   1088 ;	program.c:248: if (rec == 0x53)
      000237 BE 53 F6         [24] 1089 	cjne	r6,#0x53,00101$
      00023A BF 00 F3         [24] 1090 	cjne	r7,#0x00,00101$
                                   1091 ;	program.c:249: CCAPM3 = 0;
      00023D 75 DD 00         [24] 1092 	mov	_CCAPM3,#0x00
                                   1093 ;	program.c:251: goto get_f;
                                   1094 ;	program.c:252: }
      000240 22               [24] 1095 	ret
                                   1096 ;------------------------------------------------------------
                                   1097 ;Allocation info for local variables in function 'pca_high_speed'
                                   1098 ;------------------------------------------------------------
                                   1099 ;	program.c:259: void pca_high_speed()
                                   1100 ;	-----------------------------------------
                                   1101 ;	 function pca_high_speed
                                   1102 ;	-----------------------------------------
      000241                       1103 _pca_high_speed:
                                   1104 ;	program.c:262: printf("Entering High Speed Toggle Mode, P1.5 \n\r");
      000241 74r0B            [12] 1105 	mov	a,#___str_8
      000243 C0 E0            [24] 1106 	push	acc
      000245 74s01            [12] 1107 	mov	a,#(___str_8 >> 8)
      000247 C0 E0            [24] 1108 	push	acc
      000249 74 80            [12] 1109 	mov	a,#0x80
      00024B C0 E0            [24] 1110 	push	acc
      00024D 12r00r00         [24] 1111 	lcall	_printf
      000250 15 81            [12] 1112 	dec	sp
      000252 15 81            [12] 1113 	dec	sp
      000254 15 81            [12] 1114 	dec	sp
                                   1115 ;	program.c:263: CCAP2L = 255;
      000256 75 EC FF         [24] 1116 	mov	_CCAP2L,#0xff
                                   1117 ;	program.c:264: CCAP2H = 2;
      000259 75 FC 02         [24] 1118 	mov	_CCAP2H,#0x02
                                   1119 ;	program.c:265: CCAPM2 = 0x4D;
      00025C 75 DC 4D         [24] 1120 	mov	_CCAPM2,#0x4d
                                   1121 ;	program.c:266: CMOD = CPS0;
      00025F 75 D9 02         [24] 1122 	mov	_CMOD,#0x02
                                   1123 ;	program.c:267: CR = 1;
                                   1124 ;	assignBit
      000262 D2 DE            [12] 1125 	setb	_CR
                                   1126 ;	program.c:268: }
      000264 22               [24] 1127 	ret
                                   1128 ;------------------------------------------------------------
                                   1129 ;Allocation info for local variables in function 'pca_pwm'
                                   1130 ;------------------------------------------------------------
                                   1131 ;	program.c:275: void pca_pwm()
                                   1132 ;	-----------------------------------------
                                   1133 ;	 function pca_pwm
                                   1134 ;	-----------------------------------------
      000265                       1135 _pca_pwm:
                                   1136 ;	program.c:277: printf("Entering PWM Mode, 25 percent Duty Cycle P1.6\n\r");
      000265 74r34            [12] 1137 	mov	a,#___str_9
      000267 C0 E0            [24] 1138 	push	acc
      000269 74s01            [12] 1139 	mov	a,#(___str_9 >> 8)
      00026B C0 E0            [24] 1140 	push	acc
      00026D 74 80            [12] 1141 	mov	a,#0x80
      00026F C0 E0            [24] 1142 	push	acc
      000271 12r00r00         [24] 1143 	lcall	_printf
      000274 15 81            [12] 1144 	dec	sp
      000276 15 81            [12] 1145 	dec	sp
      000278 15 81            [12] 1146 	dec	sp
                                   1147 ;	program.c:278: CCAP3L = 192;
      00027A 75 ED C0         [24] 1148 	mov	_CCAP3L,#0xc0
                                   1149 ;	program.c:279: CCAP3H = 192;
      00027D 75 FD C0         [24] 1150 	mov	_CCAP3H,#0xc0
                                   1151 ;	program.c:280: CCAPM3 = 0x42;
      000280 75 DD 42         [24] 1152 	mov	_CCAPM3,#0x42
                                   1153 ;	program.c:281: CMOD = CPS0;
      000283 75 D9 02         [24] 1154 	mov	_CMOD,#0x02
                                   1155 ;	program.c:282: CR = 1;
                                   1156 ;	assignBit
      000286 D2 DE            [12] 1157 	setb	_CR
                                   1158 ;	program.c:283: }
      000288 22               [24] 1159 	ret
                                   1160 ;------------------------------------------------------------
                                   1161 ;Allocation info for local variables in function 'pca_watchdog'
                                   1162 ;------------------------------------------------------------
                                   1163 ;rec                       Allocated with name '_pca_watchdog_rec_65537_71'
                                   1164 ;------------------------------------------------------------
                                   1165 ;	program.c:290: void pca_watchdog()
                                   1166 ;	-----------------------------------------
                                   1167 ;	 function pca_watchdog
                                   1168 ;	-----------------------------------------
      000289                       1169 _pca_watchdog:
                                   1170 ;	program.c:292: CCAP1L = 255;
      000289 75 EB FF         [24] 1171 	mov	_CCAP1L,#0xff
                                   1172 ;	program.c:293: CCAP1H = 128;
      00028C 75 FB 80         [24] 1173 	mov	_CCAP1H,#0x80
                                   1174 ;	program.c:294: CCAPM1 = 0x49;
      00028F 75 DB 49         [24] 1175 	mov	_CCAPM1,#0x49
                                   1176 ;	program.c:295: watchdog_flag = 1;
      000292 90r00r01         [24] 1177 	mov	dptr,#_watchdog_flag
      000295 74 01            [12] 1178 	mov	a,#0x01
      000297 F0               [24] 1179 	movx	@dptr,a
      000298 E4               [12] 1180 	clr	a
      000299 A3               [24] 1181 	inc	dptr
      00029A F0               [24] 1182 	movx	@dptr,a
                                   1183 ;	program.c:296: printf("Enabling Watchdog Timer..\n\r");
      00029B 74r64            [12] 1184 	mov	a,#___str_10
      00029D C0 E0            [24] 1185 	push	acc
      00029F 74s01            [12] 1186 	mov	a,#(___str_10 >> 8)
      0002A1 C0 E0            [24] 1187 	push	acc
      0002A3 74 80            [12] 1188 	mov	a,#0x80
      0002A5 C0 E0            [24] 1189 	push	acc
      0002A7 12r00r00         [24] 1190 	lcall	_printf
      0002AA 15 81            [12] 1191 	dec	sp
      0002AC 15 81            [12] 1192 	dec	sp
      0002AE 15 81            [12] 1193 	dec	sp
                                   1194 ;	program.c:297: CCAP4L = 255;
      0002B0 75 EE FF         [24] 1195 	mov	_CCAP4L,#0xff
                                   1196 ;	program.c:298: CCAP4H = 255;
      0002B3 75 FE FF         [24] 1197 	mov	_CCAP4H,#0xff
                                   1198 ;	program.c:299: CMOD = WDTE;
      0002B6 75 D9 40         [24] 1199 	mov	_CMOD,#0x40
                                   1200 ;	program.c:300: CCAPM4 = 0x48;
      0002B9 75 DE 48         [24] 1201 	mov	_CCAPM4,#0x48
                                   1202 ;	program.c:301: CR = 1;
                                   1203 ;	assignBit
      0002BC D2 DE            [12] 1204 	setb	_CR
                                   1205 ;	program.c:303: printf("Currently Watchdog is being serviced\n\rPress 'S' to stop and generate a reset \n\r");
      0002BE 74r80            [12] 1206 	mov	a,#___str_11
      0002C0 C0 E0            [24] 1207 	push	acc
      0002C2 74s01            [12] 1208 	mov	a,#(___str_11 >> 8)
      0002C4 C0 E0            [24] 1209 	push	acc
      0002C6 74 80            [12] 1210 	mov	a,#0x80
      0002C8 C0 E0            [24] 1211 	push	acc
      0002CA 12r00r00         [24] 1212 	lcall	_printf
      0002CD 15 81            [12] 1213 	dec	sp
      0002CF 15 81            [12] 1214 	dec	sp
      0002D1 15 81            [12] 1215 	dec	sp
                                   1216 ;	program.c:305: get_e:
      0002D3                       1217 00101$:
                                   1218 ;	program.c:306: rec = getchar();
      0002D3 12r14r33         [24] 1219 	lcall	_getchar
      0002D6 AE 82            [24] 1220 	mov	r6,dpl
      0002D8 AF 83            [24] 1221 	mov	r7,dph
                                   1222 ;	program.c:308: if (rec == 0x53)
      0002DA BE 53 F6         [24] 1223 	cjne	r6,#0x53,00101$
      0002DD BF 00 F3         [24] 1224 	cjne	r7,#0x00,00101$
                                   1225 ;	program.c:309: CCAPM1 = 0;
      0002E0 75 DB 00         [24] 1226 	mov	_CCAPM1,#0x00
                                   1227 ;	program.c:311: goto get_e;
                                   1228 ;	program.c:312: }
      0002E3 22               [24] 1229 	ret
                                   1230 ;------------------------------------------------------------
                                   1231 ;Allocation info for local variables in function 'hardware_watchdog'
                                   1232 ;------------------------------------------------------------
                                   1233 ;rec                       Allocated with name '_hardware_watchdog_rec_65537_73'
                                   1234 ;------------------------------------------------------------
                                   1235 ;	program.c:319: void hardware_watchdog()
                                   1236 ;	-----------------------------------------
                                   1237 ;	 function hardware_watchdog
                                   1238 ;	-----------------------------------------
      0002E4                       1239 _hardware_watchdog:
                                   1240 ;	program.c:321: CCAP2L = 255;
      0002E4 75 EC FF         [24] 1241 	mov	_CCAP2L,#0xff
                                   1242 ;	program.c:322: CCAP2H = 255;
      0002E7 75 FC FF         [24] 1243 	mov	_CCAP2H,#0xff
                                   1244 ;	program.c:323: CCAPM2 = 0x49;
      0002EA 75 DC 49         [24] 1245 	mov	_CCAPM2,#0x49
                                   1246 ;	program.c:324: printf("Enabling Hardware Watchdog Timer..\n\r");
      0002ED 74rD0            [12] 1247 	mov	a,#___str_12
      0002EF C0 E0            [24] 1248 	push	acc
      0002F1 74s01            [12] 1249 	mov	a,#(___str_12 >> 8)
      0002F3 C0 E0            [24] 1250 	push	acc
      0002F5 74 80            [12] 1251 	mov	a,#0x80
      0002F7 C0 E0            [24] 1252 	push	acc
      0002F9 12r00r00         [24] 1253 	lcall	_printf
      0002FC 15 81            [12] 1254 	dec	sp
      0002FE 15 81            [12] 1255 	dec	sp
      000300 15 81            [12] 1256 	dec	sp
                                   1257 ;	program.c:325: WDTPRG = 0x7;
      000302 75 A7 07         [24] 1258 	mov	_WDTPRG,#0x07
                                   1259 ;	program.c:326: CR = 1;
                                   1260 ;	assignBit
      000305 D2 DE            [12] 1261 	setb	_CR
                                   1262 ;	program.c:328: printf("Currently Hardware Watchdog is being serviced\n\rPress 'S' to stop watchdog service and generate a reset in ~1s \n\r");
      000307 74rF5            [12] 1263 	mov	a,#___str_13
      000309 C0 E0            [24] 1264 	push	acc
      00030B 74s01            [12] 1265 	mov	a,#(___str_13 >> 8)
      00030D C0 E0            [24] 1266 	push	acc
      00030F 74 80            [12] 1267 	mov	a,#0x80
      000311 C0 E0            [24] 1268 	push	acc
      000313 12r00r00         [24] 1269 	lcall	_printf
      000316 15 81            [12] 1270 	dec	sp
      000318 15 81            [12] 1271 	dec	sp
      00031A 15 81            [12] 1272 	dec	sp
                                   1273 ;	program.c:330: get_e:
      00031C                       1274 00101$:
                                   1275 ;	program.c:331: rec = getchar();
      00031C 12r14r33         [24] 1276 	lcall	_getchar
      00031F AE 82            [24] 1277 	mov	r6,dpl
      000321 AF 83            [24] 1278 	mov	r7,dph
                                   1279 ;	program.c:333: if (rec == 0x53)
      000323 BE 53 F6         [24] 1280 	cjne	r6,#0x53,00101$
      000326 BF 00 F3         [24] 1281 	cjne	r7,#0x00,00101$
                                   1282 ;	program.c:334: CCAPM2 = 0;
      000329 75 DC 00         [24] 1283 	mov	_CCAPM2,#0x00
                                   1284 ;	program.c:336: goto get_e;
                                   1285 ;	program.c:337: }
      00032C 22               [24] 1286 	ret
                                   1287 ;------------------------------------------------------------
                                   1288 ;Allocation info for local variables in function 'pca_idle'
                                   1289 ;------------------------------------------------------------
                                   1290 ;	program.c:344: void pca_idle()
                                   1291 ;	-----------------------------------------
                                   1292 ;	 function pca_idle
                                   1293 ;	-----------------------------------------
      00032D                       1294 _pca_idle:
                                   1295 ;	program.c:346: pca_pwm();
      00032D 12r02r65         [24] 1296 	lcall	_pca_pwm
                                   1297 ;	program.c:347: printf("Entering Idle, Will Exit on external interrupt 0\n\r");
      000330 74r66            [12] 1298 	mov	a,#___str_14
      000332 C0 E0            [24] 1299 	push	acc
      000334 74s02            [12] 1300 	mov	a,#(___str_14 >> 8)
      000336 C0 E0            [24] 1301 	push	acc
      000338 74 80            [12] 1302 	mov	a,#0x80
      00033A C0 E0            [24] 1303 	push	acc
      00033C 12r00r00         [24] 1304 	lcall	_printf
      00033F 15 81            [12] 1305 	dec	sp
      000341 15 81            [12] 1306 	dec	sp
      000343 15 81            [12] 1307 	dec	sp
                                   1308 ;	program.c:348: EX0 = 1;
                                   1309 ;	assignBit
      000345 D2 A8            [12] 1310 	setb	_EX0
                                   1311 ;	program.c:349: PCON = IDL;
      000347 75 87 01         [24] 1312 	mov	_PCON,#0x01
                                   1313 ;	program.c:350: printf("Woke up from Idle/Power down, going to main menu \n\r");
      00034A 74r99            [12] 1314 	mov	a,#___str_15
      00034C C0 E0            [24] 1315 	push	acc
      00034E 74s02            [12] 1316 	mov	a,#(___str_15 >> 8)
      000350 C0 E0            [24] 1317 	push	acc
      000352 74 80            [12] 1318 	mov	a,#0x80
      000354 C0 E0            [24] 1319 	push	acc
      000356 12r00r00         [24] 1320 	lcall	_printf
      000359 15 81            [12] 1321 	dec	sp
      00035B 15 81            [12] 1322 	dec	sp
      00035D 15 81            [12] 1323 	dec	sp
                                   1324 ;	program.c:351: main_menu();
                                   1325 ;	program.c:352: }
      00035F 02r03rC9         [24] 1326 	ljmp	_main_menu
                                   1327 ;------------------------------------------------------------
                                   1328 ;Allocation info for local variables in function 'pca_pdown'
                                   1329 ;------------------------------------------------------------
                                   1330 ;	program.c:359: void pca_pdown()
                                   1331 ;	-----------------------------------------
                                   1332 ;	 function pca_pdown
                                   1333 ;	-----------------------------------------
      000362                       1334 _pca_pdown:
                                   1335 ;	program.c:361: pca_pwm();
      000362 12r02r65         [24] 1336 	lcall	_pca_pwm
                                   1337 ;	program.c:362: printf("Entering power down, Will Exit on external interrupt 0\n\r");
      000365 74rCD            [12] 1338 	mov	a,#___str_16
      000367 C0 E0            [24] 1339 	push	acc
      000369 74s02            [12] 1340 	mov	a,#(___str_16 >> 8)
      00036B C0 E0            [24] 1341 	push	acc
      00036D 74 80            [12] 1342 	mov	a,#0x80
      00036F C0 E0            [24] 1343 	push	acc
      000371 12r00r00         [24] 1344 	lcall	_printf
      000374 15 81            [12] 1345 	dec	sp
      000376 15 81            [12] 1346 	dec	sp
      000378 15 81            [12] 1347 	dec	sp
                                   1348 ;	program.c:363: EX0 = 1;
                                   1349 ;	assignBit
      00037A D2 A8            [12] 1350 	setb	_EX0
                                   1351 ;	program.c:364: PCON = PD;
      00037C 75 87 02         [24] 1352 	mov	_PCON,#0x02
                                   1353 ;	program.c:365: printf("Woke up from Idle/Power down, going to main menu \n\r");
      00037F 74r99            [12] 1354 	mov	a,#___str_15
      000381 C0 E0            [24] 1355 	push	acc
      000383 74s02            [12] 1356 	mov	a,#(___str_15 >> 8)
      000385 C0 E0            [24] 1357 	push	acc
      000387 74 80            [12] 1358 	mov	a,#0x80
      000389 C0 E0            [24] 1359 	push	acc
      00038B 12r00r00         [24] 1360 	lcall	_printf
      00038E 15 81            [12] 1361 	dec	sp
      000390 15 81            [12] 1362 	dec	sp
      000392 15 81            [12] 1363 	dec	sp
                                   1364 ;	program.c:366: main_menu();
                                   1365 ;	program.c:367: }
      000394 02r03rC9         [24] 1366 	ljmp	_main_menu
                                   1367 ;------------------------------------------------------------
                                   1368 ;Allocation info for local variables in function 'fclk_lowest'
                                   1369 ;------------------------------------------------------------
                                   1370 ;	program.c:374: void fclk_lowest()
                                   1371 ;	-----------------------------------------
                                   1372 ;	 function fclk_lowest
                                   1373 ;	-----------------------------------------
      000397                       1374 _fclk_lowest:
                                   1375 ;	program.c:376: printf("Changing Clock prescalar to go to lowest frequency in X2 Mode..\n\r");
      000397 74r06            [12] 1376 	mov	a,#___str_17
      000399 C0 E0            [24] 1377 	push	acc
      00039B 74s03            [12] 1378 	mov	a,#(___str_17 >> 8)
      00039D C0 E0            [24] 1379 	push	acc
      00039F 74 80            [12] 1380 	mov	a,#0x80
      0003A1 C0 E0            [24] 1381 	push	acc
      0003A3 12r00r00         [24] 1382 	lcall	_printf
      0003A6 15 81            [12] 1383 	dec	sp
      0003A8 15 81            [12] 1384 	dec	sp
      0003AA 15 81            [12] 1385 	dec	sp
                                   1386 ;	program.c:377: printf("This UART Session will stop working...\n\r");
      0003AC 74r48            [12] 1387 	mov	a,#___str_18
      0003AE C0 E0            [24] 1388 	push	acc
      0003B0 74s03            [12] 1389 	mov	a,#(___str_18 >> 8)
      0003B2 C0 E0            [24] 1390 	push	acc
      0003B4 74 80            [12] 1391 	mov	a,#0x80
      0003B6 C0 E0            [24] 1392 	push	acc
      0003B8 12r00r00         [24] 1393 	lcall	_printf
      0003BB 15 81            [12] 1394 	dec	sp
      0003BD 15 81            [12] 1395 	dec	sp
      0003BF 15 81            [12] 1396 	dec	sp
                                   1397 ;	program.c:378: EX0 = 1;
                                   1398 ;	assignBit
      0003C1 D2 A8            [12] 1399 	setb	_EX0
                                   1400 ;	program.c:379: CKRL = 0;
      0003C3 75 97 00         [24] 1401 	mov	_CKRL,#0x00
                                   1402 ;	program.c:380: main_menu();
                                   1403 ;	program.c:381: }
      0003C6 02r03rC9         [24] 1404 	ljmp	_main_menu
                                   1405 ;------------------------------------------------------------
                                   1406 ;Allocation info for local variables in function 'main_menu'
                                   1407 ;------------------------------------------------------------
                                   1408 ;inp                       Allocated with name '_main_menu_inp_65537_78'
                                   1409 ;------------------------------------------------------------
                                   1410 ;	program.c:388: void main_menu()
                                   1411 ;	-----------------------------------------
                                   1412 ;	 function main_menu
                                   1413 ;	-----------------------------------------
      0003C9                       1414 _main_menu:
                                   1415 ;	program.c:390: printf("\n\n\r^^^^^^^^^^^^^^^^^^^-MENU-^^^^^^^^^^^^^^^^^^^^^^^^^^ \n\n\r");
      0003C9 74r71            [12] 1416 	mov	a,#___str_19
      0003CB C0 E0            [24] 1417 	push	acc
      0003CD 74s03            [12] 1418 	mov	a,#(___str_19 >> 8)
      0003CF C0 E0            [24] 1419 	push	acc
      0003D1 74 80            [12] 1420 	mov	a,#0x80
      0003D3 C0 E0            [24] 1421 	push	acc
      0003D5 12r00r00         [24] 1422 	lcall	_printf
      0003D8 15 81            [12] 1423 	dec	sp
      0003DA 15 81            [12] 1424 	dec	sp
      0003DC 15 81            [12] 1425 	dec	sp
                                   1426 ;	program.c:391: printf("'H' -> Enter Heap Demo Mode \n\r");
      0003DE 74rAC            [12] 1427 	mov	a,#___str_20
      0003E0 C0 E0            [24] 1428 	push	acc
      0003E2 74s03            [12] 1429 	mov	a,#(___str_20 >> 8)
      0003E4 C0 E0            [24] 1430 	push	acc
      0003E6 74 80            [12] 1431 	mov	a,#0x80
      0003E8 C0 E0            [24] 1432 	push	acc
      0003EA 12r00r00         [24] 1433 	lcall	_printf
      0003ED 15 81            [12] 1434 	dec	sp
      0003EF 15 81            [12] 1435 	dec	sp
      0003F1 15 81            [12] 1436 	dec	sp
                                   1437 ;	program.c:392: printf("'P' -> Enter PCA Demo Mode \n\r");
      0003F3 74rCB            [12] 1438 	mov	a,#___str_21
      0003F5 C0 E0            [24] 1439 	push	acc
      0003F7 74s03            [12] 1440 	mov	a,#(___str_21 >> 8)
      0003F9 C0 E0            [24] 1441 	push	acc
      0003FB 74 80            [12] 1442 	mov	a,#0x80
      0003FD C0 E0            [24] 1443 	push	acc
      0003FF 12r00r00         [24] 1444 	lcall	_printf
      000402 15 81            [12] 1445 	dec	sp
      000404 15 81            [12] 1446 	dec	sp
      000406 15 81            [12] 1447 	dec	sp
                                   1448 ;	program.c:393: printf("'A' -> Assembly C Mix \n\r");
      000408 74rE9            [12] 1449 	mov	a,#___str_22
      00040A C0 E0            [24] 1450 	push	acc
      00040C 74s03            [12] 1451 	mov	a,#(___str_22 >> 8)
      00040E C0 E0            [24] 1452 	push	acc
      000410 74 80            [12] 1453 	mov	a,#0x80
      000412 C0 E0            [24] 1454 	push	acc
      000414 12r00r00         [24] 1455 	lcall	_printf
      000417 15 81            [12] 1456 	dec	sp
      000419 15 81            [12] 1457 	dec	sp
      00041B 15 81            [12] 1458 	dec	sp
                                   1459 ;	program.c:394: printf("'E' -> EEPROM Mode \n\r");
      00041D 74r02            [12] 1460 	mov	a,#___str_23
      00041F C0 E0            [24] 1461 	push	acc
      000421 74s04            [12] 1462 	mov	a,#(___str_23 >> 8)
      000423 C0 E0            [24] 1463 	push	acc
      000425 74 80            [12] 1464 	mov	a,#0x80
      000427 C0 E0            [24] 1465 	push	acc
      000429 12r00r00         [24] 1466 	lcall	_printf
      00042C 15 81            [12] 1467 	dec	sp
      00042E 15 81            [12] 1468 	dec	sp
      000430 15 81            [12] 1469 	dec	sp
                                   1470 ;	program.c:397: wrong_choice:
      000432                       1471 00101$:
                                   1472 ;	program.c:398: printf("Please make a valid choice \n\r");
      000432 74r1B            [12] 1473 	mov	a,#___str_1
      000434 C0 E0            [24] 1474 	push	acc
      000436 74s00            [12] 1475 	mov	a,#(___str_1 >> 8)
      000438 C0 E0            [24] 1476 	push	acc
      00043A 74 80            [12] 1477 	mov	a,#0x80
      00043C C0 E0            [24] 1478 	push	acc
      00043E 12r00r00         [24] 1479 	lcall	_printf
      000441 15 81            [12] 1480 	dec	sp
      000443 15 81            [12] 1481 	dec	sp
      000445 15 81            [12] 1482 	dec	sp
                                   1483 ;	program.c:399: inp = getchar();
      000447 12r14r33         [24] 1484 	lcall	_getchar
      00044A AE 82            [24] 1485 	mov	r6,dpl
      00044C AF 83            [24] 1486 	mov	r7,dph
                                   1487 ;	program.c:400: if (inp == 0x48)
      00044E BE 48 06         [24] 1488 	cjne	r6,#0x48,00112$
      000451 BF 00 03         [24] 1489 	cjne	r7,#0x00,00112$
                                   1490 ;	program.c:401: user_interface_heap();
      000454 02r00r03         [24] 1491 	ljmp	_user_interface_heap
      000457                       1492 00112$:
                                   1493 ;	program.c:402: else if (inp == 0x50)
      000457 BE 50 06         [24] 1494 	cjne	r6,#0x50,00109$
      00045A BF 00 03         [24] 1495 	cjne	r7,#0x00,00109$
                                   1496 ;	program.c:403: user_interface_PCA();
      00045D 02r00r12         [24] 1497 	ljmp	_user_interface_PCA
      000460                       1498 00109$:
                                   1499 ;	program.c:404: else if (inp == 0x41)
      000460 BE 41 06         [24] 1500 	cjne	r6,#0x41,00106$
      000463 BF 00 03         [24] 1501 	cjne	r7,#0x00,00106$
                                   1502 ;	program.c:405: asm_clang();
      000466 02r04rEE         [24] 1503 	ljmp	_asm_clang
      000469                       1504 00106$:
                                   1505 ;	program.c:406: else if (inp == 0x45)
      000469 BE 45 C6         [24] 1506 	cjne	r6,#0x45,00101$
      00046C BF 00 C3         [24] 1507 	cjne	r7,#0x00,00101$
                                   1508 ;	program.c:407: i2c_testasm();
                                   1509 ;	program.c:409: goto wrong_choice;
                                   1510 ;	program.c:410: }
      00046F 02r04r72         [24] 1511 	ljmp	_i2c_testasm
                                   1512 ;------------------------------------------------------------
                                   1513 ;Allocation info for local variables in function 'i2c_testasm'
                                   1514 ;------------------------------------------------------------
                                   1515 ;i                         Allocated with name '_i2c_testasm_i_131072_80'
                                   1516 ;j                         Allocated with name '_i2c_testasm_j_262144_82'
                                   1517 ;r                         Allocated with name '_i2c_testasm_r_65537_84'
                                   1518 ;------------------------------------------------------------
                                   1519 ;	program.c:412: void i2c_testasm(){
                                   1520 ;	-----------------------------------------
                                   1521 ;	 function i2c_testasm
                                   1522 ;	-----------------------------------------
      000472                       1523 _i2c_testasm:
                                   1524 ;	program.c:413: i2c_init();
      000472 12r00r00         [24] 1525 	lcall	_i2c_init
                                   1526 ;	program.c:414: i2c_write_init(0);
      000475 75 82 00         [24] 1527 	mov	dpl,#0x00
      000478 12r00r00         [24] 1528 	lcall	_i2c_write_init
                                   1529 ;	program.c:415: i2c_addr(0x44);
      00047B 75 82 44         [24] 1530 	mov	dpl,#0x44
      00047E 12r00r00         [24] 1531 	lcall	_i2c_addr
                                   1532 ;	program.c:416: i2c_write_val(0x77);
      000481 75 82 77         [24] 1533 	mov	dpl,#0x77
      000484 12r00r00         [24] 1534 	lcall	_i2c_write_val
                                   1535 ;	program.c:417: i2c_stop();
      000487 12r00r00         [24] 1536 	lcall	_i2c_stop
                                   1537 ;	program.c:418: for(int i = 0; i<5000; i++){
      00048A 7E 00            [12] 1538 	mov	r6,#0x00
      00048C 7F 00            [12] 1539 	mov	r7,#0x00
      00048E                       1540 00110$:
      00048E C3               [12] 1541 	clr	c
      00048F EE               [12] 1542 	mov	a,r6
      000490 94 88            [12] 1543 	subb	a,#0x88
      000492 EF               [12] 1544 	mov	a,r7
      000493 64 80            [12] 1545 	xrl	a,#0x80
      000495 94 93            [12] 1546 	subb	a,#0x93
      000497 50 1D            [24] 1547 	jnc	00102$
                                   1548 ;	program.c:419: for(int j=0; j<500;j++){
      000499 7C 00            [12] 1549 	mov	r4,#0x00
      00049B 7D 00            [12] 1550 	mov	r5,#0x00
      00049D                       1551 00107$:
      00049D C3               [12] 1552 	clr	c
      00049E EC               [12] 1553 	mov	a,r4
      00049F 94 F4            [12] 1554 	subb	a,#0xf4
      0004A1 ED               [12] 1555 	mov	a,r5
      0004A2 64 80            [12] 1556 	xrl	a,#0x80
      0004A4 94 81            [12] 1557 	subb	a,#0x81
      0004A6 50 07            [24] 1558 	jnc	00111$
      0004A8 0C               [12] 1559 	inc	r4
      0004A9 BC 00 F1         [24] 1560 	cjne	r4,#0x00,00107$
      0004AC 0D               [12] 1561 	inc	r5
      0004AD 80 EE            [24] 1562 	sjmp	00107$
      0004AF                       1563 00111$:
                                   1564 ;	program.c:418: for(int i = 0; i<5000; i++){
      0004AF 0E               [12] 1565 	inc	r6
      0004B0 BE 00 DB         [24] 1566 	cjne	r6,#0x00,00110$
      0004B3 0F               [12] 1567 	inc	r7
      0004B4 80 D8            [24] 1568 	sjmp	00110$
      0004B6                       1569 00102$:
                                   1570 ;	program.c:424: int r = getchar();    
      0004B6 12r14r33         [24] 1571 	lcall	_getchar
                                   1572 ;	program.c:426: i2c_init();
      0004B9 12r00r00         [24] 1573 	lcall	_i2c_init
                                   1574 ;	program.c:427: i2c_write_init(0);
      0004BC 75 82 00         [24] 1575 	mov	dpl,#0x00
      0004BF 12r00r00         [24] 1576 	lcall	_i2c_write_init
                                   1577 ;	program.c:428: i2c_addr(0x44);
      0004C2 75 82 44         [24] 1578 	mov	dpl,#0x44
      0004C5 12r00r00         [24] 1579 	lcall	_i2c_addr
                                   1580 ;	program.c:429: i2c_init();
      0004C8 12r00r00         [24] 1581 	lcall	_i2c_init
                                   1582 ;	program.c:430: i2c_read_init(0);
      0004CB 75 82 00         [24] 1583 	mov	dpl,#0x00
      0004CE 12r00r00         [24] 1584 	lcall	_i2c_read_init
                                   1585 ;	program.c:431: i2c_read_val();
      0004D1 12r00r00         [24] 1586 	lcall	_i2c_read_val
                                   1587 ;	program.c:432: i2c_stop();
      0004D4 12r00r00         [24] 1588 	lcall	_i2c_stop
                                   1589 ;	program.c:433: printf("Maybe byte has been written \n\r");
      0004D7 74r18            [12] 1590 	mov	a,#___str_24
      0004D9 C0 E0            [24] 1591 	push	acc
      0004DB 74s04            [12] 1592 	mov	a,#(___str_24 >> 8)
      0004DD C0 E0            [24] 1593 	push	acc
      0004DF 74 80            [12] 1594 	mov	a,#0x80
      0004E1 C0 E0            [24] 1595 	push	acc
      0004E3 12r00r00         [24] 1596 	lcall	_printf
      0004E6 15 81            [12] 1597 	dec	sp
      0004E8 15 81            [12] 1598 	dec	sp
      0004EA 15 81            [12] 1599 	dec	sp
                                   1600 ;	program.c:434: while(1){
      0004EC                       1601 00104$:
                                   1602 ;	program.c:438: }
      0004EC 80 FE            [24] 1603 	sjmp	00104$
                                   1604 ;------------------------------------------------------------
                                   1605 ;Allocation info for local variables in function 'asm_clang'
                                   1606 ;------------------------------------------------------------
                                   1607 ;num1                      Allocated with name '_asm_clang_num1_65537_87'
                                   1608 ;num2                      Allocated with name '_asm_clang_num2_65538_88'
                                   1609 ;num3                      Allocated with name '_asm_clang_num3_65539_89'
                                   1610 ;------------------------------------------------------------
                                   1611 ;	program.c:445: void asm_clang()
                                   1612 ;	-----------------------------------------
                                   1613 ;	 function asm_clang
                                   1614 ;	-----------------------------------------
      0004EE                       1615 _asm_clang:
                                   1616 ;	program.c:447: printf("\n\r Give param 1, 8bit \n\r");
      0004EE 74r37            [12] 1617 	mov	a,#___str_25
      0004F0 C0 E0            [24] 1618 	push	acc
      0004F2 74s04            [12] 1619 	mov	a,#(___str_25 >> 8)
      0004F4 C0 E0            [24] 1620 	push	acc
      0004F6 74 80            [12] 1621 	mov	a,#0x80
      0004F8 C0 E0            [24] 1622 	push	acc
      0004FA 12r00r00         [24] 1623 	lcall	_printf
      0004FD 15 81            [12] 1624 	dec	sp
      0004FF 15 81            [12] 1625 	dec	sp
      000501 15 81            [12] 1626 	dec	sp
                                   1627 ;	program.c:448: unsigned char num1 = get_number(3);
      000503 90 00 03         [24] 1628 	mov	dptr,#0x0003
      000506 12r12rBF         [24] 1629 	lcall	_get_number
      000509 AE 82            [24] 1630 	mov	r6,dpl
                                   1631 ;	program.c:449: printf("\n\r Give param 2, 8bit \n\r");
      00050B C0 06            [24] 1632 	push	ar6
      00050D 74r50            [12] 1633 	mov	a,#___str_26
      00050F C0 E0            [24] 1634 	push	acc
      000511 74s04            [12] 1635 	mov	a,#(___str_26 >> 8)
      000513 C0 E0            [24] 1636 	push	acc
      000515 74 80            [12] 1637 	mov	a,#0x80
      000517 C0 E0            [24] 1638 	push	acc
      000519 12r00r00         [24] 1639 	lcall	_printf
      00051C 15 81            [12] 1640 	dec	sp
      00051E 15 81            [12] 1641 	dec	sp
      000520 15 81            [12] 1642 	dec	sp
                                   1643 ;	program.c:450: unsigned char num2 = get_number(3);
      000522 90 00 03         [24] 1644 	mov	dptr,#0x0003
      000525 12r12rBF         [24] 1645 	lcall	_get_number
      000528 AD 82            [24] 1646 	mov	r5,dpl
                                   1647 ;	program.c:451: printf("\n\r Give param 3, 8bit \n\r");
      00052A C0 05            [24] 1648 	push	ar5
      00052C 74r69            [12] 1649 	mov	a,#___str_27
      00052E C0 E0            [24] 1650 	push	acc
      000530 74s04            [12] 1651 	mov	a,#(___str_27 >> 8)
      000532 C0 E0            [24] 1652 	push	acc
      000534 74 80            [12] 1653 	mov	a,#0x80
      000536 C0 E0            [24] 1654 	push	acc
      000538 12r00r00         [24] 1655 	lcall	_printf
      00053B 15 81            [12] 1656 	dec	sp
      00053D 15 81            [12] 1657 	dec	sp
      00053F 15 81            [12] 1658 	dec	sp
                                   1659 ;	program.c:452: unsigned char num3 = get_number(3);
      000541 90 00 03         [24] 1660 	mov	dptr,#0x0003
      000544 12r12rBF         [24] 1661 	lcall	_get_number
      000547 AC 82            [24] 1662 	mov	r4,dpl
      000549 D0 05            [24] 1663 	pop	ar5
      00054B D0 06            [24] 1664 	pop	ar6
                                   1665 ;	program.c:454: printf("\n\r RESULT-> param3<Mod>param2 * param1 = %d \n\r", asmtest(num1, num2, num3));
      00054D 90r00r00         [24] 1666 	mov	dptr,#_asmtest_PARM_2
      000550 ED               [12] 1667 	mov	a,r5
      000551 F0               [24] 1668 	movx	@dptr,a
      000552 90r00r00         [24] 1669 	mov	dptr,#_asmtest_PARM_3
      000555 EC               [12] 1670 	mov	a,r4
      000556 F0               [24] 1671 	movx	@dptr,a
      000557 8E 82            [24] 1672 	mov	dpl,r6
      000559 12r00r00         [24] 1673 	lcall	_asmtest
      00055C AF 82            [24] 1674 	mov	r7,dpl
      00055E 7E 00            [12] 1675 	mov	r6,#0x00
      000560 C0 07            [24] 1676 	push	ar7
      000562 C0 06            [24] 1677 	push	ar6
      000564 74r82            [12] 1678 	mov	a,#___str_28
      000566 C0 E0            [24] 1679 	push	acc
      000568 74s04            [12] 1680 	mov	a,#(___str_28 >> 8)
      00056A C0 E0            [24] 1681 	push	acc
      00056C 74 80            [12] 1682 	mov	a,#0x80
      00056E C0 E0            [24] 1683 	push	acc
      000570 12r00r00         [24] 1684 	lcall	_printf
      000573 E5 81            [12] 1685 	mov	a,sp
      000575 24 FB            [12] 1686 	add	a,#0xfb
      000577 F5 81            [12] 1687 	mov	sp,a
                                   1688 ;	program.c:455: printf("\n\r Going back to main menu.. \n\r");
      000579 74rB1            [12] 1689 	mov	a,#___str_29
      00057B C0 E0            [24] 1690 	push	acc
      00057D 74s04            [12] 1691 	mov	a,#(___str_29 >> 8)
      00057F C0 E0            [24] 1692 	push	acc
      000581 74 80            [12] 1693 	mov	a,#0x80
      000583 C0 E0            [24] 1694 	push	acc
      000585 12r00r00         [24] 1695 	lcall	_printf
      000588 15 81            [12] 1696 	dec	sp
      00058A 15 81            [12] 1697 	dec	sp
      00058C 15 81            [12] 1698 	dec	sp
                                   1699 ;	program.c:456: main_menu();
                                   1700 ;	program.c:457: }
      00058E 02r03rC9         [24] 1701 	ljmp	_main_menu
                                   1702 ;------------------------------------------------------------
                                   1703 ;Allocation info for local variables in function 'at_clear_all_buffers'
                                   1704 ;------------------------------------------------------------
                                   1705 ;i                         Allocated with name '_at_clear_all_buffers_i_131072_91'
                                   1706 ;------------------------------------------------------------
                                   1707 ;	program.c:465: void at_clear_all_buffers()
                                   1708 ;	-----------------------------------------
                                   1709 ;	 function at_clear_all_buffers
                                   1710 ;	-----------------------------------------
      000591                       1711 _at_clear_all_buffers:
                                   1712 ;	program.c:467: DEBUGPORT(0x03);
      000591 75 82 03         [24] 1713 	mov	dpl,#0x03
      000594 12r14r6F         [24] 1714 	lcall	_dataout
                                   1715 ;	program.c:468: for (int i = 0; i < program_stats.total_buffers; i++)
      000597 7E 00            [12] 1716 	mov	r6,#0x00
      000599 7F 00            [12] 1717 	mov	r7,#0x00
      00059B                       1718 00103$:
      00059B 90r00r08         [24] 1719 	mov	dptr,#(_program_stats + 0x0008)
      00059E E0               [24] 1720 	movx	a,@dptr
      00059F FC               [12] 1721 	mov	r4,a
      0005A0 A3               [24] 1722 	inc	dptr
      0005A1 E0               [24] 1723 	movx	a,@dptr
      0005A2 FD               [12] 1724 	mov	r5,a
      0005A3 C3               [12] 1725 	clr	c
      0005A4 EE               [12] 1726 	mov	a,r6
      0005A5 9C               [12] 1727 	subb	a,r4
      0005A6 EF               [12] 1728 	mov	a,r7
      0005A7 64 80            [12] 1729 	xrl	a,#0x80
      0005A9 8D F0            [24] 1730 	mov	b,r5
      0005AB 63 F0 80         [24] 1731 	xrl	b,#0x80
      0005AE 95 F0            [12] 1732 	subb	a,b
      0005B0 50 61            [24] 1733 	jnc	00101$
                                   1734 ;	program.c:470: free(buffers_array[i].buffer_start);
      0005B2 90r00r00         [24] 1735 	mov	dptr,#__mulint_PARM_2
      0005B5 EE               [12] 1736 	mov	a,r6
      0005B6 F0               [24] 1737 	movx	@dptr,a
      0005B7 EF               [12] 1738 	mov	a,r7
      0005B8 A3               [24] 1739 	inc	dptr
      0005B9 F0               [24] 1740 	movx	@dptr,a
      0005BA 90 00 0C         [24] 1741 	mov	dptr,#0x000c
      0005BD C0 07            [24] 1742 	push	ar7
      0005BF C0 06            [24] 1743 	push	ar6
      0005C1 12r00r00         [24] 1744 	lcall	__mulint
      0005C4 AC 82            [24] 1745 	mov	r4,dpl
      0005C6 AD 83            [24] 1746 	mov	r5,dph
      0005C8 EC               [12] 1747 	mov	a,r4
      0005C9 24r0A            [12] 1748 	add	a,#_buffers_array
      0005CB FC               [12] 1749 	mov	r4,a
      0005CC ED               [12] 1750 	mov	a,r5
      0005CD 34s00            [12] 1751 	addc	a,#(_buffers_array >> 8)
      0005CF FD               [12] 1752 	mov	r5,a
      0005D0 8C 82            [24] 1753 	mov	dpl,r4
      0005D2 8D 83            [24] 1754 	mov	dph,r5
      0005D4 A3               [24] 1755 	inc	dptr
      0005D5 A3               [24] 1756 	inc	dptr
      0005D6 E0               [24] 1757 	movx	a,@dptr
      0005D7 FB               [12] 1758 	mov	r3,a
      0005D8 A3               [24] 1759 	inc	dptr
      0005D9 E0               [24] 1760 	movx	a,@dptr
      0005DA FC               [12] 1761 	mov	r4,a
      0005DB A3               [24] 1762 	inc	dptr
      0005DC E0               [24] 1763 	movx	a,@dptr
      0005DD FD               [12] 1764 	mov	r5,a
      0005DE 8B 82            [24] 1765 	mov	dpl,r3
      0005E0 8C 83            [24] 1766 	mov	dph,r4
      0005E2 8D F0            [24] 1767 	mov	b,r5
      0005E4 12r00r00         [24] 1768 	lcall	_free
      0005E7 D0 06            [24] 1769 	pop	ar6
      0005E9 D0 07            [24] 1770 	pop	ar7
                                   1771 ;	program.c:471: printf("Buffer %d Freed ....\n\r", i);
      0005EB C0 07            [24] 1772 	push	ar7
      0005ED C0 06            [24] 1773 	push	ar6
      0005EF C0 06            [24] 1774 	push	ar6
      0005F1 C0 07            [24] 1775 	push	ar7
      0005F3 74rD1            [12] 1776 	mov	a,#___str_30
      0005F5 C0 E0            [24] 1777 	push	acc
      0005F7 74s04            [12] 1778 	mov	a,#(___str_30 >> 8)
      0005F9 C0 E0            [24] 1779 	push	acc
      0005FB 74 80            [12] 1780 	mov	a,#0x80
      0005FD C0 E0            [24] 1781 	push	acc
      0005FF 12r00r00         [24] 1782 	lcall	_printf
      000602 E5 81            [12] 1783 	mov	a,sp
      000604 24 FB            [12] 1784 	add	a,#0xfb
      000606 F5 81            [12] 1785 	mov	sp,a
      000608 D0 06            [24] 1786 	pop	ar6
      00060A D0 07            [24] 1787 	pop	ar7
                                   1788 ;	program.c:468: for (int i = 0; i < program_stats.total_buffers; i++)
      00060C 0E               [12] 1789 	inc	r6
      00060D BE 00 8B         [24] 1790 	cjne	r6,#0x00,00103$
      000610 0F               [12] 1791 	inc	r7
      000611 80 88            [24] 1792 	sjmp	00103$
      000613                       1793 00101$:
                                   1794 ;	program.c:473: printf("Let's begin again..\n\r");
      000613 74rE8            [12] 1795 	mov	a,#___str_31
      000615 C0 E0            [24] 1796 	push	acc
      000617 74s04            [12] 1797 	mov	a,#(___str_31 >> 8)
      000619 C0 E0            [24] 1798 	push	acc
      00061B 74 80            [12] 1799 	mov	a,#0x80
      00061D C0 E0            [24] 1800 	push	acc
      00061F 12r00r00         [24] 1801 	lcall	_printf
      000622 15 81            [12] 1802 	dec	sp
      000624 15 81            [12] 1803 	dec	sp
      000626 15 81            [12] 1804 	dec	sp
                                   1805 ;	program.c:474: user_interface_heap();
                                   1806 ;	program.c:475: }
      000628 02r00r03         [24] 1807 	ljmp	_user_interface_heap
                                   1808 ;------------------------------------------------------------
                                   1809 ;Allocation info for local variables in function 'delete_buffer'
                                   1810 ;------------------------------------------------------------
                                   1811 ;sloc0                     Allocated with name '_delete_buffer_sloc0_1_0'
                                   1812 ;sloc1                     Allocated with name '_delete_buffer_sloc1_1_0'
                                   1813 ;sloc2                     Allocated with name '_delete_buffer_sloc2_1_0'
                                   1814 ;buff_number               Allocated with name '_delete_buffer_buff_number_65537_94'
                                   1815 ;buff_to_free              Allocated with name '_delete_buffer_buff_to_free_65537_94'
                                   1816 ;buffer_freed_size         Allocated with name '_delete_buffer_buffer_freed_size_65537_94'
                                   1817 ;i                         Allocated with name '_delete_buffer_i_196609_96'
                                   1818 ;------------------------------------------------------------
                                   1819 ;	program.c:482: int delete_buffer()
                                   1820 ;	-----------------------------------------
                                   1821 ;	 function delete_buffer
                                   1822 ;	-----------------------------------------
      00062B                       1823 _delete_buffer:
                                   1824 ;	program.c:484: DEBUGPORT(0x04);
      00062B 75 82 04         [24] 1825 	mov	dpl,#0x04
      00062E 12r14r6F         [24] 1826 	lcall	_dataout
                                   1827 ;	program.c:488: get_del_num:
      000631                       1828 00101$:
                                   1829 ;	program.c:489: printf("\n\rGive Valid Buffer Number to delete(1-%d) in 3 digits\n\r", (program_stats.total_buffers - 1));
      000631 90r00r08         [24] 1830 	mov	dptr,#(_program_stats + 0x0008)
      000634 E0               [24] 1831 	movx	a,@dptr
      000635 FE               [12] 1832 	mov	r6,a
      000636 A3               [24] 1833 	inc	dptr
      000637 E0               [24] 1834 	movx	a,@dptr
      000638 FF               [12] 1835 	mov	r7,a
      000639 1E               [12] 1836 	dec	r6
      00063A BE FF 01         [24] 1837 	cjne	r6,#0xff,00139$
      00063D 1F               [12] 1838 	dec	r7
      00063E                       1839 00139$:
      00063E C0 06            [24] 1840 	push	ar6
      000640 C0 07            [24] 1841 	push	ar7
      000642 74rFE            [12] 1842 	mov	a,#___str_32
      000644 C0 E0            [24] 1843 	push	acc
      000646 74s04            [12] 1844 	mov	a,#(___str_32 >> 8)
      000648 C0 E0            [24] 1845 	push	acc
      00064A 74 80            [12] 1846 	mov	a,#0x80
      00064C C0 E0            [24] 1847 	push	acc
      00064E 12r00r00         [24] 1848 	lcall	_printf
      000651 E5 81            [12] 1849 	mov	a,sp
      000653 24 FB            [12] 1850 	add	a,#0xfb
      000655 F5 81            [12] 1851 	mov	sp,a
                                   1852 ;	program.c:490: buff_number = get_number(3);
      000657 90 00 03         [24] 1853 	mov	dptr,#0x0003
      00065A 12r12rBF         [24] 1854 	lcall	_get_number
      00065D AE 82            [24] 1855 	mov	r6,dpl
      00065F AF 83            [24] 1856 	mov	r7,dph
                                   1857 ;	program.c:492: if (buff_number > 0 && buff_number < program_stats.total_buffers)
      000661 C3               [12] 1858 	clr	c
      000662 E4               [12] 1859 	clr	a
      000663 9E               [12] 1860 	subb	a,r6
      000664 74 80            [12] 1861 	mov	a,#(0x00 ^ 0x80)
      000666 8F F0            [24] 1862 	mov	b,r7
      000668 63 F0 80         [24] 1863 	xrl	b,#0x80
      00066B 95 F0            [12] 1864 	subb	a,b
      00066D 50 C2            [24] 1865 	jnc	00101$
      00066F 90r00r08         [24] 1866 	mov	dptr,#(_program_stats + 0x0008)
      000672 E0               [24] 1867 	movx	a,@dptr
      000673 FC               [12] 1868 	mov	r4,a
      000674 A3               [24] 1869 	inc	dptr
      000675 E0               [24] 1870 	movx	a,@dptr
      000676 FD               [12] 1871 	mov	r5,a
      000677 C3               [12] 1872 	clr	c
      000678 EE               [12] 1873 	mov	a,r6
      000679 9C               [12] 1874 	subb	a,r4
      00067A EF               [12] 1875 	mov	a,r7
      00067B 64 80            [12] 1876 	xrl	a,#0x80
      00067D 8D F0            [24] 1877 	mov	b,r5
      00067F 63 F0 80         [24] 1878 	xrl	b,#0x80
      000682 95 F0            [12] 1879 	subb	a,b
      000684 50 AB            [24] 1880 	jnc	00101$
                                   1881 ;	program.c:496: buff_to_free = buffers_array[buff_number].buffer_start;
      000686 90r00r00         [24] 1882 	mov	dptr,#__mulint_PARM_2
      000689 EE               [12] 1883 	mov	a,r6
      00068A F0               [24] 1884 	movx	@dptr,a
      00068B EF               [12] 1885 	mov	a,r7
      00068C A3               [24] 1886 	inc	dptr
      00068D F0               [24] 1887 	movx	@dptr,a
      00068E 90 00 0C         [24] 1888 	mov	dptr,#0x000c
      000691 C0 07            [24] 1889 	push	ar7
      000693 C0 06            [24] 1890 	push	ar6
      000695 12r00r00         [24] 1891 	lcall	__mulint
      000698 AC 82            [24] 1892 	mov	r4,dpl
      00069A AD 83            [24] 1893 	mov	r5,dph
      00069C D0 06            [24] 1894 	pop	ar6
      00069E D0 07            [24] 1895 	pop	ar7
      0006A0 EC               [12] 1896 	mov	a,r4
      0006A1 24r0A            [12] 1897 	add	a,#_buffers_array
      0006A3 FC               [12] 1898 	mov	r4,a
      0006A4 ED               [12] 1899 	mov	a,r5
      0006A5 34s00            [12] 1900 	addc	a,#(_buffers_array >> 8)
      0006A7 FD               [12] 1901 	mov	r5,a
      0006A8 8C 82            [24] 1902 	mov	dpl,r4
      0006AA 8D 83            [24] 1903 	mov	dph,r5
      0006AC A3               [24] 1904 	inc	dptr
      0006AD A3               [24] 1905 	inc	dptr
      0006AE E0               [24] 1906 	movx	a,@dptr
      0006AF F5*04            [12] 1907 	mov	_delete_buffer_sloc2_1_0,a
      0006B1 A3               [24] 1908 	inc	dptr
      0006B2 E0               [24] 1909 	movx	a,@dptr
      0006B3 F5*05            [12] 1910 	mov	(_delete_buffer_sloc2_1_0 + 1),a
      0006B5 A3               [24] 1911 	inc	dptr
      0006B6 E0               [24] 1912 	movx	a,@dptr
      0006B7 F5*06            [12] 1913 	mov	(_delete_buffer_sloc2_1_0 + 2),a
                                   1914 ;	program.c:497: buffer_freed_size = buffers_array[buff_number].buff_size;
      0006B9 74 08            [12] 1915 	mov	a,#0x08
      0006BB 2C               [12] 1916 	add	a,r4
      0006BC F5 82            [12] 1917 	mov	dpl,a
      0006BE E4               [12] 1918 	clr	a
      0006BF 3D               [12] 1919 	addc	a,r5
      0006C0 F5 83            [12] 1920 	mov	dph,a
      0006C2 E0               [24] 1921 	movx	a,@dptr
      0006C3 FC               [12] 1922 	mov	r4,a
      0006C4 A3               [24] 1923 	inc	dptr
      0006C5 E0               [24] 1924 	movx	a,@dptr
      0006C6 FD               [12] 1925 	mov	r5,a
                                   1926 ;	program.c:499: for (int i = 0; i < (program_stats.total_buffers - 1); i++)
      0006C7 E4               [12] 1927 	clr	a
      0006C8 F5*00            [12] 1928 	mov	_delete_buffer_sloc0_1_0,a
      0006CA F5*01            [12] 1929 	mov	(_delete_buffer_sloc0_1_0 + 1),a
      0006CC                       1930 00110$:
      0006CC C0 04            [24] 1931 	push	ar4
      0006CE C0 05            [24] 1932 	push	ar5
      0006D0 90r00r08         [24] 1933 	mov	dptr,#(_program_stats + 0x0008)
      0006D3 E0               [24] 1934 	movx	a,@dptr
      0006D4 F5*02            [12] 1935 	mov	_delete_buffer_sloc1_1_0,a
      0006D6 A3               [24] 1936 	inc	dptr
      0006D7 E0               [24] 1937 	movx	a,@dptr
      0006D8 F5*03            [12] 1938 	mov	(_delete_buffer_sloc1_1_0 + 1),a
      0006DA E5*02            [12] 1939 	mov	a,_delete_buffer_sloc1_1_0
      0006DC 24 FF            [12] 1940 	add	a,#0xff
      0006DE F8               [12] 1941 	mov	r0,a
      0006DF E5*03            [12] 1942 	mov	a,(_delete_buffer_sloc1_1_0 + 1)
      0006E1 34 FF            [12] 1943 	addc	a,#0xff
      0006E3 FD               [12] 1944 	mov	r5,a
      0006E4 C3               [12] 1945 	clr	c
      0006E5 E5*00            [12] 1946 	mov	a,_delete_buffer_sloc0_1_0
      0006E7 98               [12] 1947 	subb	a,r0
      0006E8 E5*01            [12] 1948 	mov	a,(_delete_buffer_sloc0_1_0 + 1)
      0006EA 64 80            [12] 1949 	xrl	a,#0x80
      0006EC 8D F0            [24] 1950 	mov	b,r5
      0006EE 63 F0 80         [24] 1951 	xrl	b,#0x80
      0006F1 95 F0            [12] 1952 	subb	a,b
      0006F3 D0 05            [24] 1953 	pop	ar5
      0006F5 D0 04            [24] 1954 	pop	ar4
      0006F7 40 03            [24] 1955 	jc	00142$
      0006F9 02r07rAA         [24] 1956 	ljmp	00104$
      0006FC                       1957 00142$:
                                   1958 ;	program.c:501: if (i >= buff_number)
      0006FC C3               [12] 1959 	clr	c
      0006FD E5*00            [12] 1960 	mov	a,_delete_buffer_sloc0_1_0
      0006FF 9E               [12] 1961 	subb	a,r6
      000700 E5*01            [12] 1962 	mov	a,(_delete_buffer_sloc0_1_0 + 1)
      000702 64 80            [12] 1963 	xrl	a,#0x80
      000704 8F F0            [24] 1964 	mov	b,r7
      000706 63 F0 80         [24] 1965 	xrl	b,#0x80
      000709 95 F0            [12] 1966 	subb	a,b
      00070B 50 03            [24] 1967 	jnc	00143$
      00070D 02r07r9F         [24] 1968 	ljmp	00111$
      000710                       1969 00143$:
                                   1970 ;	program.c:503: buffers_array[i + 1].buffer_num = i;
      000710 C0 04            [24] 1971 	push	ar4
      000712 C0 05            [24] 1972 	push	ar5
      000714 90r00r00         [24] 1973 	mov	dptr,#__mulint_PARM_2
      000717 74 01            [12] 1974 	mov	a,#0x01
      000719 25*00            [12] 1975 	add	a,_delete_buffer_sloc0_1_0
      00071B F0               [24] 1976 	movx	@dptr,a
      00071C E4               [12] 1977 	clr	a
      00071D 35*01            [12] 1978 	addc	a,(_delete_buffer_sloc0_1_0 + 1)
      00071F A3               [24] 1979 	inc	dptr
      000720 F0               [24] 1980 	movx	@dptr,a
      000721 90 00 0C         [24] 1981 	mov	dptr,#0x000c
      000724 C0 07            [24] 1982 	push	ar7
      000726 C0 06            [24] 1983 	push	ar6
      000728 C0 04            [24] 1984 	push	ar4
      00072A 12r00r00         [24] 1985 	lcall	__mulint
      00072D A8 82            [24] 1986 	mov	r0,dpl
      00072F AD 83            [24] 1987 	mov	r5,dph
      000731 D0 04            [24] 1988 	pop	ar4
      000733 E8               [12] 1989 	mov	a,r0
      000734 24r0A            [12] 1990 	add	a,#_buffers_array
      000736 F5 82            [12] 1991 	mov	dpl,a
      000738 ED               [12] 1992 	mov	a,r5
      000739 34s00            [12] 1993 	addc	a,#(_buffers_array >> 8)
      00073B F5 83            [12] 1994 	mov	dph,a
      00073D E5*00            [12] 1995 	mov	a,_delete_buffer_sloc0_1_0
      00073F F0               [24] 1996 	movx	@dptr,a
      000740 E5*01            [12] 1997 	mov	a,(_delete_buffer_sloc0_1_0 + 1)
      000742 A3               [24] 1998 	inc	dptr
      000743 F0               [24] 1999 	movx	@dptr,a
                                   2000 ;	program.c:504: buffers_array[i] = buffers_array[i + 1];
      000744 90r00r00         [24] 2001 	mov	dptr,#__mulint_PARM_2
      000747 E5*00            [12] 2002 	mov	a,_delete_buffer_sloc0_1_0
      000749 F0               [24] 2003 	movx	@dptr,a
      00074A E5*01            [12] 2004 	mov	a,(_delete_buffer_sloc0_1_0 + 1)
      00074C A3               [24] 2005 	inc	dptr
      00074D F0               [24] 2006 	movx	@dptr,a
      00074E 90 00 0C         [24] 2007 	mov	dptr,#0x000c
      000751 C0 05            [24] 2008 	push	ar5
      000753 C0 00            [24] 2009 	push	ar0
      000755 12r00r00         [24] 2010 	lcall	__mulint
      000758 AB 82            [24] 2011 	mov	r3,dpl
      00075A AC 83            [24] 2012 	mov	r4,dph
      00075C D0 00            [24] 2013 	pop	ar0
      00075E D0 05            [24] 2014 	pop	ar5
      000760 EB               [12] 2015 	mov	a,r3
      000761 24r0A            [12] 2016 	add	a,#_buffers_array
      000763 FB               [12] 2017 	mov	r3,a
      000764 EC               [12] 2018 	mov	a,r4
      000765 34s00            [12] 2019 	addc	a,#(_buffers_array >> 8)
      000767 FC               [12] 2020 	mov	r4,a
      000768 7A 00            [12] 2021 	mov	r2,#0x00
      00076A E8               [12] 2022 	mov	a,r0
      00076B 24r0A            [12] 2023 	add	a,#_buffers_array
      00076D F8               [12] 2024 	mov	r0,a
      00076E ED               [12] 2025 	mov	a,r5
      00076F 34s00            [12] 2026 	addc	a,#(_buffers_array >> 8)
      000771 FD               [12] 2027 	mov	r5,a
      000772 90r00r00         [24] 2028 	mov	dptr,#___memcpy_PARM_2
      000775 E8               [12] 2029 	mov	a,r0
      000776 F0               [24] 2030 	movx	@dptr,a
      000777 ED               [12] 2031 	mov	a,r5
      000778 A3               [24] 2032 	inc	dptr
      000779 F0               [24] 2033 	movx	@dptr,a
      00077A E4               [12] 2034 	clr	a
      00077B A3               [24] 2035 	inc	dptr
      00077C F0               [24] 2036 	movx	@dptr,a
      00077D 90r00r00         [24] 2037 	mov	dptr,#___memcpy_PARM_3
      000780 74 0C            [12] 2038 	mov	a,#0x0c
      000782 F0               [24] 2039 	movx	@dptr,a
      000783 E4               [12] 2040 	clr	a
      000784 A3               [24] 2041 	inc	dptr
      000785 F0               [24] 2042 	movx	@dptr,a
      000786 8B 82            [24] 2043 	mov	dpl,r3
      000788 8C 83            [24] 2044 	mov	dph,r4
      00078A 8A F0            [24] 2045 	mov	b,r2
      00078C C0 05            [24] 2046 	push	ar5
      00078E C0 04            [24] 2047 	push	ar4
      000790 12r00r00         [24] 2048 	lcall	___memcpy
      000793 D0 04            [24] 2049 	pop	ar4
      000795 D0 05            [24] 2050 	pop	ar5
      000797 D0 06            [24] 2051 	pop	ar6
      000799 D0 07            [24] 2052 	pop	ar7
                                   2053 ;	program.c:517: goto get_del_num;
      00079B D0 05            [24] 2054 	pop	ar5
      00079D D0 04            [24] 2055 	pop	ar4
                                   2056 ;	program.c:504: buffers_array[i] = buffers_array[i + 1];
      00079F                       2057 00111$:
                                   2058 ;	program.c:499: for (int i = 0; i < (program_stats.total_buffers - 1); i++)
      00079F 05*00            [12] 2059 	inc	_delete_buffer_sloc0_1_0
      0007A1 E4               [12] 2060 	clr	a
      0007A2 B5*00 02         [24] 2061 	cjne	a,_delete_buffer_sloc0_1_0,00144$
      0007A5 05*01            [12] 2062 	inc	(_delete_buffer_sloc0_1_0 + 1)
      0007A7                       2063 00144$:
      0007A7 02r06rCC         [24] 2064 	ljmp	00110$
      0007AA                       2065 00104$:
                                   2066 ;	program.c:508: program_stats.total_buffers -= 1;
      0007AA E5*02            [12] 2067 	mov	a,_delete_buffer_sloc1_1_0
      0007AC 24 FF            [12] 2068 	add	a,#0xff
      0007AE FA               [12] 2069 	mov	r2,a
      0007AF E5*03            [12] 2070 	mov	a,(_delete_buffer_sloc1_1_0 + 1)
      0007B1 34 FF            [12] 2071 	addc	a,#0xff
      0007B3 FB               [12] 2072 	mov	r3,a
      0007B4 90r00r08         [24] 2073 	mov	dptr,#(_program_stats + 0x0008)
      0007B7 EA               [12] 2074 	mov	a,r2
      0007B8 F0               [24] 2075 	movx	@dptr,a
      0007B9 EB               [12] 2076 	mov	a,r3
      0007BA A3               [24] 2077 	inc	dptr
      0007BB F0               [24] 2078 	movx	@dptr,a
                                   2079 ;	program.c:509: program_stats.allocated_heap -= buffer_freed_size;
      0007BC 90r00r02         [24] 2080 	mov	dptr,#(_program_stats + 0x0002)
      0007BF E0               [24] 2081 	movx	a,@dptr
      0007C0 FA               [12] 2082 	mov	r2,a
      0007C1 A3               [24] 2083 	inc	dptr
      0007C2 E0               [24] 2084 	movx	a,@dptr
      0007C3 FB               [12] 2085 	mov	r3,a
      0007C4 EA               [12] 2086 	mov	a,r2
      0007C5 C3               [12] 2087 	clr	c
      0007C6 9C               [12] 2088 	subb	a,r4
      0007C7 FC               [12] 2089 	mov	r4,a
      0007C8 EB               [12] 2090 	mov	a,r3
      0007C9 9D               [12] 2091 	subb	a,r5
      0007CA FD               [12] 2092 	mov	r5,a
      0007CB 90r00r02         [24] 2093 	mov	dptr,#(_program_stats + 0x0002)
      0007CE EC               [12] 2094 	mov	a,r4
      0007CF F0               [24] 2095 	movx	@dptr,a
      0007D0 ED               [12] 2096 	mov	a,r5
      0007D1 A3               [24] 2097 	inc	dptr
      0007D2 F0               [24] 2098 	movx	@dptr,a
                                   2099 ;	program.c:511: free(buff_to_free);
      0007D3 AB*04            [24] 2100 	mov	r3,_delete_buffer_sloc2_1_0
      0007D5 AC*05            [24] 2101 	mov	r4,(_delete_buffer_sloc2_1_0 + 1)
      0007D7 AD*06            [24] 2102 	mov	r5,(_delete_buffer_sloc2_1_0 + 2)
      0007D9 8B 82            [24] 2103 	mov	dpl,r3
      0007DB 8C 83            [24] 2104 	mov	dph,r4
      0007DD 8D F0            [24] 2105 	mov	b,r5
      0007DF C0 07            [24] 2106 	push	ar7
      0007E1 C0 06            [24] 2107 	push	ar6
      0007E3 12r00r00         [24] 2108 	lcall	_free
      0007E6 D0 06            [24] 2109 	pop	ar6
      0007E8 D0 07            [24] 2110 	pop	ar7
                                   2111 ;	program.c:512: printf("Buffer %d Successfully Deleted.. \n\r", buff_number);
      0007EA C0 06            [24] 2112 	push	ar6
      0007EC C0 07            [24] 2113 	push	ar7
      0007EE 74r37            [12] 2114 	mov	a,#___str_33
      0007F0 C0 E0            [24] 2115 	push	acc
      0007F2 74s05            [12] 2116 	mov	a,#(___str_33 >> 8)
      0007F4 C0 E0            [24] 2117 	push	acc
      0007F6 74 80            [12] 2118 	mov	a,#0x80
      0007F8 C0 E0            [24] 2119 	push	acc
      0007FA 12r00r00         [24] 2120 	lcall	_printf
      0007FD E5 81            [12] 2121 	mov	a,sp
      0007FF 24 FB            [12] 2122 	add	a,#0xfb
      000801 F5 81            [12] 2123 	mov	sp,a
                                   2124 ;	program.c:513: return 0;
      000803 90 00 00         [24] 2125 	mov	dptr,#0x0000
                                   2126 ;	program.c:517: goto get_del_num;
                                   2127 ;	program.c:519: }
      000806 22               [24] 2128 	ret
                                   2129 ;------------------------------------------------------------
                                   2130 ;Allocation info for local variables in function 'print_pca_menu'
                                   2131 ;------------------------------------------------------------
                                   2132 ;	program.c:526: void print_pca_menu()
                                   2133 ;	-----------------------------------------
                                   2134 ;	 function print_pca_menu
                                   2135 ;	-----------------------------------------
      000807                       2136 _print_pca_menu:
                                   2137 ;	program.c:528: DEBUGPORT(0x55);
      000807 75 82 55         [24] 2138 	mov	dpl,#0x55
      00080A 12r14r6F         [24] 2139 	lcall	_dataout
                                   2140 ;	program.c:529: printf("\n\n\r^^^^^^^^^^^^^^^^^^^-PCA-MENU-^^^^^^^^^^^^^^^^^^^^^^^^^^ \n\n\r");
      00080D 74r5B            [12] 2141 	mov	a,#___str_34
      00080F C0 E0            [24] 2142 	push	acc
      000811 74s05            [12] 2143 	mov	a,#(___str_34 >> 8)
      000813 C0 E0            [24] 2144 	push	acc
      000815 74 80            [12] 2145 	mov	a,#0x80
      000817 C0 E0            [24] 2146 	push	acc
      000819 12r00r00         [24] 2147 	lcall	_printf
      00081C 15 81            [12] 2148 	dec	sp
      00081E 15 81            [12] 2149 	dec	sp
      000820 15 81            [12] 2150 	dec	sp
                                   2151 ;	program.c:530: printf("'F' -> Falling Edge Capture Mode\n\r");
      000822 74r9A            [12] 2152 	mov	a,#___str_35
      000824 C0 E0            [24] 2153 	push	acc
      000826 74s05            [12] 2154 	mov	a,#(___str_35 >> 8)
      000828 C0 E0            [24] 2155 	push	acc
      00082A 74 80            [12] 2156 	mov	a,#0x80
      00082C C0 E0            [24] 2157 	push	acc
      00082E 12r00r00         [24] 2158 	lcall	_printf
      000831 15 81            [12] 2159 	dec	sp
      000833 15 81            [12] 2160 	dec	sp
      000835 15 81            [12] 2161 	dec	sp
                                   2162 ;	program.c:531: printf("'S' -> Software Timer Mode\n\r");
      000837 74rBD            [12] 2163 	mov	a,#___str_36
      000839 C0 E0            [24] 2164 	push	acc
      00083B 74s05            [12] 2165 	mov	a,#(___str_36 >> 8)
      00083D C0 E0            [24] 2166 	push	acc
      00083F 74 80            [12] 2167 	mov	a,#0x80
      000841 C0 E0            [24] 2168 	push	acc
      000843 12r00r00         [24] 2169 	lcall	_printf
      000846 15 81            [12] 2170 	dec	sp
      000848 15 81            [12] 2171 	dec	sp
      00084A 15 81            [12] 2172 	dec	sp
                                   2173 ;	program.c:532: printf("'H' -> High Speed Output Mode\n\r");
      00084C 74rDA            [12] 2174 	mov	a,#___str_37
      00084E C0 E0            [24] 2175 	push	acc
      000850 74s05            [12] 2176 	mov	a,#(___str_37 >> 8)
      000852 C0 E0            [24] 2177 	push	acc
      000854 74 80            [12] 2178 	mov	a,#0x80
      000856 C0 E0            [24] 2179 	push	acc
      000858 12r00r00         [24] 2180 	lcall	_printf
      00085B 15 81            [12] 2181 	dec	sp
      00085D 15 81            [12] 2182 	dec	sp
      00085F 15 81            [12] 2183 	dec	sp
                                   2184 ;	program.c:533: printf("'P' -> PWM Mode \n\r");
      000861 74rFA            [12] 2185 	mov	a,#___str_38
      000863 C0 E0            [24] 2186 	push	acc
      000865 74s05            [12] 2187 	mov	a,#(___str_38 >> 8)
      000867 C0 E0            [24] 2188 	push	acc
      000869 74 80            [12] 2189 	mov	a,#0x80
      00086B C0 E0            [24] 2190 	push	acc
      00086D 12r00r00         [24] 2191 	lcall	_printf
      000870 15 81            [12] 2192 	dec	sp
      000872 15 81            [12] 2193 	dec	sp
      000874 15 81            [12] 2194 	dec	sp
                                   2195 ;	program.c:534: printf("'W' -> Watchdog Timer Mode\n\r");
      000876 74r0D            [12] 2196 	mov	a,#___str_39
      000878 C0 E0            [24] 2197 	push	acc
      00087A 74s06            [12] 2198 	mov	a,#(___str_39 >> 8)
      00087C C0 E0            [24] 2199 	push	acc
      00087E 74 80            [12] 2200 	mov	a,#0x80
      000880 C0 E0            [24] 2201 	push	acc
      000882 12r00r00         [24] 2202 	lcall	_printf
      000885 15 81            [12] 2203 	dec	sp
      000887 15 81            [12] 2204 	dec	sp
      000889 15 81            [12] 2205 	dec	sp
                                   2206 ;	program.c:535: printf("'I' -> Idle Mode with PWM\n\r");
      00088B 74r2A            [12] 2207 	mov	a,#___str_40
      00088D C0 E0            [24] 2208 	push	acc
      00088F 74s06            [12] 2209 	mov	a,#(___str_40 >> 8)
      000891 C0 E0            [24] 2210 	push	acc
      000893 74 80            [12] 2211 	mov	a,#0x80
      000895 C0 E0            [24] 2212 	push	acc
      000897 12r00r00         [24] 2213 	lcall	_printf
      00089A 15 81            [12] 2214 	dec	sp
      00089C 15 81            [12] 2215 	dec	sp
      00089E 15 81            [12] 2216 	dec	sp
                                   2217 ;	program.c:536: printf("'L' -> Change Prescalar to lowest frequency\n\r");
      0008A0 74r46            [12] 2218 	mov	a,#___str_41
      0008A2 C0 E0            [24] 2219 	push	acc
      0008A4 74s06            [12] 2220 	mov	a,#(___str_41 >> 8)
      0008A6 C0 E0            [24] 2221 	push	acc
      0008A8 74 80            [12] 2222 	mov	a,#0x80
      0008AA C0 E0            [24] 2223 	push	acc
      0008AC 12r00r00         [24] 2224 	lcall	_printf
      0008AF 15 81            [12] 2225 	dec	sp
      0008B1 15 81            [12] 2226 	dec	sp
      0008B3 15 81            [12] 2227 	dec	sp
                                   2228 ;	program.c:537: printf("'U' -> Hardware Watchdog Timer\n\r");
      0008B5 74r74            [12] 2229 	mov	a,#___str_42
      0008B7 C0 E0            [24] 2230 	push	acc
      0008B9 74s06            [12] 2231 	mov	a,#(___str_42 >> 8)
      0008BB C0 E0            [24] 2232 	push	acc
      0008BD 74 80            [12] 2233 	mov	a,#0x80
      0008BF C0 E0            [24] 2234 	push	acc
      0008C1 12r00r00         [24] 2235 	lcall	_printf
      0008C4 15 81            [12] 2236 	dec	sp
      0008C6 15 81            [12] 2237 	dec	sp
      0008C8 15 81            [12] 2238 	dec	sp
                                   2239 ;	program.c:538: printf("'D' -> Power Down Mode\n\n\r");
      0008CA 74r95            [12] 2240 	mov	a,#___str_43
      0008CC C0 E0            [24] 2241 	push	acc
      0008CE 74s06            [12] 2242 	mov	a,#(___str_43 >> 8)
      0008D0 C0 E0            [24] 2243 	push	acc
      0008D2 74 80            [12] 2244 	mov	a,#0x80
      0008D4 C0 E0            [24] 2245 	push	acc
      0008D6 12r00r00         [24] 2246 	lcall	_printf
      0008D9 15 81            [12] 2247 	dec	sp
      0008DB 15 81            [12] 2248 	dec	sp
      0008DD 15 81            [12] 2249 	dec	sp
                                   2250 ;	program.c:540: printf("'M' -> Go to Main Menu \n\n\r");
      0008DF 74rAF            [12] 2251 	mov	a,#___str_44
      0008E1 C0 E0            [24] 2252 	push	acc
      0008E3 74s06            [12] 2253 	mov	a,#(___str_44 >> 8)
      0008E5 C0 E0            [24] 2254 	push	acc
      0008E7 74 80            [12] 2255 	mov	a,#0x80
      0008E9 C0 E0            [24] 2256 	push	acc
      0008EB 12r00r00         [24] 2257 	lcall	_printf
      0008EE 15 81            [12] 2258 	dec	sp
      0008F0 15 81            [12] 2259 	dec	sp
      0008F2 15 81            [12] 2260 	dec	sp
                                   2261 ;	program.c:541: }
      0008F4 22               [24] 2262 	ret
                                   2263 ;------------------------------------------------------------
                                   2264 ;Allocation info for local variables in function 'print_heap_menu'
                                   2265 ;------------------------------------------------------------
                                   2266 ;	program.c:548: void print_heap_menu()
                                   2267 ;	-----------------------------------------
                                   2268 ;	 function print_heap_menu
                                   2269 ;	-----------------------------------------
      0008F5                       2270 _print_heap_menu:
                                   2271 ;	program.c:550: DEBUGPORT(0x05);
      0008F5 75 82 05         [24] 2272 	mov	dpl,#0x05
      0008F8 12r14r6F         [24] 2273 	lcall	_dataout
                                   2274 ;	program.c:551: printf("\n\n\r^^^^^^^^^^^^^^^^^^^-HEAP-MENU-^^^^^^^^^^^^^^^^^^^^^^^^^^ \n\n\r");
      0008FB 74rCA            [12] 2275 	mov	a,#___str_45
      0008FD C0 E0            [24] 2276 	push	acc
      0008FF 74s06            [12] 2277 	mov	a,#(___str_45 >> 8)
      000901 C0 E0            [24] 2278 	push	acc
      000903 74 80            [12] 2279 	mov	a,#0x80
      000905 C0 E0            [24] 2280 	push	acc
      000907 12r00r00         [24] 2281 	lcall	_printf
      00090A 15 81            [12] 2282 	dec	sp
      00090C 15 81            [12] 2283 	dec	sp
      00090E 15 81            [12] 2284 	dec	sp
                                   2285 ;	program.c:552: printf("You can enter characters or use commands from below \n\r");
      000910 74r0A            [12] 2286 	mov	a,#___str_46
      000912 C0 E0            [24] 2287 	push	acc
      000914 74s07            [12] 2288 	mov	a,#(___str_46 >> 8)
      000916 C0 E0            [24] 2289 	push	acc
      000918 74 80            [12] 2290 	mov	a,#0x80
      00091A C0 E0            [24] 2291 	push	acc
      00091C 12r00r00         [24] 2292 	lcall	_printf
      00091F 15 81            [12] 2293 	dec	sp
      000921 15 81            [12] 2294 	dec	sp
      000923 15 81            [12] 2295 	dec	sp
                                   2296 ;	program.c:553: printf("'?' -> Show heap status, dump & clear Buffer 0 \n\r");
      000925 74r41            [12] 2297 	mov	a,#___str_47
      000927 C0 E0            [24] 2298 	push	acc
      000929 74s07            [12] 2299 	mov	a,#(___str_47 >> 8)
      00092B C0 E0            [24] 2300 	push	acc
      00092D 74 80            [12] 2301 	mov	a,#0x80
      00092F C0 E0            [24] 2302 	push	acc
      000931 12r00r00         [24] 2303 	lcall	_printf
      000934 15 81            [12] 2304 	dec	sp
      000936 15 81            [12] 2305 	dec	sp
      000938 15 81            [12] 2306 	dec	sp
                                   2307 ;	program.c:554: printf("'+' -> Add a new Buffer\n\r");
      00093A 74r73            [12] 2308 	mov	a,#___str_48
      00093C C0 E0            [24] 2309 	push	acc
      00093E 74s07            [12] 2310 	mov	a,#(___str_48 >> 8)
      000940 C0 E0            [24] 2311 	push	acc
      000942 74 80            [12] 2312 	mov	a,#0x80
      000944 C0 E0            [24] 2313 	push	acc
      000946 12r00r00         [24] 2314 	lcall	_printf
      000949 15 81            [12] 2315 	dec	sp
      00094B 15 81            [12] 2316 	dec	sp
      00094D 15 81            [12] 2317 	dec	sp
                                   2318 ;	program.c:555: printf("'-' -> Delete existing Buffer\n\r");
      00094F 74r8D            [12] 2319 	mov	a,#___str_49
      000951 C0 E0            [24] 2320 	push	acc
      000953 74s07            [12] 2321 	mov	a,#(___str_49 >> 8)
      000955 C0 E0            [24] 2322 	push	acc
      000957 74 80            [12] 2323 	mov	a,#0x80
      000959 C0 E0            [24] 2324 	push	acc
      00095B 12r00r00         [24] 2325 	lcall	_printf
      00095E 15 81            [12] 2326 	dec	sp
      000960 15 81            [12] 2327 	dec	sp
      000962 15 81            [12] 2328 	dec	sp
                                   2329 ;	program.c:556: printf("'=' -> Dump Buffer 0 in hex\n\r");
      000964 74rAD            [12] 2330 	mov	a,#___str_50
      000966 C0 E0            [24] 2331 	push	acc
      000968 74s07            [12] 2332 	mov	a,#(___str_50 >> 8)
      00096A C0 E0            [24] 2333 	push	acc
      00096C 74 80            [12] 2334 	mov	a,#0x80
      00096E C0 E0            [24] 2335 	push	acc
      000970 12r00r00         [24] 2336 	lcall	_printf
      000973 15 81            [12] 2337 	dec	sp
      000975 15 81            [12] 2338 	dec	sp
      000977 15 81            [12] 2339 	dec	sp
                                   2340 ;	program.c:557: printf("'@' -> Free all Heap & begin again\n\n\r");
      000979 74rCB            [12] 2341 	mov	a,#___str_51
      00097B C0 E0            [24] 2342 	push	acc
      00097D 74s07            [12] 2343 	mov	a,#(___str_51 >> 8)
      00097F C0 E0            [24] 2344 	push	acc
      000981 74 80            [12] 2345 	mov	a,#0x80
      000983 C0 E0            [24] 2346 	push	acc
      000985 12r00r00         [24] 2347 	lcall	_printf
      000988 15 81            [12] 2348 	dec	sp
      00098A 15 81            [12] 2349 	dec	sp
      00098C 15 81            [12] 2350 	dec	sp
                                   2351 ;	program.c:558: printf("'M' -> Go to Main Menu \n\n\r");
      00098E 74rAF            [12] 2352 	mov	a,#___str_44
      000990 C0 E0            [24] 2353 	push	acc
      000992 74s06            [12] 2354 	mov	a,#(___str_44 >> 8)
      000994 C0 E0            [24] 2355 	push	acc
      000996 74 80            [12] 2356 	mov	a,#0x80
      000998 C0 E0            [24] 2357 	push	acc
      00099A 12r00r00         [24] 2358 	lcall	_printf
      00099D 15 81            [12] 2359 	dec	sp
      00099F 15 81            [12] 2360 	dec	sp
      0009A1 15 81            [12] 2361 	dec	sp
                                   2362 ;	program.c:559: }
      0009A3 22               [24] 2363 	ret
                                   2364 ;------------------------------------------------------------
                                   2365 ;Allocation info for local variables in function 'create_new_buffer'
                                   2366 ;------------------------------------------------------------
                                   2367 ;buff_size                 Allocated with name '_create_new_buffer_buff_size_65537_103'
                                   2368 ;buff                      Allocated with name '_create_new_buffer_buff_65537_103'
                                   2369 ;------------------------------------------------------------
                                   2370 ;	program.c:567: int create_new_buffer()
                                   2371 ;	-----------------------------------------
                                   2372 ;	 function create_new_buffer
                                   2373 ;	-----------------------------------------
      0009A4                       2374 _create_new_buffer:
                                   2375 ;	program.c:569: DEBUGPORT(0x06);
      0009A4 75 82 06         [24] 2376 	mov	dpl,#0x06
      0009A7 12r14r6F         [24] 2377 	lcall	_dataout
                                   2378 ;	program.c:572: if (program_stats.allocated_heap == program_stats.total_heap_size)
      0009AA 90r00r02         [24] 2379 	mov	dptr,#(_program_stats + 0x0002)
      0009AD E0               [24] 2380 	movx	a,@dptr
      0009AE FE               [12] 2381 	mov	r6,a
      0009AF A3               [24] 2382 	inc	dptr
      0009B0 E0               [24] 2383 	movx	a,@dptr
      0009B1 FF               [12] 2384 	mov	r7,a
      0009B2 90r00r00         [24] 2385 	mov	dptr,#_program_stats
      0009B5 E0               [24] 2386 	movx	a,@dptr
      0009B6 FC               [12] 2387 	mov	r4,a
      0009B7 A3               [24] 2388 	inc	dptr
      0009B8 E0               [24] 2389 	movx	a,@dptr
      0009B9 FD               [12] 2390 	mov	r5,a
      0009BA EE               [12] 2391 	mov	a,r6
      0009BB B5 04 07         [24] 2392 	cjne	a,ar4,00133$
      0009BE EF               [12] 2393 	mov	a,r7
      0009BF B5 05 03         [24] 2394 	cjne	a,ar5,00133$
      0009C2 02r0Br05         [24] 2395 	ljmp	00111$
      0009C5                       2396 00133$:
                                   2397 ;	program.c:575: get_new_buff:
      0009C5                       2398 00103$:
                                   2399 ;	program.c:576: printf("\n\rGive Valid Buffer Size(030-300):");
      0009C5 74rF1            [12] 2400 	mov	a,#___str_52
      0009C7 C0 E0            [24] 2401 	push	acc
      0009C9 74s07            [12] 2402 	mov	a,#(___str_52 >> 8)
      0009CB C0 E0            [24] 2403 	push	acc
      0009CD 74 80            [12] 2404 	mov	a,#0x80
      0009CF C0 E0            [24] 2405 	push	acc
      0009D1 12r00r00         [24] 2406 	lcall	_printf
      0009D4 15 81            [12] 2407 	dec	sp
      0009D6 15 81            [12] 2408 	dec	sp
      0009D8 15 81            [12] 2409 	dec	sp
                                   2410 ;	program.c:577: buff_size = get_number(3);
      0009DA 90 00 03         [24] 2411 	mov	dptr,#0x0003
      0009DD 12r12rBF         [24] 2412 	lcall	_get_number
      0009E0 AE 82            [24] 2413 	mov	r6,dpl
      0009E2 AF 83            [24] 2414 	mov	r7,dph
                                   2415 ;	program.c:578: if (buff_size >= 30 && buff_size <= 300)
      0009E4 C3               [12] 2416 	clr	c
      0009E5 EE               [12] 2417 	mov	a,r6
      0009E6 94 1E            [12] 2418 	subb	a,#0x1e
      0009E8 EF               [12] 2419 	mov	a,r7
      0009E9 64 80            [12] 2420 	xrl	a,#0x80
      0009EB 94 80            [12] 2421 	subb	a,#0x80
      0009ED 40 D6            [24] 2422 	jc	00103$
      0009EF 74 2C            [12] 2423 	mov	a,#0x2c
      0009F1 9E               [12] 2424 	subb	a,r6
      0009F2 74 81            [12] 2425 	mov	a,#(0x01 ^ 0x80)
      0009F4 8F F0            [24] 2426 	mov	b,r7
      0009F6 63 F0 80         [24] 2427 	xrl	b,#0x80
      0009F9 95 F0            [12] 2428 	subb	a,b
      0009FB 40 C8            [24] 2429 	jc	00103$
                                   2430 ;	program.c:580: buff.buffer_start = malloc(buff_size);
      0009FD 8E 82            [24] 2431 	mov	dpl,r6
      0009FF 8F 83            [24] 2432 	mov	dph,r7
      000A01 C0 07            [24] 2433 	push	ar7
      000A03 C0 06            [24] 2434 	push	ar6
      000A05 12r00r00         [24] 2435 	lcall	_malloc
      000A08 AC 82            [24] 2436 	mov	r4,dpl
      000A0A AD 83            [24] 2437 	mov	r5,dph
      000A0C D0 06            [24] 2438 	pop	ar6
      000A0E D0 07            [24] 2439 	pop	ar7
      000A10 7B 00            [12] 2440 	mov	r3,#0x00
      000A12 90r01r38         [24] 2441 	mov	dptr,#(_create_new_buffer_buff_65537_103 + 0x0002)
      000A15 EC               [12] 2442 	mov	a,r4
      000A16 F0               [24] 2443 	movx	@dptr,a
      000A17 ED               [12] 2444 	mov	a,r5
      000A18 A3               [24] 2445 	inc	dptr
      000A19 F0               [24] 2446 	movx	@dptr,a
      000A1A EB               [12] 2447 	mov	a,r3
      000A1B A3               [24] 2448 	inc	dptr
      000A1C F0               [24] 2449 	movx	@dptr,a
                                   2450 ;	program.c:581: if (buff.buffer_start == NULL)
      000A1D EC               [12] 2451 	mov	a,r4
      000A1E 4D               [12] 2452 	orl	a,r5
      000A1F 70 18            [24] 2453 	jnz	00105$
                                   2454 ;	program.c:583: printf("Failed, give smaller buffer\n\r");
      000A21 74r14            [12] 2455 	mov	a,#___str_53
      000A23 C0 E0            [24] 2456 	push	acc
      000A25 74s08            [12] 2457 	mov	a,#(___str_53 >> 8)
      000A27 C0 E0            [24] 2458 	push	acc
      000A29 74 80            [12] 2459 	mov	a,#0x80
      000A2B C0 E0            [24] 2460 	push	acc
      000A2D 12r00r00         [24] 2461 	lcall	_printf
      000A30 15 81            [12] 2462 	dec	sp
      000A32 15 81            [12] 2463 	dec	sp
      000A34 15 81            [12] 2464 	dec	sp
      000A36 02r0Br01         [24] 2465 	ljmp	00106$
      000A39                       2466 00105$:
                                   2467 ;	program.c:587: printf("\n\n\r####SUCCESS, BUFFER Created####\n\n\r");
      000A39 C0 07            [24] 2468 	push	ar7
      000A3B C0 06            [24] 2469 	push	ar6
      000A3D 74r32            [12] 2470 	mov	a,#___str_54
      000A3F C0 E0            [24] 2471 	push	acc
      000A41 74s08            [12] 2472 	mov	a,#(___str_54 >> 8)
      000A43 C0 E0            [24] 2473 	push	acc
      000A45 74 80            [12] 2474 	mov	a,#0x80
      000A47 C0 E0            [24] 2475 	push	acc
      000A49 12r00r00         [24] 2476 	lcall	_printf
      000A4C 15 81            [12] 2477 	dec	sp
      000A4E 15 81            [12] 2478 	dec	sp
      000A50 15 81            [12] 2479 	dec	sp
      000A52 D0 06            [24] 2480 	pop	ar6
      000A54 D0 07            [24] 2481 	pop	ar7
                                   2482 ;	program.c:589: program_stats.allocated_heap += buff_size;
      000A56 90r00r02         [24] 2483 	mov	dptr,#(_program_stats + 0x0002)
      000A59 E0               [24] 2484 	movx	a,@dptr
      000A5A FC               [12] 2485 	mov	r4,a
      000A5B A3               [24] 2486 	inc	dptr
      000A5C E0               [24] 2487 	movx	a,@dptr
      000A5D FD               [12] 2488 	mov	r5,a
      000A5E EE               [12] 2489 	mov	a,r6
      000A5F 2C               [12] 2490 	add	a,r4
      000A60 FC               [12] 2491 	mov	r4,a
      000A61 EF               [12] 2492 	mov	a,r7
      000A62 3D               [12] 2493 	addc	a,r5
      000A63 FD               [12] 2494 	mov	r5,a
      000A64 90r00r02         [24] 2495 	mov	dptr,#(_program_stats + 0x0002)
      000A67 EC               [12] 2496 	mov	a,r4
      000A68 F0               [24] 2497 	movx	@dptr,a
      000A69 ED               [12] 2498 	mov	a,r5
      000A6A A3               [24] 2499 	inc	dptr
      000A6B F0               [24] 2500 	movx	@dptr,a
                                   2501 ;	program.c:590: buff.buff_size = buff_size;
      000A6C 90r01r3E         [24] 2502 	mov	dptr,#(_create_new_buffer_buff_65537_103 + 0x0008)
      000A6F EE               [12] 2503 	mov	a,r6
      000A70 F0               [24] 2504 	movx	@dptr,a
      000A71 EF               [12] 2505 	mov	a,r7
      000A72 A3               [24] 2506 	inc	dptr
      000A73 F0               [24] 2507 	movx	@dptr,a
                                   2508 ;	program.c:591: buff.buffer_num = program_stats.total_buffers;
      000A74 90r00r08         [24] 2509 	mov	dptr,#(_program_stats + 0x0008)
      000A77 E0               [24] 2510 	movx	a,@dptr
      000A78 FC               [12] 2511 	mov	r4,a
      000A79 A3               [24] 2512 	inc	dptr
      000A7A E0               [24] 2513 	movx	a,@dptr
      000A7B FD               [12] 2514 	mov	r5,a
      000A7C 90r01r36         [24] 2515 	mov	dptr,#_create_new_buffer_buff_65537_103
      000A7F EC               [12] 2516 	mov	a,r4
      000A80 F0               [24] 2517 	movx	@dptr,a
      000A81 ED               [12] 2518 	mov	a,r5
      000A82 A3               [24] 2519 	inc	dptr
      000A83 F0               [24] 2520 	movx	@dptr,a
                                   2521 ;	program.c:592: buff.buffer_end = buff.buffer_start + buff_size;
      000A84 90r01r38         [24] 2522 	mov	dptr,#(_create_new_buffer_buff_65537_103 + 0x0002)
      000A87 E0               [24] 2523 	movx	a,@dptr
      000A88 FB               [12] 2524 	mov	r3,a
      000A89 A3               [24] 2525 	inc	dptr
      000A8A E0               [24] 2526 	movx	a,@dptr
      000A8B FC               [12] 2527 	mov	r4,a
      000A8C A3               [24] 2528 	inc	dptr
      000A8D E0               [24] 2529 	movx	a,@dptr
      000A8E FD               [12] 2530 	mov	r5,a
      000A8F EE               [12] 2531 	mov	a,r6
      000A90 2B               [12] 2532 	add	a,r3
      000A91 FE               [12] 2533 	mov	r6,a
      000A92 EF               [12] 2534 	mov	a,r7
      000A93 3C               [12] 2535 	addc	a,r4
      000A94 FF               [12] 2536 	mov	r7,a
      000A95 8D 02            [24] 2537 	mov	ar2,r5
      000A97 90r01r3B         [24] 2538 	mov	dptr,#(_create_new_buffer_buff_65537_103 + 0x0005)
      000A9A EE               [12] 2539 	mov	a,r6
      000A9B F0               [24] 2540 	movx	@dptr,a
      000A9C EF               [12] 2541 	mov	a,r7
      000A9D A3               [24] 2542 	inc	dptr
      000A9E F0               [24] 2543 	movx	@dptr,a
      000A9F EA               [12] 2544 	mov	a,r2
      000AA0 A3               [24] 2545 	inc	dptr
      000AA1 F0               [24] 2546 	movx	@dptr,a
                                   2547 ;	program.c:593: buff.num_char = 0;
      000AA2 90r01r40         [24] 2548 	mov	dptr,#(_create_new_buffer_buff_65537_103 + 0x000a)
      000AA5 E4               [12] 2549 	clr	a
      000AA6 F0               [24] 2550 	movx	@dptr,a
      000AA7 A3               [24] 2551 	inc	dptr
      000AA8 F0               [24] 2552 	movx	@dptr,a
                                   2553 ;	program.c:595: buffers_array[program_stats.total_buffers] = buff;
      000AA9 90r00r08         [24] 2554 	mov	dptr,#(_program_stats + 0x0008)
      000AAC E0               [24] 2555 	movx	a,@dptr
      000AAD FE               [12] 2556 	mov	r6,a
      000AAE A3               [24] 2557 	inc	dptr
      000AAF E0               [24] 2558 	movx	a,@dptr
      000AB0 FF               [12] 2559 	mov	r7,a
      000AB1 90r00r00         [24] 2560 	mov	dptr,#__mulint_PARM_2
      000AB4 EE               [12] 2561 	mov	a,r6
      000AB5 F0               [24] 2562 	movx	@dptr,a
      000AB6 EF               [12] 2563 	mov	a,r7
      000AB7 A3               [24] 2564 	inc	dptr
      000AB8 F0               [24] 2565 	movx	@dptr,a
      000AB9 90 00 0C         [24] 2566 	mov	dptr,#0x000c
      000ABC 12r00r00         [24] 2567 	lcall	__mulint
      000ABF AE 82            [24] 2568 	mov	r6,dpl
      000AC1 AF 83            [24] 2569 	mov	r7,dph
      000AC3 EE               [12] 2570 	mov	a,r6
      000AC4 24r0A            [12] 2571 	add	a,#_buffers_array
      000AC6 FE               [12] 2572 	mov	r6,a
      000AC7 EF               [12] 2573 	mov	a,r7
      000AC8 34s00            [12] 2574 	addc	a,#(_buffers_array >> 8)
      000ACA FF               [12] 2575 	mov	r7,a
      000ACB 7D 00            [12] 2576 	mov	r5,#0x00
      000ACD 90r00r00         [24] 2577 	mov	dptr,#___memcpy_PARM_2
      000AD0 74r36            [12] 2578 	mov	a,#_create_new_buffer_buff_65537_103
      000AD2 F0               [24] 2579 	movx	@dptr,a
      000AD3 74s01            [12] 2580 	mov	a,#(_create_new_buffer_buff_65537_103 >> 8)
      000AD5 A3               [24] 2581 	inc	dptr
      000AD6 F0               [24] 2582 	movx	@dptr,a
      000AD7 E4               [12] 2583 	clr	a
      000AD8 A3               [24] 2584 	inc	dptr
      000AD9 F0               [24] 2585 	movx	@dptr,a
      000ADA 90r00r00         [24] 2586 	mov	dptr,#___memcpy_PARM_3
      000ADD 74 0C            [12] 2587 	mov	a,#0x0c
      000ADF F0               [24] 2588 	movx	@dptr,a
      000AE0 E4               [12] 2589 	clr	a
      000AE1 A3               [24] 2590 	inc	dptr
      000AE2 F0               [24] 2591 	movx	@dptr,a
      000AE3 8E 82            [24] 2592 	mov	dpl,r6
      000AE5 8F 83            [24] 2593 	mov	dph,r7
      000AE7 8D F0            [24] 2594 	mov	b,r5
      000AE9 12r00r00         [24] 2595 	lcall	___memcpy
                                   2596 ;	program.c:596: program_stats.total_buffers += 1;
      000AEC 90r00r08         [24] 2597 	mov	dptr,#(_program_stats + 0x0008)
      000AEF E0               [24] 2598 	movx	a,@dptr
      000AF0 FE               [12] 2599 	mov	r6,a
      000AF1 A3               [24] 2600 	inc	dptr
      000AF2 E0               [24] 2601 	movx	a,@dptr
      000AF3 FF               [12] 2602 	mov	r7,a
      000AF4 0E               [12] 2603 	inc	r6
      000AF5 BE 00 01         [24] 2604 	cjne	r6,#0x00,00137$
      000AF8 0F               [12] 2605 	inc	r7
      000AF9                       2606 00137$:
      000AF9 90r00r08         [24] 2607 	mov	dptr,#(_program_stats + 0x0008)
      000AFC EE               [12] 2608 	mov	a,r6
      000AFD F0               [24] 2609 	movx	@dptr,a
      000AFE EF               [12] 2610 	mov	a,r7
      000AFF A3               [24] 2611 	inc	dptr
      000B00 F0               [24] 2612 	movx	@dptr,a
      000B01                       2613 00106$:
                                   2614 ;	program.c:598: return 0;
      000B01 90 00 00         [24] 2615 	mov	dptr,#0x0000
                                   2616 ;	program.c:604: no_heap_left:
      000B04 22               [24] 2617 	ret
      000B05                       2618 00111$:
                                   2619 ;	program.c:605: printf("No Heap Memory Left, Delete some buffers...\n\r");
      000B05 74r58            [12] 2620 	mov	a,#___str_55
      000B07 C0 E0            [24] 2621 	push	acc
      000B09 74s08            [12] 2622 	mov	a,#(___str_55 >> 8)
      000B0B C0 E0            [24] 2623 	push	acc
      000B0D 74 80            [12] 2624 	mov	a,#0x80
      000B0F C0 E0            [24] 2625 	push	acc
      000B11 12r00r00         [24] 2626 	lcall	_printf
      000B14 15 81            [12] 2627 	dec	sp
      000B16 15 81            [12] 2628 	dec	sp
      000B18 15 81            [12] 2629 	dec	sp
                                   2630 ;	program.c:606: return 0;
      000B1A 90 00 00         [24] 2631 	mov	dptr,#0x0000
                                   2632 ;	program.c:607: }
      000B1D 22               [24] 2633 	ret
                                   2634 ;------------------------------------------------------------
                                   2635 ;Allocation info for local variables in function 'create_initial_buffers'
                                   2636 ;------------------------------------------------------------
                                   2637 ;buff_size                 Allocated with name '_create_initial_buffers_buff_size_65537_109'
                                   2638 ;buff                      Allocated with name '_create_initial_buffers_buff_65538_110'
                                   2639 ;buff1                     Allocated with name '_create_initial_buffers_buff1_65538_110'
                                   2640 ;------------------------------------------------------------
                                   2641 ;	program.c:615: void create_initial_buffers()
                                   2642 ;	-----------------------------------------
                                   2643 ;	 function create_initial_buffers
                                   2644 ;	-----------------------------------------
      000B1E                       2645 _create_initial_buffers:
                                   2646 ;	program.c:617: DEBUGPORT(0x07);
      000B1E 75 82 07         [24] 2647 	mov	dpl,#0x07
      000B21 12r14r6F         [24] 2648 	lcall	_dataout
                                   2649 ;	program.c:620: get_buff:
      000B24                       2650 00101$:
                                   2651 ;	program.c:621: printf("\n\rGive Valid Initial Buffer Size(0048-4800):");
      000B24 74r86            [12] 2652 	mov	a,#___str_56
      000B26 C0 E0            [24] 2653 	push	acc
      000B28 74s08            [12] 2654 	mov	a,#(___str_56 >> 8)
      000B2A C0 E0            [24] 2655 	push	acc
      000B2C 74 80            [12] 2656 	mov	a,#0x80
      000B2E C0 E0            [24] 2657 	push	acc
      000B30 12r00r00         [24] 2658 	lcall	_printf
      000B33 15 81            [12] 2659 	dec	sp
      000B35 15 81            [12] 2660 	dec	sp
      000B37 15 81            [12] 2661 	dec	sp
                                   2662 ;	program.c:622: buff_size = get_number(4);
      000B39 90 00 04         [24] 2663 	mov	dptr,#0x0004
      000B3C 12r12rBF         [24] 2664 	lcall	_get_number
      000B3F AE 82            [24] 2665 	mov	r6,dpl
      000B41 AF 83            [24] 2666 	mov	r7,dph
                                   2667 ;	program.c:626: if (buff_size >= 48 && buff_size <= 4800)
      000B43 C3               [12] 2668 	clr	c
      000B44 EE               [12] 2669 	mov	a,r6
      000B45 94 30            [12] 2670 	subb	a,#0x30
      000B47 EF               [12] 2671 	mov	a,r7
      000B48 64 80            [12] 2672 	xrl	a,#0x80
      000B4A 94 80            [12] 2673 	subb	a,#0x80
      000B4C 40 D6            [24] 2674 	jc	00101$
      000B4E 74 C0            [12] 2675 	mov	a,#0xc0
      000B50 9E               [12] 2676 	subb	a,r6
      000B51 74 92            [12] 2677 	mov	a,#(0x12 ^ 0x80)
      000B53 8F F0            [24] 2678 	mov	b,r7
      000B55 63 F0 80         [24] 2679 	xrl	b,#0x80
      000B58 95 F0            [12] 2680 	subb	a,b
      000B5A 40 C8            [24] 2681 	jc	00101$
                                   2682 ;	program.c:628: buff.buffer_start = malloc(buff_size);
      000B5C 8E 82            [24] 2683 	mov	dpl,r6
      000B5E 8F 83            [24] 2684 	mov	dph,r7
      000B60 C0 07            [24] 2685 	push	ar7
      000B62 C0 06            [24] 2686 	push	ar6
      000B64 12r00r00         [24] 2687 	lcall	_malloc
      000B67 AC 82            [24] 2688 	mov	r4,dpl
      000B69 AD 83            [24] 2689 	mov	r5,dph
      000B6B D0 06            [24] 2690 	pop	ar6
      000B6D D0 07            [24] 2691 	pop	ar7
      000B6F 7B 00            [12] 2692 	mov	r3,#0x00
      000B71 90r01r44         [24] 2693 	mov	dptr,#(_create_initial_buffers_buff_65538_110 + 0x0002)
      000B74 EC               [12] 2694 	mov	a,r4
      000B75 F0               [24] 2695 	movx	@dptr,a
      000B76 ED               [12] 2696 	mov	a,r5
      000B77 A3               [24] 2697 	inc	dptr
      000B78 F0               [24] 2698 	movx	@dptr,a
      000B79 EB               [12] 2699 	mov	a,r3
      000B7A A3               [24] 2700 	inc	dptr
      000B7B F0               [24] 2701 	movx	@dptr,a
                                   2702 ;	program.c:629: buff1.buffer_start = malloc(buff_size);
      000B7C 8E 82            [24] 2703 	mov	dpl,r6
      000B7E 8F 83            [24] 2704 	mov	dph,r7
      000B80 C0 07            [24] 2705 	push	ar7
      000B82 C0 06            [24] 2706 	push	ar6
      000B84 12r00r00         [24] 2707 	lcall	_malloc
      000B87 AC 82            [24] 2708 	mov	r4,dpl
      000B89 AD 83            [24] 2709 	mov	r5,dph
      000B8B D0 06            [24] 2710 	pop	ar6
      000B8D D0 07            [24] 2711 	pop	ar7
      000B8F 7B 00            [12] 2712 	mov	r3,#0x00
      000B91 90r01r50         [24] 2713 	mov	dptr,#(_create_initial_buffers_buff1_65538_110 + 0x0002)
      000B94 EC               [12] 2714 	mov	a,r4
      000B95 F0               [24] 2715 	movx	@dptr,a
      000B96 ED               [12] 2716 	mov	a,r5
      000B97 A3               [24] 2717 	inc	dptr
      000B98 F0               [24] 2718 	movx	@dptr,a
      000B99 EB               [12] 2719 	mov	a,r3
      000B9A A3               [24] 2720 	inc	dptr
      000B9B F0               [24] 2721 	movx	@dptr,a
                                   2722 ;	program.c:631: if (buff.buffer_start == NULL || buff1.buffer_start == NULL)
      000B9C 90r01r44         [24] 2723 	mov	dptr,#(_create_initial_buffers_buff_65538_110 + 0x0002)
      000B9F E0               [24] 2724 	movx	a,@dptr
      000BA0 FB               [12] 2725 	mov	r3,a
      000BA1 A3               [24] 2726 	inc	dptr
      000BA2 E0               [24] 2727 	movx	a,@dptr
      000BA3 FC               [12] 2728 	mov	r4,a
      000BA4 A3               [24] 2729 	inc	dptr
      000BA5 E0               [24] 2730 	movx	a,@dptr
      000BA6 EB               [12] 2731 	mov	a,r3
      000BA7 4C               [12] 2732 	orl	a,r4
      000BA8 60 0F            [24] 2733 	jz	00106$
      000BAA 90r01r50         [24] 2734 	mov	dptr,#(_create_initial_buffers_buff1_65538_110 + 0x0002)
      000BAD E0               [24] 2735 	movx	a,@dptr
      000BAE FB               [12] 2736 	mov	r3,a
      000BAF A3               [24] 2737 	inc	dptr
      000BB0 E0               [24] 2738 	movx	a,@dptr
      000BB1 FC               [12] 2739 	mov	r4,a
      000BB2 A3               [24] 2740 	inc	dptr
      000BB3 E0               [24] 2741 	movx	a,@dptr
      000BB4 FD               [12] 2742 	mov	r5,a
      000BB5 EB               [12] 2743 	mov	a,r3
      000BB6 4C               [12] 2744 	orl	a,r4
      000BB7 70 60            [24] 2745 	jnz	00107$
      000BB9                       2746 00106$:
                                   2747 ;	program.c:633: printf("\n\r####FAIL, Please give a smaller buffer size####\n\n\r");
      000BB9 74rB3            [12] 2748 	mov	a,#___str_57
      000BBB C0 E0            [24] 2749 	push	acc
      000BBD 74s08            [12] 2750 	mov	a,#(___str_57 >> 8)
      000BBF C0 E0            [24] 2751 	push	acc
      000BC1 74 80            [12] 2752 	mov	a,#0x80
      000BC3 C0 E0            [24] 2753 	push	acc
      000BC5 12r00r00         [24] 2754 	lcall	_printf
      000BC8 15 81            [12] 2755 	dec	sp
      000BCA 15 81            [12] 2756 	dec	sp
      000BCC 15 81            [12] 2757 	dec	sp
                                   2758 ;	program.c:635: if (buff.buffer_start != NULL)
      000BCE 90r01r44         [24] 2759 	mov	dptr,#(_create_initial_buffers_buff_65538_110 + 0x0002)
      000BD1 E0               [24] 2760 	movx	a,@dptr
      000BD2 FB               [12] 2761 	mov	r3,a
      000BD3 A3               [24] 2762 	inc	dptr
      000BD4 E0               [24] 2763 	movx	a,@dptr
      000BD5 FC               [12] 2764 	mov	r4,a
      000BD6 A3               [24] 2765 	inc	dptr
      000BD7 E0               [24] 2766 	movx	a,@dptr
      000BD8 EB               [12] 2767 	mov	a,r3
      000BD9 4C               [12] 2768 	orl	a,r4
      000BDA 60 14            [24] 2769 	jz	00103$
                                   2770 ;	program.c:636: free(buff.buffer_start);
      000BDC 90r01r44         [24] 2771 	mov	dptr,#(_create_initial_buffers_buff_65538_110 + 0x0002)
      000BDF E0               [24] 2772 	movx	a,@dptr
      000BE0 FB               [12] 2773 	mov	r3,a
      000BE1 A3               [24] 2774 	inc	dptr
      000BE2 E0               [24] 2775 	movx	a,@dptr
      000BE3 FC               [12] 2776 	mov	r4,a
      000BE4 A3               [24] 2777 	inc	dptr
      000BE5 E0               [24] 2778 	movx	a,@dptr
      000BE6 FD               [12] 2779 	mov	r5,a
      000BE7 8B 82            [24] 2780 	mov	dpl,r3
      000BE9 8C 83            [24] 2781 	mov	dph,r4
      000BEB 8D F0            [24] 2782 	mov	b,r5
      000BED 12r00r00         [24] 2783 	lcall	_free
      000BF0                       2784 00103$:
                                   2785 ;	program.c:637: if (buff1.buffer_start != NULL)
      000BF0 90r01r50         [24] 2786 	mov	dptr,#(_create_initial_buffers_buff1_65538_110 + 0x0002)
      000BF3 E0               [24] 2787 	movx	a,@dptr
      000BF4 FB               [12] 2788 	mov	r3,a
      000BF5 A3               [24] 2789 	inc	dptr
      000BF6 E0               [24] 2790 	movx	a,@dptr
      000BF7 FC               [12] 2791 	mov	r4,a
      000BF8 A3               [24] 2792 	inc	dptr
      000BF9 E0               [24] 2793 	movx	a,@dptr
      000BFA FD               [12] 2794 	mov	r5,a
      000BFB EB               [12] 2795 	mov	a,r3
      000BFC 4C               [12] 2796 	orl	a,r4
      000BFD 70 03            [24] 2797 	jnz	00145$
      000BFF 02r0Br24         [24] 2798 	ljmp	00101$
      000C02                       2799 00145$:
                                   2800 ;	program.c:638: free(buff1.buffer_start);
      000C02 90r01r50         [24] 2801 	mov	dptr,#(_create_initial_buffers_buff1_65538_110 + 0x0002)
      000C05 E0               [24] 2802 	movx	a,@dptr
      000C06 FB               [12] 2803 	mov	r3,a
      000C07 A3               [24] 2804 	inc	dptr
      000C08 E0               [24] 2805 	movx	a,@dptr
      000C09 FC               [12] 2806 	mov	r4,a
      000C0A A3               [24] 2807 	inc	dptr
      000C0B E0               [24] 2808 	movx	a,@dptr
      000C0C FD               [12] 2809 	mov	r5,a
      000C0D 8B 82            [24] 2810 	mov	dpl,r3
      000C0F 8C 83            [24] 2811 	mov	dph,r4
      000C11 8D F0            [24] 2812 	mov	b,r5
      000C13 12r00r00         [24] 2813 	lcall	_free
                                   2814 ;	program.c:640: goto get_buff;
      000C16 02r0Br24         [24] 2815 	ljmp	00101$
      000C19                       2816 00107$:
                                   2817 ;	program.c:645: printf("\n\n\r####SUCCESS, INITIAL BUFFERS Created####\n\n\r");
      000C19 C0 07            [24] 2818 	push	ar7
      000C1B C0 06            [24] 2819 	push	ar6
      000C1D 74rE8            [12] 2820 	mov	a,#___str_58
      000C1F C0 E0            [24] 2821 	push	acc
      000C21 74s08            [12] 2822 	mov	a,#(___str_58 >> 8)
      000C23 C0 E0            [24] 2823 	push	acc
      000C25 74 80            [12] 2824 	mov	a,#0x80
      000C27 C0 E0            [24] 2825 	push	acc
      000C29 12r00r00         [24] 2826 	lcall	_printf
      000C2C 15 81            [12] 2827 	dec	sp
      000C2E 15 81            [12] 2828 	dec	sp
      000C30 15 81            [12] 2829 	dec	sp
      000C32 D0 06            [24] 2830 	pop	ar6
      000C34 D0 07            [24] 2831 	pop	ar7
                                   2832 ;	program.c:646: program_stats.allocated_heap = 2 * buff_size;
      000C36 EE               [12] 2833 	mov	a,r6
      000C37 2E               [12] 2834 	add	a,r6
      000C38 FC               [12] 2835 	mov	r4,a
      000C39 EF               [12] 2836 	mov	a,r7
      000C3A 33               [12] 2837 	rlc	a
      000C3B FD               [12] 2838 	mov	r5,a
      000C3C 90r00r02         [24] 2839 	mov	dptr,#(_program_stats + 0x0002)
      000C3F EC               [12] 2840 	mov	a,r4
      000C40 F0               [24] 2841 	movx	@dptr,a
      000C41 ED               [12] 2842 	mov	a,r5
      000C42 A3               [24] 2843 	inc	dptr
      000C43 F0               [24] 2844 	movx	@dptr,a
                                   2845 ;	program.c:647: program_stats.total_heap_size = 4996;
      000C44 90r00r00         [24] 2846 	mov	dptr,#_program_stats
      000C47 74 84            [12] 2847 	mov	a,#0x84
      000C49 F0               [24] 2848 	movx	@dptr,a
      000C4A 74 13            [12] 2849 	mov	a,#0x13
      000C4C A3               [24] 2850 	inc	dptr
      000C4D F0               [24] 2851 	movx	@dptr,a
                                   2852 ;	program.c:648: program_stats.total_buffers = 2;
      000C4E 90r00r08         [24] 2853 	mov	dptr,#(_program_stats + 0x0008)
      000C51 74 02            [12] 2854 	mov	a,#0x02
      000C53 F0               [24] 2855 	movx	@dptr,a
      000C54 E4               [12] 2856 	clr	a
      000C55 A3               [24] 2857 	inc	dptr
      000C56 F0               [24] 2858 	movx	@dptr,a
                                   2859 ;	program.c:650: buff.buff_size = buff_size;
      000C57 90r01r4A         [24] 2860 	mov	dptr,#(_create_initial_buffers_buff_65538_110 + 0x0008)
      000C5A EE               [12] 2861 	mov	a,r6
      000C5B F0               [24] 2862 	movx	@dptr,a
      000C5C EF               [12] 2863 	mov	a,r7
      000C5D A3               [24] 2864 	inc	dptr
      000C5E F0               [24] 2865 	movx	@dptr,a
                                   2866 ;	program.c:651: buff1.buff_size = buff_size;
      000C5F 90r01r56         [24] 2867 	mov	dptr,#(_create_initial_buffers_buff1_65538_110 + 0x0008)
      000C62 EE               [12] 2868 	mov	a,r6
      000C63 F0               [24] 2869 	movx	@dptr,a
      000C64 EF               [12] 2870 	mov	a,r7
      000C65 A3               [24] 2871 	inc	dptr
      000C66 F0               [24] 2872 	movx	@dptr,a
                                   2873 ;	program.c:652: buff.buffer_num = 0;
      000C67 90r01r42         [24] 2874 	mov	dptr,#_create_initial_buffers_buff_65538_110
      000C6A E4               [12] 2875 	clr	a
      000C6B F0               [24] 2876 	movx	@dptr,a
      000C6C A3               [24] 2877 	inc	dptr
      000C6D F0               [24] 2878 	movx	@dptr,a
                                   2879 ;	program.c:653: buff1.buffer_num = 1;
      000C6E 90r01r4E         [24] 2880 	mov	dptr,#_create_initial_buffers_buff1_65538_110
      000C71 04               [12] 2881 	inc	a
      000C72 F0               [24] 2882 	movx	@dptr,a
      000C73 E4               [12] 2883 	clr	a
      000C74 A3               [24] 2884 	inc	dptr
      000C75 F0               [24] 2885 	movx	@dptr,a
                                   2886 ;	program.c:654: buff1.buffer_end = buff1.buffer_start + buff_size;
      000C76 90r01r50         [24] 2887 	mov	dptr,#(_create_initial_buffers_buff1_65538_110 + 0x0002)
      000C79 E0               [24] 2888 	movx	a,@dptr
      000C7A FB               [12] 2889 	mov	r3,a
      000C7B A3               [24] 2890 	inc	dptr
      000C7C E0               [24] 2891 	movx	a,@dptr
      000C7D FC               [12] 2892 	mov	r4,a
      000C7E A3               [24] 2893 	inc	dptr
      000C7F E0               [24] 2894 	movx	a,@dptr
      000C80 FD               [12] 2895 	mov	r5,a
      000C81 EE               [12] 2896 	mov	a,r6
      000C82 2B               [12] 2897 	add	a,r3
      000C83 FB               [12] 2898 	mov	r3,a
      000C84 EF               [12] 2899 	mov	a,r7
      000C85 3C               [12] 2900 	addc	a,r4
      000C86 FC               [12] 2901 	mov	r4,a
      000C87 90r01r53         [24] 2902 	mov	dptr,#(_create_initial_buffers_buff1_65538_110 + 0x0005)
      000C8A EB               [12] 2903 	mov	a,r3
      000C8B F0               [24] 2904 	movx	@dptr,a
      000C8C EC               [12] 2905 	mov	a,r4
      000C8D A3               [24] 2906 	inc	dptr
      000C8E F0               [24] 2907 	movx	@dptr,a
      000C8F ED               [12] 2908 	mov	a,r5
      000C90 A3               [24] 2909 	inc	dptr
      000C91 F0               [24] 2910 	movx	@dptr,a
                                   2911 ;	program.c:655: buff.buffer_end = buff.buffer_start + buff_size;
      000C92 90r01r44         [24] 2912 	mov	dptr,#(_create_initial_buffers_buff_65538_110 + 0x0002)
      000C95 E0               [24] 2913 	movx	a,@dptr
      000C96 FB               [12] 2914 	mov	r3,a
      000C97 A3               [24] 2915 	inc	dptr
      000C98 E0               [24] 2916 	movx	a,@dptr
      000C99 FC               [12] 2917 	mov	r4,a
      000C9A A3               [24] 2918 	inc	dptr
      000C9B E0               [24] 2919 	movx	a,@dptr
      000C9C FD               [12] 2920 	mov	r5,a
      000C9D EE               [12] 2921 	mov	a,r6
      000C9E 2B               [12] 2922 	add	a,r3
      000C9F FE               [12] 2923 	mov	r6,a
      000CA0 EF               [12] 2924 	mov	a,r7
      000CA1 3C               [12] 2925 	addc	a,r4
      000CA2 FF               [12] 2926 	mov	r7,a
      000CA3 8D 02            [24] 2927 	mov	ar2,r5
      000CA5 90r01r47         [24] 2928 	mov	dptr,#(_create_initial_buffers_buff_65538_110 + 0x0005)
      000CA8 EE               [12] 2929 	mov	a,r6
      000CA9 F0               [24] 2930 	movx	@dptr,a
      000CAA EF               [12] 2931 	mov	a,r7
      000CAB A3               [24] 2932 	inc	dptr
      000CAC F0               [24] 2933 	movx	@dptr,a
      000CAD EA               [12] 2934 	mov	a,r2
      000CAE A3               [24] 2935 	inc	dptr
      000CAF F0               [24] 2936 	movx	@dptr,a
                                   2937 ;	program.c:656: buff.num_char = 0;
      000CB0 90r01r4C         [24] 2938 	mov	dptr,#(_create_initial_buffers_buff_65538_110 + 0x000a)
      000CB3 E4               [12] 2939 	clr	a
      000CB4 F0               [24] 2940 	movx	@dptr,a
      000CB5 A3               [24] 2941 	inc	dptr
      000CB6 F0               [24] 2942 	movx	@dptr,a
                                   2943 ;	program.c:657: buff1.num_char = 0;
      000CB7 90r01r58         [24] 2944 	mov	dptr,#(_create_initial_buffers_buff1_65538_110 + 0x000a)
      000CBA F0               [24] 2945 	movx	@dptr,a
      000CBB A3               [24] 2946 	inc	dptr
      000CBC F0               [24] 2947 	movx	@dptr,a
                                   2948 ;	program.c:659: buffers_array[0] = buff;
      000CBD 90r00r00         [24] 2949 	mov	dptr,#___memcpy_PARM_2
      000CC0 74r42            [12] 2950 	mov	a,#_create_initial_buffers_buff_65538_110
      000CC2 F0               [24] 2951 	movx	@dptr,a
      000CC3 74s01            [12] 2952 	mov	a,#(_create_initial_buffers_buff_65538_110 >> 8)
      000CC5 A3               [24] 2953 	inc	dptr
      000CC6 F0               [24] 2954 	movx	@dptr,a
      000CC7 E4               [12] 2955 	clr	a
      000CC8 A3               [24] 2956 	inc	dptr
      000CC9 F0               [24] 2957 	movx	@dptr,a
      000CCA 90r00r00         [24] 2958 	mov	dptr,#___memcpy_PARM_3
      000CCD 74 0C            [12] 2959 	mov	a,#0x0c
      000CCF F0               [24] 2960 	movx	@dptr,a
      000CD0 E4               [12] 2961 	clr	a
      000CD1 A3               [24] 2962 	inc	dptr
      000CD2 F0               [24] 2963 	movx	@dptr,a
      000CD3 90r00r0A         [24] 2964 	mov	dptr,#_buffers_array
      000CD6 75 F0 00         [24] 2965 	mov	b,#0x00
      000CD9 12r00r00         [24] 2966 	lcall	___memcpy
                                   2967 ;	program.c:660: buffers_array[1] = buff1;
      000CDC 90r00r00         [24] 2968 	mov	dptr,#___memcpy_PARM_2
      000CDF 74r4E            [12] 2969 	mov	a,#_create_initial_buffers_buff1_65538_110
      000CE1 F0               [24] 2970 	movx	@dptr,a
      000CE2 74s01            [12] 2971 	mov	a,#(_create_initial_buffers_buff1_65538_110 >> 8)
      000CE4 A3               [24] 2972 	inc	dptr
      000CE5 F0               [24] 2973 	movx	@dptr,a
      000CE6 E4               [12] 2974 	clr	a
      000CE7 A3               [24] 2975 	inc	dptr
      000CE8 F0               [24] 2976 	movx	@dptr,a
      000CE9 90r00r00         [24] 2977 	mov	dptr,#___memcpy_PARM_3
      000CEC 74 0C            [12] 2978 	mov	a,#0x0c
      000CEE F0               [24] 2979 	movx	@dptr,a
      000CEF E4               [12] 2980 	clr	a
      000CF0 A3               [24] 2981 	inc	dptr
      000CF1 F0               [24] 2982 	movx	@dptr,a
      000CF2 90r00r16         [24] 2983 	mov	dptr,#(_buffers_array + 0x000c)
      000CF5 75 F0 00         [24] 2984 	mov	b,#0x00
                                   2985 ;	program.c:664: goto get_buff;
                                   2986 ;	program.c:665: }
      000CF8 02r00r00         [24] 2987 	ljmp	___memcpy
                                   2988 ;------------------------------------------------------------
                                   2989 ;Allocation info for local variables in function 'enter_chars'
                                   2990 ;------------------------------------------------------------
                                   2991 ;rec                       Allocated with name '_enter_chars_rec_65537_115'
                                   2992 ;------------------------------------------------------------
                                   2993 ;	program.c:673: void enter_chars()
                                   2994 ;	-----------------------------------------
                                   2995 ;	 function enter_chars
                                   2996 ;	-----------------------------------------
      000CFB                       2997 _enter_chars:
                                   2998 ;	program.c:675: DEBUGPORT(0x08);
      000CFB 75 82 08         [24] 2999 	mov	dpl,#0x08
      000CFE 12r14r6F         [24] 3000 	lcall	_dataout
                                   3001 ;	program.c:676: print_heap_menu();
      000D01 12r08rF5         [24] 3002 	lcall	_print_heap_menu
                                   3003 ;	program.c:678: while (1)
      000D04                       3004 00126$:
                                   3005 ;	program.c:680: rec = getchar();
      000D04 12r14r33         [24] 3006 	lcall	_getchar
      000D07 AE 82            [24] 3007 	mov	r6,dpl
      000D09 AF 83            [24] 3008 	mov	r7,dph
                                   3009 ;	program.c:681: if (rec > 0x60 && rec < 0x7B)
      000D0B C3               [12] 3010 	clr	c
      000D0C 74 60            [12] 3011 	mov	a,#0x60
      000D0E 9E               [12] 3012 	subb	a,r6
      000D0F 74 80            [12] 3013 	mov	a,#(0x00 ^ 0x80)
      000D11 8F F0            [24] 3014 	mov	b,r7
      000D13 63 F0 80         [24] 3015 	xrl	b,#0x80
      000D16 95 F0            [12] 3016 	subb	a,b
      000D18 40 03            [24] 3017 	jc	00170$
      000D1A 02r0DrA9         [24] 3018 	ljmp	00122$
      000D1D                       3019 00170$:
      000D1D C3               [12] 3020 	clr	c
      000D1E EE               [12] 3021 	mov	a,r6
      000D1F 94 7B            [12] 3022 	subb	a,#0x7b
      000D21 EF               [12] 3023 	mov	a,r7
      000D22 64 80            [12] 3024 	xrl	a,#0x80
      000D24 94 80            [12] 3025 	subb	a,#0x80
      000D26 40 03            [24] 3026 	jc	00171$
      000D28 02r0DrA9         [24] 3027 	ljmp	00122$
      000D2B                       3028 00171$:
                                   3029 ;	program.c:685: if (buffers_array[0].num_char < buffers_array[0].buff_size)
      000D2B 90r00r14         [24] 3030 	mov	dptr,#(_buffers_array + 0x000a)
      000D2E E0               [24] 3031 	movx	a,@dptr
      000D2F FC               [12] 3032 	mov	r4,a
      000D30 A3               [24] 3033 	inc	dptr
      000D31 E0               [24] 3034 	movx	a,@dptr
      000D32 FD               [12] 3035 	mov	r5,a
      000D33 90r00r12         [24] 3036 	mov	dptr,#(_buffers_array + 0x0008)
      000D36 E0               [24] 3037 	movx	a,@dptr
      000D37 FA               [12] 3038 	mov	r2,a
      000D38 A3               [24] 3039 	inc	dptr
      000D39 E0               [24] 3040 	movx	a,@dptr
      000D3A FB               [12] 3041 	mov	r3,a
      000D3B C3               [12] 3042 	clr	c
      000D3C EC               [12] 3043 	mov	a,r4
      000D3D 9A               [12] 3044 	subb	a,r2
      000D3E ED               [12] 3045 	mov	a,r5
      000D3F 64 80            [12] 3046 	xrl	a,#0x80
      000D41 8B F0            [24] 3047 	mov	b,r3
      000D43 63 F0 80         [24] 3048 	xrl	b,#0x80
      000D46 95 F0            [12] 3049 	subb	a,b
      000D48 50 32            [24] 3050 	jnc	00102$
                                   3051 ;	program.c:687: *(buffers_array[0].buffer_start + buffers_array[0].num_char) = rec;
      000D4A 90r00r0C         [24] 3052 	mov	dptr,#(_buffers_array + 0x0002)
      000D4D E0               [24] 3053 	movx	a,@dptr
      000D4E F9               [12] 3054 	mov	r1,a
      000D4F A3               [24] 3055 	inc	dptr
      000D50 E0               [24] 3056 	movx	a,@dptr
      000D51 FA               [12] 3057 	mov	r2,a
      000D52 A3               [24] 3058 	inc	dptr
      000D53 E0               [24] 3059 	movx	a,@dptr
      000D54 FB               [12] 3060 	mov	r3,a
      000D55 EC               [12] 3061 	mov	a,r4
      000D56 29               [12] 3062 	add	a,r1
      000D57 F9               [12] 3063 	mov	r1,a
      000D58 ED               [12] 3064 	mov	a,r5
      000D59 3A               [12] 3065 	addc	a,r2
      000D5A FA               [12] 3066 	mov	r2,a
      000D5B 8E 05            [24] 3067 	mov	ar5,r6
      000D5D 89 82            [24] 3068 	mov	dpl,r1
      000D5F 8A 83            [24] 3069 	mov	dph,r2
      000D61 8B F0            [24] 3070 	mov	b,r3
      000D63 ED               [12] 3071 	mov	a,r5
      000D64 12r00r00         [24] 3072 	lcall	__gptrput
                                   3073 ;	program.c:688: buffers_array[0].num_char += 1;
      000D67 90r00r14         [24] 3074 	mov	dptr,#(_buffers_array + 0x000a)
      000D6A E0               [24] 3075 	movx	a,@dptr
      000D6B FC               [12] 3076 	mov	r4,a
      000D6C A3               [24] 3077 	inc	dptr
      000D6D E0               [24] 3078 	movx	a,@dptr
      000D6E FD               [12] 3079 	mov	r5,a
      000D6F 0C               [12] 3080 	inc	r4
      000D70 BC 00 01         [24] 3081 	cjne	r4,#0x00,00173$
      000D73 0D               [12] 3082 	inc	r5
      000D74                       3083 00173$:
      000D74 90r00r14         [24] 3084 	mov	dptr,#(_buffers_array + 0x000a)
      000D77 EC               [12] 3085 	mov	a,r4
      000D78 F0               [24] 3086 	movx	@dptr,a
      000D79 ED               [12] 3087 	mov	a,r5
      000D7A A3               [24] 3088 	inc	dptr
      000D7B F0               [24] 3089 	movx	@dptr,a
      000D7C                       3090 00102$:
                                   3091 ;	program.c:690: program_stats.all_char_count += 1;
      000D7C 90r00r04         [24] 3092 	mov	dptr,#(_program_stats + 0x0004)
      000D7F E0               [24] 3093 	movx	a,@dptr
      000D80 FC               [12] 3094 	mov	r4,a
      000D81 A3               [24] 3095 	inc	dptr
      000D82 E0               [24] 3096 	movx	a,@dptr
      000D83 FD               [12] 3097 	mov	r5,a
      000D84 0C               [12] 3098 	inc	r4
      000D85 BC 00 01         [24] 3099 	cjne	r4,#0x00,00174$
      000D88 0D               [12] 3100 	inc	r5
      000D89                       3101 00174$:
      000D89 90r00r04         [24] 3102 	mov	dptr,#(_program_stats + 0x0004)
      000D8C EC               [12] 3103 	mov	a,r4
      000D8D F0               [24] 3104 	movx	@dptr,a
      000D8E ED               [12] 3105 	mov	a,r5
      000D8F A3               [24] 3106 	inc	dptr
      000D90 F0               [24] 3107 	movx	@dptr,a
                                   3108 ;	program.c:691: program_stats.storage_char_count += 1;
      000D91 90r00r06         [24] 3109 	mov	dptr,#(_program_stats + 0x0006)
      000D94 E0               [24] 3110 	movx	a,@dptr
      000D95 FC               [12] 3111 	mov	r4,a
      000D96 A3               [24] 3112 	inc	dptr
      000D97 E0               [24] 3113 	movx	a,@dptr
      000D98 FD               [12] 3114 	mov	r5,a
      000D99 0C               [12] 3115 	inc	r4
      000D9A BC 00 01         [24] 3116 	cjne	r4,#0x00,00175$
      000D9D 0D               [12] 3117 	inc	r5
      000D9E                       3118 00175$:
      000D9E 90r00r06         [24] 3119 	mov	dptr,#(_program_stats + 0x0006)
      000DA1 EC               [12] 3120 	mov	a,r4
      000DA2 F0               [24] 3121 	movx	@dptr,a
      000DA3 ED               [12] 3122 	mov	a,r5
      000DA4 A3               [24] 3123 	inc	dptr
      000DA5 F0               [24] 3124 	movx	@dptr,a
      000DA6 02r0Dr04         [24] 3125 	ljmp	00126$
      000DA9                       3126 00122$:
                                   3127 ;	program.c:693: else if (rec == 0x3F)
      000DA9 BE 3F 1F         [24] 3128 	cjne	r6,#0x3f,00119$
      000DAC BF 00 1C         [24] 3129 	cjne	r7,#0x00,00119$
                                   3130 ;	program.c:696: print_heap_stats();
      000DAF 12r10r8E         [24] 3131 	lcall	_print_heap_stats
                                   3132 ;	program.c:697: print_all_buffers();
      000DB2 12r11r4F         [24] 3133 	lcall	_print_all_buffers
                                   3134 ;	program.c:698: dump_buff_zero_ascii();
      000DB5 12r0Er2B         [24] 3135 	lcall	_dump_buff_zero_ascii
                                   3136 ;	program.c:699: program_stats.all_char_count = 0;
      000DB8 90r00r04         [24] 3137 	mov	dptr,#(_program_stats + 0x0004)
      000DBB E4               [12] 3138 	clr	a
      000DBC F0               [24] 3139 	movx	@dptr,a
      000DBD A3               [24] 3140 	inc	dptr
      000DBE F0               [24] 3141 	movx	@dptr,a
                                   3142 ;	program.c:700: program_stats.storage_char_count = 0;
      000DBF 90r00r06         [24] 3143 	mov	dptr,#(_program_stats + 0x0006)
      000DC2 F0               [24] 3144 	movx	@dptr,a
      000DC3 A3               [24] 3145 	inc	dptr
      000DC4 F0               [24] 3146 	movx	@dptr,a
                                   3147 ;	program.c:701: print_heap_menu();
      000DC5 12r08rF5         [24] 3148 	lcall	_print_heap_menu
      000DC8 02r0Dr04         [24] 3149 	ljmp	00126$
      000DCB                       3150 00119$:
                                   3151 ;	program.c:703: else if (rec == 0x3D)
      000DCB BE 3D 0C         [24] 3152 	cjne	r6,#0x3d,00116$
      000DCE BF 00 09         [24] 3153 	cjne	r7,#0x00,00116$
                                   3154 ;	program.c:706: dump_buff_zero_hex();
      000DD1 12r0Fr41         [24] 3155 	lcall	_dump_buff_zero_hex
                                   3156 ;	program.c:707: print_heap_menu();
      000DD4 12r08rF5         [24] 3157 	lcall	_print_heap_menu
      000DD7 02r0Dr04         [24] 3158 	ljmp	00126$
      000DDA                       3159 00116$:
                                   3160 ;	program.c:709: else if (rec == 0x40)
      000DDA BE 40 0C         [24] 3161 	cjne	r6,#0x40,00113$
      000DDD BF 00 09         [24] 3162 	cjne	r7,#0x00,00113$
                                   3163 ;	program.c:712: at_clear_all_buffers();
      000DE0 12r05r91         [24] 3164 	lcall	_at_clear_all_buffers
                                   3165 ;	program.c:713: print_heap_menu();
      000DE3 12r08rF5         [24] 3166 	lcall	_print_heap_menu
      000DE6 02r0Dr04         [24] 3167 	ljmp	00126$
      000DE9                       3168 00113$:
                                   3169 ;	program.c:715: else if (rec == 0x2B)
      000DE9 BE 2B 0C         [24] 3170 	cjne	r6,#0x2b,00110$
      000DEC BF 00 09         [24] 3171 	cjne	r7,#0x00,00110$
                                   3172 ;	program.c:718: create_new_buffer();
      000DEF 12r09rA4         [24] 3173 	lcall	_create_new_buffer
                                   3174 ;	program.c:719: print_heap_menu();
      000DF2 12r08rF5         [24] 3175 	lcall	_print_heap_menu
      000DF5 02r0Dr04         [24] 3176 	ljmp	00126$
      000DF8                       3177 00110$:
                                   3178 ;	program.c:721: else if (rec == 0x2D)
      000DF8 BE 2D 0C         [24] 3179 	cjne	r6,#0x2d,00107$
      000DFB BF 00 09         [24] 3180 	cjne	r7,#0x00,00107$
                                   3181 ;	program.c:724: delete_buffer();
      000DFE 12r06r2B         [24] 3182 	lcall	_delete_buffer
                                   3183 ;	program.c:725: print_heap_menu();
      000E01 12r08rF5         [24] 3184 	lcall	_print_heap_menu
      000E04 02r0Dr04         [24] 3185 	ljmp	00126$
      000E07                       3186 00107$:
                                   3187 ;	program.c:727: else if (rec == 0x4D)
      000E07 BE 4D 09         [24] 3188 	cjne	r6,#0x4d,00104$
      000E0A BF 00 06         [24] 3189 	cjne	r7,#0x00,00104$
                                   3190 ;	program.c:729: main_menu();
      000E0D 12r03rC9         [24] 3191 	lcall	_main_menu
      000E10 02r0Dr04         [24] 3192 	ljmp	00126$
      000E13                       3193 00104$:
                                   3194 ;	program.c:733: program_stats.all_char_count += 1;
      000E13 90r00r04         [24] 3195 	mov	dptr,#(_program_stats + 0x0004)
      000E16 E0               [24] 3196 	movx	a,@dptr
      000E17 FE               [12] 3197 	mov	r6,a
      000E18 A3               [24] 3198 	inc	dptr
      000E19 E0               [24] 3199 	movx	a,@dptr
      000E1A FF               [12] 3200 	mov	r7,a
      000E1B 0E               [12] 3201 	inc	r6
      000E1C BE 00 01         [24] 3202 	cjne	r6,#0x00,00188$
      000E1F 0F               [12] 3203 	inc	r7
      000E20                       3204 00188$:
      000E20 90r00r04         [24] 3205 	mov	dptr,#(_program_stats + 0x0004)
      000E23 EE               [12] 3206 	mov	a,r6
      000E24 F0               [24] 3207 	movx	@dptr,a
      000E25 EF               [12] 3208 	mov	a,r7
      000E26 A3               [24] 3209 	inc	dptr
      000E27 F0               [24] 3210 	movx	@dptr,a
                                   3211 ;	program.c:736: }
      000E28 02r0Dr04         [24] 3212 	ljmp	00126$
                                   3213 ;------------------------------------------------------------
                                   3214 ;Allocation info for local variables in function 'dump_buff_zero_ascii'
                                   3215 ;------------------------------------------------------------
                                   3216 ;j                         Allocated with name '_dump_buff_zero_ascii_j_65537_127'
                                   3217 ;i                         Allocated with name '_dump_buff_zero_ascii_i_196609_129'
                                   3218 ;------------------------------------------------------------
                                   3219 ;	program.c:744: void dump_buff_zero_ascii()
                                   3220 ;	-----------------------------------------
                                   3221 ;	 function dump_buff_zero_ascii
                                   3222 ;	-----------------------------------------
      000E2B                       3223 _dump_buff_zero_ascii:
                                   3224 ;	program.c:746: DEBUGPORT(0x09);
      000E2B 75 82 09         [24] 3225 	mov	dpl,#0x09
      000E2E 12r14r6F         [24] 3226 	lcall	_dataout
                                   3227 ;	program.c:747: int j = 64;
      000E31 90r01r5A         [24] 3228 	mov	dptr,#_dump_buff_zero_ascii_j_65537_127
      000E34 74 40            [12] 3229 	mov	a,#0x40
      000E36 F0               [24] 3230 	movx	@dptr,a
      000E37 E4               [12] 3231 	clr	a
      000E38 A3               [24] 3232 	inc	dptr
      000E39 F0               [24] 3233 	movx	@dptr,a
                                   3234 ;	program.c:748: if (buffers_array[0].num_char > 0)
      000E3A 90r00r14         [24] 3235 	mov	dptr,#(_buffers_array + 0x000a)
      000E3D E0               [24] 3236 	movx	a,@dptr
      000E3E FE               [12] 3237 	mov	r6,a
      000E3F A3               [24] 3238 	inc	dptr
      000E40 E0               [24] 3239 	movx	a,@dptr
      000E41 FF               [12] 3240 	mov	r7,a
      000E42 C3               [12] 3241 	clr	c
      000E43 E4               [12] 3242 	clr	a
      000E44 9E               [12] 3243 	subb	a,r6
      000E45 74 80            [12] 3244 	mov	a,#(0x00 ^ 0x80)
      000E47 8F F0            [24] 3245 	mov	b,r7
      000E49 63 F0 80         [24] 3246 	xrl	b,#0x80
      000E4C 95 F0            [12] 3247 	subb	a,b
      000E4E 40 03            [24] 3248 	jc	00135$
      000E50 02r0Fr2B         [24] 3249 	ljmp	00107$
      000E53                       3250 00135$:
                                   3251 ;	program.c:750: printf("\n\n\r***********Buffer-0-Contents*********** \n\r");
      000E53 74r17            [12] 3252 	mov	a,#___str_59
      000E55 C0 E0            [24] 3253 	push	acc
      000E57 74s09            [12] 3254 	mov	a,#(___str_59 >> 8)
      000E59 C0 E0            [24] 3255 	push	acc
      000E5B 74 80            [12] 3256 	mov	a,#0x80
      000E5D C0 E0            [24] 3257 	push	acc
      000E5F 12r00r00         [24] 3258 	lcall	_printf
      000E62 15 81            [12] 3259 	dec	sp
      000E64 15 81            [12] 3260 	dec	sp
      000E66 15 81            [12] 3261 	dec	sp
                                   3262 ;	program.c:751: for (int i = 0; i < buffers_array[0].num_char; i++)
      000E68 7E 00            [12] 3263 	mov	r6,#0x00
      000E6A 7F 00            [12] 3264 	mov	r7,#0x00
      000E6C                       3265 00110$:
      000E6C 90r00r14         [24] 3266 	mov	dptr,#(_buffers_array + 0x000a)
      000E6F E0               [24] 3267 	movx	a,@dptr
      000E70 FC               [12] 3268 	mov	r4,a
      000E71 A3               [24] 3269 	inc	dptr
      000E72 E0               [24] 3270 	movx	a,@dptr
      000E73 FD               [12] 3271 	mov	r5,a
      000E74 C3               [12] 3272 	clr	c
      000E75 EE               [12] 3273 	mov	a,r6
      000E76 9C               [12] 3274 	subb	a,r4
      000E77 EF               [12] 3275 	mov	a,r7
      000E78 64 80            [12] 3276 	xrl	a,#0x80
      000E7A 8D F0            [24] 3277 	mov	b,r5
      000E7C 63 F0 80         [24] 3278 	xrl	b,#0x80
      000E7F 95 F0            [12] 3279 	subb	a,b
      000E81 40 03            [24] 3280 	jc	00136$
      000E83 02r0Fr0E         [24] 3281 	ljmp	00105$
      000E86                       3282 00136$:
                                   3283 ;	program.c:753: if (j == 64)
      000E86 90r01r5A         [24] 3284 	mov	dptr,#_dump_buff_zero_ascii_j_65537_127
      000E89 E0               [24] 3285 	movx	a,@dptr
      000E8A FC               [12] 3286 	mov	r4,a
      000E8B A3               [24] 3287 	inc	dptr
      000E8C E0               [24] 3288 	movx	a,@dptr
      000E8D FD               [12] 3289 	mov	r5,a
      000E8E BC 40 20         [24] 3290 	cjne	r4,#0x40,00102$
      000E91 BD 00 1D         [24] 3291 	cjne	r5,#0x00,00102$
                                   3292 ;	program.c:755: printf("\n\r");
      000E94 C0 07            [24] 3293 	push	ar7
      000E96 C0 06            [24] 3294 	push	ar6
      000E98 74r45            [12] 3295 	mov	a,#___str_60
      000E9A C0 E0            [24] 3296 	push	acc
      000E9C 74s09            [12] 3297 	mov	a,#(___str_60 >> 8)
      000E9E C0 E0            [24] 3298 	push	acc
      000EA0 74 80            [12] 3299 	mov	a,#0x80
      000EA2 C0 E0            [24] 3300 	push	acc
      000EA4 12r00r00         [24] 3301 	lcall	_printf
      000EA7 15 81            [12] 3302 	dec	sp
      000EA9 15 81            [12] 3303 	dec	sp
      000EAB 15 81            [12] 3304 	dec	sp
      000EAD D0 06            [24] 3305 	pop	ar6
      000EAF D0 07            [24] 3306 	pop	ar7
      000EB1                       3307 00102$:
                                   3308 ;	program.c:757: putchar(*(buffers_array[0].buffer_start + i));
      000EB1 90r00r0C         [24] 3309 	mov	dptr,#(_buffers_array + 0x0002)
      000EB4 E0               [24] 3310 	movx	a,@dptr
      000EB5 FB               [12] 3311 	mov	r3,a
      000EB6 A3               [24] 3312 	inc	dptr
      000EB7 E0               [24] 3313 	movx	a,@dptr
      000EB8 FC               [12] 3314 	mov	r4,a
      000EB9 A3               [24] 3315 	inc	dptr
      000EBA E0               [24] 3316 	movx	a,@dptr
      000EBB FD               [12] 3317 	mov	r5,a
      000EBC EE               [12] 3318 	mov	a,r6
      000EBD 2B               [12] 3319 	add	a,r3
      000EBE FB               [12] 3320 	mov	r3,a
      000EBF EF               [12] 3321 	mov	a,r7
      000EC0 3C               [12] 3322 	addc	a,r4
      000EC1 FC               [12] 3323 	mov	r4,a
      000EC2 8B 82            [24] 3324 	mov	dpl,r3
      000EC4 8C 83            [24] 3325 	mov	dph,r4
      000EC6 8D F0            [24] 3326 	mov	b,r5
      000EC8 12r00r00         [24] 3327 	lcall	__gptrget
      000ECB FB               [12] 3328 	mov	r3,a
      000ECC 7D 00            [12] 3329 	mov	r5,#0x00
      000ECE 8B 82            [24] 3330 	mov	dpl,r3
      000ED0 8D 83            [24] 3331 	mov	dph,r5
      000ED2 C0 07            [24] 3332 	push	ar7
      000ED4 C0 06            [24] 3333 	push	ar6
      000ED6 12r14r14         [24] 3334 	lcall	_putchar
      000ED9 D0 06            [24] 3335 	pop	ar6
      000EDB D0 07            [24] 3336 	pop	ar7
                                   3337 ;	program.c:758: j--;
      000EDD 90r01r5A         [24] 3338 	mov	dptr,#_dump_buff_zero_ascii_j_65537_127
      000EE0 E0               [24] 3339 	movx	a,@dptr
      000EE1 24 FF            [12] 3340 	add	a,#0xff
      000EE3 FC               [12] 3341 	mov	r4,a
      000EE4 A3               [24] 3342 	inc	dptr
      000EE5 E0               [24] 3343 	movx	a,@dptr
      000EE6 34 FF            [12] 3344 	addc	a,#0xff
      000EE8 FD               [12] 3345 	mov	r5,a
      000EE9 90r01r5A         [24] 3346 	mov	dptr,#_dump_buff_zero_ascii_j_65537_127
      000EEC EC               [12] 3347 	mov	a,r4
      000EED F0               [24] 3348 	movx	@dptr,a
      000EEE ED               [12] 3349 	mov	a,r5
      000EEF A3               [24] 3350 	inc	dptr
      000EF0 F0               [24] 3351 	movx	@dptr,a
                                   3352 ;	program.c:759: if (j == 0)
      000EF1 90r01r5A         [24] 3353 	mov	dptr,#_dump_buff_zero_ascii_j_65537_127
      000EF4 E0               [24] 3354 	movx	a,@dptr
      000EF5 F5 F0            [12] 3355 	mov	b,a
      000EF7 A3               [24] 3356 	inc	dptr
      000EF8 E0               [24] 3357 	movx	a,@dptr
      000EF9 45 F0            [12] 3358 	orl	a,b
      000EFB 70 09            [24] 3359 	jnz	00111$
                                   3360 ;	program.c:760: j = 64;
      000EFD 90r01r5A         [24] 3361 	mov	dptr,#_dump_buff_zero_ascii_j_65537_127
      000F00 74 40            [12] 3362 	mov	a,#0x40
      000F02 F0               [24] 3363 	movx	@dptr,a
      000F03 E4               [12] 3364 	clr	a
      000F04 A3               [24] 3365 	inc	dptr
      000F05 F0               [24] 3366 	movx	@dptr,a
      000F06                       3367 00111$:
                                   3368 ;	program.c:751: for (int i = 0; i < buffers_array[0].num_char; i++)
      000F06 0E               [12] 3369 	inc	r6
      000F07 BE 00 01         [24] 3370 	cjne	r6,#0x00,00140$
      000F0A 0F               [12] 3371 	inc	r7
      000F0B                       3372 00140$:
      000F0B 02r0Er6C         [24] 3373 	ljmp	00110$
      000F0E                       3374 00105$:
                                   3375 ;	program.c:762: buffers_array[0].num_char = 0;
      000F0E 90r00r14         [24] 3376 	mov	dptr,#(_buffers_array + 0x000a)
      000F11 E4               [12] 3377 	clr	a
      000F12 F0               [24] 3378 	movx	@dptr,a
      000F13 A3               [24] 3379 	inc	dptr
      000F14 F0               [24] 3380 	movx	@dptr,a
                                   3381 ;	program.c:763: printf("\n\n\r");
      000F15 74r48            [12] 3382 	mov	a,#___str_61
      000F17 C0 E0            [24] 3383 	push	acc
      000F19 74s09            [12] 3384 	mov	a,#(___str_61 >> 8)
      000F1B C0 E0            [24] 3385 	push	acc
      000F1D 74 80            [12] 3386 	mov	a,#0x80
      000F1F C0 E0            [24] 3387 	push	acc
      000F21 12r00r00         [24] 3388 	lcall	_printf
      000F24 15 81            [12] 3389 	dec	sp
      000F26 15 81            [12] 3390 	dec	sp
      000F28 15 81            [12] 3391 	dec	sp
      000F2A 22               [24] 3392 	ret
      000F2B                       3393 00107$:
                                   3394 ;	program.c:767: printf("Buffer0 is Empty....\n\r");
      000F2B 74r4C            [12] 3395 	mov	a,#___str_62
      000F2D C0 E0            [24] 3396 	push	acc
      000F2F 74s09            [12] 3397 	mov	a,#(___str_62 >> 8)
      000F31 C0 E0            [24] 3398 	push	acc
      000F33 74 80            [12] 3399 	mov	a,#0x80
      000F35 C0 E0            [24] 3400 	push	acc
      000F37 12r00r00         [24] 3401 	lcall	_printf
      000F3A 15 81            [12] 3402 	dec	sp
      000F3C 15 81            [12] 3403 	dec	sp
      000F3E 15 81            [12] 3404 	dec	sp
                                   3405 ;	program.c:769: }
      000F40 22               [24] 3406 	ret
                                   3407 ;------------------------------------------------------------
                                   3408 ;Allocation info for local variables in function 'dump_buff_zero_hex'
                                   3409 ;------------------------------------------------------------
                                   3410 ;j                         Allocated with name '_dump_buff_zero_hex_j_131073_135'
                                   3411 ;i                         Allocated with name '_dump_buff_zero_hex_i_196609_136'
                                   3412 ;------------------------------------------------------------
                                   3413 ;	program.c:776: void dump_buff_zero_hex()
                                   3414 ;	-----------------------------------------
                                   3415 ;	 function dump_buff_zero_hex
                                   3416 ;	-----------------------------------------
      000F41                       3417 _dump_buff_zero_hex:
                                   3418 ;	program.c:778: DEBUGPORT(0xA);
      000F41 75 82 0A         [24] 3419 	mov	dpl,#0x0a
      000F44 12r14r6F         [24] 3420 	lcall	_dataout
                                   3421 ;	program.c:779: if (buffers_array[0].num_char > 0)
      000F47 90r00r14         [24] 3422 	mov	dptr,#(_buffers_array + 0x000a)
      000F4A E0               [24] 3423 	movx	a,@dptr
      000F4B FE               [12] 3424 	mov	r6,a
      000F4C A3               [24] 3425 	inc	dptr
      000F4D E0               [24] 3426 	movx	a,@dptr
      000F4E FF               [12] 3427 	mov	r7,a
      000F4F C3               [12] 3428 	clr	c
      000F50 E4               [12] 3429 	clr	a
      000F51 9E               [12] 3430 	subb	a,r6
      000F52 74 80            [12] 3431 	mov	a,#(0x00 ^ 0x80)
      000F54 8F F0            [24] 3432 	mov	b,r7
      000F56 63 F0 80         [24] 3433 	xrl	b,#0x80
      000F59 95 F0            [12] 3434 	subb	a,b
      000F5B 40 03            [24] 3435 	jc	00135$
      000F5D 02r10r78         [24] 3436 	ljmp	00107$
      000F60                       3437 00135$:
                                   3438 ;	program.c:781: printf("\n\r-------------------------HEXDUMP--------------------------------");
      000F60 74r63            [12] 3439 	mov	a,#___str_63
      000F62 C0 E0            [24] 3440 	push	acc
      000F64 74s09            [12] 3441 	mov	a,#(___str_63 >> 8)
      000F66 C0 E0            [24] 3442 	push	acc
      000F68 74 80            [12] 3443 	mov	a,#0x80
      000F6A C0 E0            [24] 3444 	push	acc
      000F6C 12r00r00         [24] 3445 	lcall	_printf
      000F6F 15 81            [12] 3446 	dec	sp
      000F71 15 81            [12] 3447 	dec	sp
      000F73 15 81            [12] 3448 	dec	sp
                                   3449 ;	program.c:782: printf("\n\r    ADDR: +0 +1 +2 +3 +4 +5 +6 +7 +8 +9 +A +B +C +D +E +F \n\r");
      000F75 74rA6            [12] 3450 	mov	a,#___str_64
      000F77 C0 E0            [24] 3451 	push	acc
      000F79 74s09            [12] 3452 	mov	a,#(___str_64 >> 8)
      000F7B C0 E0            [24] 3453 	push	acc
      000F7D 74 80            [12] 3454 	mov	a,#0x80
      000F7F C0 E0            [24] 3455 	push	acc
      000F81 12r00r00         [24] 3456 	lcall	_printf
      000F84 15 81            [12] 3457 	dec	sp
      000F86 15 81            [12] 3458 	dec	sp
      000F88 15 81            [12] 3459 	dec	sp
                                   3460 ;	program.c:783: int j = 16;
      000F8A 90r01r5C         [24] 3461 	mov	dptr,#_dump_buff_zero_hex_j_131073_135
      000F8D 74 10            [12] 3462 	mov	a,#0x10
      000F8F F0               [24] 3463 	movx	@dptr,a
      000F90 E4               [12] 3464 	clr	a
      000F91 A3               [24] 3465 	inc	dptr
      000F92 F0               [24] 3466 	movx	@dptr,a
                                   3467 ;	program.c:785: for (int i = 0; i < buffers_array[0].num_char; i++)
      000F93 7E 00            [12] 3468 	mov	r6,#0x00
      000F95 7F 00            [12] 3469 	mov	r7,#0x00
      000F97                       3470 00110$:
      000F97 90r00r14         [24] 3471 	mov	dptr,#(_buffers_array + 0x000a)
      000F9A E0               [24] 3472 	movx	a,@dptr
      000F9B FC               [12] 3473 	mov	r4,a
      000F9C A3               [24] 3474 	inc	dptr
      000F9D E0               [24] 3475 	movx	a,@dptr
      000F9E FD               [12] 3476 	mov	r5,a
      000F9F C3               [12] 3477 	clr	c
      000FA0 EE               [12] 3478 	mov	a,r6
      000FA1 9C               [12] 3479 	subb	a,r4
      000FA2 EF               [12] 3480 	mov	a,r7
      000FA3 64 80            [12] 3481 	xrl	a,#0x80
      000FA5 8D F0            [24] 3482 	mov	b,r5
      000FA7 63 F0 80         [24] 3483 	xrl	b,#0x80
      000FAA 95 F0            [12] 3484 	subb	a,b
      000FAC 40 03            [24] 3485 	jc	00136$
      000FAE 02r10r62         [24] 3486 	ljmp	00105$
      000FB1                       3487 00136$:
                                   3488 ;	program.c:787: if (j == 16)
      000FB1 90r01r5C         [24] 3489 	mov	dptr,#_dump_buff_zero_hex_j_131073_135
      000FB4 E0               [24] 3490 	movx	a,@dptr
      000FB5 FC               [12] 3491 	mov	r4,a
      000FB6 A3               [24] 3492 	inc	dptr
      000FB7 E0               [24] 3493 	movx	a,@dptr
      000FB8 FD               [12] 3494 	mov	r5,a
      000FB9 BC 10 37         [24] 3495 	cjne	r4,#0x10,00102$
      000FBC BD 00 34         [24] 3496 	cjne	r5,#0x00,00102$
                                   3497 ;	program.c:789: printf("\n\r%p: ", (buffers_array[0].buffer_start + i));
      000FBF 90r00r0C         [24] 3498 	mov	dptr,#(_buffers_array + 0x0002)
      000FC2 E0               [24] 3499 	movx	a,@dptr
      000FC3 FB               [12] 3500 	mov	r3,a
      000FC4 A3               [24] 3501 	inc	dptr
      000FC5 E0               [24] 3502 	movx	a,@dptr
      000FC6 FC               [12] 3503 	mov	r4,a
      000FC7 A3               [24] 3504 	inc	dptr
      000FC8 E0               [24] 3505 	movx	a,@dptr
      000FC9 FD               [12] 3506 	mov	r5,a
      000FCA EE               [12] 3507 	mov	a,r6
      000FCB 2B               [12] 3508 	add	a,r3
      000FCC FB               [12] 3509 	mov	r3,a
      000FCD EF               [12] 3510 	mov	a,r7
      000FCE 3C               [12] 3511 	addc	a,r4
      000FCF FC               [12] 3512 	mov	r4,a
      000FD0 C0 07            [24] 3513 	push	ar7
      000FD2 C0 06            [24] 3514 	push	ar6
      000FD4 C0 03            [24] 3515 	push	ar3
      000FD6 C0 04            [24] 3516 	push	ar4
      000FD8 C0 05            [24] 3517 	push	ar5
      000FDA 74rE5            [12] 3518 	mov	a,#___str_65
      000FDC C0 E0            [24] 3519 	push	acc
      000FDE 74s09            [12] 3520 	mov	a,#(___str_65 >> 8)
      000FE0 C0 E0            [24] 3521 	push	acc
      000FE2 74 80            [12] 3522 	mov	a,#0x80
      000FE4 C0 E0            [24] 3523 	push	acc
      000FE6 12r00r00         [24] 3524 	lcall	_printf
      000FE9 E5 81            [12] 3525 	mov	a,sp
      000FEB 24 FA            [12] 3526 	add	a,#0xfa
      000FED F5 81            [12] 3527 	mov	sp,a
      000FEF D0 06            [24] 3528 	pop	ar6
      000FF1 D0 07            [24] 3529 	pop	ar7
      000FF3                       3530 00102$:
                                   3531 ;	program.c:791: printf("%x ", *(buffers_array[0].buffer_start + i));
      000FF3 90r00r0C         [24] 3532 	mov	dptr,#(_buffers_array + 0x0002)
      000FF6 E0               [24] 3533 	movx	a,@dptr
      000FF7 FB               [12] 3534 	mov	r3,a
      000FF8 A3               [24] 3535 	inc	dptr
      000FF9 E0               [24] 3536 	movx	a,@dptr
      000FFA FC               [12] 3537 	mov	r4,a
      000FFB A3               [24] 3538 	inc	dptr
      000FFC E0               [24] 3539 	movx	a,@dptr
      000FFD FD               [12] 3540 	mov	r5,a
      000FFE EE               [12] 3541 	mov	a,r6
      000FFF 2B               [12] 3542 	add	a,r3
      001000 FB               [12] 3543 	mov	r3,a
      001001 EF               [12] 3544 	mov	a,r7
      001002 3C               [12] 3545 	addc	a,r4
      001003 FC               [12] 3546 	mov	r4,a
      001004 8B 82            [24] 3547 	mov	dpl,r3
      001006 8C 83            [24] 3548 	mov	dph,r4
      001008 8D F0            [24] 3549 	mov	b,r5
      00100A 12r00r00         [24] 3550 	lcall	__gptrget
      00100D FB               [12] 3551 	mov	r3,a
      00100E 7D 00            [12] 3552 	mov	r5,#0x00
      001010 C0 07            [24] 3553 	push	ar7
      001012 C0 06            [24] 3554 	push	ar6
      001014 C0 03            [24] 3555 	push	ar3
      001016 C0 05            [24] 3556 	push	ar5
      001018 74rEC            [12] 3557 	mov	a,#___str_66
      00101A C0 E0            [24] 3558 	push	acc
      00101C 74s09            [12] 3559 	mov	a,#(___str_66 >> 8)
      00101E C0 E0            [24] 3560 	push	acc
      001020 74 80            [12] 3561 	mov	a,#0x80
      001022 C0 E0            [24] 3562 	push	acc
      001024 12r00r00         [24] 3563 	lcall	_printf
      001027 E5 81            [12] 3564 	mov	a,sp
      001029 24 FB            [12] 3565 	add	a,#0xfb
      00102B F5 81            [12] 3566 	mov	sp,a
      00102D D0 06            [24] 3567 	pop	ar6
      00102F D0 07            [24] 3568 	pop	ar7
                                   3569 ;	program.c:792: j--;
      001031 90r01r5C         [24] 3570 	mov	dptr,#_dump_buff_zero_hex_j_131073_135
      001034 E0               [24] 3571 	movx	a,@dptr
      001035 24 FF            [12] 3572 	add	a,#0xff
      001037 FC               [12] 3573 	mov	r4,a
      001038 A3               [24] 3574 	inc	dptr
      001039 E0               [24] 3575 	movx	a,@dptr
      00103A 34 FF            [12] 3576 	addc	a,#0xff
      00103C FD               [12] 3577 	mov	r5,a
      00103D 90r01r5C         [24] 3578 	mov	dptr,#_dump_buff_zero_hex_j_131073_135
      001040 EC               [12] 3579 	mov	a,r4
      001041 F0               [24] 3580 	movx	@dptr,a
      001042 ED               [12] 3581 	mov	a,r5
      001043 A3               [24] 3582 	inc	dptr
      001044 F0               [24] 3583 	movx	@dptr,a
                                   3584 ;	program.c:793: if (j == 0)
      001045 90r01r5C         [24] 3585 	mov	dptr,#_dump_buff_zero_hex_j_131073_135
      001048 E0               [24] 3586 	movx	a,@dptr
      001049 F5 F0            [12] 3587 	mov	b,a
      00104B A3               [24] 3588 	inc	dptr
      00104C E0               [24] 3589 	movx	a,@dptr
      00104D 45 F0            [12] 3590 	orl	a,b
      00104F 70 09            [24] 3591 	jnz	00111$
                                   3592 ;	program.c:794: j = 16;
      001051 90r01r5C         [24] 3593 	mov	dptr,#_dump_buff_zero_hex_j_131073_135
      001054 74 10            [12] 3594 	mov	a,#0x10
      001056 F0               [24] 3595 	movx	@dptr,a
      001057 E4               [12] 3596 	clr	a
      001058 A3               [24] 3597 	inc	dptr
      001059 F0               [24] 3598 	movx	@dptr,a
      00105A                       3599 00111$:
                                   3600 ;	program.c:785: for (int i = 0; i < buffers_array[0].num_char; i++)
      00105A 0E               [12] 3601 	inc	r6
      00105B BE 00 01         [24] 3602 	cjne	r6,#0x00,00140$
      00105E 0F               [12] 3603 	inc	r7
      00105F                       3604 00140$:
      00105F 02r0Fr97         [24] 3605 	ljmp	00110$
      001062                       3606 00105$:
                                   3607 ;	program.c:796: printf("\n\n\r");
      001062 74r48            [12] 3608 	mov	a,#___str_61
      001064 C0 E0            [24] 3609 	push	acc
      001066 74s09            [12] 3610 	mov	a,#(___str_61 >> 8)
      001068 C0 E0            [24] 3611 	push	acc
      00106A 74 80            [12] 3612 	mov	a,#0x80
      00106C C0 E0            [24] 3613 	push	acc
      00106E 12r00r00         [24] 3614 	lcall	_printf
      001071 15 81            [12] 3615 	dec	sp
      001073 15 81            [12] 3616 	dec	sp
      001075 15 81            [12] 3617 	dec	sp
      001077 22               [24] 3618 	ret
      001078                       3619 00107$:
                                   3620 ;	program.c:800: printf("Buffer 0 is empty...\n\r");
      001078 74rF0            [12] 3621 	mov	a,#___str_67
      00107A C0 E0            [24] 3622 	push	acc
      00107C 74s09            [12] 3623 	mov	a,#(___str_67 >> 8)
      00107E C0 E0            [24] 3624 	push	acc
      001080 74 80            [12] 3625 	mov	a,#0x80
      001082 C0 E0            [24] 3626 	push	acc
      001084 12r00r00         [24] 3627 	lcall	_printf
      001087 15 81            [12] 3628 	dec	sp
      001089 15 81            [12] 3629 	dec	sp
      00108B 15 81            [12] 3630 	dec	sp
                                   3631 ;	program.c:802: }
      00108D 22               [24] 3632 	ret
                                   3633 ;------------------------------------------------------------
                                   3634 ;Allocation info for local variables in function 'print_heap_stats'
                                   3635 ;------------------------------------------------------------
                                   3636 ;	program.c:809: void print_heap_stats()
                                   3637 ;	-----------------------------------------
                                   3638 ;	 function print_heap_stats
                                   3639 ;	-----------------------------------------
      00108E                       3640 _print_heap_stats:
                                   3641 ;	program.c:811: DEBUGPORT(0xB);
      00108E 75 82 0B         [24] 3642 	mov	dpl,#0x0b
      001091 12r14r6F         [24] 3643 	lcall	_dataout
                                   3644 ;	program.c:812: printf("\n\r****************HEAP*STATS*************\n\r");
      001094 74r07            [12] 3645 	mov	a,#___str_68
      001096 C0 E0            [24] 3646 	push	acc
      001098 74s0A            [12] 3647 	mov	a,#(___str_68 >> 8)
      00109A C0 E0            [24] 3648 	push	acc
      00109C 74 80            [12] 3649 	mov	a,#0x80
      00109E C0 E0            [24] 3650 	push	acc
      0010A0 12r00r00         [24] 3651 	lcall	_printf
      0010A3 15 81            [12] 3652 	dec	sp
      0010A5 15 81            [12] 3653 	dec	sp
      0010A7 15 81            [12] 3654 	dec	sp
                                   3655 ;	program.c:813: printf("Total Heap Size: %d \n\r", program_stats.total_heap_size);
      0010A9 90r00r00         [24] 3656 	mov	dptr,#_program_stats
      0010AC E0               [24] 3657 	movx	a,@dptr
      0010AD FE               [12] 3658 	mov	r6,a
      0010AE A3               [24] 3659 	inc	dptr
      0010AF E0               [24] 3660 	movx	a,@dptr
      0010B0 FF               [12] 3661 	mov	r7,a
      0010B1 C0 06            [24] 3662 	push	ar6
      0010B3 C0 07            [24] 3663 	push	ar7
      0010B5 74r33            [12] 3664 	mov	a,#___str_69
      0010B7 C0 E0            [24] 3665 	push	acc
      0010B9 74s0A            [12] 3666 	mov	a,#(___str_69 >> 8)
      0010BB C0 E0            [24] 3667 	push	acc
      0010BD 74 80            [12] 3668 	mov	a,#0x80
      0010BF C0 E0            [24] 3669 	push	acc
      0010C1 12r00r00         [24] 3670 	lcall	_printf
      0010C4 E5 81            [12] 3671 	mov	a,sp
      0010C6 24 FB            [12] 3672 	add	a,#0xfb
      0010C8 F5 81            [12] 3673 	mov	sp,a
                                   3674 ;	program.c:814: printf("Allocated Heap Size: %d \n\r", program_stats.allocated_heap);
      0010CA 90r00r02         [24] 3675 	mov	dptr,#(_program_stats + 0x0002)
      0010CD E0               [24] 3676 	movx	a,@dptr
      0010CE FE               [12] 3677 	mov	r6,a
      0010CF A3               [24] 3678 	inc	dptr
      0010D0 E0               [24] 3679 	movx	a,@dptr
      0010D1 FF               [12] 3680 	mov	r7,a
      0010D2 C0 06            [24] 3681 	push	ar6
      0010D4 C0 07            [24] 3682 	push	ar7
      0010D6 74r4A            [12] 3683 	mov	a,#___str_70
      0010D8 C0 E0            [24] 3684 	push	acc
      0010DA 74s0A            [12] 3685 	mov	a,#(___str_70 >> 8)
      0010DC C0 E0            [24] 3686 	push	acc
      0010DE 74 80            [12] 3687 	mov	a,#0x80
      0010E0 C0 E0            [24] 3688 	push	acc
      0010E2 12r00r00         [24] 3689 	lcall	_printf
      0010E5 E5 81            [12] 3690 	mov	a,sp
      0010E7 24 FB            [12] 3691 	add	a,#0xfb
      0010E9 F5 81            [12] 3692 	mov	sp,a
                                   3693 ;	program.c:815: printf("All Chars: %d \n\r", program_stats.all_char_count);
      0010EB 90r00r04         [24] 3694 	mov	dptr,#(_program_stats + 0x0004)
      0010EE E0               [24] 3695 	movx	a,@dptr
      0010EF FE               [12] 3696 	mov	r6,a
      0010F0 A3               [24] 3697 	inc	dptr
      0010F1 E0               [24] 3698 	movx	a,@dptr
      0010F2 FF               [12] 3699 	mov	r7,a
      0010F3 C0 06            [24] 3700 	push	ar6
      0010F5 C0 07            [24] 3701 	push	ar7
      0010F7 74r65            [12] 3702 	mov	a,#___str_71
      0010F9 C0 E0            [24] 3703 	push	acc
      0010FB 74s0A            [12] 3704 	mov	a,#(___str_71 >> 8)
      0010FD C0 E0            [24] 3705 	push	acc
      0010FF 74 80            [12] 3706 	mov	a,#0x80
      001101 C0 E0            [24] 3707 	push	acc
      001103 12r00r00         [24] 3708 	lcall	_printf
      001106 E5 81            [12] 3709 	mov	a,sp
      001108 24 FB            [12] 3710 	add	a,#0xfb
      00110A F5 81            [12] 3711 	mov	sp,a
                                   3712 ;	program.c:816: printf("Storage Chars: %d \n\r", program_stats.storage_char_count);
      00110C 90r00r06         [24] 3713 	mov	dptr,#(_program_stats + 0x0006)
      00110F E0               [24] 3714 	movx	a,@dptr
      001110 FE               [12] 3715 	mov	r6,a
      001111 A3               [24] 3716 	inc	dptr
      001112 E0               [24] 3717 	movx	a,@dptr
      001113 FF               [12] 3718 	mov	r7,a
      001114 C0 06            [24] 3719 	push	ar6
      001116 C0 07            [24] 3720 	push	ar7
      001118 74r76            [12] 3721 	mov	a,#___str_72
      00111A C0 E0            [24] 3722 	push	acc
      00111C 74s0A            [12] 3723 	mov	a,#(___str_72 >> 8)
      00111E C0 E0            [24] 3724 	push	acc
      001120 74 80            [12] 3725 	mov	a,#0x80
      001122 C0 E0            [24] 3726 	push	acc
      001124 12r00r00         [24] 3727 	lcall	_printf
      001127 E5 81            [12] 3728 	mov	a,sp
      001129 24 FB            [12] 3729 	add	a,#0xfb
      00112B F5 81            [12] 3730 	mov	sp,a
                                   3731 ;	program.c:817: printf("Total Buffers: %d \n\r", program_stats.total_buffers);
      00112D 90r00r08         [24] 3732 	mov	dptr,#(_program_stats + 0x0008)
      001130 E0               [24] 3733 	movx	a,@dptr
      001131 FE               [12] 3734 	mov	r6,a
      001132 A3               [24] 3735 	inc	dptr
      001133 E0               [24] 3736 	movx	a,@dptr
      001134 FF               [12] 3737 	mov	r7,a
      001135 C0 06            [24] 3738 	push	ar6
      001137 C0 07            [24] 3739 	push	ar7
      001139 74r8B            [12] 3740 	mov	a,#___str_73
      00113B C0 E0            [24] 3741 	push	acc
      00113D 74s0A            [12] 3742 	mov	a,#(___str_73 >> 8)
      00113F C0 E0            [24] 3743 	push	acc
      001141 74 80            [12] 3744 	mov	a,#0x80
      001143 C0 E0            [24] 3745 	push	acc
      001145 12r00r00         [24] 3746 	lcall	_printf
      001148 E5 81            [12] 3747 	mov	a,sp
      00114A 24 FB            [12] 3748 	add	a,#0xfb
      00114C F5 81            [12] 3749 	mov	sp,a
                                   3750 ;	program.c:818: }
      00114E 22               [24] 3751 	ret
                                   3752 ;------------------------------------------------------------
                                   3753 ;Allocation info for local variables in function 'print_all_buffers'
                                   3754 ;------------------------------------------------------------
                                   3755 ;i                         Allocated with name '_print_all_buffers_i_131072_142'
                                   3756 ;------------------------------------------------------------
                                   3757 ;	program.c:825: void print_all_buffers()
                                   3758 ;	-----------------------------------------
                                   3759 ;	 function print_all_buffers
                                   3760 ;	-----------------------------------------
      00114F                       3761 _print_all_buffers:
                                   3762 ;	program.c:827: DEBUGPORT(0xC)
      00114F 75 82 0C         [24] 3763 	mov	dpl,#0x0c
      001152 12r14r6F         [24] 3764 	lcall	_dataout
                                   3765 ;	program.c:828: for (int i = 0; i < program_stats.total_buffers; i++)
      001155 7E 00            [12] 3766 	mov	r6,#0x00
      001157 7F 00            [12] 3767 	mov	r7,#0x00
      001159                       3768 00103$:
      001159 90r00r08         [24] 3769 	mov	dptr,#(_program_stats + 0x0008)
      00115C E0               [24] 3770 	movx	a,@dptr
      00115D FC               [12] 3771 	mov	r4,a
      00115E A3               [24] 3772 	inc	dptr
      00115F E0               [24] 3773 	movx	a,@dptr
      001160 FD               [12] 3774 	mov	r5,a
      001161 C3               [12] 3775 	clr	c
      001162 EE               [12] 3776 	mov	a,r6
      001163 9C               [12] 3777 	subb	a,r4
      001164 EF               [12] 3778 	mov	a,r7
      001165 64 80            [12] 3779 	xrl	a,#0x80
      001167 8D F0            [24] 3780 	mov	b,r5
      001169 63 F0 80         [24] 3781 	xrl	b,#0x80
      00116C 95 F0            [12] 3782 	subb	a,b
      00116E 40 03            [24] 3783 	jc	00116$
      001170 02r12rA9         [24] 3784 	ljmp	00101$
      001173                       3785 00116$:
                                   3786 ;	program.c:830: printf("****************BUFFER*%d***************\n\r", i);
      001173 C0 07            [24] 3787 	push	ar7
      001175 C0 06            [24] 3788 	push	ar6
      001177 C0 06            [24] 3789 	push	ar6
      001179 C0 07            [24] 3790 	push	ar7
      00117B 74rA0            [12] 3791 	mov	a,#___str_74
      00117D C0 E0            [24] 3792 	push	acc
      00117F 74s0A            [12] 3793 	mov	a,#(___str_74 >> 8)
      001181 C0 E0            [24] 3794 	push	acc
      001183 74 80            [12] 3795 	mov	a,#0x80
      001185 C0 E0            [24] 3796 	push	acc
      001187 12r00r00         [24] 3797 	lcall	_printf
      00118A E5 81            [12] 3798 	mov	a,sp
      00118C 24 FB            [12] 3799 	add	a,#0xfb
      00118E F5 81            [12] 3800 	mov	sp,a
      001190 D0 06            [24] 3801 	pop	ar6
      001192 D0 07            [24] 3802 	pop	ar7
                                   3803 ;	program.c:831: printf("Buffer#: %d \n\r", buffers_array[i].buffer_num);
      001194 90r00r00         [24] 3804 	mov	dptr,#__mulint_PARM_2
      001197 EE               [12] 3805 	mov	a,r6
      001198 F0               [24] 3806 	movx	@dptr,a
      001199 EF               [12] 3807 	mov	a,r7
      00119A A3               [24] 3808 	inc	dptr
      00119B F0               [24] 3809 	movx	@dptr,a
      00119C 90 00 0C         [24] 3810 	mov	dptr,#0x000c
      00119F C0 07            [24] 3811 	push	ar7
      0011A1 C0 06            [24] 3812 	push	ar6
      0011A3 12r00r00         [24] 3813 	lcall	__mulint
      0011A6 AC 82            [24] 3814 	mov	r4,dpl
      0011A8 AD 83            [24] 3815 	mov	r5,dph
      0011AA EC               [12] 3816 	mov	a,r4
      0011AB 24r0A            [12] 3817 	add	a,#_buffers_array
      0011AD F5 82            [12] 3818 	mov	dpl,a
      0011AF ED               [12] 3819 	mov	a,r5
      0011B0 34s00            [12] 3820 	addc	a,#(_buffers_array >> 8)
      0011B2 F5 83            [12] 3821 	mov	dph,a
      0011B4 E0               [24] 3822 	movx	a,@dptr
      0011B5 FA               [12] 3823 	mov	r2,a
      0011B6 A3               [24] 3824 	inc	dptr
      0011B7 E0               [24] 3825 	movx	a,@dptr
      0011B8 FB               [12] 3826 	mov	r3,a
      0011B9 C0 05            [24] 3827 	push	ar5
      0011BB C0 04            [24] 3828 	push	ar4
      0011BD C0 02            [24] 3829 	push	ar2
      0011BF C0 03            [24] 3830 	push	ar3
      0011C1 74rCB            [12] 3831 	mov	a,#___str_75
      0011C3 C0 E0            [24] 3832 	push	acc
      0011C5 74s0A            [12] 3833 	mov	a,#(___str_75 >> 8)
      0011C7 C0 E0            [24] 3834 	push	acc
      0011C9 74 80            [12] 3835 	mov	a,#0x80
      0011CB C0 E0            [24] 3836 	push	acc
      0011CD 12r00r00         [24] 3837 	lcall	_printf
      0011D0 E5 81            [12] 3838 	mov	a,sp
      0011D2 24 FB            [12] 3839 	add	a,#0xfb
      0011D4 F5 81            [12] 3840 	mov	sp,a
      0011D6 D0 04            [24] 3841 	pop	ar4
      0011D8 D0 05            [24] 3842 	pop	ar5
                                   3843 ;	program.c:832: printf("BufferStart: %p \n\r", buffers_array[i].buffer_start);
      0011DA EC               [12] 3844 	mov	a,r4
      0011DB 24r0A            [12] 3845 	add	a,#_buffers_array
      0011DD FC               [12] 3846 	mov	r4,a
      0011DE ED               [12] 3847 	mov	a,r5
      0011DF 34s00            [12] 3848 	addc	a,#(_buffers_array >> 8)
      0011E1 FD               [12] 3849 	mov	r5,a
      0011E2 8C 82            [24] 3850 	mov	dpl,r4
      0011E4 8D 83            [24] 3851 	mov	dph,r5
      0011E6 A3               [24] 3852 	inc	dptr
      0011E7 A3               [24] 3853 	inc	dptr
      0011E8 E0               [24] 3854 	movx	a,@dptr
      0011E9 F9               [12] 3855 	mov	r1,a
      0011EA A3               [24] 3856 	inc	dptr
      0011EB E0               [24] 3857 	movx	a,@dptr
      0011EC FA               [12] 3858 	mov	r2,a
      0011ED A3               [24] 3859 	inc	dptr
      0011EE E0               [24] 3860 	movx	a,@dptr
      0011EF FB               [12] 3861 	mov	r3,a
      0011F0 C0 05            [24] 3862 	push	ar5
      0011F2 C0 04            [24] 3863 	push	ar4
      0011F4 C0 01            [24] 3864 	push	ar1
      0011F6 C0 02            [24] 3865 	push	ar2
      0011F8 C0 03            [24] 3866 	push	ar3
      0011FA 74rDA            [12] 3867 	mov	a,#___str_76
      0011FC C0 E0            [24] 3868 	push	acc
      0011FE 74s0A            [12] 3869 	mov	a,#(___str_76 >> 8)
      001200 C0 E0            [24] 3870 	push	acc
      001202 74 80            [12] 3871 	mov	a,#0x80
      001204 C0 E0            [24] 3872 	push	acc
      001206 12r00r00         [24] 3873 	lcall	_printf
      001209 E5 81            [12] 3874 	mov	a,sp
      00120B 24 FA            [12] 3875 	add	a,#0xfa
      00120D F5 81            [12] 3876 	mov	sp,a
      00120F D0 04            [24] 3877 	pop	ar4
      001211 D0 05            [24] 3878 	pop	ar5
                                   3879 ;	program.c:833: printf("BufferEnd: %p \n\r", buffers_array[i].buffer_end);
      001213 8C 82            [24] 3880 	mov	dpl,r4
      001215 8D 83            [24] 3881 	mov	dph,r5
      001217 A3               [24] 3882 	inc	dptr
      001218 A3               [24] 3883 	inc	dptr
      001219 A3               [24] 3884 	inc	dptr
      00121A A3               [24] 3885 	inc	dptr
      00121B A3               [24] 3886 	inc	dptr
      00121C E0               [24] 3887 	movx	a,@dptr
      00121D F9               [12] 3888 	mov	r1,a
      00121E A3               [24] 3889 	inc	dptr
      00121F E0               [24] 3890 	movx	a,@dptr
      001220 FA               [12] 3891 	mov	r2,a
      001221 A3               [24] 3892 	inc	dptr
      001222 E0               [24] 3893 	movx	a,@dptr
      001223 FB               [12] 3894 	mov	r3,a
      001224 C0 05            [24] 3895 	push	ar5
      001226 C0 04            [24] 3896 	push	ar4
      001228 C0 01            [24] 3897 	push	ar1
      00122A C0 02            [24] 3898 	push	ar2
      00122C C0 03            [24] 3899 	push	ar3
      00122E 74rED            [12] 3900 	mov	a,#___str_77
      001230 C0 E0            [24] 3901 	push	acc
      001232 74s0A            [12] 3902 	mov	a,#(___str_77 >> 8)
      001234 C0 E0            [24] 3903 	push	acc
      001236 74 80            [12] 3904 	mov	a,#0x80
      001238 C0 E0            [24] 3905 	push	acc
      00123A 12r00r00         [24] 3906 	lcall	_printf
      00123D E5 81            [12] 3907 	mov	a,sp
      00123F 24 FA            [12] 3908 	add	a,#0xfa
      001241 F5 81            [12] 3909 	mov	sp,a
      001243 D0 04            [24] 3910 	pop	ar4
      001245 D0 05            [24] 3911 	pop	ar5
                                   3912 ;	program.c:834: printf("BufferSize: %d \n\r", buffers_array[i].buff_size);
      001247 74 08            [12] 3913 	mov	a,#0x08
      001249 2C               [12] 3914 	add	a,r4
      00124A F5 82            [12] 3915 	mov	dpl,a
      00124C E4               [12] 3916 	clr	a
      00124D 3D               [12] 3917 	addc	a,r5
      00124E F5 83            [12] 3918 	mov	dph,a
      001250 E0               [24] 3919 	movx	a,@dptr
      001251 FA               [12] 3920 	mov	r2,a
      001252 A3               [24] 3921 	inc	dptr
      001253 E0               [24] 3922 	movx	a,@dptr
      001254 FB               [12] 3923 	mov	r3,a
      001255 C0 05            [24] 3924 	push	ar5
      001257 C0 04            [24] 3925 	push	ar4
      001259 C0 02            [24] 3926 	push	ar2
      00125B C0 03            [24] 3927 	push	ar3
      00125D 74rFE            [12] 3928 	mov	a,#___str_78
      00125F C0 E0            [24] 3929 	push	acc
      001261 74s0A            [12] 3930 	mov	a,#(___str_78 >> 8)
      001263 C0 E0            [24] 3931 	push	acc
      001265 74 80            [12] 3932 	mov	a,#0x80
      001267 C0 E0            [24] 3933 	push	acc
      001269 12r00r00         [24] 3934 	lcall	_printf
      00126C E5 81            [12] 3935 	mov	a,sp
      00126E 24 FB            [12] 3936 	add	a,#0xfb
      001270 F5 81            [12] 3937 	mov	sp,a
      001272 D0 04            [24] 3938 	pop	ar4
      001274 D0 05            [24] 3939 	pop	ar5
                                   3940 ;	program.c:835: printf("TotalUsed: %d \n\r", buffers_array[i].num_char);
      001276 74 0A            [12] 3941 	mov	a,#0x0a
      001278 2C               [12] 3942 	add	a,r4
      001279 F5 82            [12] 3943 	mov	dpl,a
      00127B E4               [12] 3944 	clr	a
      00127C 3D               [12] 3945 	addc	a,r5
      00127D F5 83            [12] 3946 	mov	dph,a
      00127F E0               [24] 3947 	movx	a,@dptr
      001280 FC               [12] 3948 	mov	r4,a
      001281 A3               [24] 3949 	inc	dptr
      001282 E0               [24] 3950 	movx	a,@dptr
      001283 FD               [12] 3951 	mov	r5,a
      001284 C0 04            [24] 3952 	push	ar4
      001286 C0 05            [24] 3953 	push	ar5
      001288 74r10            [12] 3954 	mov	a,#___str_79
      00128A C0 E0            [24] 3955 	push	acc
      00128C 74s0B            [12] 3956 	mov	a,#(___str_79 >> 8)
      00128E C0 E0            [24] 3957 	push	acc
      001290 74 80            [12] 3958 	mov	a,#0x80
      001292 C0 E0            [24] 3959 	push	acc
      001294 12r00r00         [24] 3960 	lcall	_printf
      001297 E5 81            [12] 3961 	mov	a,sp
      001299 24 FB            [12] 3962 	add	a,#0xfb
      00129B F5 81            [12] 3963 	mov	sp,a
      00129D D0 06            [24] 3964 	pop	ar6
      00129F D0 07            [24] 3965 	pop	ar7
                                   3966 ;	program.c:828: for (int i = 0; i < program_stats.total_buffers; i++)
      0012A1 0E               [12] 3967 	inc	r6
      0012A2 BE 00 01         [24] 3968 	cjne	r6,#0x00,00117$
      0012A5 0F               [12] 3969 	inc	r7
      0012A6                       3970 00117$:
      0012A6 02r11r59         [24] 3971 	ljmp	00103$
      0012A9                       3972 00101$:
                                   3973 ;	program.c:837: printf("***************************************\n\r");
      0012A9 74r21            [12] 3974 	mov	a,#___str_80
      0012AB C0 E0            [24] 3975 	push	acc
      0012AD 74s0B            [12] 3976 	mov	a,#(___str_80 >> 8)
      0012AF C0 E0            [24] 3977 	push	acc
      0012B1 74 80            [12] 3978 	mov	a,#0x80
      0012B3 C0 E0            [24] 3979 	push	acc
      0012B5 12r00r00         [24] 3980 	lcall	_printf
      0012B8 15 81            [12] 3981 	dec	sp
      0012BA 15 81            [12] 3982 	dec	sp
      0012BC 15 81            [12] 3983 	dec	sp
                                   3984 ;	program.c:838: }
      0012BE 22               [24] 3985 	ret
                                   3986 ;------------------------------------------------------------
                                   3987 ;Allocation info for local variables in function 'get_number'
                                   3988 ;------------------------------------------------------------
                                   3989 ;total_chars               Allocated with name '_get_number_total_chars_65536_144'
                                   3990 ;rec                       Allocated with name '_get_number_rec_65537_146'
                                   3991 ;num                       Allocated with name '_get_number_num_65537_146'
                                   3992 ;i                         Allocated with name '_get_number_i_131073_147'
                                   3993 ;------------------------------------------------------------
                                   3994 ;	program.c:845: int get_number(int total_chars)
                                   3995 ;	-----------------------------------------
                                   3996 ;	 function get_number
                                   3997 ;	-----------------------------------------
      0012BF                       3998 _get_number:
      0012BF AF 83            [24] 3999 	mov	r7,dph
      0012C1 E5 82            [12] 4000 	mov	a,dpl
      0012C3 90r01r5E         [24] 4001 	mov	dptr,#_get_number_total_chars_65536_144
      0012C6 F0               [24] 4002 	movx	@dptr,a
      0012C7 EF               [12] 4003 	mov	a,r7
      0012C8 A3               [24] 4004 	inc	dptr
      0012C9 F0               [24] 4005 	movx	@dptr,a
                                   4006 ;	program.c:847: DEBUGPORT(0xD);
      0012CA 75 82 0D         [24] 4007 	mov	dpl,#0x0d
      0012CD 12r14r6F         [24] 4008 	lcall	_dataout
                                   4009 ;	program.c:849: int num = 0;
      0012D0 90r01r60         [24] 4010 	mov	dptr,#_get_number_num_65537_146
      0012D3 E4               [12] 4011 	clr	a
      0012D4 F0               [24] 4012 	movx	@dptr,a
      0012D5 A3               [24] 4013 	inc	dptr
      0012D6 F0               [24] 4014 	movx	@dptr,a
                                   4015 ;	program.c:850: for (int i = total_chars; i > 0; i--)
      0012D7 90r01r5E         [24] 4016 	mov	dptr,#_get_number_total_chars_65536_144
      0012DA E0               [24] 4017 	movx	a,@dptr
      0012DB FE               [12] 4018 	mov	r6,a
      0012DC A3               [24] 4019 	inc	dptr
      0012DD E0               [24] 4020 	movx	a,@dptr
      0012DE FF               [12] 4021 	mov	r7,a
      0012DF                       4022 00107$:
      0012DF C3               [12] 4023 	clr	c
      0012E0 E4               [12] 4024 	clr	a
      0012E1 9E               [12] 4025 	subb	a,r6
      0012E2 74 80            [12] 4026 	mov	a,#(0x00 ^ 0x80)
      0012E4 8F F0            [24] 4027 	mov	b,r7
      0012E6 63 F0 80         [24] 4028 	xrl	b,#0x80
      0012E9 95 F0            [12] 4029 	subb	a,b
      0012EB 40 03            [24] 4030 	jc	00127$
      0012ED 02r13r8B         [24] 4031 	ljmp	00105$
      0012F0                       4032 00127$:
                                   4033 ;	program.c:852: rec = getchar();
      0012F0 C0 07            [24] 4034 	push	ar7
      0012F2 C0 06            [24] 4035 	push	ar6
      0012F4 12r14r33         [24] 4036 	lcall	_getchar
      0012F7 AC 82            [24] 4037 	mov	r4,dpl
      0012F9 AD 83            [24] 4038 	mov	r5,dph
      0012FB D0 06            [24] 4039 	pop	ar6
      0012FD D0 07            [24] 4040 	pop	ar7
                                   4041 ;	program.c:854: if (rec <= 0x39 && rec >= 0x30)
      0012FF C3               [12] 4042 	clr	c
      001300 74 39            [12] 4043 	mov	a,#0x39
      001302 9C               [12] 4044 	subb	a,r4
      001303 74 80            [12] 4045 	mov	a,#(0x00 ^ 0x80)
      001305 8D F0            [24] 4046 	mov	b,r5
      001307 63 F0 80         [24] 4047 	xrl	b,#0x80
      00130A 95 F0            [12] 4048 	subb	a,b
      00130C 40 5C            [24] 4049 	jc	00102$
      00130E EC               [12] 4050 	mov	a,r4
      00130F 94 30            [12] 4051 	subb	a,#0x30
      001311 ED               [12] 4052 	mov	a,r5
      001312 64 80            [12] 4053 	xrl	a,#0x80
      001314 94 80            [12] 4054 	subb	a,#0x80
      001316 40 52            [24] 4055 	jc	00102$
                                   4056 ;	program.c:856: num += ((rec - 0x30) * get_num_helper(i - 1));
      001318 EC               [12] 4057 	mov	a,r4
      001319 24 D0            [12] 4058 	add	a,#0xd0
      00131B FC               [12] 4059 	mov	r4,a
      00131C ED               [12] 4060 	mov	a,r5
      00131D 34 FF            [12] 4061 	addc	a,#0xff
      00131F FD               [12] 4062 	mov	r5,a
      001320 EE               [12] 4063 	mov	a,r6
      001321 24 FF            [12] 4064 	add	a,#0xff
      001323 FA               [12] 4065 	mov	r2,a
      001324 EF               [12] 4066 	mov	a,r7
      001325 34 FF            [12] 4067 	addc	a,#0xff
      001327 FB               [12] 4068 	mov	r3,a
      001328 8A 82            [24] 4069 	mov	dpl,r2
      00132A 8B 83            [24] 4070 	mov	dph,r3
      00132C C0 07            [24] 4071 	push	ar7
      00132E C0 06            [24] 4072 	push	ar6
      001330 C0 05            [24] 4073 	push	ar5
      001332 C0 04            [24] 4074 	push	ar4
      001334 12r13r97         [24] 4075 	lcall	_get_num_helper
      001337 AA 82            [24] 4076 	mov	r2,dpl
      001339 AB 83            [24] 4077 	mov	r3,dph
      00133B D0 04            [24] 4078 	pop	ar4
      00133D D0 05            [24] 4079 	pop	ar5
      00133F 90r00r00         [24] 4080 	mov	dptr,#__mulint_PARM_2
      001342 EA               [12] 4081 	mov	a,r2
      001343 F0               [24] 4082 	movx	@dptr,a
      001344 EB               [12] 4083 	mov	a,r3
      001345 A3               [24] 4084 	inc	dptr
      001346 F0               [24] 4085 	movx	@dptr,a
      001347 8C 82            [24] 4086 	mov	dpl,r4
      001349 8D 83            [24] 4087 	mov	dph,r5
      00134B 12r00r00         [24] 4088 	lcall	__mulint
      00134E AC 82            [24] 4089 	mov	r4,dpl
      001350 AD 83            [24] 4090 	mov	r5,dph
      001352 D0 06            [24] 4091 	pop	ar6
      001354 D0 07            [24] 4092 	pop	ar7
      001356 90r01r60         [24] 4093 	mov	dptr,#_get_number_num_65537_146
      001359 E0               [24] 4094 	movx	a,@dptr
      00135A FA               [12] 4095 	mov	r2,a
      00135B A3               [24] 4096 	inc	dptr
      00135C E0               [24] 4097 	movx	a,@dptr
      00135D FB               [12] 4098 	mov	r3,a
      00135E 90r01r60         [24] 4099 	mov	dptr,#_get_number_num_65537_146
      001361 EC               [12] 4100 	mov	a,r4
      001362 2A               [12] 4101 	add	a,r2
      001363 F0               [24] 4102 	movx	@dptr,a
      001364 ED               [12] 4103 	mov	a,r5
      001365 3B               [12] 4104 	addc	a,r3
      001366 A3               [24] 4105 	inc	dptr
      001367 F0               [24] 4106 	movx	@dptr,a
      001368 80 19            [24] 4107 	sjmp	00108$
      00136A                       4108 00102$:
                                   4109 ;	program.c:860: printf("ERR,Numbers ONLY!\n\r");
      00136A 74r4B            [12] 4110 	mov	a,#___str_81
      00136C C0 E0            [24] 4111 	push	acc
      00136E 74s0B            [12] 4112 	mov	a,#(___str_81 >> 8)
      001370 C0 E0            [24] 4113 	push	acc
      001372 74 80            [12] 4114 	mov	a,#0x80
      001374 C0 E0            [24] 4115 	push	acc
      001376 12r00r00         [24] 4116 	lcall	_printf
      001379 15 81            [12] 4117 	dec	sp
      00137B 15 81            [12] 4118 	dec	sp
      00137D 15 81            [12] 4119 	dec	sp
                                   4120 ;	program.c:861: return -1;
      00137F 90 FF FF         [24] 4121 	mov	dptr,#0xffff
      001382 22               [24] 4122 	ret
      001383                       4123 00108$:
                                   4124 ;	program.c:850: for (int i = total_chars; i > 0; i--)
      001383 1E               [12] 4125 	dec	r6
      001384 BE FF 01         [24] 4126 	cjne	r6,#0xff,00130$
      001387 1F               [12] 4127 	dec	r7
      001388                       4128 00130$:
      001388 02r12rDF         [24] 4129 	ljmp	00107$
      00138B                       4130 00105$:
                                   4131 ;	program.c:864: return num;
      00138B 90r01r60         [24] 4132 	mov	dptr,#_get_number_num_65537_146
      00138E E0               [24] 4133 	movx	a,@dptr
      00138F FE               [12] 4134 	mov	r6,a
      001390 A3               [24] 4135 	inc	dptr
      001391 E0               [24] 4136 	movx	a,@dptr
                                   4137 ;	program.c:865: }
      001392 8E 82            [24] 4138 	mov	dpl,r6
      001394 F5 83            [12] 4139 	mov	dph,a
      001396 22               [24] 4140 	ret
                                   4141 ;------------------------------------------------------------
                                   4142 ;Allocation info for local variables in function 'get_num_helper'
                                   4143 ;------------------------------------------------------------
                                   4144 ;times                     Allocated with name '_get_num_helper_times_65536_151'
                                   4145 ;num                       Allocated with name '_get_num_helper_num_65536_152'
                                   4146 ;i                         Allocated with name '_get_num_helper_i_131072_153'
                                   4147 ;------------------------------------------------------------
                                   4148 ;	program.c:872: int get_num_helper(int times)
                                   4149 ;	-----------------------------------------
                                   4150 ;	 function get_num_helper
                                   4151 ;	-----------------------------------------
      001397                       4152 _get_num_helper:
      001397 AF 83            [24] 4153 	mov	r7,dph
      001399 E5 82            [12] 4154 	mov	a,dpl
      00139B 90r01r62         [24] 4155 	mov	dptr,#_get_num_helper_times_65536_151
      00139E F0               [24] 4156 	movx	@dptr,a
      00139F EF               [12] 4157 	mov	a,r7
      0013A0 A3               [24] 4158 	inc	dptr
      0013A1 F0               [24] 4159 	movx	@dptr,a
                                   4160 ;	program.c:874: int num = 1;
      0013A2 90r01r64         [24] 4161 	mov	dptr,#_get_num_helper_num_65536_152
      0013A5 74 01            [12] 4162 	mov	a,#0x01
      0013A7 F0               [24] 4163 	movx	@dptr,a
      0013A8 E4               [12] 4164 	clr	a
      0013A9 A3               [24] 4165 	inc	dptr
      0013AA F0               [24] 4166 	movx	@dptr,a
                                   4167 ;	program.c:876: for (int i = 0; i < times; i++)
      0013AB 90r01r62         [24] 4168 	mov	dptr,#_get_num_helper_times_65536_151
      0013AE E0               [24] 4169 	movx	a,@dptr
      0013AF FE               [12] 4170 	mov	r6,a
      0013B0 A3               [24] 4171 	inc	dptr
      0013B1 E0               [24] 4172 	movx	a,@dptr
      0013B2 FF               [12] 4173 	mov	r7,a
      0013B3 7C 00            [12] 4174 	mov	r4,#0x00
      0013B5 7D 00            [12] 4175 	mov	r5,#0x00
      0013B7                       4176 00106$:
      0013B7 C3               [12] 4177 	clr	c
      0013B8 EC               [12] 4178 	mov	a,r4
      0013B9 9E               [12] 4179 	subb	a,r6
      0013BA ED               [12] 4180 	mov	a,r5
      0013BB 64 80            [12] 4181 	xrl	a,#0x80
      0013BD 8F F0            [24] 4182 	mov	b,r7
      0013BF 63 F0 80         [24] 4183 	xrl	b,#0x80
      0013C2 95 F0            [12] 4184 	subb	a,b
      0013C4 50 3A            [24] 4185 	jnc	00101$
                                   4186 ;	program.c:878: num = num * 10;
      0013C6 90r01r64         [24] 4187 	mov	dptr,#_get_num_helper_num_65536_152
      0013C9 E0               [24] 4188 	movx	a,@dptr
      0013CA FA               [12] 4189 	mov	r2,a
      0013CB A3               [24] 4190 	inc	dptr
      0013CC E0               [24] 4191 	movx	a,@dptr
      0013CD FB               [12] 4192 	mov	r3,a
      0013CE 90r00r00         [24] 4193 	mov	dptr,#__mulint_PARM_2
      0013D1 EA               [12] 4194 	mov	a,r2
      0013D2 F0               [24] 4195 	movx	@dptr,a
      0013D3 EB               [12] 4196 	mov	a,r3
      0013D4 A3               [24] 4197 	inc	dptr
      0013D5 F0               [24] 4198 	movx	@dptr,a
      0013D6 90 00 0A         [24] 4199 	mov	dptr,#0x000a
      0013D9 C0 07            [24] 4200 	push	ar7
      0013DB C0 06            [24] 4201 	push	ar6
      0013DD C0 05            [24] 4202 	push	ar5
      0013DF C0 04            [24] 4203 	push	ar4
      0013E1 12r00r00         [24] 4204 	lcall	__mulint
      0013E4 E5 82            [12] 4205 	mov	a,dpl
      0013E6 85 83 F0         [24] 4206 	mov	b,dph
      0013E9 D0 04            [24] 4207 	pop	ar4
      0013EB D0 05            [24] 4208 	pop	ar5
      0013ED D0 06            [24] 4209 	pop	ar6
      0013EF D0 07            [24] 4210 	pop	ar7
      0013F1 90r01r64         [24] 4211 	mov	dptr,#_get_num_helper_num_65536_152
      0013F4 F0               [24] 4212 	movx	@dptr,a
      0013F5 E5 F0            [12] 4213 	mov	a,b
      0013F7 A3               [24] 4214 	inc	dptr
      0013F8 F0               [24] 4215 	movx	@dptr,a
                                   4216 ;	program.c:876: for (int i = 0; i < times; i++)
      0013F9 0C               [12] 4217 	inc	r4
      0013FA BC 00 BA         [24] 4218 	cjne	r4,#0x00,00106$
      0013FD 0D               [12] 4219 	inc	r5
      0013FE 80 B7            [24] 4220 	sjmp	00106$
      001400                       4221 00101$:
                                   4222 ;	program.c:880: if (times == 0)
      001400 EE               [12] 4223 	mov	a,r6
      001401 4F               [12] 4224 	orl	a,r7
      001402 70 04            [24] 4225 	jnz	00103$
                                   4226 ;	program.c:881: return 1;
      001404 90 00 01         [24] 4227 	mov	dptr,#0x0001
      001407 22               [24] 4228 	ret
      001408                       4229 00103$:
                                   4230 ;	program.c:883: return num;
      001408 90r01r64         [24] 4231 	mov	dptr,#_get_num_helper_num_65536_152
      00140B E0               [24] 4232 	movx	a,@dptr
      00140C FE               [12] 4233 	mov	r6,a
      00140D A3               [24] 4234 	inc	dptr
      00140E E0               [24] 4235 	movx	a,@dptr
                                   4236 ;	program.c:884: }
      00140F 8E 82            [24] 4237 	mov	dpl,r6
      001411 F5 83            [12] 4238 	mov	dph,a
      001413 22               [24] 4239 	ret
                                   4240 ;------------------------------------------------------------
                                   4241 ;Allocation info for local variables in function 'putchar'
                                   4242 ;------------------------------------------------------------
                                   4243 ;c                         Allocated with name '_putchar_c_65536_155'
                                   4244 ;------------------------------------------------------------
                                   4245 ;	program.c:897: int putchar(int c)
                                   4246 ;	-----------------------------------------
                                   4247 ;	 function putchar
                                   4248 ;	-----------------------------------------
      001414                       4249 _putchar:
      001414 AF 83            [24] 4250 	mov	r7,dph
      001416 E5 82            [12] 4251 	mov	a,dpl
      001418 90r01r66         [24] 4252 	mov	dptr,#_putchar_c_65536_155
      00141B F0               [24] 4253 	movx	@dptr,a
      00141C EF               [12] 4254 	mov	a,r7
      00141D A3               [24] 4255 	inc	dptr
      00141E F0               [24] 4256 	movx	@dptr,a
                                   4257 ;	program.c:899: while ((SCON & 0x02) == 0)
      00141F                       4258 00101$:
      00141F E5 98            [12] 4259 	mov	a,_SCON
      001421 30 E1 FB         [24] 4260 	jnb	acc.1,00101$
                                   4261 ;	program.c:901: TI = 0;
                                   4262 ;	assignBit
      001424 C2 99            [12] 4263 	clr	_TI
                                   4264 ;	program.c:902: SBUF = c;
      001426 90r01r66         [24] 4265 	mov	dptr,#_putchar_c_65536_155
      001429 E0               [24] 4266 	movx	a,@dptr
      00142A FE               [12] 4267 	mov	r6,a
      00142B A3               [24] 4268 	inc	dptr
      00142C E0               [24] 4269 	movx	a,@dptr
      00142D 8E 99            [24] 4270 	mov	_SBUF,r6
                                   4271 ;	program.c:903: return 0;
      00142F 90 00 00         [24] 4272 	mov	dptr,#0x0000
                                   4273 ;	program.c:904: }
      001432 22               [24] 4274 	ret
                                   4275 ;------------------------------------------------------------
                                   4276 ;Allocation info for local variables in function 'getchar'
                                   4277 ;------------------------------------------------------------
                                   4278 ;	program.c:911: int getchar()
                                   4279 ;	-----------------------------------------
                                   4280 ;	 function getchar
                                   4281 ;	-----------------------------------------
      001433                       4282 _getchar:
                                   4283 ;	program.c:913: while (RI == 0)
      001433                       4284 00101$:
                                   4285 ;	program.c:915: RI = 0;
                                   4286 ;	assignBit
      001433 10 98 02         [24] 4287 	jbc	_RI,00140$
      001436 80 FB            [24] 4288 	sjmp	00101$
      001438                       4289 00140$:
                                   4290 ;	program.c:917: if (SBUF != 0x3F && SBUF != 0x3D && SBUF != 0x40 && SBUF != 0x2B && SBUF != 0x2D)
      001438 74 3F            [12] 4291 	mov	a,#0x3f
      00143A B5 99 02         [24] 4292 	cjne	a,_SBUF,00141$
      00143D 80 27            [24] 4293 	sjmp	00105$
      00143F                       4294 00141$:
      00143F 74 3D            [12] 4295 	mov	a,#0x3d
      001441 B5 99 02         [24] 4296 	cjne	a,_SBUF,00142$
      001444 80 20            [24] 4297 	sjmp	00105$
      001446                       4298 00142$:
      001446 74 40            [12] 4299 	mov	a,#0x40
      001448 B5 99 02         [24] 4300 	cjne	a,_SBUF,00143$
      00144B 80 19            [24] 4301 	sjmp	00105$
      00144D                       4302 00143$:
      00144D 74 2B            [12] 4303 	mov	a,#0x2b
      00144F B5 99 02         [24] 4304 	cjne	a,_SBUF,00144$
      001452 80 12            [24] 4305 	sjmp	00105$
      001454                       4306 00144$:
      001454 74 2D            [12] 4307 	mov	a,#0x2d
      001456 B5 99 02         [24] 4308 	cjne	a,_SBUF,00145$
      001459 80 0B            [24] 4309 	sjmp	00105$
      00145B                       4310 00145$:
                                   4311 ;	program.c:918: putchar(SBUF);
      00145B AE 99            [24] 4312 	mov	r6,_SBUF
      00145D 7F 00            [12] 4313 	mov	r7,#0x00
      00145F 8E 82            [24] 4314 	mov	dpl,r6
      001461 8F 83            [24] 4315 	mov	dph,r7
      001463 12r14r14         [24] 4316 	lcall	_putchar
      001466                       4317 00105$:
                                   4318 ;	program.c:919: return SBUF;
      001466 AE 99            [24] 4319 	mov	r6,_SBUF
      001468 7F 00            [12] 4320 	mov	r7,#0x00
      00146A 8E 82            [24] 4321 	mov	dpl,r6
      00146C 8F 83            [24] 4322 	mov	dph,r7
                                   4323 ;	program.c:920: }
      00146E 22               [24] 4324 	ret
                                   4325 ;------------------------------------------------------------
                                   4326 ;Allocation info for local variables in function 'dataout'
                                   4327 ;------------------------------------------------------------
                                   4328 ;data                      Allocated with name '_dataout_data_65536_158'
                                   4329 ;------------------------------------------------------------
                                   4330 ;	program.c:927: void dataout(unsigned char data)
                                   4331 ;	-----------------------------------------
                                   4332 ;	 function dataout
                                   4333 ;	-----------------------------------------
      00146F                       4334 _dataout:
      00146F E5 82            [12] 4335 	mov	a,dpl
      001471 90r01r68         [24] 4336 	mov	dptr,#_dataout_data_65536_158
      001474 F0               [24] 4337 	movx	@dptr,a
                                   4338 ;	program.c:929: DEBUG_LOC = data;
      001475 E0               [24] 4339 	movx	a,@dptr
      001476 90 80 00         [24] 4340 	mov	dptr,#_DEBUG_LOC
      001479 F0               [24] 4341 	movx	@dptr,a
                                   4342 ;	program.c:930: }
      00147A 22               [24] 4343 	ret
                                   4344 ;------------------------------------------------------------
                                   4345 ;Allocation info for local variables in function 'asm_call'
                                   4346 ;------------------------------------------------------------
                                   4347 ;sent_from_asm             Allocated with name '_asm_call_sent_from_asm_65536_160'
                                   4348 ;------------------------------------------------------------
                                   4349 ;	program.c:932: void asm_call(unsigned char sent_from_asm)
                                   4350 ;	-----------------------------------------
                                   4351 ;	 function asm_call
                                   4352 ;	-----------------------------------------
      00147B                       4353 _asm_call:
      00147B E5 82            [12] 4354 	mov	a,dpl
      00147D 90r01r69         [24] 4355 	mov	dptr,#_asm_call_sent_from_asm_65536_160
      001480 F0               [24] 4356 	movx	@dptr,a
                                   4357 ;	program.c:934: printf("\n\n\r This function was called from assembly, character sent from there -> %c\n\r", sent_from_asm);
      001481 E0               [24] 4358 	movx	a,@dptr
      001482 FF               [12] 4359 	mov	r7,a
      001483 7E 00            [12] 4360 	mov	r6,#0x00
      001485 C0 07            [24] 4361 	push	ar7
      001487 C0 06            [24] 4362 	push	ar6
      001489 74r5F            [12] 4363 	mov	a,#___str_82
      00148B C0 E0            [24] 4364 	push	acc
      00148D 74s0B            [12] 4365 	mov	a,#(___str_82 >> 8)
      00148F C0 E0            [24] 4366 	push	acc
      001491 74 80            [12] 4367 	mov	a,#0x80
      001493 C0 E0            [24] 4368 	push	acc
      001495 12r00r00         [24] 4369 	lcall	_printf
      001498 E5 81            [12] 4370 	mov	a,sp
      00149A 24 FB            [12] 4371 	add	a,#0xfb
      00149C F5 81            [12] 4372 	mov	sp,a
                                   4373 ;	program.c:935: }
      00149E 22               [24] 4374 	ret
                                   4375 ;------------------------------------------------------------
                                   4376 ;Allocation info for local variables in function '_sdcc_external_startup'
                                   4377 ;------------------------------------------------------------
                                   4378 ;	program.c:942: _sdcc_external_startup()
                                   4379 ;	-----------------------------------------
                                   4380 ;	 function _sdcc_external_startup
                                   4381 ;	-----------------------------------------
      00149F                       4382 __sdcc_external_startup:
                                   4383 ;	program.c:944: CKCON0 |= 0x1;
      00149F 43 8F 01         [24] 4384 	orl	_CKCON0,#0x01
                                   4385 ;	program.c:946: _AUXR = 0xC;
      0014A2 75 8E 0C         [24] 4386 	mov	__AUXR,#0x0c
                                   4387 ;	program.c:948: SCON = 0x42;
      0014A5 75 98 42         [24] 4388 	mov	_SCON,#0x42
                                   4389 ;	program.c:950: PCON = 0x80;
      0014A8 75 87 80         [24] 4390 	mov	_PCON,#0x80
                                   4391 ;	program.c:952: TH1 = 255;
      0014AB 75 8D FF         [24] 4392 	mov	_TH1,#0xff
                                   4393 ;	program.c:953: TL1 = 255;
      0014AE 75 8B FF         [24] 4394 	mov	_TL1,#0xff
                                   4395 ;	program.c:955: TMOD = 0x20;
      0014B1 75 89 20         [24] 4396 	mov	_TMOD,#0x20
                                   4397 ;	program.c:957: REN = 1;
                                   4398 ;	assignBit
      0014B4 D2 9C            [12] 4399 	setb	_REN
                                   4400 ;	program.c:959: TR1 = 1;
                                   4401 ;	assignBit
      0014B6 D2 8E            [12] 4402 	setb	_TR1
                                   4403 ;	program.c:961: EA = 1;
                                   4404 ;	assignBit
      0014B8 D2 AF            [12] 4405 	setb	_EA
                                   4406 ;	program.c:963: EC = 1;
                                   4407 ;	assignBit
      0014BA D2 AE            [12] 4408 	setb	_EC
                                   4409 ;	program.c:964: return 0;
      0014BC 90 00 00         [24] 4410 	mov	dptr,#0x0000
                                   4411 ;	program.c:965: }
      0014BF 22               [24] 4412 	ret
                                   4413 	.area CSEG    (CODE)
                                   4414 	.area CONST   (CODE)
                                   4415 	.area CONST   (CODE)
      000000                       4416 ___str_0:
      000000 48 65 6C 6C 6F 2C 20  4417 	.ascii "Hello, In PCA Demo mode "
             49 6E 20 50 43 41 20
             44 65 6D 6F 20 6D 6F
             64 65 20
      000018 0A                    4418 	.db 0x0a
      000019 0D                    4419 	.db 0x0d
      00001A 00                    4420 	.db 0x00
                                   4421 	.area CSEG    (CODE)
                                   4422 	.area CONST   (CODE)
      00001B                       4423 ___str_1:
      00001B 50 6C 65 61 73 65 20  4424 	.ascii "Please make a valid choice "
             6D 61 6B 65 20 61 20
             76 61 6C 69 64 20 63
             68 6F 69 63 65 20
      000036 0A                    4425 	.db 0x0a
      000037 0D                    4426 	.db 0x0d
      000038 00                    4427 	.db 0x00
                                   4428 	.area CSEG    (CODE)
                                   4429 	.area CONST   (CODE)
      000039                       4430 ___str_2:
      000039 50 6C 65 61 73 65 20  4431 	.ascii "Please 'E' to exit or Reset "
             27 45 27 20 74 6F 20
             65 78 69 74 20 6F 72
             20 52 65 73 65 74 20
      000055 0A                    4432 	.db 0x0a
      000056 0D                    4433 	.db 0x0d
      000057 00                    4434 	.db 0x00
                                   4435 	.area CSEG    (CODE)
                                   4436 	.area CONST   (CODE)
      000058                       4437 ___str_3:
      000058 43 61 70 74 75 72 65  4438 	.ascii "Captured Value CCPL -> %d CCPH -> %d "
             64 20 56 61 6C 75 65
             20 43 43 50 4C 20 2D
             3E 20 25 64 20 43 43
             50 48 20 2D 3E 20 25
             64 20
      00007D 0A                    4439 	.db 0x0a
      00007E 0D                    4440 	.db 0x0d
      00007F 00                    4441 	.db 0x00
                                   4442 	.area CSEG    (CODE)
                                   4443 	.area CONST   (CODE)
      000080                       4444 ___str_4:
      000080 54 69 6D 65 72 20 49  4445 	.ascii "Timer Interrupt"
             6E 74 65 72 72 75 70
             74
      00008F 0A                    4446 	.db 0x0a
      000090 0D                    4447 	.db 0x0d
      000091 00                    4448 	.db 0x00
                                   4449 	.area CSEG    (CODE)
                                   4450 	.area CONST   (CODE)
      000092                       4451 ___str_5:
      000092 47 6F 69 6E 67 20 74  4452 	.ascii "Going to main menu.. "
             6F 20 6D 61 69 6E 20
             6D 65 6E 75 2E 2E 20
      0000A7 0A                    4453 	.db 0x0a
      0000A8 0D                    4454 	.db 0x0d
      0000A9 00                    4455 	.db 0x00
                                   4456 	.area CSEG    (CODE)
                                   4457 	.area CONST   (CODE)
      0000AA                       4458 ___str_6:
      0000AA 53 65 74 74 69 6E 67  4459 	.ascii "Setting P1.3 as falling edge detector, enabling PCA interrup"
             20 50 31 2E 33 20 61
             73 20 66 61 6C 6C 69
             6E 67 20 65 64 67 65
             20 64 65 74 65 63 74
             6F 72 2C 20 65 6E 61
             62 6C 69 6E 67 20 50
             43 41 20 69 6E 74 65
             72 72 75 70
      0000E6 74 20                 4460 	.ascii "t "
      0000E8 0A                    4461 	.db 0x0a
      0000E9 0D                    4462 	.db 0x0d
      0000EA 00                    4463 	.db 0x00
                                   4464 	.area CSEG    (CODE)
                                   4465 	.area CONST   (CODE)
      0000EB                       4466 ___str_7:
      0000EB 45 6E 74 65 72 69 6E  4467 	.ascii "Entering Software Timer Mode "
             67 20 53 6F 66 74 77
             61 72 65 20 54 69 6D
             65 72 20 4D 6F 64 65
             20
      000108 0A                    4468 	.db 0x0a
      000109 0D                    4469 	.db 0x0d
      00010A 00                    4470 	.db 0x00
                                   4471 	.area CSEG    (CODE)
                                   4472 	.area CONST   (CODE)
      00010B                       4473 ___str_8:
      00010B 45 6E 74 65 72 69 6E  4474 	.ascii "Entering High Speed Toggle Mode, P1.5 "
             67 20 48 69 67 68 20
             53 70 65 65 64 20 54
             6F 67 67 6C 65 20 4D
             6F 64 65 2C 20 50 31
             2E 35 20
      000131 0A                    4475 	.db 0x0a
      000132 0D                    4476 	.db 0x0d
      000133 00                    4477 	.db 0x00
                                   4478 	.area CSEG    (CODE)
                                   4479 	.area CONST   (CODE)
      000134                       4480 ___str_9:
      000134 45 6E 74 65 72 69 6E  4481 	.ascii "Entering PWM Mode, 25 percent Duty Cycle P1.6"
             67 20 50 57 4D 20 4D
             6F 64 65 2C 20 32 35
             20 70 65 72 63 65 6E
             74 20 44 75 74 79 20
             43 79 63 6C 65 20 50
             31 2E 36
      000161 0A                    4482 	.db 0x0a
      000162 0D                    4483 	.db 0x0d
      000163 00                    4484 	.db 0x00
                                   4485 	.area CSEG    (CODE)
                                   4486 	.area CONST   (CODE)
      000164                       4487 ___str_10:
      000164 45 6E 61 62 6C 69 6E  4488 	.ascii "Enabling Watchdog Timer.."
             67 20 57 61 74 63 68
             64 6F 67 20 54 69 6D
             65 72 2E 2E
      00017D 0A                    4489 	.db 0x0a
      00017E 0D                    4490 	.db 0x0d
      00017F 00                    4491 	.db 0x00
                                   4492 	.area CSEG    (CODE)
                                   4493 	.area CONST   (CODE)
      000180                       4494 ___str_11:
      000180 43 75 72 72 65 6E 74  4495 	.ascii "Currently Watchdog is being serviced"
             6C 79 20 57 61 74 63
             68 64 6F 67 20 69 73
             20 62 65 69 6E 67 20
             73 65 72 76 69 63 65
             64
      0001A4 0A                    4496 	.db 0x0a
      0001A5 0D                    4497 	.db 0x0d
      0001A6 50 72 65 73 73 20 27  4498 	.ascii "Press 'S' to stop and generate a reset "
             53 27 20 74 6F 20 73
             74 6F 70 20 61 6E 64
             20 67 65 6E 65 72 61
             74 65 20 61 20 72 65
             73 65 74 20
      0001CD 0A                    4499 	.db 0x0a
      0001CE 0D                    4500 	.db 0x0d
      0001CF 00                    4501 	.db 0x00
                                   4502 	.area CSEG    (CODE)
                                   4503 	.area CONST   (CODE)
      0001D0                       4504 ___str_12:
      0001D0 45 6E 61 62 6C 69 6E  4505 	.ascii "Enabling Hardware Watchdog Timer.."
             67 20 48 61 72 64 77
             61 72 65 20 57 61 74
             63 68 64 6F 67 20 54
             69 6D 65 72 2E 2E
      0001F2 0A                    4506 	.db 0x0a
      0001F3 0D                    4507 	.db 0x0d
      0001F4 00                    4508 	.db 0x00
                                   4509 	.area CSEG    (CODE)
                                   4510 	.area CONST   (CODE)
      0001F5                       4511 ___str_13:
      0001F5 43 75 72 72 65 6E 74  4512 	.ascii "Currently Hardware Watchdog is being serviced"
             6C 79 20 48 61 72 64
             77 61 72 65 20 57 61
             74 63 68 64 6F 67 20
             69 73 20 62 65 69 6E
             67 20 73 65 72 76 69
             63 65 64
      000222 0A                    4513 	.db 0x0a
      000223 0D                    4514 	.db 0x0d
      000224 50 72 65 73 73 20 27  4515 	.ascii "Press 'S' to stop watchdog service and generate a reset in ~"
             53 27 20 74 6F 20 73
             74 6F 70 20 77 61 74
             63 68 64 6F 67 20 73
             65 72 76 69 63 65 20
             61 6E 64 20 67 65 6E
             65 72 61 74 65 20 61
             20 72 65 73 65 74 20
             69 6E 20 7E
      000260 31 73 20              4516 	.ascii "1s "
      000263 0A                    4517 	.db 0x0a
      000264 0D                    4518 	.db 0x0d
      000265 00                    4519 	.db 0x00
                                   4520 	.area CSEG    (CODE)
                                   4521 	.area CONST   (CODE)
      000266                       4522 ___str_14:
      000266 45 6E 74 65 72 69 6E  4523 	.ascii "Entering Idle, Will Exit on external interrupt 0"
             67 20 49 64 6C 65 2C
             20 57 69 6C 6C 20 45
             78 69 74 20 6F 6E 20
             65 78 74 65 72 6E 61
             6C 20 69 6E 74 65 72
             72 75 70 74 20 30
      000296 0A                    4524 	.db 0x0a
      000297 0D                    4525 	.db 0x0d
      000298 00                    4526 	.db 0x00
                                   4527 	.area CSEG    (CODE)
                                   4528 	.area CONST   (CODE)
      000299                       4529 ___str_15:
      000299 57 6F 6B 65 20 75 70  4530 	.ascii "Woke up from Idle/Power down, going to main menu "
             20 66 72 6F 6D 20 49
             64 6C 65 2F 50 6F 77
             65 72 20 64 6F 77 6E
             2C 20 67 6F 69 6E 67
             20 74 6F 20 6D 61 69
             6E 20 6D 65 6E 75 20
      0002CA 0A                    4531 	.db 0x0a
      0002CB 0D                    4532 	.db 0x0d
      0002CC 00                    4533 	.db 0x00
                                   4534 	.area CSEG    (CODE)
                                   4535 	.area CONST   (CODE)
      0002CD                       4536 ___str_16:
      0002CD 45 6E 74 65 72 69 6E  4537 	.ascii "Entering power down, Will Exit on external interrupt 0"
             67 20 70 6F 77 65 72
             20 64 6F 77 6E 2C 20
             57 69 6C 6C 20 45 78
             69 74 20 6F 6E 20 65
             78 74 65 72 6E 61 6C
             20 69 6E 74 65 72 72
             75 70 74 20 30
      000303 0A                    4538 	.db 0x0a
      000304 0D                    4539 	.db 0x0d
      000305 00                    4540 	.db 0x00
                                   4541 	.area CSEG    (CODE)
                                   4542 	.area CONST   (CODE)
      000306                       4543 ___str_17:
      000306 43 68 61 6E 67 69 6E  4544 	.ascii "Changing Clock prescalar to go to lowest frequency in X2 Mod"
             67 20 43 6C 6F 63 6B
             20 70 72 65 73 63 61
             6C 61 72 20 74 6F 20
             67 6F 20 74 6F 20 6C
             6F 77 65 73 74 20 66
             72 65 71 75 65 6E 63
             79 20 69 6E 20 58 32
             20 4D 6F 64
      000342 65 2E 2E              4545 	.ascii "e.."
      000345 0A                    4546 	.db 0x0a
      000346 0D                    4547 	.db 0x0d
      000347 00                    4548 	.db 0x00
                                   4549 	.area CSEG    (CODE)
                                   4550 	.area CONST   (CODE)
      000348                       4551 ___str_18:
      000348 54 68 69 73 20 55 41  4552 	.ascii "This UART Session will stop working..."
             52 54 20 53 65 73 73
             69 6F 6E 20 77 69 6C
             6C 20 73 74 6F 70 20
             77 6F 72 6B 69 6E 67
             2E 2E 2E
      00036E 0A                    4553 	.db 0x0a
      00036F 0D                    4554 	.db 0x0d
      000370 00                    4555 	.db 0x00
                                   4556 	.area CSEG    (CODE)
                                   4557 	.area CONST   (CODE)
      000371                       4558 ___str_19:
      000371 0A                    4559 	.db 0x0a
      000372 0A                    4560 	.db 0x0a
      000373 0D                    4561 	.db 0x0d
      000374 5E 5E 5E 5E 5E 5E 5E  4562 	.ascii "^^^^^^^^^^^^^^^^^^^-MENU-^^^^^^^^^^^^^^^^^^^^^^^^^^ "
             5E 5E 5E 5E 5E 5E 5E
             5E 5E 5E 5E 5E 2D 4D
             45 4E 55 2D 5E 5E 5E
             5E 5E 5E 5E 5E 5E 5E
             5E 5E 5E 5E 5E 5E 5E
             5E 5E 5E 5E 5E 5E 5E
             5E 5E 20
      0003A8 0A                    4563 	.db 0x0a
      0003A9 0A                    4564 	.db 0x0a
      0003AA 0D                    4565 	.db 0x0d
      0003AB 00                    4566 	.db 0x00
                                   4567 	.area CSEG    (CODE)
                                   4568 	.area CONST   (CODE)
      0003AC                       4569 ___str_20:
      0003AC 27 48 27 20 2D 3E 20  4570 	.ascii "'H' -> Enter Heap Demo Mode "
             45 6E 74 65 72 20 48
             65 61 70 20 44 65 6D
             6F 20 4D 6F 64 65 20
      0003C8 0A                    4571 	.db 0x0a
      0003C9 0D                    4572 	.db 0x0d
      0003CA 00                    4573 	.db 0x00
                                   4574 	.area CSEG    (CODE)
                                   4575 	.area CONST   (CODE)
      0003CB                       4576 ___str_21:
      0003CB 27 50 27 20 2D 3E 20  4577 	.ascii "'P' -> Enter PCA Demo Mode "
             45 6E 74 65 72 20 50
             43 41 20 44 65 6D 6F
             20 4D 6F 64 65 20
      0003E6 0A                    4578 	.db 0x0a
      0003E7 0D                    4579 	.db 0x0d
      0003E8 00                    4580 	.db 0x00
                                   4581 	.area CSEG    (CODE)
                                   4582 	.area CONST   (CODE)
      0003E9                       4583 ___str_22:
      0003E9 27 41 27 20 2D 3E 20  4584 	.ascii "'A' -> Assembly C Mix "
             41 73 73 65 6D 62 6C
             79 20 43 20 4D 69 78
             20
      0003FF 0A                    4585 	.db 0x0a
      000400 0D                    4586 	.db 0x0d
      000401 00                    4587 	.db 0x00
                                   4588 	.area CSEG    (CODE)
                                   4589 	.area CONST   (CODE)
      000402                       4590 ___str_23:
      000402 27 45 27 20 2D 3E 20  4591 	.ascii "'E' -> EEPROM Mode "
             45 45 50 52 4F 4D 20
             4D 6F 64 65 20
      000415 0A                    4592 	.db 0x0a
      000416 0D                    4593 	.db 0x0d
      000417 00                    4594 	.db 0x00
                                   4595 	.area CSEG    (CODE)
                                   4596 	.area CONST   (CODE)
      000418                       4597 ___str_24:
      000418 4D 61 79 62 65 20 62  4598 	.ascii "Maybe byte has been written "
             79 74 65 20 68 61 73
             20 62 65 65 6E 20 77
             72 69 74 74 65 6E 20
      000434 0A                    4599 	.db 0x0a
      000435 0D                    4600 	.db 0x0d
      000436 00                    4601 	.db 0x00
                                   4602 	.area CSEG    (CODE)
                                   4603 	.area CONST   (CODE)
      000437                       4604 ___str_25:
      000437 0A                    4605 	.db 0x0a
      000438 0D                    4606 	.db 0x0d
      000439 20 47 69 76 65 20 70  4607 	.ascii " Give param 1, 8bit "
             61 72 61 6D 20 31 2C
             20 38 62 69 74 20
      00044D 0A                    4608 	.db 0x0a
      00044E 0D                    4609 	.db 0x0d
      00044F 00                    4610 	.db 0x00
                                   4611 	.area CSEG    (CODE)
                                   4612 	.area CONST   (CODE)
      000450                       4613 ___str_26:
      000450 0A                    4614 	.db 0x0a
      000451 0D                    4615 	.db 0x0d
      000452 20 47 69 76 65 20 70  4616 	.ascii " Give param 2, 8bit "
             61 72 61 6D 20 32 2C
             20 38 62 69 74 20
      000466 0A                    4617 	.db 0x0a
      000467 0D                    4618 	.db 0x0d
      000468 00                    4619 	.db 0x00
                                   4620 	.area CSEG    (CODE)
                                   4621 	.area CONST   (CODE)
      000469                       4622 ___str_27:
      000469 0A                    4623 	.db 0x0a
      00046A 0D                    4624 	.db 0x0d
      00046B 20 47 69 76 65 20 70  4625 	.ascii " Give param 3, 8bit "
             61 72 61 6D 20 33 2C
             20 38 62 69 74 20
      00047F 0A                    4626 	.db 0x0a
      000480 0D                    4627 	.db 0x0d
      000481 00                    4628 	.db 0x00
                                   4629 	.area CSEG    (CODE)
                                   4630 	.area CONST   (CODE)
      000482                       4631 ___str_28:
      000482 0A                    4632 	.db 0x0a
      000483 0D                    4633 	.db 0x0d
      000484 20 52 45 53 55 4C 54  4634 	.ascii " RESULT-> param3<Mod>param2 * param1 = %d "
             2D 3E 20 70 61 72 61
             6D 33 3C 4D 6F 64 3E
             70 61 72 61 6D 32 20
             2A 20 70 61 72 61 6D
             31 20 3D 20 25 64 20
      0004AE 0A                    4635 	.db 0x0a
      0004AF 0D                    4636 	.db 0x0d
      0004B0 00                    4637 	.db 0x00
                                   4638 	.area CSEG    (CODE)
                                   4639 	.area CONST   (CODE)
      0004B1                       4640 ___str_29:
      0004B1 0A                    4641 	.db 0x0a
      0004B2 0D                    4642 	.db 0x0d
      0004B3 20 47 6F 69 6E 67 20  4643 	.ascii " Going back to main menu.. "
             62 61 63 6B 20 74 6F
             20 6D 61 69 6E 20 6D
             65 6E 75 2E 2E 20
      0004CE 0A                    4644 	.db 0x0a
      0004CF 0D                    4645 	.db 0x0d
      0004D0 00                    4646 	.db 0x00
                                   4647 	.area CSEG    (CODE)
                                   4648 	.area CONST   (CODE)
      0004D1                       4649 ___str_30:
      0004D1 42 75 66 66 65 72 20  4650 	.ascii "Buffer %d Freed ...."
             25 64 20 46 72 65 65
             64 20 2E 2E 2E 2E
      0004E5 0A                    4651 	.db 0x0a
      0004E6 0D                    4652 	.db 0x0d
      0004E7 00                    4653 	.db 0x00
                                   4654 	.area CSEG    (CODE)
                                   4655 	.area CONST   (CODE)
      0004E8                       4656 ___str_31:
      0004E8 4C 65 74 27 73 20 62  4657 	.ascii "Let's begin again.."
             65 67 69 6E 20 61 67
             61 69 6E 2E 2E
      0004FB 0A                    4658 	.db 0x0a
      0004FC 0D                    4659 	.db 0x0d
      0004FD 00                    4660 	.db 0x00
                                   4661 	.area CSEG    (CODE)
                                   4662 	.area CONST   (CODE)
      0004FE                       4663 ___str_32:
      0004FE 0A                    4664 	.db 0x0a
      0004FF 0D                    4665 	.db 0x0d
      000500 47 69 76 65 20 56 61  4666 	.ascii "Give Valid Buffer Number to delete(1-%d) in 3 digits"
             6C 69 64 20 42 75 66
             66 65 72 20 4E 75 6D
             62 65 72 20 74 6F 20
             64 65 6C 65 74 65 28
             31 2D 25 64 29 20 69
             6E 20 33 20 64 69 67
             69 74 73
      000534 0A                    4667 	.db 0x0a
      000535 0D                    4668 	.db 0x0d
      000536 00                    4669 	.db 0x00
                                   4670 	.area CSEG    (CODE)
                                   4671 	.area CONST   (CODE)
      000537                       4672 ___str_33:
      000537 42 75 66 66 65 72 20  4673 	.ascii "Buffer %d Successfully Deleted.. "
             25 64 20 53 75 63 63
             65 73 73 66 75 6C 6C
             79 20 44 65 6C 65 74
             65 64 2E 2E 20
      000558 0A                    4674 	.db 0x0a
      000559 0D                    4675 	.db 0x0d
      00055A 00                    4676 	.db 0x00
                                   4677 	.area CSEG    (CODE)
                                   4678 	.area CONST   (CODE)
      00055B                       4679 ___str_34:
      00055B 0A                    4680 	.db 0x0a
      00055C 0A                    4681 	.db 0x0a
      00055D 0D                    4682 	.db 0x0d
      00055E 5E 5E 5E 5E 5E 5E 5E  4683 	.ascii "^^^^^^^^^^^^^^^^^^^-PCA-MENU-^^^^^^^^^^^^^^^^^^^^^^^^^^ "
             5E 5E 5E 5E 5E 5E 5E
             5E 5E 5E 5E 5E 2D 50
             43 41 2D 4D 45 4E 55
             2D 5E 5E 5E 5E 5E 5E
             5E 5E 5E 5E 5E 5E 5E
             5E 5E 5E 5E 5E 5E 5E
             5E 5E 5E 5E 5E 5E 20
      000596 0A                    4684 	.db 0x0a
      000597 0A                    4685 	.db 0x0a
      000598 0D                    4686 	.db 0x0d
      000599 00                    4687 	.db 0x00
                                   4688 	.area CSEG    (CODE)
                                   4689 	.area CONST   (CODE)
      00059A                       4690 ___str_35:
      00059A 27 46 27 20 2D 3E 20  4691 	.ascii "'F' -> Falling Edge Capture Mode"
             46 61 6C 6C 69 6E 67
             20 45 64 67 65 20 43
             61 70 74 75 72 65 20
             4D 6F 64 65
      0005BA 0A                    4692 	.db 0x0a
      0005BB 0D                    4693 	.db 0x0d
      0005BC 00                    4694 	.db 0x00
                                   4695 	.area CSEG    (CODE)
                                   4696 	.area CONST   (CODE)
      0005BD                       4697 ___str_36:
      0005BD 27 53 27 20 2D 3E 20  4698 	.ascii "'S' -> Software Timer Mode"
             53 6F 66 74 77 61 72
             65 20 54 69 6D 65 72
             20 4D 6F 64 65
      0005D7 0A                    4699 	.db 0x0a
      0005D8 0D                    4700 	.db 0x0d
      0005D9 00                    4701 	.db 0x00
                                   4702 	.area CSEG    (CODE)
                                   4703 	.area CONST   (CODE)
      0005DA                       4704 ___str_37:
      0005DA 27 48 27 20 2D 3E 20  4705 	.ascii "'H' -> High Speed Output Mode"
             48 69 67 68 20 53 70
             65 65 64 20 4F 75 74
             70 75 74 20 4D 6F 64
             65
      0005F7 0A                    4706 	.db 0x0a
      0005F8 0D                    4707 	.db 0x0d
      0005F9 00                    4708 	.db 0x00
                                   4709 	.area CSEG    (CODE)
                                   4710 	.area CONST   (CODE)
      0005FA                       4711 ___str_38:
      0005FA 27 50 27 20 2D 3E 20  4712 	.ascii "'P' -> PWM Mode "
             50 57 4D 20 4D 6F 64
             65 20
      00060A 0A                    4713 	.db 0x0a
      00060B 0D                    4714 	.db 0x0d
      00060C 00                    4715 	.db 0x00
                                   4716 	.area CSEG    (CODE)
                                   4717 	.area CONST   (CODE)
      00060D                       4718 ___str_39:
      00060D 27 57 27 20 2D 3E 20  4719 	.ascii "'W' -> Watchdog Timer Mode"
             57 61 74 63 68 64 6F
             67 20 54 69 6D 65 72
             20 4D 6F 64 65
      000627 0A                    4720 	.db 0x0a
      000628 0D                    4721 	.db 0x0d
      000629 00                    4722 	.db 0x00
                                   4723 	.area CSEG    (CODE)
                                   4724 	.area CONST   (CODE)
      00062A                       4725 ___str_40:
      00062A 27 49 27 20 2D 3E 20  4726 	.ascii "'I' -> Idle Mode with PWM"
             49 64 6C 65 20 4D 6F
             64 65 20 77 69 74 68
             20 50 57 4D
      000643 0A                    4727 	.db 0x0a
      000644 0D                    4728 	.db 0x0d
      000645 00                    4729 	.db 0x00
                                   4730 	.area CSEG    (CODE)
                                   4731 	.area CONST   (CODE)
      000646                       4732 ___str_41:
      000646 27 4C 27 20 2D 3E 20  4733 	.ascii "'L' -> Change Prescalar to lowest frequency"
             43 68 61 6E 67 65 20
             50 72 65 73 63 61 6C
             61 72 20 74 6F 20 6C
             6F 77 65 73 74 20 66
             72 65 71 75 65 6E 63
             79
      000671 0A                    4734 	.db 0x0a
      000672 0D                    4735 	.db 0x0d
      000673 00                    4736 	.db 0x00
                                   4737 	.area CSEG    (CODE)
                                   4738 	.area CONST   (CODE)
      000674                       4739 ___str_42:
      000674 27 55 27 20 2D 3E 20  4740 	.ascii "'U' -> Hardware Watchdog Timer"
             48 61 72 64 77 61 72
             65 20 57 61 74 63 68
             64 6F 67 20 54 69 6D
             65 72
      000692 0A                    4741 	.db 0x0a
      000693 0D                    4742 	.db 0x0d
      000694 00                    4743 	.db 0x00
                                   4744 	.area CSEG    (CODE)
                                   4745 	.area CONST   (CODE)
      000695                       4746 ___str_43:
      000695 27 44 27 20 2D 3E 20  4747 	.ascii "'D' -> Power Down Mode"
             50 6F 77 65 72 20 44
             6F 77 6E 20 4D 6F 64
             65
      0006AB 0A                    4748 	.db 0x0a
      0006AC 0A                    4749 	.db 0x0a
      0006AD 0D                    4750 	.db 0x0d
      0006AE 00                    4751 	.db 0x00
                                   4752 	.area CSEG    (CODE)
                                   4753 	.area CONST   (CODE)
      0006AF                       4754 ___str_44:
      0006AF 27 4D 27 20 2D 3E 20  4755 	.ascii "'M' -> Go to Main Menu "
             47 6F 20 74 6F 20 4D
             61 69 6E 20 4D 65 6E
             75 20
      0006C6 0A                    4756 	.db 0x0a
      0006C7 0A                    4757 	.db 0x0a
      0006C8 0D                    4758 	.db 0x0d
      0006C9 00                    4759 	.db 0x00
                                   4760 	.area CSEG    (CODE)
                                   4761 	.area CONST   (CODE)
      0006CA                       4762 ___str_45:
      0006CA 0A                    4763 	.db 0x0a
      0006CB 0A                    4764 	.db 0x0a
      0006CC 0D                    4765 	.db 0x0d
      0006CD 5E 5E 5E 5E 5E 5E 5E  4766 	.ascii "^^^^^^^^^^^^^^^^^^^-HEAP-MENU-^^^^^^^^^^^^^^^^^^^^^^^^^^ "
             5E 5E 5E 5E 5E 5E 5E
             5E 5E 5E 5E 5E 2D 48
             45 41 50 2D 4D 45 4E
             55 2D 5E 5E 5E 5E 5E
             5E 5E 5E 5E 5E 5E 5E
             5E 5E 5E 5E 5E 5E 5E
             5E 5E 5E 5E 5E 5E 5E
             20
      000706 0A                    4767 	.db 0x0a
      000707 0A                    4768 	.db 0x0a
      000708 0D                    4769 	.db 0x0d
      000709 00                    4770 	.db 0x00
                                   4771 	.area CSEG    (CODE)
                                   4772 	.area CONST   (CODE)
      00070A                       4773 ___str_46:
      00070A 59 6F 75 20 63 61 6E  4774 	.ascii "You can enter characters or use commands from below "
             20 65 6E 74 65 72 20
             63 68 61 72 61 63 74
             65 72 73 20 6F 72 20
             75 73 65 20 63 6F 6D
             6D 61 6E 64 73 20 66
             72 6F 6D 20 62 65 6C
             6F 77 20
      00073E 0A                    4775 	.db 0x0a
      00073F 0D                    4776 	.db 0x0d
      000740 00                    4777 	.db 0x00
                                   4778 	.area CSEG    (CODE)
                                   4779 	.area CONST   (CODE)
      000741                       4780 ___str_47:
      000741 27 3F 27 20 2D 3E 20  4781 	.ascii "'?' -> Show heap status, dump & clear Buffer 0 "
             53 68 6F 77 20 68 65
             61 70 20 73 74 61 74
             75 73 2C 20 64 75 6D
             70 20 26 20 63 6C 65
             61 72 20 42 75 66 66
             65 72 20 30 20
      000770 0A                    4782 	.db 0x0a
      000771 0D                    4783 	.db 0x0d
      000772 00                    4784 	.db 0x00
                                   4785 	.area CSEG    (CODE)
                                   4786 	.area CONST   (CODE)
      000773                       4787 ___str_48:
      000773 27 2B 27 20 2D 3E 20  4788 	.ascii "'+' -> Add a new Buffer"
             41 64 64 20 61 20 6E
             65 77 20 42 75 66 66
             65 72
      00078A 0A                    4789 	.db 0x0a
      00078B 0D                    4790 	.db 0x0d
      00078C 00                    4791 	.db 0x00
                                   4792 	.area CSEG    (CODE)
                                   4793 	.area CONST   (CODE)
      00078D                       4794 ___str_49:
      00078D 27 2D 27 20 2D 3E 20  4795 	.ascii "'-' -> Delete existing Buffer"
             44 65 6C 65 74 65 20
             65 78 69 73 74 69 6E
             67 20 42 75 66 66 65
             72
      0007AA 0A                    4796 	.db 0x0a
      0007AB 0D                    4797 	.db 0x0d
      0007AC 00                    4798 	.db 0x00
                                   4799 	.area CSEG    (CODE)
                                   4800 	.area CONST   (CODE)
      0007AD                       4801 ___str_50:
      0007AD 27 3D 27 20 2D 3E 20  4802 	.ascii "'=' -> Dump Buffer 0 in hex"
             44 75 6D 70 20 42 75
             66 66 65 72 20 30 20
             69 6E 20 68 65 78
      0007C8 0A                    4803 	.db 0x0a
      0007C9 0D                    4804 	.db 0x0d
      0007CA 00                    4805 	.db 0x00
                                   4806 	.area CSEG    (CODE)
                                   4807 	.area CONST   (CODE)
      0007CB                       4808 ___str_51:
      0007CB 27 40 27 20 2D 3E 20  4809 	.ascii "'@' -> Free all Heap & begin again"
             46 72 65 65 20 61 6C
             6C 20 48 65 61 70 20
             26 20 62 65 67 69 6E
             20 61 67 61 69 6E
      0007ED 0A                    4810 	.db 0x0a
      0007EE 0A                    4811 	.db 0x0a
      0007EF 0D                    4812 	.db 0x0d
      0007F0 00                    4813 	.db 0x00
                                   4814 	.area CSEG    (CODE)
                                   4815 	.area CONST   (CODE)
      0007F1                       4816 ___str_52:
      0007F1 0A                    4817 	.db 0x0a
      0007F2 0D                    4818 	.db 0x0d
      0007F3 47 69 76 65 20 56 61  4819 	.ascii "Give Valid Buffer Size(030-300):"
             6C 69 64 20 42 75 66
             66 65 72 20 53 69 7A
             65 28 30 33 30 2D 33
             30 30 29 3A
      000813 00                    4820 	.db 0x00
                                   4821 	.area CSEG    (CODE)
                                   4822 	.area CONST   (CODE)
      000814                       4823 ___str_53:
      000814 46 61 69 6C 65 64 2C  4824 	.ascii "Failed, give smaller buffer"
             20 67 69 76 65 20 73
             6D 61 6C 6C 65 72 20
             62 75 66 66 65 72
      00082F 0A                    4825 	.db 0x0a
      000830 0D                    4826 	.db 0x0d
      000831 00                    4827 	.db 0x00
                                   4828 	.area CSEG    (CODE)
                                   4829 	.area CONST   (CODE)
      000832                       4830 ___str_54:
      000832 0A                    4831 	.db 0x0a
      000833 0A                    4832 	.db 0x0a
      000834 0D                    4833 	.db 0x0d
      000835 23 23 23 23 53 55 43  4834 	.ascii "####SUCCESS, BUFFER Created####"
             43 45 53 53 2C 20 42
             55 46 46 45 52 20 43
             72 65 61 74 65 64 23
             23 23 23
      000854 0A                    4835 	.db 0x0a
      000855 0A                    4836 	.db 0x0a
      000856 0D                    4837 	.db 0x0d
      000857 00                    4838 	.db 0x00
                                   4839 	.area CSEG    (CODE)
                                   4840 	.area CONST   (CODE)
      000858                       4841 ___str_55:
      000858 4E 6F 20 48 65 61 70  4842 	.ascii "No Heap Memory Left, Delete some buffers..."
             20 4D 65 6D 6F 72 79
             20 4C 65 66 74 2C 20
             44 65 6C 65 74 65 20
             73 6F 6D 65 20 62 75
             66 66 65 72 73 2E 2E
             2E
      000883 0A                    4843 	.db 0x0a
      000884 0D                    4844 	.db 0x0d
      000885 00                    4845 	.db 0x00
                                   4846 	.area CSEG    (CODE)
                                   4847 	.area CONST   (CODE)
      000886                       4848 ___str_56:
      000886 0A                    4849 	.db 0x0a
      000887 0D                    4850 	.db 0x0d
      000888 47 69 76 65 20 56 61  4851 	.ascii "Give Valid Initial Buffer Size(0048-4800):"
             6C 69 64 20 49 6E 69
             74 69 61 6C 20 42 75
             66 66 65 72 20 53 69
             7A 65 28 30 30 34 38
             2D 34 38 30 30 29 3A
      0008B2 00                    4852 	.db 0x00
                                   4853 	.area CSEG    (CODE)
                                   4854 	.area CONST   (CODE)
      0008B3                       4855 ___str_57:
      0008B3 0A                    4856 	.db 0x0a
      0008B4 0D                    4857 	.db 0x0d
      0008B5 23 23 23 23 46 41 49  4858 	.ascii "####FAIL, Please give a smaller buffer size####"
             4C 2C 20 50 6C 65 61
             73 65 20 67 69 76 65
             20 61 20 73 6D 61 6C
             6C 65 72 20 62 75 66
             66 65 72 20 73 69 7A
             65 23 23 23 23
      0008E4 0A                    4859 	.db 0x0a
      0008E5 0A                    4860 	.db 0x0a
      0008E6 0D                    4861 	.db 0x0d
      0008E7 00                    4862 	.db 0x00
                                   4863 	.area CSEG    (CODE)
                                   4864 	.area CONST   (CODE)
      0008E8                       4865 ___str_58:
      0008E8 0A                    4866 	.db 0x0a
      0008E9 0A                    4867 	.db 0x0a
      0008EA 0D                    4868 	.db 0x0d
      0008EB 23 23 23 23 53 55 43  4869 	.ascii "####SUCCESS, INITIAL BUFFERS Created####"
             43 45 53 53 2C 20 49
             4E 49 54 49 41 4C 20
             42 55 46 46 45 52 53
             20 43 72 65 61 74 65
             64 23 23 23 23
      000913 0A                    4870 	.db 0x0a
      000914 0A                    4871 	.db 0x0a
      000915 0D                    4872 	.db 0x0d
      000916 00                    4873 	.db 0x00
                                   4874 	.area CSEG    (CODE)
                                   4875 	.area CONST   (CODE)
      000917                       4876 ___str_59:
      000917 0A                    4877 	.db 0x0a
      000918 0A                    4878 	.db 0x0a
      000919 0D                    4879 	.db 0x0d
      00091A 2A 2A 2A 2A 2A 2A 2A  4880 	.ascii "***********Buffer-0-Contents*********** "
             2A 2A 2A 2A 42 75 66
             66 65 72 2D 30 2D 43
             6F 6E 74 65 6E 74 73
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 20
      000942 0A                    4881 	.db 0x0a
      000943 0D                    4882 	.db 0x0d
      000944 00                    4883 	.db 0x00
                                   4884 	.area CSEG    (CODE)
                                   4885 	.area CONST   (CODE)
      000945                       4886 ___str_60:
      000945 0A                    4887 	.db 0x0a
      000946 0D                    4888 	.db 0x0d
      000947 00                    4889 	.db 0x00
                                   4890 	.area CSEG    (CODE)
                                   4891 	.area CONST   (CODE)
      000948                       4892 ___str_61:
      000948 0A                    4893 	.db 0x0a
      000949 0A                    4894 	.db 0x0a
      00094A 0D                    4895 	.db 0x0d
      00094B 00                    4896 	.db 0x00
                                   4897 	.area CSEG    (CODE)
                                   4898 	.area CONST   (CODE)
      00094C                       4899 ___str_62:
      00094C 42 75 66 66 65 72 30  4900 	.ascii "Buffer0 is Empty...."
             20 69 73 20 45 6D 70
             74 79 2E 2E 2E 2E
      000960 0A                    4901 	.db 0x0a
      000961 0D                    4902 	.db 0x0d
      000962 00                    4903 	.db 0x00
                                   4904 	.area CSEG    (CODE)
                                   4905 	.area CONST   (CODE)
      000963                       4906 ___str_63:
      000963 0A                    4907 	.db 0x0a
      000964 0D                    4908 	.db 0x0d
      000965 2D 2D 2D 2D 2D 2D 2D  4909 	.ascii "-------------------------HEXDUMP----------------------------"
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 48 45 58
             44 55 4D 50 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D
      0009A1 2D 2D 2D 2D           4910 	.ascii "----"
      0009A5 00                    4911 	.db 0x00
                                   4912 	.area CSEG    (CODE)
                                   4913 	.area CONST   (CODE)
      0009A6                       4914 ___str_64:
      0009A6 0A                    4915 	.db 0x0a
      0009A7 0D                    4916 	.db 0x0d
      0009A8 20 20 20 20 41 44 44  4917 	.ascii "    ADDR: +0 +1 +2 +3 +4 +5 +6 +7 +8 +9 +A +B +C +D +E +F "
             52 3A 20 2B 30 20 2B
             31 20 2B 32 20 2B 33
             20 2B 34 20 2B 35 20
             2B 36 20 2B 37 20 2B
             38 20 2B 39 20 2B 41
             20 2B 42 20 2B 43 20
             2B 44 20 2B 45 20 2B
             46 20
      0009E2 0A                    4918 	.db 0x0a
      0009E3 0D                    4919 	.db 0x0d
      0009E4 00                    4920 	.db 0x00
                                   4921 	.area CSEG    (CODE)
                                   4922 	.area CONST   (CODE)
      0009E5                       4923 ___str_65:
      0009E5 0A                    4924 	.db 0x0a
      0009E6 0D                    4925 	.db 0x0d
      0009E7 25 70 3A 20           4926 	.ascii "%p: "
      0009EB 00                    4927 	.db 0x00
                                   4928 	.area CSEG    (CODE)
                                   4929 	.area CONST   (CODE)
      0009EC                       4930 ___str_66:
      0009EC 25 78 20              4931 	.ascii "%x "
      0009EF 00                    4932 	.db 0x00
                                   4933 	.area CSEG    (CODE)
                                   4934 	.area CONST   (CODE)
      0009F0                       4935 ___str_67:
      0009F0 42 75 66 66 65 72 20  4936 	.ascii "Buffer 0 is empty..."
             30 20 69 73 20 65 6D
             70 74 79 2E 2E 2E
      000A04 0A                    4937 	.db 0x0a
      000A05 0D                    4938 	.db 0x0d
      000A06 00                    4939 	.db 0x00
                                   4940 	.area CSEG    (CODE)
                                   4941 	.area CONST   (CODE)
      000A07                       4942 ___str_68:
      000A07 0A                    4943 	.db 0x0a
      000A08 0D                    4944 	.db 0x0d
      000A09 2A 2A 2A 2A 2A 2A 2A  4945 	.ascii "****************HEAP*STATS*************"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 48 45 41 50 2A
             53 54 41 54 53 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A
      000A30 0A                    4946 	.db 0x0a
      000A31 0D                    4947 	.db 0x0d
      000A32 00                    4948 	.db 0x00
                                   4949 	.area CSEG    (CODE)
                                   4950 	.area CONST   (CODE)
      000A33                       4951 ___str_69:
      000A33 54 6F 74 61 6C 20 48  4952 	.ascii "Total Heap Size: %d "
             65 61 70 20 53 69 7A
             65 3A 20 25 64 20
      000A47 0A                    4953 	.db 0x0a
      000A48 0D                    4954 	.db 0x0d
      000A49 00                    4955 	.db 0x00
                                   4956 	.area CSEG    (CODE)
                                   4957 	.area CONST   (CODE)
      000A4A                       4958 ___str_70:
      000A4A 41 6C 6C 6F 63 61 74  4959 	.ascii "Allocated Heap Size: %d "
             65 64 20 48 65 61 70
             20 53 69 7A 65 3A 20
             25 64 20
      000A62 0A                    4960 	.db 0x0a
      000A63 0D                    4961 	.db 0x0d
      000A64 00                    4962 	.db 0x00
                                   4963 	.area CSEG    (CODE)
                                   4964 	.area CONST   (CODE)
      000A65                       4965 ___str_71:
      000A65 41 6C 6C 20 43 68 61  4966 	.ascii "All Chars: %d "
             72 73 3A 20 25 64 20
      000A73 0A                    4967 	.db 0x0a
      000A74 0D                    4968 	.db 0x0d
      000A75 00                    4969 	.db 0x00
                                   4970 	.area CSEG    (CODE)
                                   4971 	.area CONST   (CODE)
      000A76                       4972 ___str_72:
      000A76 53 74 6F 72 61 67 65  4973 	.ascii "Storage Chars: %d "
             20 43 68 61 72 73 3A
             20 25 64 20
      000A88 0A                    4974 	.db 0x0a
      000A89 0D                    4975 	.db 0x0d
      000A8A 00                    4976 	.db 0x00
                                   4977 	.area CSEG    (CODE)
                                   4978 	.area CONST   (CODE)
      000A8B                       4979 ___str_73:
      000A8B 54 6F 74 61 6C 20 42  4980 	.ascii "Total Buffers: %d "
             75 66 66 65 72 73 3A
             20 25 64 20
      000A9D 0A                    4981 	.db 0x0a
      000A9E 0D                    4982 	.db 0x0d
      000A9F 00                    4983 	.db 0x00
                                   4984 	.area CSEG    (CODE)
                                   4985 	.area CONST   (CODE)
      000AA0                       4986 ___str_74:
      000AA0 2A 2A 2A 2A 2A 2A 2A  4987 	.ascii "****************BUFFER*%d***************"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 42 55 46 46 45
             52 2A 25 64 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A
      000AC8 0A                    4988 	.db 0x0a
      000AC9 0D                    4989 	.db 0x0d
      000ACA 00                    4990 	.db 0x00
                                   4991 	.area CSEG    (CODE)
                                   4992 	.area CONST   (CODE)
      000ACB                       4993 ___str_75:
      000ACB 42 75 66 66 65 72 23  4994 	.ascii "Buffer#: %d "
             3A 20 25 64 20
      000AD7 0A                    4995 	.db 0x0a
      000AD8 0D                    4996 	.db 0x0d
      000AD9 00                    4997 	.db 0x00
                                   4998 	.area CSEG    (CODE)
                                   4999 	.area CONST   (CODE)
      000ADA                       5000 ___str_76:
      000ADA 42 75 66 66 65 72 53  5001 	.ascii "BufferStart: %p "
             74 61 72 74 3A 20 25
             70 20
      000AEA 0A                    5002 	.db 0x0a
      000AEB 0D                    5003 	.db 0x0d
      000AEC 00                    5004 	.db 0x00
                                   5005 	.area CSEG    (CODE)
                                   5006 	.area CONST   (CODE)
      000AED                       5007 ___str_77:
      000AED 42 75 66 66 65 72 45  5008 	.ascii "BufferEnd: %p "
             6E 64 3A 20 25 70 20
      000AFB 0A                    5009 	.db 0x0a
      000AFC 0D                    5010 	.db 0x0d
      000AFD 00                    5011 	.db 0x00
                                   5012 	.area CSEG    (CODE)
                                   5013 	.area CONST   (CODE)
      000AFE                       5014 ___str_78:
      000AFE 42 75 66 66 65 72 53  5015 	.ascii "BufferSize: %d "
             69 7A 65 3A 20 25 64
             20
      000B0D 0A                    5016 	.db 0x0a
      000B0E 0D                    5017 	.db 0x0d
      000B0F 00                    5018 	.db 0x00
                                   5019 	.area CSEG    (CODE)
                                   5020 	.area CONST   (CODE)
      000B10                       5021 ___str_79:
      000B10 54 6F 74 61 6C 55 73  5022 	.ascii "TotalUsed: %d "
             65 64 3A 20 25 64 20
      000B1E 0A                    5023 	.db 0x0a
      000B1F 0D                    5024 	.db 0x0d
      000B20 00                    5025 	.db 0x00
                                   5026 	.area CSEG    (CODE)
                                   5027 	.area CONST   (CODE)
      000B21                       5028 ___str_80:
      000B21 2A 2A 2A 2A 2A 2A 2A  5029 	.ascii "***************************************"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A
      000B48 0A                    5030 	.db 0x0a
      000B49 0D                    5031 	.db 0x0d
      000B4A 00                    5032 	.db 0x00
                                   5033 	.area CSEG    (CODE)
                                   5034 	.area CONST   (CODE)
      000B4B                       5035 ___str_81:
      000B4B 45 52 52 2C 4E 75 6D  5036 	.ascii "ERR,Numbers ONLY!"
             62 65 72 73 20 4F 4E
             4C 59 21
      000B5C 0A                    5037 	.db 0x0a
      000B5D 0D                    5038 	.db 0x0d
      000B5E 00                    5039 	.db 0x00
                                   5040 	.area CSEG    (CODE)
                                   5041 	.area CONST   (CODE)
      000B5F                       5042 ___str_82:
      000B5F 0A                    5043 	.db 0x0a
      000B60 0A                    5044 	.db 0x0a
      000B61 0D                    5045 	.db 0x0d
      000B62 20 54 68 69 73 20 66  5046 	.ascii " This function was called from assembly, character sent from"
             75 6E 63 74 69 6F 6E
             20 77 61 73 20 63 61
             6C 6C 65 64 20 66 72
             6F 6D 20 61 73 73 65
             6D 62 6C 79 2C 20 63
             68 61 72 61 63 74 65
             72 20 73 65 6E 74 20
             66 72 6F 6D
      000B9E 20 74 68 65 72 65 20  5047 	.ascii " there -> %c"
             2D 3E 20 25 63
      000BAA 0A                    5048 	.db 0x0a
      000BAB 0D                    5049 	.db 0x0d
      000BAC 00                    5050 	.db 0x00
                                   5051 	.area CSEG    (CODE)
                                   5052 	.area XINIT   (CODE)
      000000                       5053 __xinit__global_var_test:
      000000 02                    5054 	.db #0x02	; 2
      000001                       5055 __xinit__watchdog_flag:
      000001 00 00                 5056 	.byte #0x00, #0x00	;  0
                                   5057 	.area CABS    (ABS,CODE)
