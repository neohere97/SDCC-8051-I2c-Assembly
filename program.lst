                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.0 #12072 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module program
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl __sdcc_external_startup
                                     12 	.globl _idle_interrupt
                                     13 	.globl _pca_interrupt
                                     14 	.globl _main
                                     15 	.globl _asmtest
                                     16 	.globl _printf
                                     17 	.globl _free
                                     18 	.globl _malloc
                                     19 	.globl _TF1
                                     20 	.globl _TR1
                                     21 	.globl _TF0
                                     22 	.globl _TR0
                                     23 	.globl _IE1
                                     24 	.globl _IT1
                                     25 	.globl _IE0
                                     26 	.globl _IT0
                                     27 	.globl _SM0
                                     28 	.globl _SM1
                                     29 	.globl _SM2
                                     30 	.globl _REN
                                     31 	.globl _TB8
                                     32 	.globl _RB8
                                     33 	.globl _TI
                                     34 	.globl _RI
                                     35 	.globl _CY
                                     36 	.globl _AC
                                     37 	.globl _F0
                                     38 	.globl _RS1
                                     39 	.globl _RS0
                                     40 	.globl _OV
                                     41 	.globl _F1
                                     42 	.globl _P
                                     43 	.globl _RD
                                     44 	.globl _WR
                                     45 	.globl _T1
                                     46 	.globl _T0
                                     47 	.globl _INT1
                                     48 	.globl _INT0
                                     49 	.globl _TXD0
                                     50 	.globl _TXD
                                     51 	.globl _RXD0
                                     52 	.globl _RXD
                                     53 	.globl _P3_7
                                     54 	.globl _P3_6
                                     55 	.globl _P3_5
                                     56 	.globl _P3_4
                                     57 	.globl _P3_3
                                     58 	.globl _P3_2
                                     59 	.globl _P3_1
                                     60 	.globl _P3_0
                                     61 	.globl _P2_7
                                     62 	.globl _P2_6
                                     63 	.globl _P2_5
                                     64 	.globl _P2_4
                                     65 	.globl _P2_3
                                     66 	.globl _P2_2
                                     67 	.globl _P2_1
                                     68 	.globl _P2_0
                                     69 	.globl _P1_7
                                     70 	.globl _P1_6
                                     71 	.globl _P1_5
                                     72 	.globl _P1_4
                                     73 	.globl _P1_3
                                     74 	.globl _P1_2
                                     75 	.globl _P1_1
                                     76 	.globl _P1_0
                                     77 	.globl _P0_7
                                     78 	.globl _P0_6
                                     79 	.globl _P0_5
                                     80 	.globl _P0_4
                                     81 	.globl _P0_3
                                     82 	.globl _P0_2
                                     83 	.globl _P0_1
                                     84 	.globl _P0_0
                                     85 	.globl _PS
                                     86 	.globl _PT1
                                     87 	.globl _PX1
                                     88 	.globl _PT0
                                     89 	.globl _PX0
                                     90 	.globl _EA
                                     91 	.globl _ES
                                     92 	.globl _ET1
                                     93 	.globl _EX1
                                     94 	.globl _ET0
                                     95 	.globl _EX0
                                     96 	.globl _BREG_F7
                                     97 	.globl _BREG_F6
                                     98 	.globl _BREG_F5
                                     99 	.globl _BREG_F4
                                    100 	.globl _BREG_F3
                                    101 	.globl _BREG_F2
                                    102 	.globl _BREG_F1
                                    103 	.globl _BREG_F0
                                    104 	.globl _P5_7
                                    105 	.globl _P5_6
                                    106 	.globl _P5_5
                                    107 	.globl _P5_4
                                    108 	.globl _P5_3
                                    109 	.globl _P5_2
                                    110 	.globl _P5_1
                                    111 	.globl _P5_0
                                    112 	.globl _P4_7
                                    113 	.globl _P4_6
                                    114 	.globl _P4_5
                                    115 	.globl _P4_4
                                    116 	.globl _P4_3
                                    117 	.globl _P4_2
                                    118 	.globl _P4_1
                                    119 	.globl _P4_0
                                    120 	.globl _PX0L
                                    121 	.globl _PT0L
                                    122 	.globl _PX1L
                                    123 	.globl _PT1L
                                    124 	.globl _PSL
                                    125 	.globl _PT2L
                                    126 	.globl _PPCL
                                    127 	.globl _EC
                                    128 	.globl _CCF0
                                    129 	.globl _CCF1
                                    130 	.globl _CCF2
                                    131 	.globl _CCF3
                                    132 	.globl _CCF4
                                    133 	.globl _CR
                                    134 	.globl _CF
                                    135 	.globl _TF2
                                    136 	.globl _EXF2
                                    137 	.globl _RCLK
                                    138 	.globl _TCLK
                                    139 	.globl _EXEN2
                                    140 	.globl _TR2
                                    141 	.globl _C_T2
                                    142 	.globl _CP_RL2
                                    143 	.globl _T2CON_7
                                    144 	.globl _T2CON_6
                                    145 	.globl _T2CON_5
                                    146 	.globl _T2CON_4
                                    147 	.globl _T2CON_3
                                    148 	.globl _T2CON_2
                                    149 	.globl _T2CON_1
                                    150 	.globl _T2CON_0
                                    151 	.globl _PT2
                                    152 	.globl _ET2
                                    153 	.globl __AUXR
                                    154 	.globl _TMOD
                                    155 	.globl _TL1
                                    156 	.globl _TL0
                                    157 	.globl _TH1
                                    158 	.globl _TH0
                                    159 	.globl _TCON
                                    160 	.globl _SP
                                    161 	.globl _SCON
                                    162 	.globl _SBUF0
                                    163 	.globl _SBUF
                                    164 	.globl _PSW
                                    165 	.globl _PCON
                                    166 	.globl _P3
                                    167 	.globl _P2
                                    168 	.globl _P1
                                    169 	.globl _P0
                                    170 	.globl _IP
                                    171 	.globl _IE
                                    172 	.globl _DP0L
                                    173 	.globl _DPL
                                    174 	.globl _DP0H
                                    175 	.globl _DPH
                                    176 	.globl _B
                                    177 	.globl _ACC
                                    178 	.globl _EECON
                                    179 	.globl _KBF
                                    180 	.globl _KBE
                                    181 	.globl _KBLS
                                    182 	.globl _BRL
                                    183 	.globl _BDRCON
                                    184 	.globl _T2MOD
                                    185 	.globl _SPDAT
                                    186 	.globl _SPSTA
                                    187 	.globl _SPCON
                                    188 	.globl _SADEN
                                    189 	.globl _SADDR
                                    190 	.globl _WDTPRG
                                    191 	.globl _WDTRST
                                    192 	.globl _P5
                                    193 	.globl _P4
                                    194 	.globl _IPH1
                                    195 	.globl _IPL1
                                    196 	.globl _IPH0
                                    197 	.globl _IPL0
                                    198 	.globl _IEN1
                                    199 	.globl _IEN0
                                    200 	.globl _CMOD
                                    201 	.globl _CL
                                    202 	.globl _CH
                                    203 	.globl _CCON
                                    204 	.globl _CCAPM4
                                    205 	.globl _CCAPM3
                                    206 	.globl _CCAPM2
                                    207 	.globl _CCAPM1
                                    208 	.globl _CCAPM0
                                    209 	.globl _CCAP4L
                                    210 	.globl _CCAP3L
                                    211 	.globl _CCAP2L
                                    212 	.globl _CCAP1L
                                    213 	.globl _CCAP0L
                                    214 	.globl _CCAP4H
                                    215 	.globl _CCAP3H
                                    216 	.globl _CCAP2H
                                    217 	.globl _CCAP1H
                                    218 	.globl _CCAP0H
                                    219 	.globl _CKCON1
                                    220 	.globl _CKCON0
                                    221 	.globl _CKRL
                                    222 	.globl _AUXR1
                                    223 	.globl _AUXR
                                    224 	.globl _TH2
                                    225 	.globl _TL2
                                    226 	.globl _RCAP2H
                                    227 	.globl _RCAP2L
                                    228 	.globl _T2CON
                                    229 	.globl _watchdog_flag
                                    230 	.globl _global_var_test
                                    231 	.globl _buffers_array
                                    232 	.globl _program_stats
                                    233 	.globl _DEBUG_LOC
                                    234 	.globl _user_interface_heap
                                    235 	.globl _user_interface_PCA
                                    236 	.globl _pca_falling_edge
                                    237 	.globl _pca_software_timer
                                    238 	.globl _pca_high_speed
                                    239 	.globl _pca_pwm
                                    240 	.globl _pca_watchdog
                                    241 	.globl _pca_idle
                                    242 	.globl _pca_pdown
                                    243 	.globl _fclk_lowest
                                    244 	.globl _main_menu
                                    245 	.globl _asm_clang
                                    246 	.globl _at_clear_all_buffers
                                    247 	.globl _delete_buffer
                                    248 	.globl _print_pca_menu
                                    249 	.globl _print_heap_menu
                                    250 	.globl _create_new_buffer
                                    251 	.globl _create_initial_buffers
                                    252 	.globl _enter_chars
                                    253 	.globl _dump_buff_zero_ascii
                                    254 	.globl _dump_buff_zero_hex
                                    255 	.globl _print_heap_stats
                                    256 	.globl _print_all_buffers
                                    257 	.globl _get_number
                                    258 	.globl _get_num_helper
                                    259 	.globl _putchar
                                    260 	.globl _getchar
                                    261 	.globl _dataout
                                    262 ;--------------------------------------------------------
                                    263 ; special function registers
                                    264 ;--------------------------------------------------------
                                    265 	.area RSEG    (ABS,DATA)
      000000                        266 	.org 0x0000
                           0000C8   267 _T2CON	=	0x00c8
                           0000CA   268 _RCAP2L	=	0x00ca
                           0000CB   269 _RCAP2H	=	0x00cb
                           0000CC   270 _TL2	=	0x00cc
                           0000CD   271 _TH2	=	0x00cd
                           00008E   272 _AUXR	=	0x008e
                           0000A2   273 _AUXR1	=	0x00a2
                           000097   274 _CKRL	=	0x0097
                           00008F   275 _CKCON0	=	0x008f
                           0000AF   276 _CKCON1	=	0x00af
                           0000FA   277 _CCAP0H	=	0x00fa
                           0000FB   278 _CCAP1H	=	0x00fb
                           0000FC   279 _CCAP2H	=	0x00fc
                           0000FD   280 _CCAP3H	=	0x00fd
                           0000FE   281 _CCAP4H	=	0x00fe
                           0000EA   282 _CCAP0L	=	0x00ea
                           0000EB   283 _CCAP1L	=	0x00eb
                           0000EC   284 _CCAP2L	=	0x00ec
                           0000ED   285 _CCAP3L	=	0x00ed
                           0000EE   286 _CCAP4L	=	0x00ee
                           0000DA   287 _CCAPM0	=	0x00da
                           0000DB   288 _CCAPM1	=	0x00db
                           0000DC   289 _CCAPM2	=	0x00dc
                           0000DD   290 _CCAPM3	=	0x00dd
                           0000DE   291 _CCAPM4	=	0x00de
                           0000D8   292 _CCON	=	0x00d8
                           0000F9   293 _CH	=	0x00f9
                           0000E9   294 _CL	=	0x00e9
                           0000D9   295 _CMOD	=	0x00d9
                           0000A8   296 _IEN0	=	0x00a8
                           0000B1   297 _IEN1	=	0x00b1
                           0000B8   298 _IPL0	=	0x00b8
                           0000B7   299 _IPH0	=	0x00b7
                           0000B2   300 _IPL1	=	0x00b2
                           0000B3   301 _IPH1	=	0x00b3
                           0000C0   302 _P4	=	0x00c0
                           0000E8   303 _P5	=	0x00e8
                           0000A6   304 _WDTRST	=	0x00a6
                           0000A7   305 _WDTPRG	=	0x00a7
                           0000A9   306 _SADDR	=	0x00a9
                           0000B9   307 _SADEN	=	0x00b9
                           0000C3   308 _SPCON	=	0x00c3
                           0000C4   309 _SPSTA	=	0x00c4
                           0000C5   310 _SPDAT	=	0x00c5
                           0000C9   311 _T2MOD	=	0x00c9
                           00009B   312 _BDRCON	=	0x009b
                           00009A   313 _BRL	=	0x009a
                           00009C   314 _KBLS	=	0x009c
                           00009D   315 _KBE	=	0x009d
                           00009E   316 _KBF	=	0x009e
                           0000D2   317 _EECON	=	0x00d2
                           0000E0   318 _ACC	=	0x00e0
                           0000F0   319 _B	=	0x00f0
                           000083   320 _DPH	=	0x0083
                           000083   321 _DP0H	=	0x0083
                           000082   322 _DPL	=	0x0082
                           000082   323 _DP0L	=	0x0082
                           0000A8   324 _IE	=	0x00a8
                           0000B8   325 _IP	=	0x00b8
                           000080   326 _P0	=	0x0080
                           000090   327 _P1	=	0x0090
                           0000A0   328 _P2	=	0x00a0
                           0000B0   329 _P3	=	0x00b0
                           000087   330 _PCON	=	0x0087
                           0000D0   331 _PSW	=	0x00d0
                           000099   332 _SBUF	=	0x0099
                           000099   333 _SBUF0	=	0x0099
                           000098   334 _SCON	=	0x0098
                           000081   335 _SP	=	0x0081
                           000088   336 _TCON	=	0x0088
                           00008C   337 _TH0	=	0x008c
                           00008D   338 _TH1	=	0x008d
                           00008A   339 _TL0	=	0x008a
                           00008B   340 _TL1	=	0x008b
                           000089   341 _TMOD	=	0x0089
                           00008E   342 __AUXR	=	0x008e
                                    343 ;--------------------------------------------------------
                                    344 ; special function bits
                                    345 ;--------------------------------------------------------
                                    346 	.area RSEG    (ABS,DATA)
      000000                        347 	.org 0x0000
                           0000AD   348 _ET2	=	0x00ad
                           0000BD   349 _PT2	=	0x00bd
                           0000C8   350 _T2CON_0	=	0x00c8
                           0000C9   351 _T2CON_1	=	0x00c9
                           0000CA   352 _T2CON_2	=	0x00ca
                           0000CB   353 _T2CON_3	=	0x00cb
                           0000CC   354 _T2CON_4	=	0x00cc
                           0000CD   355 _T2CON_5	=	0x00cd
                           0000CE   356 _T2CON_6	=	0x00ce
                           0000CF   357 _T2CON_7	=	0x00cf
                           0000C8   358 _CP_RL2	=	0x00c8
                           0000C9   359 _C_T2	=	0x00c9
                           0000CA   360 _TR2	=	0x00ca
                           0000CB   361 _EXEN2	=	0x00cb
                           0000CC   362 _TCLK	=	0x00cc
                           0000CD   363 _RCLK	=	0x00cd
                           0000CE   364 _EXF2	=	0x00ce
                           0000CF   365 _TF2	=	0x00cf
                           0000DF   366 _CF	=	0x00df
                           0000DE   367 _CR	=	0x00de
                           0000DC   368 _CCF4	=	0x00dc
                           0000DB   369 _CCF3	=	0x00db
                           0000DA   370 _CCF2	=	0x00da
                           0000D9   371 _CCF1	=	0x00d9
                           0000D8   372 _CCF0	=	0x00d8
                           0000AE   373 _EC	=	0x00ae
                           0000BE   374 _PPCL	=	0x00be
                           0000BD   375 _PT2L	=	0x00bd
                           0000BC   376 _PSL	=	0x00bc
                           0000BB   377 _PT1L	=	0x00bb
                           0000BA   378 _PX1L	=	0x00ba
                           0000B9   379 _PT0L	=	0x00b9
                           0000B8   380 _PX0L	=	0x00b8
                           0000C0   381 _P4_0	=	0x00c0
                           0000C1   382 _P4_1	=	0x00c1
                           0000C2   383 _P4_2	=	0x00c2
                           0000C3   384 _P4_3	=	0x00c3
                           0000C4   385 _P4_4	=	0x00c4
                           0000C5   386 _P4_5	=	0x00c5
                           0000C6   387 _P4_6	=	0x00c6
                           0000C7   388 _P4_7	=	0x00c7
                           0000E8   389 _P5_0	=	0x00e8
                           0000E9   390 _P5_1	=	0x00e9
                           0000EA   391 _P5_2	=	0x00ea
                           0000EB   392 _P5_3	=	0x00eb
                           0000EC   393 _P5_4	=	0x00ec
                           0000ED   394 _P5_5	=	0x00ed
                           0000EE   395 _P5_6	=	0x00ee
                           0000EF   396 _P5_7	=	0x00ef
                           0000F0   397 _BREG_F0	=	0x00f0
                           0000F1   398 _BREG_F1	=	0x00f1
                           0000F2   399 _BREG_F2	=	0x00f2
                           0000F3   400 _BREG_F3	=	0x00f3
                           0000F4   401 _BREG_F4	=	0x00f4
                           0000F5   402 _BREG_F5	=	0x00f5
                           0000F6   403 _BREG_F6	=	0x00f6
                           0000F7   404 _BREG_F7	=	0x00f7
                           0000A8   405 _EX0	=	0x00a8
                           0000A9   406 _ET0	=	0x00a9
                           0000AA   407 _EX1	=	0x00aa
                           0000AB   408 _ET1	=	0x00ab
                           0000AC   409 _ES	=	0x00ac
                           0000AF   410 _EA	=	0x00af
                           0000B8   411 _PX0	=	0x00b8
                           0000B9   412 _PT0	=	0x00b9
                           0000BA   413 _PX1	=	0x00ba
                           0000BB   414 _PT1	=	0x00bb
                           0000BC   415 _PS	=	0x00bc
                           000080   416 _P0_0	=	0x0080
                           000081   417 _P0_1	=	0x0081
                           000082   418 _P0_2	=	0x0082
                           000083   419 _P0_3	=	0x0083
                           000084   420 _P0_4	=	0x0084
                           000085   421 _P0_5	=	0x0085
                           000086   422 _P0_6	=	0x0086
                           000087   423 _P0_7	=	0x0087
                           000090   424 _P1_0	=	0x0090
                           000091   425 _P1_1	=	0x0091
                           000092   426 _P1_2	=	0x0092
                           000093   427 _P1_3	=	0x0093
                           000094   428 _P1_4	=	0x0094
                           000095   429 _P1_5	=	0x0095
                           000096   430 _P1_6	=	0x0096
                           000097   431 _P1_7	=	0x0097
                           0000A0   432 _P2_0	=	0x00a0
                           0000A1   433 _P2_1	=	0x00a1
                           0000A2   434 _P2_2	=	0x00a2
                           0000A3   435 _P2_3	=	0x00a3
                           0000A4   436 _P2_4	=	0x00a4
                           0000A5   437 _P2_5	=	0x00a5
                           0000A6   438 _P2_6	=	0x00a6
                           0000A7   439 _P2_7	=	0x00a7
                           0000B0   440 _P3_0	=	0x00b0
                           0000B1   441 _P3_1	=	0x00b1
                           0000B2   442 _P3_2	=	0x00b2
                           0000B3   443 _P3_3	=	0x00b3
                           0000B4   444 _P3_4	=	0x00b4
                           0000B5   445 _P3_5	=	0x00b5
                           0000B6   446 _P3_6	=	0x00b6
                           0000B7   447 _P3_7	=	0x00b7
                           0000B0   448 _RXD	=	0x00b0
                           0000B0   449 _RXD0	=	0x00b0
                           0000B1   450 _TXD	=	0x00b1
                           0000B1   451 _TXD0	=	0x00b1
                           0000B2   452 _INT0	=	0x00b2
                           0000B3   453 _INT1	=	0x00b3
                           0000B4   454 _T0	=	0x00b4
                           0000B5   455 _T1	=	0x00b5
                           0000B6   456 _WR	=	0x00b6
                           0000B7   457 _RD	=	0x00b7
                           0000D0   458 _P	=	0x00d0
                           0000D1   459 _F1	=	0x00d1
                           0000D2   460 _OV	=	0x00d2
                           0000D3   461 _RS0	=	0x00d3
                           0000D4   462 _RS1	=	0x00d4
                           0000D5   463 _F0	=	0x00d5
                           0000D6   464 _AC	=	0x00d6
                           0000D7   465 _CY	=	0x00d7
                           000098   466 _RI	=	0x0098
                           000099   467 _TI	=	0x0099
                           00009A   468 _RB8	=	0x009a
                           00009B   469 _TB8	=	0x009b
                           00009C   470 _REN	=	0x009c
                           00009D   471 _SM2	=	0x009d
                           00009E   472 _SM1	=	0x009e
                           00009F   473 _SM0	=	0x009f
                           000088   474 _IT0	=	0x0088
                           000089   475 _IE0	=	0x0089
                           00008A   476 _IT1	=	0x008a
                           00008B   477 _IE1	=	0x008b
                           00008C   478 _TR0	=	0x008c
                           00008D   479 _TF0	=	0x008d
                           00008E   480 _TR1	=	0x008e
                           00008F   481 _TF1	=	0x008f
                                    482 ;--------------------------------------------------------
                                    483 ; overlayable register banks
                                    484 ;--------------------------------------------------------
                                    485 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        486 	.ds 8
                                    487 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        488 	.ds 8
                                    489 ;--------------------------------------------------------
                                    490 ; overlayable bit register bank
                                    491 ;--------------------------------------------------------
                                    492 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        493 bits:
      000000                        494 	.ds 1
                           008000   495 	b0 = bits[0]
                           008100   496 	b1 = bits[1]
                           008200   497 	b2 = bits[2]
                           008300   498 	b3 = bits[3]
                           008400   499 	b4 = bits[4]
                           008500   500 	b5 = bits[5]
                           008600   501 	b6 = bits[6]
                           008700   502 	b7 = bits[7]
                                    503 ;--------------------------------------------------------
                                    504 ; internal ram data
                                    505 ;--------------------------------------------------------
                                    506 	.area DSEG    (DATA)
      000000                        507 _delete_buffer_sloc0_1_0:
      000000                        508 	.ds 2
      000002                        509 _delete_buffer_sloc1_1_0:
      000002                        510 	.ds 2
      000004                        511 _delete_buffer_sloc2_1_0:
      000004                        512 	.ds 3
                                    513 ;--------------------------------------------------------
                                    514 ; overlayable items in internal ram 
                                    515 ;--------------------------------------------------------
                                    516 ;--------------------------------------------------------
                                    517 ; Stack segment in internal ram 
                                    518 ;--------------------------------------------------------
                                    519 	.area	SSEG
      000000                        520 __start__stack:
      000000                        521 	.ds	1
                                    522 
                                    523 ;--------------------------------------------------------
                                    524 ; indirectly addressable internal ram data
                                    525 ;--------------------------------------------------------
                                    526 	.area ISEG    (DATA)
                                    527 ;--------------------------------------------------------
                                    528 ; absolute internal ram data
                                    529 ;--------------------------------------------------------
                                    530 	.area IABS    (ABS,DATA)
                                    531 	.area IABS    (ABS,DATA)
                                    532 ;--------------------------------------------------------
                                    533 ; bit data
                                    534 ;--------------------------------------------------------
                                    535 	.area BSEG    (BIT)
                                    536 ;--------------------------------------------------------
                                    537 ; paged external ram data
                                    538 ;--------------------------------------------------------
                                    539 	.area PSEG    (PAG,XDATA)
                                    540 ;--------------------------------------------------------
                                    541 ; external ram data
                                    542 ;--------------------------------------------------------
                                    543 	.area XSEG    (XDATA)
                           008000   544 _DEBUG_LOC	=	0x8000
      000000                        545 _program_stats::
      000000                        546 	.ds 10
      00000A                        547 _buffers_array::
      00000A                        548 	.ds 300
      000136                        549 _create_new_buffer_buff_65537_84:
      000136                        550 	.ds 12
      000142                        551 _create_initial_buffers_buff_65538_91:
      000142                        552 	.ds 12
      00014E                        553 _create_initial_buffers_buff1_65538_91:
      00014E                        554 	.ds 12
      00015A                        555 _dump_buff_zero_ascii_j_65537_108:
      00015A                        556 	.ds 2
      00015C                        557 _dump_buff_zero_hex_j_131073_116:
      00015C                        558 	.ds 2
      00015E                        559 _get_number_total_chars_65536_125:
      00015E                        560 	.ds 2
      000160                        561 _get_number_num_65537_127:
      000160                        562 	.ds 2
      000162                        563 _get_num_helper_times_65536_132:
      000162                        564 	.ds 2
      000164                        565 _get_num_helper_num_65536_133:
      000164                        566 	.ds 2
      000166                        567 _putchar_c_65536_136:
      000166                        568 	.ds 2
      000168                        569 _dataout_data_65536_139:
      000168                        570 	.ds 1
                                    571 ;--------------------------------------------------------
                                    572 ; absolute external ram data
                                    573 ;--------------------------------------------------------
                                    574 	.area XABS    (ABS,XDATA)
                                    575 ;--------------------------------------------------------
                                    576 ; external initialized ram data
                                    577 ;--------------------------------------------------------
                                    578 	.area XISEG   (XDATA)
      000000                        579 _global_var_test::
      000000                        580 	.ds 1
      000001                        581 _watchdog_flag::
      000001                        582 	.ds 1
                                    583 	.area HOME    (CODE)
                                    584 	.area GSINIT0 (CODE)
                                    585 	.area GSINIT1 (CODE)
                                    586 	.area GSINIT2 (CODE)
                                    587 	.area GSINIT3 (CODE)
                                    588 	.area GSINIT4 (CODE)
                                    589 	.area GSINIT5 (CODE)
                                    590 	.area GSINIT  (CODE)
                                    591 	.area GSFINAL (CODE)
                                    592 	.area CSEG    (CODE)
                                    593 ;--------------------------------------------------------
                                    594 ; interrupt vector 
                                    595 ;--------------------------------------------------------
                                    596 	.area HOME    (CODE)
      000000                        597 __interrupt_vect:
      000000 02r00r00         [24]  598 	ljmp	__sdcc_gsinit_startup
      000003 02r01r81         [24]  599 	ljmp	_idle_interrupt
      000006                        600 	.ds	5
      00000B 32               [24]  601 	reti
      00000C                        602 	.ds	7
      000013 32               [24]  603 	reti
      000014                        604 	.ds	7
      00001B 32               [24]  605 	reti
      00001C                        606 	.ds	7
      000023 32               [24]  607 	reti
      000024                        608 	.ds	7
      00002B 32               [24]  609 	reti
      00002C                        610 	.ds	7
      000033 02r00rE9         [24]  611 	ljmp	_pca_interrupt
                                    612 ;--------------------------------------------------------
                                    613 ; global & static initialisations
                                    614 ;--------------------------------------------------------
                                    615 	.area HOME    (CODE)
                                    616 	.area GSINIT  (CODE)
                                    617 	.area GSFINAL (CODE)
                                    618 	.area GSINIT  (CODE)
                                    619 	.globl __sdcc_gsinit_startup
                                    620 	.globl __sdcc_program_startup
                                    621 	.globl __start__stack
                                    622 	.globl __mcs51_genXINIT
                                    623 	.globl __mcs51_genXRAMCLEAR
                                    624 	.globl __mcs51_genRAMCLEAR
                                    625 	.area GSFINAL (CODE)
      000000 02r00r36         [24]  626 	ljmp	__sdcc_program_startup
                                    627 ;--------------------------------------------------------
                                    628 ; Home
                                    629 ;--------------------------------------------------------
                                    630 	.area HOME    (CODE)
                                    631 	.area HOME    (CODE)
      000036                        632 __sdcc_program_startup:
      000036 02r00r00         [24]  633 	ljmp	_main
                                    634 ;	return from main will return to caller
                                    635 ;--------------------------------------------------------
                                    636 ; code
                                    637 ;--------------------------------------------------------
                                    638 	.area CSEG    (CODE)
                                    639 ;------------------------------------------------------------
                                    640 ;Allocation info for local variables in function 'main'
                                    641 ;------------------------------------------------------------
                                    642 ;	program.c:85: void main(void)
                                    643 ;	-----------------------------------------
                                    644 ;	 function main
                                    645 ;	-----------------------------------------
      000000                        646 _main:
                           000007   647 	ar7 = 0x07
                           000006   648 	ar6 = 0x06
                           000005   649 	ar5 = 0x05
                           000004   650 	ar4 = 0x04
                           000003   651 	ar3 = 0x03
                           000002   652 	ar2 = 0x02
                           000001   653 	ar1 = 0x01
                           000000   654 	ar0 = 0x00
                                    655 ;	program.c:87: printf("\n\r HELLO! Started in X2 Mode \n\r");
      000000 74r00            [12]  656 	mov	a,#___str_0
      000002 C0 E0            [24]  657 	push	acc
      000004 74s00            [12]  658 	mov	a,#(___str_0 >> 8)
      000006 C0 E0            [24]  659 	push	acc
      000008 74 80            [12]  660 	mov	a,#0x80
      00000A C0 E0            [24]  661 	push	acc
      00000C 12r00r00         [24]  662 	lcall	_printf
      00000F 15 81            [12]  663 	dec	sp
      000011 15 81            [12]  664 	dec	sp
      000013 15 81            [12]  665 	dec	sp
                                    666 ;	program.c:88: DEBUGPORT(0x01);
      000015 75 82 01         [24]  667 	mov	dpl,#0x01
      000018 12r13r65         [24]  668 	lcall	_dataout
                                    669 ;	program.c:89: P1_1 = 0;
                                    670 ;	assignBit
      00001B C2 91            [12]  671 	clr	_P1_1
                                    672 ;	program.c:91: main_menu();
                                    673 ;	program.c:92: }
      00001D 02r03r6E         [24]  674 	ljmp	_main_menu
                                    675 ;------------------------------------------------------------
                                    676 ;Allocation info for local variables in function 'user_interface_heap'
                                    677 ;------------------------------------------------------------
                                    678 ;	program.c:99: void user_interface_heap()
                                    679 ;	-----------------------------------------
                                    680 ;	 function user_interface_heap
                                    681 ;	-----------------------------------------
      000020                        682 _user_interface_heap:
                                    683 ;	program.c:101: DEBUGPORT(0x02);
      000020 75 82 02         [24]  684 	mov	dpl,#0x02
      000023 12r13r65         [24]  685 	lcall	_dataout
                                    686 ;	program.c:102: create_initial_buffers();
      000026 12r0Ar14         [24]  687 	lcall	_create_initial_buffers
                                    688 ;	program.c:103: print_all_buffers();
      000029 12r10r45         [24]  689 	lcall	_print_all_buffers
                                    690 ;	program.c:104: enter_chars();
                                    691 ;	program.c:105: }
      00002C 02r0BrF1         [24]  692 	ljmp	_enter_chars
                                    693 ;------------------------------------------------------------
                                    694 ;Allocation info for local variables in function 'user_interface_PCA'
                                    695 ;------------------------------------------------------------
                                    696 ;inp                       Allocated with name '_user_interface_PCA_inp_65537_51'
                                    697 ;------------------------------------------------------------
                                    698 ;	program.c:112: void user_interface_PCA()
                                    699 ;	-----------------------------------------
                                    700 ;	 function user_interface_PCA
                                    701 ;	-----------------------------------------
      00002F                        702 _user_interface_PCA:
                                    703 ;	program.c:114: DEBUGPORT(0xAA);
      00002F 75 82 AA         [24]  704 	mov	dpl,#0xaa
      000032 12r13r65         [24]  705 	lcall	_dataout
                                    706 ;	program.c:115: printf("Hello, In PCA Demo mode \n\r");
      000035 74r20            [12]  707 	mov	a,#___str_1
      000037 C0 E0            [24]  708 	push	acc
      000039 74s00            [12]  709 	mov	a,#(___str_1 >> 8)
      00003B C0 E0            [24]  710 	push	acc
      00003D 74 80            [12]  711 	mov	a,#0x80
      00003F C0 E0            [24]  712 	push	acc
      000041 12r00r00         [24]  713 	lcall	_printf
      000044 15 81            [12]  714 	dec	sp
      000046 15 81            [12]  715 	dec	sp
      000048 15 81            [12]  716 	dec	sp
                                    717 ;	program.c:116: print_pca_menu();
      00004A 12r07r12         [24]  718 	lcall	_print_pca_menu
                                    719 ;	program.c:119: wrong_choice_pca:
      00004D                        720 00101$:
                                    721 ;	program.c:120: printf("Please make a valid choice \n\r");
      00004D 74r3B            [12]  722 	mov	a,#___str_2
      00004F C0 E0            [24]  723 	push	acc
      000051 74s00            [12]  724 	mov	a,#(___str_2 >> 8)
      000053 C0 E0            [24]  725 	push	acc
      000055 74 80            [12]  726 	mov	a,#0x80
      000057 C0 E0            [24]  727 	push	acc
      000059 12r00r00         [24]  728 	lcall	_printf
      00005C 15 81            [12]  729 	dec	sp
      00005E 15 81            [12]  730 	dec	sp
      000060 15 81            [12]  731 	dec	sp
                                    732 ;	program.c:121: inp = getchar();
      000062 12r13r29         [24]  733 	lcall	_getchar
      000065 AE 82            [24]  734 	mov	r6,dpl
      000067 AF 83            [24]  735 	mov	r7,dph
                                    736 ;	program.c:122: if (inp == 0x46)
      000069 BE 46 08         [24]  737 	cjne	r6,#0x46,00124$
      00006C BF 00 05         [24]  738 	cjne	r7,#0x00,00124$
                                    739 ;	program.c:123: pca_falling_edge();
      00006F 12r01rF6         [24]  740 	lcall	_pca_falling_edge
      000072 80 50            [24]  741 	sjmp	00141$
      000074                        742 00124$:
                                    743 ;	program.c:124: else if (inp == 0x53)
      000074 BE 53 08         [24]  744 	cjne	r6,#0x53,00121$
      000077 BF 00 05         [24]  745 	cjne	r7,#0x00,00121$
                                    746 ;	program.c:125: pca_software_timer();
      00007A 12r02r11         [24]  747 	lcall	_pca_software_timer
      00007D 80 45            [24]  748 	sjmp	00141$
      00007F                        749 00121$:
                                    750 ;	program.c:126: else if (inp == 0x48)
      00007F BE 48 08         [24]  751 	cjne	r6,#0x48,00118$
      000082 BF 00 05         [24]  752 	cjne	r7,#0x00,00118$
                                    753 ;	program.c:127: pca_high_speed();
      000085 12r02r32         [24]  754 	lcall	_pca_high_speed
      000088 80 3A            [24]  755 	sjmp	00141$
      00008A                        756 00118$:
                                    757 ;	program.c:128: else if (inp == 0x50)
      00008A BE 50 08         [24]  758 	cjne	r6,#0x50,00115$
      00008D BF 00 05         [24]  759 	cjne	r7,#0x00,00115$
                                    760 ;	program.c:129: pca_pwm();
      000090 12r02r56         [24]  761 	lcall	_pca_pwm
      000093 80 2F            [24]  762 	sjmp	00141$
      000095                        763 00115$:
                                    764 ;	program.c:130: else if (inp == 0x57)
      000095 BE 57 08         [24]  765 	cjne	r6,#0x57,00112$
      000098 BF 00 05         [24]  766 	cjne	r7,#0x00,00112$
                                    767 ;	program.c:131: pca_watchdog();
      00009B 12r02r7A         [24]  768 	lcall	_pca_watchdog
      00009E 80 24            [24]  769 	sjmp	00141$
      0000A0                        770 00112$:
                                    771 ;	program.c:132: else if (inp == 0x49)
      0000A0 BE 49 08         [24]  772 	cjne	r6,#0x49,00109$
      0000A3 BF 00 05         [24]  773 	cjne	r7,#0x00,00109$
                                    774 ;	program.c:133: pca_idle();
      0000A6 12r02rD2         [24]  775 	lcall	_pca_idle
      0000A9 80 19            [24]  776 	sjmp	00141$
      0000AB                        777 00109$:
                                    778 ;	program.c:134: else if (inp == 0x44)
      0000AB BE 44 08         [24]  779 	cjne	r6,#0x44,00106$
      0000AE BF 00 05         [24]  780 	cjne	r7,#0x00,00106$
                                    781 ;	program.c:135: pca_pdown();
      0000B1 12r03r07         [24]  782 	lcall	_pca_pdown
      0000B4 80 0E            [24]  783 	sjmp	00141$
      0000B6                        784 00106$:
                                    785 ;	program.c:136: else if (inp == 0x4C)
      0000B6 BE 4C 05         [24]  786 	cjne	r6,#0x4c,00190$
      0000B9 BF 00 02         [24]  787 	cjne	r7,#0x00,00190$
      0000BC 80 03            [24]  788 	sjmp	00191$
      0000BE                        789 00190$:
      0000BE 02r00r4D         [24]  790 	ljmp	00101$
      0000C1                        791 00191$:
                                    792 ;	program.c:137: fclk_lowest();
      0000C1 12r03r3C         [24]  793 	lcall	_fclk_lowest
                                    794 ;	program.c:141: exit_choice:
      0000C4                        795 00141$:
      0000C4                        796 00126$:
                                    797 ;	program.c:142: printf("Please 'E' to exit or Reset \n\r");
      0000C4 74r59            [12]  798 	mov	a,#___str_3
      0000C6 C0 E0            [24]  799 	push	acc
      0000C8 74s00            [12]  800 	mov	a,#(___str_3 >> 8)
      0000CA C0 E0            [24]  801 	push	acc
      0000CC 74 80            [12]  802 	mov	a,#0x80
      0000CE C0 E0            [24]  803 	push	acc
      0000D0 12r00r00         [24]  804 	lcall	_printf
      0000D3 15 81            [12]  805 	dec	sp
      0000D5 15 81            [12]  806 	dec	sp
      0000D7 15 81            [12]  807 	dec	sp
                                    808 ;	program.c:143: inp = getchar();
      0000D9 12r13r29         [24]  809 	lcall	_getchar
      0000DC AE 82            [24]  810 	mov	r6,dpl
      0000DE AF 83            [24]  811 	mov	r7,dph
                                    812 ;	program.c:144: if(inp == 0x45)
      0000E0 BE 45 E1         [24]  813 	cjne	r6,#0x45,00126$
      0000E3 BF 00 DE         [24]  814 	cjne	r7,#0x00,00126$
                                    815 ;	program.c:145: user_interface_PCA();
                                    816 ;	program.c:147: goto exit_choice;
                                    817 ;	program.c:148: }
      0000E6 02r00r2F         [24]  818 	ljmp	_user_interface_PCA
                                    819 ;------------------------------------------------------------
                                    820 ;Allocation info for local variables in function 'pca_interrupt'
                                    821 ;------------------------------------------------------------
                                    822 ;	program.c:150: void pca_interrupt() __interrupt(6) __using(1)
                                    823 ;	-----------------------------------------
                                    824 ;	 function pca_interrupt
                                    825 ;	-----------------------------------------
      0000E9                        826 _pca_interrupt:
                           00000F   827 	ar7 = 0x0f
                           00000E   828 	ar6 = 0x0e
                           00000D   829 	ar5 = 0x0d
                           00000C   830 	ar4 = 0x0c
                           00000B   831 	ar3 = 0x0b
                           00000A   832 	ar2 = 0x0a
                           000009   833 	ar1 = 0x09
                           000008   834 	ar0 = 0x08
      0000E9 C0*00            [24]  835 	push	bits
      0000EB C0 E0            [24]  836 	push	acc
      0000ED C0 F0            [24]  837 	push	b
      0000EF C0 82            [24]  838 	push	dpl
      0000F1 C0 83            [24]  839 	push	dph
      0000F3 C0 07            [24]  840 	push	(0+7)
      0000F5 C0 06            [24]  841 	push	(0+6)
      0000F7 C0 05            [24]  842 	push	(0+5)
      0000F9 C0 04            [24]  843 	push	(0+4)
      0000FB C0 03            [24]  844 	push	(0+3)
      0000FD C0 02            [24]  845 	push	(0+2)
      0000FF C0 01            [24]  846 	push	(0+1)
      000101 C0 00            [24]  847 	push	(0+0)
      000103 C0 D0            [24]  848 	push	psw
      000105 75 D0 08         [24]  849 	mov	psw,#0x08
                                    850 ;	program.c:152: if (CCF0)
      000108 30 D8 2D         [24]  851 	jnb	_CCF0,00102$
                                    852 ;	program.c:154: printf("Captured Value CCPL -> %d CCPH -> %d \n\r", CCAP0L, CCAP0H);
      00010B AE FA            [24]  853 	mov	r6,_CCAP0H
      00010D 7F 00            [12]  854 	mov	r7,#0x00
      00010F AC EA            [24]  855 	mov	r4,_CCAP0L
      000111 7D 00            [12]  856 	mov	r5,#0x00
      000113 C0 0E            [24]  857 	push	ar6
      000115 C0 0F            [24]  858 	push	ar7
      000117 C0 0C            [24]  859 	push	ar4
      000119 C0 0D            [24]  860 	push	ar5
      00011B 74r78            [12]  861 	mov	a,#___str_4
      00011D C0 E0            [24]  862 	push	acc
      00011F 74s00            [12]  863 	mov	a,#(___str_4 >> 8)
      000121 C0 E0            [24]  864 	push	acc
      000123 74 80            [12]  865 	mov	a,#0x80
      000125 C0 E0            [24]  866 	push	acc
      000127 75 D0 00         [24]  867 	mov	psw,#0x00
      00012A 12r00r00         [24]  868 	lcall	_printf
      00012D 75 D0 08         [24]  869 	mov	psw,#0x08
      000130 E5 81            [12]  870 	mov	a,sp
      000132 24 F9            [12]  871 	add	a,#0xf9
      000134 F5 81            [12]  872 	mov	sp,a
                                    873 ;	program.c:156: CCF0 = 0;
                                    874 ;	assignBit
      000136 C2 D8            [12]  875 	clr	_CCF0
      000138                        876 00102$:
                                    877 ;	program.c:158: if (CCF1)
                                    878 ;	program.c:160: CCF1 = 0;
                                    879 ;	assignBit
      000138 10 D9 02         [24]  880 	jbc	_CCF1,00122$
      00013B 80 27            [24]  881 	sjmp	00107$
      00013D                        882 00122$:
                                    883 ;	program.c:161: CH = 0;
      00013D 75 F9 00         [24]  884 	mov	_CH,#0x00
                                    885 ;	program.c:162: CL = 0;
      000140 75 E9 00         [24]  886 	mov	_CL,#0x00
                                    887 ;	program.c:163: if(!watchdog_flag)
      000143 90r00r01         [24]  888 	mov	dptr,#_watchdog_flag
      000146 E0               [24]  889 	movx	a,@dptr
      000147 70 1B            [24]  890 	jnz	00107$
                                    891 ;	program.c:164: printf("Timer Interrupt\n\r");        
      000149 74rA0            [12]  892 	mov	a,#___str_5
      00014B C0 E0            [24]  893 	push	acc
      00014D 74s00            [12]  894 	mov	a,#(___str_5 >> 8)
      00014F C0 E0            [24]  895 	push	acc
      000151 74 80            [12]  896 	mov	a,#0x80
      000153 C0 E0            [24]  897 	push	acc
      000155 75 D0 00         [24]  898 	mov	psw,#0x00
      000158 12r00r00         [24]  899 	lcall	_printf
      00015B 75 D0 08         [24]  900 	mov	psw,#0x08
      00015E 15 81            [12]  901 	dec	sp
      000160 15 81            [12]  902 	dec	sp
      000162 15 81            [12]  903 	dec	sp
      000164                        904 00107$:
                                    905 ;	program.c:167: }
      000164 D0 D0            [24]  906 	pop	psw
      000166 D0 00            [24]  907 	pop	(0+0)
      000168 D0 01            [24]  908 	pop	(0+1)
      00016A D0 02            [24]  909 	pop	(0+2)
      00016C D0 03            [24]  910 	pop	(0+3)
      00016E D0 04            [24]  911 	pop	(0+4)
      000170 D0 05            [24]  912 	pop	(0+5)
      000172 D0 06            [24]  913 	pop	(0+6)
      000174 D0 07            [24]  914 	pop	(0+7)
      000176 D0 83            [24]  915 	pop	dph
      000178 D0 82            [24]  916 	pop	dpl
      00017A D0 F0            [24]  917 	pop	b
      00017C D0 E0            [24]  918 	pop	acc
      00017E D0*00            [24]  919 	pop	bits
      000180 32               [24]  920 	reti
                                    921 ;------------------------------------------------------------
                                    922 ;Allocation info for local variables in function 'idle_interrupt'
                                    923 ;------------------------------------------------------------
                                    924 ;	program.c:169: void idle_interrupt() __interrupt(0) __using(1)
                                    925 ;	-----------------------------------------
                                    926 ;	 function idle_interrupt
                                    927 ;	-----------------------------------------
      000181                        928 _idle_interrupt:
      000181 C0*00            [24]  929 	push	bits
      000183 C0 E0            [24]  930 	push	acc
      000185 C0 F0            [24]  931 	push	b
      000187 C0 82            [24]  932 	push	dpl
      000189 C0 83            [24]  933 	push	dph
      00018B C0 07            [24]  934 	push	(0+7)
      00018D C0 06            [24]  935 	push	(0+6)
      00018F C0 05            [24]  936 	push	(0+5)
      000191 C0 04            [24]  937 	push	(0+4)
      000193 C0 03            [24]  938 	push	(0+3)
      000195 C0 02            [24]  939 	push	(0+2)
      000197 C0 01            [24]  940 	push	(0+1)
      000199 C0 00            [24]  941 	push	(0+0)
      00019B C0 D0            [24]  942 	push	psw
      00019D 75 D0 08         [24]  943 	mov	psw,#0x08
                                    944 ;	program.c:171: EX0 = 0;
                                    945 ;	assignBit
      0001A0 C2 A8            [12]  946 	clr	_EX0
                                    947 ;	program.c:172: PCON = 0x80;
      0001A2 75 87 80         [24]  948 	mov	_PCON,#0x80
                                    949 ;	program.c:173: CR = 0;
                                    950 ;	assignBit
      0001A5 C2 DE            [12]  951 	clr	_CR
                                    952 ;	program.c:174: CKRL = 255;
      0001A7 75 97 FF         [24]  953 	mov	_CKRL,#0xff
                                    954 ;	program.c:175: CCAPM0 = 0;
                                    955 ;	program.c:176: CCAPM1 = 0;
                                    956 ;	program.c:177: CCAPM2 = 0;
                                    957 ;	program.c:178: CCAPM3 = 0;
                                    958 ;	program.c:179: CCAPM4 = 0;   
                                    959 ;	program.c:180: printf("Going to main menu.. \n\r");
      0001AA E4               [12]  960 	clr	a
      0001AB F5 DA            [12]  961 	mov	_CCAPM0,a
      0001AD F5 DB            [12]  962 	mov	_CCAPM1,a
      0001AF F5 DC            [12]  963 	mov	_CCAPM2,a
      0001B1 F5 DD            [12]  964 	mov	_CCAPM3,a
      0001B3 F5 DE            [12]  965 	mov	_CCAPM4,a
      0001B5 74rB2            [12]  966 	mov	a,#___str_6
      0001B7 C0 E0            [24]  967 	push	acc
      0001B9 74s00            [12]  968 	mov	a,#(___str_6 >> 8)
      0001BB C0 E0            [24]  969 	push	acc
      0001BD 74 80            [12]  970 	mov	a,#0x80
      0001BF C0 E0            [24]  971 	push	acc
      0001C1 75 D0 00         [24]  972 	mov	psw,#0x00
      0001C4 12r00r00         [24]  973 	lcall	_printf
      0001C7 75 D0 08         [24]  974 	mov	psw,#0x08
      0001CA 15 81            [12]  975 	dec	sp
      0001CC 15 81            [12]  976 	dec	sp
      0001CE 15 81            [12]  977 	dec	sp
                                    978 ;	program.c:181: main_menu();
      0001D0 75 D0 00         [24]  979 	mov	psw,#0x00
      0001D3 12r03r6E         [24]  980 	lcall	_main_menu
      0001D6 75 D0 08         [24]  981 	mov	psw,#0x08
                                    982 ;	program.c:182: }
      0001D9 D0 D0            [24]  983 	pop	psw
      0001DB D0 00            [24]  984 	pop	(0+0)
      0001DD D0 01            [24]  985 	pop	(0+1)
      0001DF D0 02            [24]  986 	pop	(0+2)
      0001E1 D0 03            [24]  987 	pop	(0+3)
      0001E3 D0 04            [24]  988 	pop	(0+4)
      0001E5 D0 05            [24]  989 	pop	(0+5)
      0001E7 D0 06            [24]  990 	pop	(0+6)
      0001E9 D0 07            [24]  991 	pop	(0+7)
      0001EB D0 83            [24]  992 	pop	dph
      0001ED D0 82            [24]  993 	pop	dpl
      0001EF D0 F0            [24]  994 	pop	b
      0001F1 D0 E0            [24]  995 	pop	acc
      0001F3 D0*00            [24]  996 	pop	bits
      0001F5 32               [24]  997 	reti
                                    998 ;------------------------------------------------------------
                                    999 ;Allocation info for local variables in function 'pca_falling_edge'
                                   1000 ;------------------------------------------------------------
                                   1001 ;	program.c:184: void pca_falling_edge()
                                   1002 ;	-----------------------------------------
                                   1003 ;	 function pca_falling_edge
                                   1004 ;	-----------------------------------------
      0001F6                       1005 _pca_falling_edge:
                           000007  1006 	ar7 = 0x07
                           000006  1007 	ar6 = 0x06
                           000005  1008 	ar5 = 0x05
                           000004  1009 	ar4 = 0x04
                           000003  1010 	ar3 = 0x03
                           000002  1011 	ar2 = 0x02
                           000001  1012 	ar1 = 0x01
                           000000  1013 	ar0 = 0x00
                                   1014 ;	program.c:186: printf("Setting P1.3 as falling edge detector, enabling PCA interrupt \n\r");
      0001F6 74rCA            [12] 1015 	mov	a,#___str_7
      0001F8 C0 E0            [24] 1016 	push	acc
      0001FA 74s00            [12] 1017 	mov	a,#(___str_7 >> 8)
      0001FC C0 E0            [24] 1018 	push	acc
      0001FE 74 80            [12] 1019 	mov	a,#0x80
      000200 C0 E0            [24] 1020 	push	acc
      000202 12r00r00         [24] 1021 	lcall	_printf
      000205 15 81            [12] 1022 	dec	sp
      000207 15 81            [12] 1023 	dec	sp
      000209 15 81            [12] 1024 	dec	sp
                                   1025 ;	program.c:187: CCAPM0 = 0x21;
      00020B 75 DA 21         [24] 1026 	mov	_CCAPM0,#0x21
                                   1027 ;	program.c:188: CR = 1;
                                   1028 ;	assignBit
      00020E D2 DE            [12] 1029 	setb	_CR
                                   1030 ;	program.c:190: }
      000210 22               [24] 1031 	ret
                                   1032 ;------------------------------------------------------------
                                   1033 ;Allocation info for local variables in function 'pca_software_timer'
                                   1034 ;------------------------------------------------------------
                                   1035 ;	program.c:192: void pca_software_timer()
                                   1036 ;	-----------------------------------------
                                   1037 ;	 function pca_software_timer
                                   1038 ;	-----------------------------------------
      000211                       1039 _pca_software_timer:
                                   1040 ;	program.c:194: printf("Entering Software Timer Mode \n\r");
      000211 74r0B            [12] 1041 	mov	a,#___str_8
      000213 C0 E0            [24] 1042 	push	acc
      000215 74s01            [12] 1043 	mov	a,#(___str_8 >> 8)
      000217 C0 E0            [24] 1044 	push	acc
      000219 74 80            [12] 1045 	mov	a,#0x80
      00021B C0 E0            [24] 1046 	push	acc
      00021D 12r00r00         [24] 1047 	lcall	_printf
      000220 15 81            [12] 1048 	dec	sp
      000222 15 81            [12] 1049 	dec	sp
      000224 15 81            [12] 1050 	dec	sp
                                   1051 ;	program.c:195: CCAP1L = 255;
      000226 75 EB FF         [24] 1052 	mov	_CCAP1L,#0xff
                                   1053 ;	program.c:196: CCAP1H = 255;
      000229 75 FB FF         [24] 1054 	mov	_CCAP1H,#0xff
                                   1055 ;	program.c:197: CCAPM1 = 0x49;    
      00022C 75 DB 49         [24] 1056 	mov	_CCAPM1,#0x49
                                   1057 ;	program.c:198: CR = 1;
                                   1058 ;	assignBit
      00022F D2 DE            [12] 1059 	setb	_CR
                                   1060 ;	program.c:200: }
      000231 22               [24] 1061 	ret
                                   1062 ;------------------------------------------------------------
                                   1063 ;Allocation info for local variables in function 'pca_high_speed'
                                   1064 ;------------------------------------------------------------
                                   1065 ;	program.c:202: void pca_high_speed()
                                   1066 ;	-----------------------------------------
                                   1067 ;	 function pca_high_speed
                                   1068 ;	-----------------------------------------
      000232                       1069 _pca_high_speed:
                                   1070 ;	program.c:205: printf("Entering High Speed Toggle Mode, P1.5 \n\r");   
      000232 74r2B            [12] 1071 	mov	a,#___str_9
      000234 C0 E0            [24] 1072 	push	acc
      000236 74s01            [12] 1073 	mov	a,#(___str_9 >> 8)
      000238 C0 E0            [24] 1074 	push	acc
      00023A 74 80            [12] 1075 	mov	a,#0x80
      00023C C0 E0            [24] 1076 	push	acc
      00023E 12r00r00         [24] 1077 	lcall	_printf
      000241 15 81            [12] 1078 	dec	sp
      000243 15 81            [12] 1079 	dec	sp
      000245 15 81            [12] 1080 	dec	sp
                                   1081 ;	program.c:206: CCAP2L = 255;
      000247 75 EC FF         [24] 1082 	mov	_CCAP2L,#0xff
                                   1083 ;	program.c:207: CCAP2H = 2;
      00024A 75 FC 02         [24] 1084 	mov	_CCAP2H,#0x02
                                   1085 ;	program.c:208: CCAPM2 = 0x4D;
      00024D 75 DC 4D         [24] 1086 	mov	_CCAPM2,#0x4d
                                   1087 ;	program.c:209: CMOD = CPS0;
      000250 75 D9 02         [24] 1088 	mov	_CMOD,#0x02
                                   1089 ;	program.c:210: CR = 1;
                                   1090 ;	assignBit
      000253 D2 DE            [12] 1091 	setb	_CR
                                   1092 ;	program.c:212: }
      000255 22               [24] 1093 	ret
                                   1094 ;------------------------------------------------------------
                                   1095 ;Allocation info for local variables in function 'pca_pwm'
                                   1096 ;------------------------------------------------------------
                                   1097 ;	program.c:214: void pca_pwm()
                                   1098 ;	-----------------------------------------
                                   1099 ;	 function pca_pwm
                                   1100 ;	-----------------------------------------
      000256                       1101 _pca_pwm:
                                   1102 ;	program.c:216: printf("Entering PWM Mode, 25 percent Duty Cycle P1.6\n\r");
      000256 74r54            [12] 1103 	mov	a,#___str_10
      000258 C0 E0            [24] 1104 	push	acc
      00025A 74s01            [12] 1105 	mov	a,#(___str_10 >> 8)
      00025C C0 E0            [24] 1106 	push	acc
      00025E 74 80            [12] 1107 	mov	a,#0x80
      000260 C0 E0            [24] 1108 	push	acc
      000262 12r00r00         [24] 1109 	lcall	_printf
      000265 15 81            [12] 1110 	dec	sp
      000267 15 81            [12] 1111 	dec	sp
      000269 15 81            [12] 1112 	dec	sp
                                   1113 ;	program.c:217: CCAP3L = 192;
      00026B 75 ED C0         [24] 1114 	mov	_CCAP3L,#0xc0
                                   1115 ;	program.c:218: CCAP3H = 192;
      00026E 75 FD C0         [24] 1116 	mov	_CCAP3H,#0xc0
                                   1117 ;	program.c:219: CCAPM3 = 0x42;
      000271 75 DD 42         [24] 1118 	mov	_CCAPM3,#0x42
                                   1119 ;	program.c:220: CMOD = CPS0;
      000274 75 D9 02         [24] 1120 	mov	_CMOD,#0x02
                                   1121 ;	program.c:221: CR = 1;
                                   1122 ;	assignBit
      000277 D2 DE            [12] 1123 	setb	_CR
                                   1124 ;	program.c:223: }
      000279 22               [24] 1125 	ret
                                   1126 ;------------------------------------------------------------
                                   1127 ;Allocation info for local variables in function 'pca_watchdog'
                                   1128 ;------------------------------------------------------------
                                   1129 ;rec                       Allocated with name '_pca_watchdog_rec_65537_61'
                                   1130 ;------------------------------------------------------------
                                   1131 ;	program.c:225: void pca_watchdog()
                                   1132 ;	-----------------------------------------
                                   1133 ;	 function pca_watchdog
                                   1134 ;	-----------------------------------------
      00027A                       1135 _pca_watchdog:
                                   1136 ;	program.c:227: CCAP1L = 255;
      00027A 75 EB FF         [24] 1137 	mov	_CCAP1L,#0xff
                                   1138 ;	program.c:228: CCAP1H = 128;
      00027D 75 FB 80         [24] 1139 	mov	_CCAP1H,#0x80
                                   1140 ;	program.c:229: CCAPM1 = 0x49;    
      000280 75 DB 49         [24] 1141 	mov	_CCAPM1,#0x49
                                   1142 ;	program.c:230: watchdog_flag = 1;
      000283 90r00r01         [24] 1143 	mov	dptr,#_watchdog_flag
      000286 74 01            [12] 1144 	mov	a,#0x01
      000288 F0               [24] 1145 	movx	@dptr,a
                                   1146 ;	program.c:231: printf("Enabling Watchdog Timer..\n\r");
      000289 74r84            [12] 1147 	mov	a,#___str_11
      00028B C0 E0            [24] 1148 	push	acc
      00028D 74s01            [12] 1149 	mov	a,#(___str_11 >> 8)
      00028F C0 E0            [24] 1150 	push	acc
      000291 74 80            [12] 1151 	mov	a,#0x80
      000293 C0 E0            [24] 1152 	push	acc
      000295 12r00r00         [24] 1153 	lcall	_printf
      000298 15 81            [12] 1154 	dec	sp
      00029A 15 81            [12] 1155 	dec	sp
      00029C 15 81            [12] 1156 	dec	sp
                                   1157 ;	program.c:232: CCAP4L = 255;
      00029E 75 EE FF         [24] 1158 	mov	_CCAP4L,#0xff
                                   1159 ;	program.c:233: CCAP4H = 255;
      0002A1 75 FE FF         [24] 1160 	mov	_CCAP4H,#0xff
                                   1161 ;	program.c:234: CMOD = WDTE;
      0002A4 75 D9 40         [24] 1162 	mov	_CMOD,#0x40
                                   1163 ;	program.c:235: CCAPM4 = 0x48;        
      0002A7 75 DE 48         [24] 1164 	mov	_CCAPM4,#0x48
                                   1165 ;	program.c:236: CR = 1;
                                   1166 ;	assignBit
      0002AA D2 DE            [12] 1167 	setb	_CR
                                   1168 ;	program.c:238: printf("Currently Watchdog is being serviced\n\rPress 'S' to stop and generate a reset \n\r");
      0002AC 74rA0            [12] 1169 	mov	a,#___str_12
      0002AE C0 E0            [24] 1170 	push	acc
      0002B0 74s01            [12] 1171 	mov	a,#(___str_12 >> 8)
      0002B2 C0 E0            [24] 1172 	push	acc
      0002B4 74 80            [12] 1173 	mov	a,#0x80
      0002B6 C0 E0            [24] 1174 	push	acc
      0002B8 12r00r00         [24] 1175 	lcall	_printf
      0002BB 15 81            [12] 1176 	dec	sp
      0002BD 15 81            [12] 1177 	dec	sp
      0002BF 15 81            [12] 1178 	dec	sp
                                   1179 ;	program.c:240: get_e:    
      0002C1                       1180 00101$:
                                   1181 ;	program.c:241: rec = getchar();
      0002C1 12r13r29         [24] 1182 	lcall	_getchar
      0002C4 AE 82            [24] 1183 	mov	r6,dpl
      0002C6 AF 83            [24] 1184 	mov	r7,dph
                                   1185 ;	program.c:243: if(rec == 0x53)
      0002C8 BE 53 F6         [24] 1186 	cjne	r6,#0x53,00101$
      0002CB BF 00 F3         [24] 1187 	cjne	r7,#0x00,00101$
                                   1188 ;	program.c:244: CCAPM1 = 0;
      0002CE 75 DB 00         [24] 1189 	mov	_CCAPM1,#0x00
                                   1190 ;	program.c:246: goto get_e;
                                   1191 ;	program.c:249: }
      0002D1 22               [24] 1192 	ret
                                   1193 ;------------------------------------------------------------
                                   1194 ;Allocation info for local variables in function 'pca_idle'
                                   1195 ;------------------------------------------------------------
                                   1196 ;	program.c:250: void pca_idle()
                                   1197 ;	-----------------------------------------
                                   1198 ;	 function pca_idle
                                   1199 ;	-----------------------------------------
      0002D2                       1200 _pca_idle:
                                   1201 ;	program.c:252: pca_pwm();
      0002D2 12r02r56         [24] 1202 	lcall	_pca_pwm
                                   1203 ;	program.c:253: printf("Entering Idle, Will Exit on external interrupt 0\n\r");   
      0002D5 74rF0            [12] 1204 	mov	a,#___str_13
      0002D7 C0 E0            [24] 1205 	push	acc
      0002D9 74s01            [12] 1206 	mov	a,#(___str_13 >> 8)
      0002DB C0 E0            [24] 1207 	push	acc
      0002DD 74 80            [12] 1208 	mov	a,#0x80
      0002DF C0 E0            [24] 1209 	push	acc
      0002E1 12r00r00         [24] 1210 	lcall	_printf
      0002E4 15 81            [12] 1211 	dec	sp
      0002E6 15 81            [12] 1212 	dec	sp
      0002E8 15 81            [12] 1213 	dec	sp
                                   1214 ;	program.c:254: EX0 = 1;
                                   1215 ;	assignBit
      0002EA D2 A8            [12] 1216 	setb	_EX0
                                   1217 ;	program.c:255: PCON = IDL; 
      0002EC 75 87 01         [24] 1218 	mov	_PCON,#0x01
                                   1219 ;	program.c:256: printf("Woke up from Idle/Power down, going to main menu \n\r");
      0002EF 74r23            [12] 1220 	mov	a,#___str_14
      0002F1 C0 E0            [24] 1221 	push	acc
      0002F3 74s02            [12] 1222 	mov	a,#(___str_14 >> 8)
      0002F5 C0 E0            [24] 1223 	push	acc
      0002F7 74 80            [12] 1224 	mov	a,#0x80
      0002F9 C0 E0            [24] 1225 	push	acc
      0002FB 12r00r00         [24] 1226 	lcall	_printf
      0002FE 15 81            [12] 1227 	dec	sp
      000300 15 81            [12] 1228 	dec	sp
      000302 15 81            [12] 1229 	dec	sp
                                   1230 ;	program.c:257: main_menu();
                                   1231 ;	program.c:258: }
      000304 02r03r6E         [24] 1232 	ljmp	_main_menu
                                   1233 ;------------------------------------------------------------
                                   1234 ;Allocation info for local variables in function 'pca_pdown'
                                   1235 ;------------------------------------------------------------
                                   1236 ;	program.c:260: void pca_pdown()
                                   1237 ;	-----------------------------------------
                                   1238 ;	 function pca_pdown
                                   1239 ;	-----------------------------------------
      000307                       1240 _pca_pdown:
                                   1241 ;	program.c:262: pca_pwm();
      000307 12r02r56         [24] 1242 	lcall	_pca_pwm
                                   1243 ;	program.c:263: printf("Entering power down, Will Exit on external interrupt 0\n\r");   
      00030A 74r57            [12] 1244 	mov	a,#___str_15
      00030C C0 E0            [24] 1245 	push	acc
      00030E 74s02            [12] 1246 	mov	a,#(___str_15 >> 8)
      000310 C0 E0            [24] 1247 	push	acc
      000312 74 80            [12] 1248 	mov	a,#0x80
      000314 C0 E0            [24] 1249 	push	acc
      000316 12r00r00         [24] 1250 	lcall	_printf
      000319 15 81            [12] 1251 	dec	sp
      00031B 15 81            [12] 1252 	dec	sp
      00031D 15 81            [12] 1253 	dec	sp
                                   1254 ;	program.c:264: EX0 = 1;
                                   1255 ;	assignBit
      00031F D2 A8            [12] 1256 	setb	_EX0
                                   1257 ;	program.c:265: PCON = PD; 
      000321 75 87 02         [24] 1258 	mov	_PCON,#0x02
                                   1259 ;	program.c:266: printf("Woke up from Idle/Power down, going to main menu \n\r");
      000324 74r23            [12] 1260 	mov	a,#___str_14
      000326 C0 E0            [24] 1261 	push	acc
      000328 74s02            [12] 1262 	mov	a,#(___str_14 >> 8)
      00032A C0 E0            [24] 1263 	push	acc
      00032C 74 80            [12] 1264 	mov	a,#0x80
      00032E C0 E0            [24] 1265 	push	acc
      000330 12r00r00         [24] 1266 	lcall	_printf
      000333 15 81            [12] 1267 	dec	sp
      000335 15 81            [12] 1268 	dec	sp
      000337 15 81            [12] 1269 	dec	sp
                                   1270 ;	program.c:267: main_menu();
                                   1271 ;	program.c:268: }
      000339 02r03r6E         [24] 1272 	ljmp	_main_menu
                                   1273 ;------------------------------------------------------------
                                   1274 ;Allocation info for local variables in function 'fclk_lowest'
                                   1275 ;------------------------------------------------------------
                                   1276 ;	program.c:270: void fclk_lowest(){
                                   1277 ;	-----------------------------------------
                                   1278 ;	 function fclk_lowest
                                   1279 ;	-----------------------------------------
      00033C                       1280 _fclk_lowest:
                                   1281 ;	program.c:271: printf("Changing Clock prescalar to go to lowest frequency in X2 Mode..\n\r");
      00033C 74r90            [12] 1282 	mov	a,#___str_16
      00033E C0 E0            [24] 1283 	push	acc
      000340 74s02            [12] 1284 	mov	a,#(___str_16 >> 8)
      000342 C0 E0            [24] 1285 	push	acc
      000344 74 80            [12] 1286 	mov	a,#0x80
      000346 C0 E0            [24] 1287 	push	acc
      000348 12r00r00         [24] 1288 	lcall	_printf
      00034B 15 81            [12] 1289 	dec	sp
      00034D 15 81            [12] 1290 	dec	sp
      00034F 15 81            [12] 1291 	dec	sp
                                   1292 ;	program.c:272: printf("This UART Session will stop working...\n\r");
      000351 74rD2            [12] 1293 	mov	a,#___str_17
      000353 C0 E0            [24] 1294 	push	acc
      000355 74s02            [12] 1295 	mov	a,#(___str_17 >> 8)
      000357 C0 E0            [24] 1296 	push	acc
      000359 74 80            [12] 1297 	mov	a,#0x80
      00035B C0 E0            [24] 1298 	push	acc
      00035D 12r00r00         [24] 1299 	lcall	_printf
      000360 15 81            [12] 1300 	dec	sp
      000362 15 81            [12] 1301 	dec	sp
      000364 15 81            [12] 1302 	dec	sp
                                   1303 ;	program.c:273: EX0 = 1;
                                   1304 ;	assignBit
      000366 D2 A8            [12] 1305 	setb	_EX0
                                   1306 ;	program.c:274: CKRL = 0 ;
      000368 75 97 00         [24] 1307 	mov	_CKRL,#0x00
                                   1308 ;	program.c:275: main_menu();
                                   1309 ;	program.c:276: }
      00036B 02r03r6E         [24] 1310 	ljmp	_main_menu
                                   1311 ;------------------------------------------------------------
                                   1312 ;Allocation info for local variables in function 'main_menu'
                                   1313 ;------------------------------------------------------------
                                   1314 ;inp                       Allocated with name '_main_menu_inp_65537_66'
                                   1315 ;------------------------------------------------------------
                                   1316 ;	program.c:278: void main_menu()
                                   1317 ;	-----------------------------------------
                                   1318 ;	 function main_menu
                                   1319 ;	-----------------------------------------
      00036E                       1320 _main_menu:
                                   1321 ;	program.c:280: printf("\n\n\r^^^^^^^^^^^^^^^^^^^-MENU-^^^^^^^^^^^^^^^^^^^^^^^^^^ \n\n\r");
      00036E 74rFB            [12] 1322 	mov	a,#___str_18
      000370 C0 E0            [24] 1323 	push	acc
      000372 74s02            [12] 1324 	mov	a,#(___str_18 >> 8)
      000374 C0 E0            [24] 1325 	push	acc
      000376 74 80            [12] 1326 	mov	a,#0x80
      000378 C0 E0            [24] 1327 	push	acc
      00037A 12r00r00         [24] 1328 	lcall	_printf
      00037D 15 81            [12] 1329 	dec	sp
      00037F 15 81            [12] 1330 	dec	sp
      000381 15 81            [12] 1331 	dec	sp
                                   1332 ;	program.c:281: printf("'H' -> Enter Heap Demo Mode \n\r");
      000383 74r36            [12] 1333 	mov	a,#___str_19
      000385 C0 E0            [24] 1334 	push	acc
      000387 74s03            [12] 1335 	mov	a,#(___str_19 >> 8)
      000389 C0 E0            [24] 1336 	push	acc
      00038B 74 80            [12] 1337 	mov	a,#0x80
      00038D C0 E0            [24] 1338 	push	acc
      00038F 12r00r00         [24] 1339 	lcall	_printf
      000392 15 81            [12] 1340 	dec	sp
      000394 15 81            [12] 1341 	dec	sp
      000396 15 81            [12] 1342 	dec	sp
                                   1343 ;	program.c:282: printf("'P' -> Enter PCA Demo Mode \n\r");
      000398 74r55            [12] 1344 	mov	a,#___str_20
      00039A C0 E0            [24] 1345 	push	acc
      00039C 74s03            [12] 1346 	mov	a,#(___str_20 >> 8)
      00039E C0 E0            [24] 1347 	push	acc
      0003A0 74 80            [12] 1348 	mov	a,#0x80
      0003A2 C0 E0            [24] 1349 	push	acc
      0003A4 12r00r00         [24] 1350 	lcall	_printf
      0003A7 15 81            [12] 1351 	dec	sp
      0003A9 15 81            [12] 1352 	dec	sp
      0003AB 15 81            [12] 1353 	dec	sp
                                   1354 ;	program.c:283: printf("'A' -> Assembly C Mix \n\r");
      0003AD 74r73            [12] 1355 	mov	a,#___str_21
      0003AF C0 E0            [24] 1356 	push	acc
      0003B1 74s03            [12] 1357 	mov	a,#(___str_21 >> 8)
      0003B3 C0 E0            [24] 1358 	push	acc
      0003B5 74 80            [12] 1359 	mov	a,#0x80
      0003B7 C0 E0            [24] 1360 	push	acc
      0003B9 12r00r00         [24] 1361 	lcall	_printf
      0003BC 15 81            [12] 1362 	dec	sp
      0003BE 15 81            [12] 1363 	dec	sp
      0003C0 15 81            [12] 1364 	dec	sp
                                   1365 ;	program.c:286: wrong_choice:
      0003C2                       1366 00101$:
                                   1367 ;	program.c:287: printf("Please make a valid choice \n\r");
      0003C2 74r3B            [12] 1368 	mov	a,#___str_2
      0003C4 C0 E0            [24] 1369 	push	acc
      0003C6 74s00            [12] 1370 	mov	a,#(___str_2 >> 8)
      0003C8 C0 E0            [24] 1371 	push	acc
      0003CA 74 80            [12] 1372 	mov	a,#0x80
      0003CC C0 E0            [24] 1373 	push	acc
      0003CE 12r00r00         [24] 1374 	lcall	_printf
      0003D1 15 81            [12] 1375 	dec	sp
      0003D3 15 81            [12] 1376 	dec	sp
      0003D5 15 81            [12] 1377 	dec	sp
                                   1378 ;	program.c:288: inp = getchar();
      0003D7 12r13r29         [24] 1379 	lcall	_getchar
      0003DA AE 82            [24] 1380 	mov	r6,dpl
      0003DC AF 83            [24] 1381 	mov	r7,dph
                                   1382 ;	program.c:289: if (inp == 0x48)
      0003DE BE 48 06         [24] 1383 	cjne	r6,#0x48,00109$
      0003E1 BF 00 03         [24] 1384 	cjne	r7,#0x00,00109$
                                   1385 ;	program.c:290: user_interface_heap();
      0003E4 02r00r20         [24] 1386 	ljmp	_user_interface_heap
      0003E7                       1387 00109$:
                                   1388 ;	program.c:291: else if (inp == 0x50)
      0003E7 BE 50 06         [24] 1389 	cjne	r6,#0x50,00106$
      0003EA BF 00 03         [24] 1390 	cjne	r7,#0x00,00106$
                                   1391 ;	program.c:292: user_interface_PCA();
      0003ED 02r00r2F         [24] 1392 	ljmp	_user_interface_PCA
      0003F0                       1393 00106$:
                                   1394 ;	program.c:293: else if (inp == 0x41)
      0003F0 BE 41 CF         [24] 1395 	cjne	r6,#0x41,00101$
      0003F3 BF 00 CC         [24] 1396 	cjne	r7,#0x00,00101$
                                   1397 ;	program.c:294: asm_clang();
                                   1398 ;	program.c:296: goto wrong_choice;
                                   1399 ;	program.c:297: }
      0003F6 02r03rF9         [24] 1400 	ljmp	_asm_clang
                                   1401 ;------------------------------------------------------------
                                   1402 ;Allocation info for local variables in function 'asm_clang'
                                   1403 ;------------------------------------------------------------
                                   1404 ;num1                      Allocated with name '_asm_clang_num1_65537_68'
                                   1405 ;num2                      Allocated with name '_asm_clang_num2_65538_69'
                                   1406 ;num3                      Allocated with name '_asm_clang_num3_65539_70'
                                   1407 ;------------------------------------------------------------
                                   1408 ;	program.c:299: void asm_clang(){
                                   1409 ;	-----------------------------------------
                                   1410 ;	 function asm_clang
                                   1411 ;	-----------------------------------------
      0003F9                       1412 _asm_clang:
                                   1413 ;	program.c:300: printf("\n\r Give param 1, 8bit \n\r");
      0003F9 74r8C            [12] 1414 	mov	a,#___str_22
      0003FB C0 E0            [24] 1415 	push	acc
      0003FD 74s03            [12] 1416 	mov	a,#(___str_22 >> 8)
      0003FF C0 E0            [24] 1417 	push	acc
      000401 74 80            [12] 1418 	mov	a,#0x80
      000403 C0 E0            [24] 1419 	push	acc
      000405 12r00r00         [24] 1420 	lcall	_printf
      000408 15 81            [12] 1421 	dec	sp
      00040A 15 81            [12] 1422 	dec	sp
      00040C 15 81            [12] 1423 	dec	sp
                                   1424 ;	program.c:301: unsigned char num1 = get_number(3);
      00040E 90 00 03         [24] 1425 	mov	dptr,#0x0003
      000411 12r11rB5         [24] 1426 	lcall	_get_number
      000414 AE 82            [24] 1427 	mov	r6,dpl
                                   1428 ;	program.c:302: printf("\n\r Give param 2, 8bit \n\r");
      000416 C0 06            [24] 1429 	push	ar6
      000418 74rA5            [12] 1430 	mov	a,#___str_23
      00041A C0 E0            [24] 1431 	push	acc
      00041C 74s03            [12] 1432 	mov	a,#(___str_23 >> 8)
      00041E C0 E0            [24] 1433 	push	acc
      000420 74 80            [12] 1434 	mov	a,#0x80
      000422 C0 E0            [24] 1435 	push	acc
      000424 12r00r00         [24] 1436 	lcall	_printf
      000427 15 81            [12] 1437 	dec	sp
      000429 15 81            [12] 1438 	dec	sp
      00042B 15 81            [12] 1439 	dec	sp
                                   1440 ;	program.c:303: unsigned char num2 = get_number(3);
      00042D 90 00 03         [24] 1441 	mov	dptr,#0x0003
      000430 12r11rB5         [24] 1442 	lcall	_get_number
      000433 AD 82            [24] 1443 	mov	r5,dpl
                                   1444 ;	program.c:304: printf("\n\r Give param 3, 8bit \n\r");
      000435 C0 05            [24] 1445 	push	ar5
      000437 74rBE            [12] 1446 	mov	a,#___str_24
      000439 C0 E0            [24] 1447 	push	acc
      00043B 74s03            [12] 1448 	mov	a,#(___str_24 >> 8)
      00043D C0 E0            [24] 1449 	push	acc
      00043F 74 80            [12] 1450 	mov	a,#0x80
      000441 C0 E0            [24] 1451 	push	acc
      000443 12r00r00         [24] 1452 	lcall	_printf
      000446 15 81            [12] 1453 	dec	sp
      000448 15 81            [12] 1454 	dec	sp
      00044A 15 81            [12] 1455 	dec	sp
                                   1456 ;	program.c:305: unsigned char num3 = get_number(3);
      00044C 90 00 03         [24] 1457 	mov	dptr,#0x0003
      00044F 12r11rB5         [24] 1458 	lcall	_get_number
      000452 AC 82            [24] 1459 	mov	r4,dpl
      000454 D0 05            [24] 1460 	pop	ar5
      000456 D0 06            [24] 1461 	pop	ar6
                                   1462 ;	program.c:307: printf("\n\r RESULT-> param3<Mod>param2 * param1 = %d \n\r", asmtest(num1,num2,num3));
      000458 90r00r00         [24] 1463 	mov	dptr,#_asmtest_PARM_2
      00045B ED               [12] 1464 	mov	a,r5
      00045C F0               [24] 1465 	movx	@dptr,a
      00045D 90r00r00         [24] 1466 	mov	dptr,#_asmtest_PARM_3
      000460 EC               [12] 1467 	mov	a,r4
      000461 F0               [24] 1468 	movx	@dptr,a
      000462 8E 82            [24] 1469 	mov	dpl,r6
      000464 12r00r00         [24] 1470 	lcall	_asmtest
      000467 AF 82            [24] 1471 	mov	r7,dpl
      000469 7E 00            [12] 1472 	mov	r6,#0x00
      00046B C0 07            [24] 1473 	push	ar7
      00046D C0 06            [24] 1474 	push	ar6
      00046F 74rD7            [12] 1475 	mov	a,#___str_25
      000471 C0 E0            [24] 1476 	push	acc
      000473 74s03            [12] 1477 	mov	a,#(___str_25 >> 8)
      000475 C0 E0            [24] 1478 	push	acc
      000477 74 80            [12] 1479 	mov	a,#0x80
      000479 C0 E0            [24] 1480 	push	acc
      00047B 12r00r00         [24] 1481 	lcall	_printf
      00047E E5 81            [12] 1482 	mov	a,sp
      000480 24 FB            [12] 1483 	add	a,#0xfb
      000482 F5 81            [12] 1484 	mov	sp,a
                                   1485 ;	program.c:308: printf("\n\r Going back to main menu.. \n\r");
      000484 74r06            [12] 1486 	mov	a,#___str_26
      000486 C0 E0            [24] 1487 	push	acc
      000488 74s04            [12] 1488 	mov	a,#(___str_26 >> 8)
      00048A C0 E0            [24] 1489 	push	acc
      00048C 74 80            [12] 1490 	mov	a,#0x80
      00048E C0 E0            [24] 1491 	push	acc
      000490 12r00r00         [24] 1492 	lcall	_printf
      000493 15 81            [12] 1493 	dec	sp
      000495 15 81            [12] 1494 	dec	sp
      000497 15 81            [12] 1495 	dec	sp
                                   1496 ;	program.c:309: main_menu();
                                   1497 ;	program.c:310: }
      000499 02r03r6E         [24] 1498 	ljmp	_main_menu
                                   1499 ;------------------------------------------------------------
                                   1500 ;Allocation info for local variables in function 'at_clear_all_buffers'
                                   1501 ;------------------------------------------------------------
                                   1502 ;i                         Allocated with name '_at_clear_all_buffers_i_131072_72'
                                   1503 ;------------------------------------------------------------
                                   1504 ;	program.c:318: void at_clear_all_buffers()
                                   1505 ;	-----------------------------------------
                                   1506 ;	 function at_clear_all_buffers
                                   1507 ;	-----------------------------------------
      00049C                       1508 _at_clear_all_buffers:
                                   1509 ;	program.c:320: DEBUGPORT(0x03);
      00049C 75 82 03         [24] 1510 	mov	dpl,#0x03
      00049F 12r13r65         [24] 1511 	lcall	_dataout
                                   1512 ;	program.c:321: for (int i = 0; i < program_stats.total_buffers; i++)
      0004A2 7E 00            [12] 1513 	mov	r6,#0x00
      0004A4 7F 00            [12] 1514 	mov	r7,#0x00
      0004A6                       1515 00103$:
      0004A6 90r00r08         [24] 1516 	mov	dptr,#(_program_stats + 0x0008)
      0004A9 E0               [24] 1517 	movx	a,@dptr
      0004AA FC               [12] 1518 	mov	r4,a
      0004AB A3               [24] 1519 	inc	dptr
      0004AC E0               [24] 1520 	movx	a,@dptr
      0004AD FD               [12] 1521 	mov	r5,a
      0004AE C3               [12] 1522 	clr	c
      0004AF EE               [12] 1523 	mov	a,r6
      0004B0 9C               [12] 1524 	subb	a,r4
      0004B1 EF               [12] 1525 	mov	a,r7
      0004B2 64 80            [12] 1526 	xrl	a,#0x80
      0004B4 8D F0            [24] 1527 	mov	b,r5
      0004B6 63 F0 80         [24] 1528 	xrl	b,#0x80
      0004B9 95 F0            [12] 1529 	subb	a,b
      0004BB 50 61            [24] 1530 	jnc	00101$
                                   1531 ;	program.c:323: free(buffers_array[i].buffer_start);
      0004BD 90r00r00         [24] 1532 	mov	dptr,#__mulint_PARM_2
      0004C0 EE               [12] 1533 	mov	a,r6
      0004C1 F0               [24] 1534 	movx	@dptr,a
      0004C2 EF               [12] 1535 	mov	a,r7
      0004C3 A3               [24] 1536 	inc	dptr
      0004C4 F0               [24] 1537 	movx	@dptr,a
      0004C5 90 00 0C         [24] 1538 	mov	dptr,#0x000c
      0004C8 C0 07            [24] 1539 	push	ar7
      0004CA C0 06            [24] 1540 	push	ar6
      0004CC 12r00r00         [24] 1541 	lcall	__mulint
      0004CF AC 82            [24] 1542 	mov	r4,dpl
      0004D1 AD 83            [24] 1543 	mov	r5,dph
      0004D3 EC               [12] 1544 	mov	a,r4
      0004D4 24r0A            [12] 1545 	add	a,#_buffers_array
      0004D6 FC               [12] 1546 	mov	r4,a
      0004D7 ED               [12] 1547 	mov	a,r5
      0004D8 34s00            [12] 1548 	addc	a,#(_buffers_array >> 8)
      0004DA FD               [12] 1549 	mov	r5,a
      0004DB 8C 82            [24] 1550 	mov	dpl,r4
      0004DD 8D 83            [24] 1551 	mov	dph,r5
      0004DF A3               [24] 1552 	inc	dptr
      0004E0 A3               [24] 1553 	inc	dptr
      0004E1 E0               [24] 1554 	movx	a,@dptr
      0004E2 FB               [12] 1555 	mov	r3,a
      0004E3 A3               [24] 1556 	inc	dptr
      0004E4 E0               [24] 1557 	movx	a,@dptr
      0004E5 FC               [12] 1558 	mov	r4,a
      0004E6 A3               [24] 1559 	inc	dptr
      0004E7 E0               [24] 1560 	movx	a,@dptr
      0004E8 FD               [12] 1561 	mov	r5,a
      0004E9 8B 82            [24] 1562 	mov	dpl,r3
      0004EB 8C 83            [24] 1563 	mov	dph,r4
      0004ED 8D F0            [24] 1564 	mov	b,r5
      0004EF 12r00r00         [24] 1565 	lcall	_free
      0004F2 D0 06            [24] 1566 	pop	ar6
      0004F4 D0 07            [24] 1567 	pop	ar7
                                   1568 ;	program.c:324: printf("Buffer %d Freed ....\n\r", i);
      0004F6 C0 07            [24] 1569 	push	ar7
      0004F8 C0 06            [24] 1570 	push	ar6
      0004FA C0 06            [24] 1571 	push	ar6
      0004FC C0 07            [24] 1572 	push	ar7
      0004FE 74r26            [12] 1573 	mov	a,#___str_27
      000500 C0 E0            [24] 1574 	push	acc
      000502 74s04            [12] 1575 	mov	a,#(___str_27 >> 8)
      000504 C0 E0            [24] 1576 	push	acc
      000506 74 80            [12] 1577 	mov	a,#0x80
      000508 C0 E0            [24] 1578 	push	acc
      00050A 12r00r00         [24] 1579 	lcall	_printf
      00050D E5 81            [12] 1580 	mov	a,sp
      00050F 24 FB            [12] 1581 	add	a,#0xfb
      000511 F5 81            [12] 1582 	mov	sp,a
      000513 D0 06            [24] 1583 	pop	ar6
      000515 D0 07            [24] 1584 	pop	ar7
                                   1585 ;	program.c:321: for (int i = 0; i < program_stats.total_buffers; i++)
      000517 0E               [12] 1586 	inc	r6
      000518 BE 00 8B         [24] 1587 	cjne	r6,#0x00,00103$
      00051B 0F               [12] 1588 	inc	r7
      00051C 80 88            [24] 1589 	sjmp	00103$
      00051E                       1590 00101$:
                                   1591 ;	program.c:326: printf("Let's begin again..\n\r");
      00051E 74r3D            [12] 1592 	mov	a,#___str_28
      000520 C0 E0            [24] 1593 	push	acc
      000522 74s04            [12] 1594 	mov	a,#(___str_28 >> 8)
      000524 C0 E0            [24] 1595 	push	acc
      000526 74 80            [12] 1596 	mov	a,#0x80
      000528 C0 E0            [24] 1597 	push	acc
      00052A 12r00r00         [24] 1598 	lcall	_printf
      00052D 15 81            [12] 1599 	dec	sp
      00052F 15 81            [12] 1600 	dec	sp
      000531 15 81            [12] 1601 	dec	sp
                                   1602 ;	program.c:327: user_interface_heap();
                                   1603 ;	program.c:328: }
      000533 02r00r20         [24] 1604 	ljmp	_user_interface_heap
                                   1605 ;------------------------------------------------------------
                                   1606 ;Allocation info for local variables in function 'delete_buffer'
                                   1607 ;------------------------------------------------------------
                                   1608 ;sloc0                     Allocated with name '_delete_buffer_sloc0_1_0'
                                   1609 ;sloc1                     Allocated with name '_delete_buffer_sloc1_1_0'
                                   1610 ;sloc2                     Allocated with name '_delete_buffer_sloc2_1_0'
                                   1611 ;buff_number               Allocated with name '_delete_buffer_buff_number_65537_75'
                                   1612 ;buff_to_free              Allocated with name '_delete_buffer_buff_to_free_65537_75'
                                   1613 ;buffer_freed_size         Allocated with name '_delete_buffer_buffer_freed_size_65537_75'
                                   1614 ;i                         Allocated with name '_delete_buffer_i_196609_77'
                                   1615 ;------------------------------------------------------------
                                   1616 ;	program.c:335: int delete_buffer()
                                   1617 ;	-----------------------------------------
                                   1618 ;	 function delete_buffer
                                   1619 ;	-----------------------------------------
      000536                       1620 _delete_buffer:
                                   1621 ;	program.c:337: DEBUGPORT(0x04);
      000536 75 82 04         [24] 1622 	mov	dpl,#0x04
      000539 12r13r65         [24] 1623 	lcall	_dataout
                                   1624 ;	program.c:341: get_del_num:
      00053C                       1625 00101$:
                                   1626 ;	program.c:342: printf("\n\rGive Valid Buffer Number to delete(1-%d) in 3 digits\n\r", (program_stats.total_buffers - 1));
      00053C 90r00r08         [24] 1627 	mov	dptr,#(_program_stats + 0x0008)
      00053F E0               [24] 1628 	movx	a,@dptr
      000540 FE               [12] 1629 	mov	r6,a
      000541 A3               [24] 1630 	inc	dptr
      000542 E0               [24] 1631 	movx	a,@dptr
      000543 FF               [12] 1632 	mov	r7,a
      000544 1E               [12] 1633 	dec	r6
      000545 BE FF 01         [24] 1634 	cjne	r6,#0xff,00139$
      000548 1F               [12] 1635 	dec	r7
      000549                       1636 00139$:
      000549 C0 06            [24] 1637 	push	ar6
      00054B C0 07            [24] 1638 	push	ar7
      00054D 74r53            [12] 1639 	mov	a,#___str_29
      00054F C0 E0            [24] 1640 	push	acc
      000551 74s04            [12] 1641 	mov	a,#(___str_29 >> 8)
      000553 C0 E0            [24] 1642 	push	acc
      000555 74 80            [12] 1643 	mov	a,#0x80
      000557 C0 E0            [24] 1644 	push	acc
      000559 12r00r00         [24] 1645 	lcall	_printf
      00055C E5 81            [12] 1646 	mov	a,sp
      00055E 24 FB            [12] 1647 	add	a,#0xfb
      000560 F5 81            [12] 1648 	mov	sp,a
                                   1649 ;	program.c:343: buff_number = get_number(3);
      000562 90 00 03         [24] 1650 	mov	dptr,#0x0003
      000565 12r11rB5         [24] 1651 	lcall	_get_number
      000568 AE 82            [24] 1652 	mov	r6,dpl
      00056A AF 83            [24] 1653 	mov	r7,dph
                                   1654 ;	program.c:345: if (buff_number > 0 && buff_number < program_stats.total_buffers)
      00056C C3               [12] 1655 	clr	c
      00056D E4               [12] 1656 	clr	a
      00056E 9E               [12] 1657 	subb	a,r6
      00056F 74 80            [12] 1658 	mov	a,#(0x00 ^ 0x80)
      000571 8F F0            [24] 1659 	mov	b,r7
      000573 63 F0 80         [24] 1660 	xrl	b,#0x80
      000576 95 F0            [12] 1661 	subb	a,b
      000578 50 C2            [24] 1662 	jnc	00101$
      00057A 90r00r08         [24] 1663 	mov	dptr,#(_program_stats + 0x0008)
      00057D E0               [24] 1664 	movx	a,@dptr
      00057E FC               [12] 1665 	mov	r4,a
      00057F A3               [24] 1666 	inc	dptr
      000580 E0               [24] 1667 	movx	a,@dptr
      000581 FD               [12] 1668 	mov	r5,a
      000582 C3               [12] 1669 	clr	c
      000583 EE               [12] 1670 	mov	a,r6
      000584 9C               [12] 1671 	subb	a,r4
      000585 EF               [12] 1672 	mov	a,r7
      000586 64 80            [12] 1673 	xrl	a,#0x80
      000588 8D F0            [24] 1674 	mov	b,r5
      00058A 63 F0 80         [24] 1675 	xrl	b,#0x80
      00058D 95 F0            [12] 1676 	subb	a,b
      00058F 50 AB            [24] 1677 	jnc	00101$
                                   1678 ;	program.c:349: buff_to_free = buffers_array[buff_number].buffer_start;
      000591 90r00r00         [24] 1679 	mov	dptr,#__mulint_PARM_2
      000594 EE               [12] 1680 	mov	a,r6
      000595 F0               [24] 1681 	movx	@dptr,a
      000596 EF               [12] 1682 	mov	a,r7
      000597 A3               [24] 1683 	inc	dptr
      000598 F0               [24] 1684 	movx	@dptr,a
      000599 90 00 0C         [24] 1685 	mov	dptr,#0x000c
      00059C C0 07            [24] 1686 	push	ar7
      00059E C0 06            [24] 1687 	push	ar6
      0005A0 12r00r00         [24] 1688 	lcall	__mulint
      0005A3 AC 82            [24] 1689 	mov	r4,dpl
      0005A5 AD 83            [24] 1690 	mov	r5,dph
      0005A7 D0 06            [24] 1691 	pop	ar6
      0005A9 D0 07            [24] 1692 	pop	ar7
      0005AB EC               [12] 1693 	mov	a,r4
      0005AC 24r0A            [12] 1694 	add	a,#_buffers_array
      0005AE FC               [12] 1695 	mov	r4,a
      0005AF ED               [12] 1696 	mov	a,r5
      0005B0 34s00            [12] 1697 	addc	a,#(_buffers_array >> 8)
      0005B2 FD               [12] 1698 	mov	r5,a
      0005B3 8C 82            [24] 1699 	mov	dpl,r4
      0005B5 8D 83            [24] 1700 	mov	dph,r5
      0005B7 A3               [24] 1701 	inc	dptr
      0005B8 A3               [24] 1702 	inc	dptr
      0005B9 E0               [24] 1703 	movx	a,@dptr
      0005BA F5*04            [12] 1704 	mov	_delete_buffer_sloc2_1_0,a
      0005BC A3               [24] 1705 	inc	dptr
      0005BD E0               [24] 1706 	movx	a,@dptr
      0005BE F5*05            [12] 1707 	mov	(_delete_buffer_sloc2_1_0 + 1),a
      0005C0 A3               [24] 1708 	inc	dptr
      0005C1 E0               [24] 1709 	movx	a,@dptr
      0005C2 F5*06            [12] 1710 	mov	(_delete_buffer_sloc2_1_0 + 2),a
                                   1711 ;	program.c:350: buffer_freed_size = buffers_array[buff_number].buff_size;
      0005C4 74 08            [12] 1712 	mov	a,#0x08
      0005C6 2C               [12] 1713 	add	a,r4
      0005C7 F5 82            [12] 1714 	mov	dpl,a
      0005C9 E4               [12] 1715 	clr	a
      0005CA 3D               [12] 1716 	addc	a,r5
      0005CB F5 83            [12] 1717 	mov	dph,a
      0005CD E0               [24] 1718 	movx	a,@dptr
      0005CE FC               [12] 1719 	mov	r4,a
      0005CF A3               [24] 1720 	inc	dptr
      0005D0 E0               [24] 1721 	movx	a,@dptr
      0005D1 FD               [12] 1722 	mov	r5,a
                                   1723 ;	program.c:352: for (int i = 0; i < (program_stats.total_buffers - 1); i++)
      0005D2 E4               [12] 1724 	clr	a
      0005D3 F5*00            [12] 1725 	mov	_delete_buffer_sloc0_1_0,a
      0005D5 F5*01            [12] 1726 	mov	(_delete_buffer_sloc0_1_0 + 1),a
      0005D7                       1727 00110$:
      0005D7 C0 04            [24] 1728 	push	ar4
      0005D9 C0 05            [24] 1729 	push	ar5
      0005DB 90r00r08         [24] 1730 	mov	dptr,#(_program_stats + 0x0008)
      0005DE E0               [24] 1731 	movx	a,@dptr
      0005DF F5*02            [12] 1732 	mov	_delete_buffer_sloc1_1_0,a
      0005E1 A3               [24] 1733 	inc	dptr
      0005E2 E0               [24] 1734 	movx	a,@dptr
      0005E3 F5*03            [12] 1735 	mov	(_delete_buffer_sloc1_1_0 + 1),a
      0005E5 E5*02            [12] 1736 	mov	a,_delete_buffer_sloc1_1_0
      0005E7 24 FF            [12] 1737 	add	a,#0xff
      0005E9 F8               [12] 1738 	mov	r0,a
      0005EA E5*03            [12] 1739 	mov	a,(_delete_buffer_sloc1_1_0 + 1)
      0005EC 34 FF            [12] 1740 	addc	a,#0xff
      0005EE FD               [12] 1741 	mov	r5,a
      0005EF C3               [12] 1742 	clr	c
      0005F0 E5*00            [12] 1743 	mov	a,_delete_buffer_sloc0_1_0
      0005F2 98               [12] 1744 	subb	a,r0
      0005F3 E5*01            [12] 1745 	mov	a,(_delete_buffer_sloc0_1_0 + 1)
      0005F5 64 80            [12] 1746 	xrl	a,#0x80
      0005F7 8D F0            [24] 1747 	mov	b,r5
      0005F9 63 F0 80         [24] 1748 	xrl	b,#0x80
      0005FC 95 F0            [12] 1749 	subb	a,b
      0005FE D0 05            [24] 1750 	pop	ar5
      000600 D0 04            [24] 1751 	pop	ar4
      000602 40 03            [24] 1752 	jc	00142$
      000604 02r06rB5         [24] 1753 	ljmp	00104$
      000607                       1754 00142$:
                                   1755 ;	program.c:354: if (i >= buff_number)
      000607 C3               [12] 1756 	clr	c
      000608 E5*00            [12] 1757 	mov	a,_delete_buffer_sloc0_1_0
      00060A 9E               [12] 1758 	subb	a,r6
      00060B E5*01            [12] 1759 	mov	a,(_delete_buffer_sloc0_1_0 + 1)
      00060D 64 80            [12] 1760 	xrl	a,#0x80
      00060F 8F F0            [24] 1761 	mov	b,r7
      000611 63 F0 80         [24] 1762 	xrl	b,#0x80
      000614 95 F0            [12] 1763 	subb	a,b
      000616 50 03            [24] 1764 	jnc	00143$
      000618 02r06rAA         [24] 1765 	ljmp	00111$
      00061B                       1766 00143$:
                                   1767 ;	program.c:356: buffers_array[i + 1].buffer_num = i;
      00061B C0 04            [24] 1768 	push	ar4
      00061D C0 05            [24] 1769 	push	ar5
      00061F 90r00r00         [24] 1770 	mov	dptr,#__mulint_PARM_2
      000622 74 01            [12] 1771 	mov	a,#0x01
      000624 25*00            [12] 1772 	add	a,_delete_buffer_sloc0_1_0
      000626 F0               [24] 1773 	movx	@dptr,a
      000627 E4               [12] 1774 	clr	a
      000628 35*01            [12] 1775 	addc	a,(_delete_buffer_sloc0_1_0 + 1)
      00062A A3               [24] 1776 	inc	dptr
      00062B F0               [24] 1777 	movx	@dptr,a
      00062C 90 00 0C         [24] 1778 	mov	dptr,#0x000c
      00062F C0 07            [24] 1779 	push	ar7
      000631 C0 06            [24] 1780 	push	ar6
      000633 C0 04            [24] 1781 	push	ar4
      000635 12r00r00         [24] 1782 	lcall	__mulint
      000638 A8 82            [24] 1783 	mov	r0,dpl
      00063A AD 83            [24] 1784 	mov	r5,dph
      00063C D0 04            [24] 1785 	pop	ar4
      00063E E8               [12] 1786 	mov	a,r0
      00063F 24r0A            [12] 1787 	add	a,#_buffers_array
      000641 F5 82            [12] 1788 	mov	dpl,a
      000643 ED               [12] 1789 	mov	a,r5
      000644 34s00            [12] 1790 	addc	a,#(_buffers_array >> 8)
      000646 F5 83            [12] 1791 	mov	dph,a
      000648 E5*00            [12] 1792 	mov	a,_delete_buffer_sloc0_1_0
      00064A F0               [24] 1793 	movx	@dptr,a
      00064B E5*01            [12] 1794 	mov	a,(_delete_buffer_sloc0_1_0 + 1)
      00064D A3               [24] 1795 	inc	dptr
      00064E F0               [24] 1796 	movx	@dptr,a
                                   1797 ;	program.c:357: buffers_array[i] = buffers_array[i + 1];
      00064F 90r00r00         [24] 1798 	mov	dptr,#__mulint_PARM_2
      000652 E5*00            [12] 1799 	mov	a,_delete_buffer_sloc0_1_0
      000654 F0               [24] 1800 	movx	@dptr,a
      000655 E5*01            [12] 1801 	mov	a,(_delete_buffer_sloc0_1_0 + 1)
      000657 A3               [24] 1802 	inc	dptr
      000658 F0               [24] 1803 	movx	@dptr,a
      000659 90 00 0C         [24] 1804 	mov	dptr,#0x000c
      00065C C0 05            [24] 1805 	push	ar5
      00065E C0 00            [24] 1806 	push	ar0
      000660 12r00r00         [24] 1807 	lcall	__mulint
      000663 AB 82            [24] 1808 	mov	r3,dpl
      000665 AC 83            [24] 1809 	mov	r4,dph
      000667 D0 00            [24] 1810 	pop	ar0
      000669 D0 05            [24] 1811 	pop	ar5
      00066B EB               [12] 1812 	mov	a,r3
      00066C 24r0A            [12] 1813 	add	a,#_buffers_array
      00066E FB               [12] 1814 	mov	r3,a
      00066F EC               [12] 1815 	mov	a,r4
      000670 34s00            [12] 1816 	addc	a,#(_buffers_array >> 8)
      000672 FC               [12] 1817 	mov	r4,a
      000673 7A 00            [12] 1818 	mov	r2,#0x00
      000675 E8               [12] 1819 	mov	a,r0
      000676 24r0A            [12] 1820 	add	a,#_buffers_array
      000678 F8               [12] 1821 	mov	r0,a
      000679 ED               [12] 1822 	mov	a,r5
      00067A 34s00            [12] 1823 	addc	a,#(_buffers_array >> 8)
      00067C FD               [12] 1824 	mov	r5,a
      00067D 90r00r00         [24] 1825 	mov	dptr,#___memcpy_PARM_2
      000680 E8               [12] 1826 	mov	a,r0
      000681 F0               [24] 1827 	movx	@dptr,a
      000682 ED               [12] 1828 	mov	a,r5
      000683 A3               [24] 1829 	inc	dptr
      000684 F0               [24] 1830 	movx	@dptr,a
      000685 E4               [12] 1831 	clr	a
      000686 A3               [24] 1832 	inc	dptr
      000687 F0               [24] 1833 	movx	@dptr,a
      000688 90r00r00         [24] 1834 	mov	dptr,#___memcpy_PARM_3
      00068B 74 0C            [12] 1835 	mov	a,#0x0c
      00068D F0               [24] 1836 	movx	@dptr,a
      00068E E4               [12] 1837 	clr	a
      00068F A3               [24] 1838 	inc	dptr
      000690 F0               [24] 1839 	movx	@dptr,a
      000691 8B 82            [24] 1840 	mov	dpl,r3
      000693 8C 83            [24] 1841 	mov	dph,r4
      000695 8A F0            [24] 1842 	mov	b,r2
      000697 C0 05            [24] 1843 	push	ar5
      000699 C0 04            [24] 1844 	push	ar4
      00069B 12r00r00         [24] 1845 	lcall	___memcpy
      00069E D0 04            [24] 1846 	pop	ar4
      0006A0 D0 05            [24] 1847 	pop	ar5
      0006A2 D0 06            [24] 1848 	pop	ar6
      0006A4 D0 07            [24] 1849 	pop	ar7
                                   1850 ;	program.c:370: goto get_del_num;
      0006A6 D0 05            [24] 1851 	pop	ar5
      0006A8 D0 04            [24] 1852 	pop	ar4
                                   1853 ;	program.c:357: buffers_array[i] = buffers_array[i + 1];
      0006AA                       1854 00111$:
                                   1855 ;	program.c:352: for (int i = 0; i < (program_stats.total_buffers - 1); i++)
      0006AA 05*00            [12] 1856 	inc	_delete_buffer_sloc0_1_0
      0006AC E4               [12] 1857 	clr	a
      0006AD B5*00 02         [24] 1858 	cjne	a,_delete_buffer_sloc0_1_0,00144$
      0006B0 05*01            [12] 1859 	inc	(_delete_buffer_sloc0_1_0 + 1)
      0006B2                       1860 00144$:
      0006B2 02r05rD7         [24] 1861 	ljmp	00110$
      0006B5                       1862 00104$:
                                   1863 ;	program.c:361: program_stats.total_buffers -= 1;
      0006B5 E5*02            [12] 1864 	mov	a,_delete_buffer_sloc1_1_0
      0006B7 24 FF            [12] 1865 	add	a,#0xff
      0006B9 FA               [12] 1866 	mov	r2,a
      0006BA E5*03            [12] 1867 	mov	a,(_delete_buffer_sloc1_1_0 + 1)
      0006BC 34 FF            [12] 1868 	addc	a,#0xff
      0006BE FB               [12] 1869 	mov	r3,a
      0006BF 90r00r08         [24] 1870 	mov	dptr,#(_program_stats + 0x0008)
      0006C2 EA               [12] 1871 	mov	a,r2
      0006C3 F0               [24] 1872 	movx	@dptr,a
      0006C4 EB               [12] 1873 	mov	a,r3
      0006C5 A3               [24] 1874 	inc	dptr
      0006C6 F0               [24] 1875 	movx	@dptr,a
                                   1876 ;	program.c:362: program_stats.allocated_heap -= buffer_freed_size;
      0006C7 90r00r02         [24] 1877 	mov	dptr,#(_program_stats + 0x0002)
      0006CA E0               [24] 1878 	movx	a,@dptr
      0006CB FA               [12] 1879 	mov	r2,a
      0006CC A3               [24] 1880 	inc	dptr
      0006CD E0               [24] 1881 	movx	a,@dptr
      0006CE FB               [12] 1882 	mov	r3,a
      0006CF EA               [12] 1883 	mov	a,r2
      0006D0 C3               [12] 1884 	clr	c
      0006D1 9C               [12] 1885 	subb	a,r4
      0006D2 FC               [12] 1886 	mov	r4,a
      0006D3 EB               [12] 1887 	mov	a,r3
      0006D4 9D               [12] 1888 	subb	a,r5
      0006D5 FD               [12] 1889 	mov	r5,a
      0006D6 90r00r02         [24] 1890 	mov	dptr,#(_program_stats + 0x0002)
      0006D9 EC               [12] 1891 	mov	a,r4
      0006DA F0               [24] 1892 	movx	@dptr,a
      0006DB ED               [12] 1893 	mov	a,r5
      0006DC A3               [24] 1894 	inc	dptr
      0006DD F0               [24] 1895 	movx	@dptr,a
                                   1896 ;	program.c:364: free(buff_to_free);
      0006DE AB*04            [24] 1897 	mov	r3,_delete_buffer_sloc2_1_0
      0006E0 AC*05            [24] 1898 	mov	r4,(_delete_buffer_sloc2_1_0 + 1)
      0006E2 AD*06            [24] 1899 	mov	r5,(_delete_buffer_sloc2_1_0 + 2)
      0006E4 8B 82            [24] 1900 	mov	dpl,r3
      0006E6 8C 83            [24] 1901 	mov	dph,r4
      0006E8 8D F0            [24] 1902 	mov	b,r5
      0006EA C0 07            [24] 1903 	push	ar7
      0006EC C0 06            [24] 1904 	push	ar6
      0006EE 12r00r00         [24] 1905 	lcall	_free
      0006F1 D0 06            [24] 1906 	pop	ar6
      0006F3 D0 07            [24] 1907 	pop	ar7
                                   1908 ;	program.c:365: printf("Buffer %d Successfully Deleted.. \n\r", buff_number);
      0006F5 C0 06            [24] 1909 	push	ar6
      0006F7 C0 07            [24] 1910 	push	ar7
      0006F9 74r8C            [12] 1911 	mov	a,#___str_30
      0006FB C0 E0            [24] 1912 	push	acc
      0006FD 74s04            [12] 1913 	mov	a,#(___str_30 >> 8)
      0006FF C0 E0            [24] 1914 	push	acc
      000701 74 80            [12] 1915 	mov	a,#0x80
      000703 C0 E0            [24] 1916 	push	acc
      000705 12r00r00         [24] 1917 	lcall	_printf
      000708 E5 81            [12] 1918 	mov	a,sp
      00070A 24 FB            [12] 1919 	add	a,#0xfb
      00070C F5 81            [12] 1920 	mov	sp,a
                                   1921 ;	program.c:366: return 0;
      00070E 90 00 00         [24] 1922 	mov	dptr,#0x0000
                                   1923 ;	program.c:370: goto get_del_num;
                                   1924 ;	program.c:372: }
      000711 22               [24] 1925 	ret
                                   1926 ;------------------------------------------------------------
                                   1927 ;Allocation info for local variables in function 'print_pca_menu'
                                   1928 ;------------------------------------------------------------
                                   1929 ;	program.c:379: void print_pca_menu()
                                   1930 ;	-----------------------------------------
                                   1931 ;	 function print_pca_menu
                                   1932 ;	-----------------------------------------
      000712                       1933 _print_pca_menu:
                                   1934 ;	program.c:381: DEBUGPORT(0x55);
      000712 75 82 55         [24] 1935 	mov	dpl,#0x55
      000715 12r13r65         [24] 1936 	lcall	_dataout
                                   1937 ;	program.c:382: printf("\n\n\r^^^^^^^^^^^^^^^^^^^-PCA-MENU-^^^^^^^^^^^^^^^^^^^^^^^^^^ \n\n\r");
      000718 74rB0            [12] 1938 	mov	a,#___str_31
      00071A C0 E0            [24] 1939 	push	acc
      00071C 74s04            [12] 1940 	mov	a,#(___str_31 >> 8)
      00071E C0 E0            [24] 1941 	push	acc
      000720 74 80            [12] 1942 	mov	a,#0x80
      000722 C0 E0            [24] 1943 	push	acc
      000724 12r00r00         [24] 1944 	lcall	_printf
      000727 15 81            [12] 1945 	dec	sp
      000729 15 81            [12] 1946 	dec	sp
      00072B 15 81            [12] 1947 	dec	sp
                                   1948 ;	program.c:383: printf("'F' -> Falling Edge Capture Mode\n\r");
      00072D 74rEF            [12] 1949 	mov	a,#___str_32
      00072F C0 E0            [24] 1950 	push	acc
      000731 74s04            [12] 1951 	mov	a,#(___str_32 >> 8)
      000733 C0 E0            [24] 1952 	push	acc
      000735 74 80            [12] 1953 	mov	a,#0x80
      000737 C0 E0            [24] 1954 	push	acc
      000739 12r00r00         [24] 1955 	lcall	_printf
      00073C 15 81            [12] 1956 	dec	sp
      00073E 15 81            [12] 1957 	dec	sp
      000740 15 81            [12] 1958 	dec	sp
                                   1959 ;	program.c:384: printf("'S' -> Software Timer Mode\n\r");
      000742 74r12            [12] 1960 	mov	a,#___str_33
      000744 C0 E0            [24] 1961 	push	acc
      000746 74s05            [12] 1962 	mov	a,#(___str_33 >> 8)
      000748 C0 E0            [24] 1963 	push	acc
      00074A 74 80            [12] 1964 	mov	a,#0x80
      00074C C0 E0            [24] 1965 	push	acc
      00074E 12r00r00         [24] 1966 	lcall	_printf
      000751 15 81            [12] 1967 	dec	sp
      000753 15 81            [12] 1968 	dec	sp
      000755 15 81            [12] 1969 	dec	sp
                                   1970 ;	program.c:385: printf("'H' -> High Speed Output Mode\n\r");
      000757 74r2F            [12] 1971 	mov	a,#___str_34
      000759 C0 E0            [24] 1972 	push	acc
      00075B 74s05            [12] 1973 	mov	a,#(___str_34 >> 8)
      00075D C0 E0            [24] 1974 	push	acc
      00075F 74 80            [12] 1975 	mov	a,#0x80
      000761 C0 E0            [24] 1976 	push	acc
      000763 12r00r00         [24] 1977 	lcall	_printf
      000766 15 81            [12] 1978 	dec	sp
      000768 15 81            [12] 1979 	dec	sp
      00076A 15 81            [12] 1980 	dec	sp
                                   1981 ;	program.c:386: printf("'P' -> PWM Mode \n\r");
      00076C 74r4F            [12] 1982 	mov	a,#___str_35
      00076E C0 E0            [24] 1983 	push	acc
      000770 74s05            [12] 1984 	mov	a,#(___str_35 >> 8)
      000772 C0 E0            [24] 1985 	push	acc
      000774 74 80            [12] 1986 	mov	a,#0x80
      000776 C0 E0            [24] 1987 	push	acc
      000778 12r00r00         [24] 1988 	lcall	_printf
      00077B 15 81            [12] 1989 	dec	sp
      00077D 15 81            [12] 1990 	dec	sp
      00077F 15 81            [12] 1991 	dec	sp
                                   1992 ;	program.c:387: printf("'W' -> Watchdog Timer Mode\n\r");
      000781 74r62            [12] 1993 	mov	a,#___str_36
      000783 C0 E0            [24] 1994 	push	acc
      000785 74s05            [12] 1995 	mov	a,#(___str_36 >> 8)
      000787 C0 E0            [24] 1996 	push	acc
      000789 74 80            [12] 1997 	mov	a,#0x80
      00078B C0 E0            [24] 1998 	push	acc
      00078D 12r00r00         [24] 1999 	lcall	_printf
      000790 15 81            [12] 2000 	dec	sp
      000792 15 81            [12] 2001 	dec	sp
      000794 15 81            [12] 2002 	dec	sp
                                   2003 ;	program.c:388: printf("'I' -> Idle Mode with PWM\n\r");
      000796 74r7F            [12] 2004 	mov	a,#___str_37
      000798 C0 E0            [24] 2005 	push	acc
      00079A 74s05            [12] 2006 	mov	a,#(___str_37 >> 8)
      00079C C0 E0            [24] 2007 	push	acc
      00079E 74 80            [12] 2008 	mov	a,#0x80
      0007A0 C0 E0            [24] 2009 	push	acc
      0007A2 12r00r00         [24] 2010 	lcall	_printf
      0007A5 15 81            [12] 2011 	dec	sp
      0007A7 15 81            [12] 2012 	dec	sp
      0007A9 15 81            [12] 2013 	dec	sp
                                   2014 ;	program.c:389: printf("'L' -> Change Prescalar to lowest frequency\n\r");
      0007AB 74r9B            [12] 2015 	mov	a,#___str_38
      0007AD C0 E0            [24] 2016 	push	acc
      0007AF 74s05            [12] 2017 	mov	a,#(___str_38 >> 8)
      0007B1 C0 E0            [24] 2018 	push	acc
      0007B3 74 80            [12] 2019 	mov	a,#0x80
      0007B5 C0 E0            [24] 2020 	push	acc
      0007B7 12r00r00         [24] 2021 	lcall	_printf
      0007BA 15 81            [12] 2022 	dec	sp
      0007BC 15 81            [12] 2023 	dec	sp
      0007BE 15 81            [12] 2024 	dec	sp
                                   2025 ;	program.c:390: printf("'D' -> Power Down Mode\n\n\r");
      0007C0 74rC9            [12] 2026 	mov	a,#___str_39
      0007C2 C0 E0            [24] 2027 	push	acc
      0007C4 74s05            [12] 2028 	mov	a,#(___str_39 >> 8)
      0007C6 C0 E0            [24] 2029 	push	acc
      0007C8 74 80            [12] 2030 	mov	a,#0x80
      0007CA C0 E0            [24] 2031 	push	acc
      0007CC 12r00r00         [24] 2032 	lcall	_printf
      0007CF 15 81            [12] 2033 	dec	sp
      0007D1 15 81            [12] 2034 	dec	sp
      0007D3 15 81            [12] 2035 	dec	sp
                                   2036 ;	program.c:392: printf("'M' -> Go to Main Menu \n\n\r");
      0007D5 74rE3            [12] 2037 	mov	a,#___str_40
      0007D7 C0 E0            [24] 2038 	push	acc
      0007D9 74s05            [12] 2039 	mov	a,#(___str_40 >> 8)
      0007DB C0 E0            [24] 2040 	push	acc
      0007DD 74 80            [12] 2041 	mov	a,#0x80
      0007DF C0 E0            [24] 2042 	push	acc
      0007E1 12r00r00         [24] 2043 	lcall	_printf
      0007E4 15 81            [12] 2044 	dec	sp
      0007E6 15 81            [12] 2045 	dec	sp
      0007E8 15 81            [12] 2046 	dec	sp
                                   2047 ;	program.c:393: }
      0007EA 22               [24] 2048 	ret
                                   2049 ;------------------------------------------------------------
                                   2050 ;Allocation info for local variables in function 'print_heap_menu'
                                   2051 ;------------------------------------------------------------
                                   2052 ;	program.c:400: void print_heap_menu()
                                   2053 ;	-----------------------------------------
                                   2054 ;	 function print_heap_menu
                                   2055 ;	-----------------------------------------
      0007EB                       2056 _print_heap_menu:
                                   2057 ;	program.c:402: DEBUGPORT(0x05);
      0007EB 75 82 05         [24] 2058 	mov	dpl,#0x05
      0007EE 12r13r65         [24] 2059 	lcall	_dataout
                                   2060 ;	program.c:403: printf("\n\n\r^^^^^^^^^^^^^^^^^^^-HEAP-MENU-^^^^^^^^^^^^^^^^^^^^^^^^^^ \n\n\r");
      0007F1 74rFE            [12] 2061 	mov	a,#___str_41
      0007F3 C0 E0            [24] 2062 	push	acc
      0007F5 74s05            [12] 2063 	mov	a,#(___str_41 >> 8)
      0007F7 C0 E0            [24] 2064 	push	acc
      0007F9 74 80            [12] 2065 	mov	a,#0x80
      0007FB C0 E0            [24] 2066 	push	acc
      0007FD 12r00r00         [24] 2067 	lcall	_printf
      000800 15 81            [12] 2068 	dec	sp
      000802 15 81            [12] 2069 	dec	sp
      000804 15 81            [12] 2070 	dec	sp
                                   2071 ;	program.c:404: printf("You can enter characters or use commands from below \n\r");
      000806 74r3E            [12] 2072 	mov	a,#___str_42
      000808 C0 E0            [24] 2073 	push	acc
      00080A 74s06            [12] 2074 	mov	a,#(___str_42 >> 8)
      00080C C0 E0            [24] 2075 	push	acc
      00080E 74 80            [12] 2076 	mov	a,#0x80
      000810 C0 E0            [24] 2077 	push	acc
      000812 12r00r00         [24] 2078 	lcall	_printf
      000815 15 81            [12] 2079 	dec	sp
      000817 15 81            [12] 2080 	dec	sp
      000819 15 81            [12] 2081 	dec	sp
                                   2082 ;	program.c:405: printf("'?' -> Show heap status, dump & clear Buffer 0 \n\r");
      00081B 74r75            [12] 2083 	mov	a,#___str_43
      00081D C0 E0            [24] 2084 	push	acc
      00081F 74s06            [12] 2085 	mov	a,#(___str_43 >> 8)
      000821 C0 E0            [24] 2086 	push	acc
      000823 74 80            [12] 2087 	mov	a,#0x80
      000825 C0 E0            [24] 2088 	push	acc
      000827 12r00r00         [24] 2089 	lcall	_printf
      00082A 15 81            [12] 2090 	dec	sp
      00082C 15 81            [12] 2091 	dec	sp
      00082E 15 81            [12] 2092 	dec	sp
                                   2093 ;	program.c:406: printf("'+' -> Add a new Buffer\n\r");
      000830 74rA7            [12] 2094 	mov	a,#___str_44
      000832 C0 E0            [24] 2095 	push	acc
      000834 74s06            [12] 2096 	mov	a,#(___str_44 >> 8)
      000836 C0 E0            [24] 2097 	push	acc
      000838 74 80            [12] 2098 	mov	a,#0x80
      00083A C0 E0            [24] 2099 	push	acc
      00083C 12r00r00         [24] 2100 	lcall	_printf
      00083F 15 81            [12] 2101 	dec	sp
      000841 15 81            [12] 2102 	dec	sp
      000843 15 81            [12] 2103 	dec	sp
                                   2104 ;	program.c:407: printf("'-' -> Delete existing Buffer\n\r");
      000845 74rC1            [12] 2105 	mov	a,#___str_45
      000847 C0 E0            [24] 2106 	push	acc
      000849 74s06            [12] 2107 	mov	a,#(___str_45 >> 8)
      00084B C0 E0            [24] 2108 	push	acc
      00084D 74 80            [12] 2109 	mov	a,#0x80
      00084F C0 E0            [24] 2110 	push	acc
      000851 12r00r00         [24] 2111 	lcall	_printf
      000854 15 81            [12] 2112 	dec	sp
      000856 15 81            [12] 2113 	dec	sp
      000858 15 81            [12] 2114 	dec	sp
                                   2115 ;	program.c:408: printf("'=' -> Dump Buffer 0 in hex\n\r");
      00085A 74rE1            [12] 2116 	mov	a,#___str_46
      00085C C0 E0            [24] 2117 	push	acc
      00085E 74s06            [12] 2118 	mov	a,#(___str_46 >> 8)
      000860 C0 E0            [24] 2119 	push	acc
      000862 74 80            [12] 2120 	mov	a,#0x80
      000864 C0 E0            [24] 2121 	push	acc
      000866 12r00r00         [24] 2122 	lcall	_printf
      000869 15 81            [12] 2123 	dec	sp
      00086B 15 81            [12] 2124 	dec	sp
      00086D 15 81            [12] 2125 	dec	sp
                                   2126 ;	program.c:409: printf("'@' -> Free all Heap & begin again\n\n\r");
      00086F 74rFF            [12] 2127 	mov	a,#___str_47
      000871 C0 E0            [24] 2128 	push	acc
      000873 74s06            [12] 2129 	mov	a,#(___str_47 >> 8)
      000875 C0 E0            [24] 2130 	push	acc
      000877 74 80            [12] 2131 	mov	a,#0x80
      000879 C0 E0            [24] 2132 	push	acc
      00087B 12r00r00         [24] 2133 	lcall	_printf
      00087E 15 81            [12] 2134 	dec	sp
      000880 15 81            [12] 2135 	dec	sp
      000882 15 81            [12] 2136 	dec	sp
                                   2137 ;	program.c:410: printf("'M' -> Go to Main Menu \n\n\r");
      000884 74rE3            [12] 2138 	mov	a,#___str_40
      000886 C0 E0            [24] 2139 	push	acc
      000888 74s05            [12] 2140 	mov	a,#(___str_40 >> 8)
      00088A C0 E0            [24] 2141 	push	acc
      00088C 74 80            [12] 2142 	mov	a,#0x80
      00088E C0 E0            [24] 2143 	push	acc
      000890 12r00r00         [24] 2144 	lcall	_printf
      000893 15 81            [12] 2145 	dec	sp
      000895 15 81            [12] 2146 	dec	sp
      000897 15 81            [12] 2147 	dec	sp
                                   2148 ;	program.c:411: }
      000899 22               [24] 2149 	ret
                                   2150 ;------------------------------------------------------------
                                   2151 ;Allocation info for local variables in function 'create_new_buffer'
                                   2152 ;------------------------------------------------------------
                                   2153 ;buff_size                 Allocated with name '_create_new_buffer_buff_size_65537_84'
                                   2154 ;buff                      Allocated with name '_create_new_buffer_buff_65537_84'
                                   2155 ;------------------------------------------------------------
                                   2156 ;	program.c:419: int create_new_buffer()
                                   2157 ;	-----------------------------------------
                                   2158 ;	 function create_new_buffer
                                   2159 ;	-----------------------------------------
      00089A                       2160 _create_new_buffer:
                                   2161 ;	program.c:421: DEBUGPORT(0x06);
      00089A 75 82 06         [24] 2162 	mov	dpl,#0x06
      00089D 12r13r65         [24] 2163 	lcall	_dataout
                                   2164 ;	program.c:424: if (program_stats.allocated_heap == program_stats.total_heap_size)
      0008A0 90r00r02         [24] 2165 	mov	dptr,#(_program_stats + 0x0002)
      0008A3 E0               [24] 2166 	movx	a,@dptr
      0008A4 FE               [12] 2167 	mov	r6,a
      0008A5 A3               [24] 2168 	inc	dptr
      0008A6 E0               [24] 2169 	movx	a,@dptr
      0008A7 FF               [12] 2170 	mov	r7,a
      0008A8 90r00r00         [24] 2171 	mov	dptr,#_program_stats
      0008AB E0               [24] 2172 	movx	a,@dptr
      0008AC FC               [12] 2173 	mov	r4,a
      0008AD A3               [24] 2174 	inc	dptr
      0008AE E0               [24] 2175 	movx	a,@dptr
      0008AF FD               [12] 2176 	mov	r5,a
      0008B0 EE               [12] 2177 	mov	a,r6
      0008B1 B5 04 07         [24] 2178 	cjne	a,ar4,00133$
      0008B4 EF               [12] 2179 	mov	a,r7
      0008B5 B5 05 03         [24] 2180 	cjne	a,ar5,00133$
      0008B8 02r09rFB         [24] 2181 	ljmp	00111$
      0008BB                       2182 00133$:
                                   2183 ;	program.c:427: get_new_buff:
      0008BB                       2184 00103$:
                                   2185 ;	program.c:428: printf("\n\rGive Valid Buffer Size(030-300):");
      0008BB 74r25            [12] 2186 	mov	a,#___str_48
      0008BD C0 E0            [24] 2187 	push	acc
      0008BF 74s07            [12] 2188 	mov	a,#(___str_48 >> 8)
      0008C1 C0 E0            [24] 2189 	push	acc
      0008C3 74 80            [12] 2190 	mov	a,#0x80
      0008C5 C0 E0            [24] 2191 	push	acc
      0008C7 12r00r00         [24] 2192 	lcall	_printf
      0008CA 15 81            [12] 2193 	dec	sp
      0008CC 15 81            [12] 2194 	dec	sp
      0008CE 15 81            [12] 2195 	dec	sp
                                   2196 ;	program.c:429: buff_size = get_number(3);
      0008D0 90 00 03         [24] 2197 	mov	dptr,#0x0003
      0008D3 12r11rB5         [24] 2198 	lcall	_get_number
      0008D6 AE 82            [24] 2199 	mov	r6,dpl
      0008D8 AF 83            [24] 2200 	mov	r7,dph
                                   2201 ;	program.c:430: if (buff_size >= 30 && buff_size <= 300)
      0008DA C3               [12] 2202 	clr	c
      0008DB EE               [12] 2203 	mov	a,r6
      0008DC 94 1E            [12] 2204 	subb	a,#0x1e
      0008DE EF               [12] 2205 	mov	a,r7
      0008DF 64 80            [12] 2206 	xrl	a,#0x80
      0008E1 94 80            [12] 2207 	subb	a,#0x80
      0008E3 40 D6            [24] 2208 	jc	00103$
      0008E5 74 2C            [12] 2209 	mov	a,#0x2c
      0008E7 9E               [12] 2210 	subb	a,r6
      0008E8 74 81            [12] 2211 	mov	a,#(0x01 ^ 0x80)
      0008EA 8F F0            [24] 2212 	mov	b,r7
      0008EC 63 F0 80         [24] 2213 	xrl	b,#0x80
      0008EF 95 F0            [12] 2214 	subb	a,b
      0008F1 40 C8            [24] 2215 	jc	00103$
                                   2216 ;	program.c:432: buff.buffer_start = malloc(buff_size);
      0008F3 8E 82            [24] 2217 	mov	dpl,r6
      0008F5 8F 83            [24] 2218 	mov	dph,r7
      0008F7 C0 07            [24] 2219 	push	ar7
      0008F9 C0 06            [24] 2220 	push	ar6
      0008FB 12r00r00         [24] 2221 	lcall	_malloc
      0008FE AC 82            [24] 2222 	mov	r4,dpl
      000900 AD 83            [24] 2223 	mov	r5,dph
      000902 D0 06            [24] 2224 	pop	ar6
      000904 D0 07            [24] 2225 	pop	ar7
      000906 7B 00            [12] 2226 	mov	r3,#0x00
      000908 90r01r38         [24] 2227 	mov	dptr,#(_create_new_buffer_buff_65537_84 + 0x0002)
      00090B EC               [12] 2228 	mov	a,r4
      00090C F0               [24] 2229 	movx	@dptr,a
      00090D ED               [12] 2230 	mov	a,r5
      00090E A3               [24] 2231 	inc	dptr
      00090F F0               [24] 2232 	movx	@dptr,a
      000910 EB               [12] 2233 	mov	a,r3
      000911 A3               [24] 2234 	inc	dptr
      000912 F0               [24] 2235 	movx	@dptr,a
                                   2236 ;	program.c:433: if (buff.buffer_start == NULL)
      000913 EC               [12] 2237 	mov	a,r4
      000914 4D               [12] 2238 	orl	a,r5
      000915 70 18            [24] 2239 	jnz	00105$
                                   2240 ;	program.c:435: printf("Failed, give smaller buffer\n\r");
      000917 74r48            [12] 2241 	mov	a,#___str_49
      000919 C0 E0            [24] 2242 	push	acc
      00091B 74s07            [12] 2243 	mov	a,#(___str_49 >> 8)
      00091D C0 E0            [24] 2244 	push	acc
      00091F 74 80            [12] 2245 	mov	a,#0x80
      000921 C0 E0            [24] 2246 	push	acc
      000923 12r00r00         [24] 2247 	lcall	_printf
      000926 15 81            [12] 2248 	dec	sp
      000928 15 81            [12] 2249 	dec	sp
      00092A 15 81            [12] 2250 	dec	sp
      00092C 02r09rF7         [24] 2251 	ljmp	00106$
      00092F                       2252 00105$:
                                   2253 ;	program.c:439: printf("\n\n\r####SUCCESS, BUFFER Created####\n\n\r");
      00092F C0 07            [24] 2254 	push	ar7
      000931 C0 06            [24] 2255 	push	ar6
      000933 74r66            [12] 2256 	mov	a,#___str_50
      000935 C0 E0            [24] 2257 	push	acc
      000937 74s07            [12] 2258 	mov	a,#(___str_50 >> 8)
      000939 C0 E0            [24] 2259 	push	acc
      00093B 74 80            [12] 2260 	mov	a,#0x80
      00093D C0 E0            [24] 2261 	push	acc
      00093F 12r00r00         [24] 2262 	lcall	_printf
      000942 15 81            [12] 2263 	dec	sp
      000944 15 81            [12] 2264 	dec	sp
      000946 15 81            [12] 2265 	dec	sp
      000948 D0 06            [24] 2266 	pop	ar6
      00094A D0 07            [24] 2267 	pop	ar7
                                   2268 ;	program.c:441: program_stats.allocated_heap += buff_size;
      00094C 90r00r02         [24] 2269 	mov	dptr,#(_program_stats + 0x0002)
      00094F E0               [24] 2270 	movx	a,@dptr
      000950 FC               [12] 2271 	mov	r4,a
      000951 A3               [24] 2272 	inc	dptr
      000952 E0               [24] 2273 	movx	a,@dptr
      000953 FD               [12] 2274 	mov	r5,a
      000954 EE               [12] 2275 	mov	a,r6
      000955 2C               [12] 2276 	add	a,r4
      000956 FC               [12] 2277 	mov	r4,a
      000957 EF               [12] 2278 	mov	a,r7
      000958 3D               [12] 2279 	addc	a,r5
      000959 FD               [12] 2280 	mov	r5,a
      00095A 90r00r02         [24] 2281 	mov	dptr,#(_program_stats + 0x0002)
      00095D EC               [12] 2282 	mov	a,r4
      00095E F0               [24] 2283 	movx	@dptr,a
      00095F ED               [12] 2284 	mov	a,r5
      000960 A3               [24] 2285 	inc	dptr
      000961 F0               [24] 2286 	movx	@dptr,a
                                   2287 ;	program.c:442: buff.buff_size = buff_size;
      000962 90r01r3E         [24] 2288 	mov	dptr,#(_create_new_buffer_buff_65537_84 + 0x0008)
      000965 EE               [12] 2289 	mov	a,r6
      000966 F0               [24] 2290 	movx	@dptr,a
      000967 EF               [12] 2291 	mov	a,r7
      000968 A3               [24] 2292 	inc	dptr
      000969 F0               [24] 2293 	movx	@dptr,a
                                   2294 ;	program.c:443: buff.buffer_num = program_stats.total_buffers;
      00096A 90r00r08         [24] 2295 	mov	dptr,#(_program_stats + 0x0008)
      00096D E0               [24] 2296 	movx	a,@dptr
      00096E FC               [12] 2297 	mov	r4,a
      00096F A3               [24] 2298 	inc	dptr
      000970 E0               [24] 2299 	movx	a,@dptr
      000971 FD               [12] 2300 	mov	r5,a
      000972 90r01r36         [24] 2301 	mov	dptr,#_create_new_buffer_buff_65537_84
      000975 EC               [12] 2302 	mov	a,r4
      000976 F0               [24] 2303 	movx	@dptr,a
      000977 ED               [12] 2304 	mov	a,r5
      000978 A3               [24] 2305 	inc	dptr
      000979 F0               [24] 2306 	movx	@dptr,a
                                   2307 ;	program.c:444: buff.buffer_end = buff.buffer_start + buff_size;
      00097A 90r01r38         [24] 2308 	mov	dptr,#(_create_new_buffer_buff_65537_84 + 0x0002)
      00097D E0               [24] 2309 	movx	a,@dptr
      00097E FB               [12] 2310 	mov	r3,a
      00097F A3               [24] 2311 	inc	dptr
      000980 E0               [24] 2312 	movx	a,@dptr
      000981 FC               [12] 2313 	mov	r4,a
      000982 A3               [24] 2314 	inc	dptr
      000983 E0               [24] 2315 	movx	a,@dptr
      000984 FD               [12] 2316 	mov	r5,a
      000985 EE               [12] 2317 	mov	a,r6
      000986 2B               [12] 2318 	add	a,r3
      000987 FE               [12] 2319 	mov	r6,a
      000988 EF               [12] 2320 	mov	a,r7
      000989 3C               [12] 2321 	addc	a,r4
      00098A FF               [12] 2322 	mov	r7,a
      00098B 8D 02            [24] 2323 	mov	ar2,r5
      00098D 90r01r3B         [24] 2324 	mov	dptr,#(_create_new_buffer_buff_65537_84 + 0x0005)
      000990 EE               [12] 2325 	mov	a,r6
      000991 F0               [24] 2326 	movx	@dptr,a
      000992 EF               [12] 2327 	mov	a,r7
      000993 A3               [24] 2328 	inc	dptr
      000994 F0               [24] 2329 	movx	@dptr,a
      000995 EA               [12] 2330 	mov	a,r2
      000996 A3               [24] 2331 	inc	dptr
      000997 F0               [24] 2332 	movx	@dptr,a
                                   2333 ;	program.c:445: buff.num_char = 0;
      000998 90r01r40         [24] 2334 	mov	dptr,#(_create_new_buffer_buff_65537_84 + 0x000a)
      00099B E4               [12] 2335 	clr	a
      00099C F0               [24] 2336 	movx	@dptr,a
      00099D A3               [24] 2337 	inc	dptr
      00099E F0               [24] 2338 	movx	@dptr,a
                                   2339 ;	program.c:447: buffers_array[program_stats.total_buffers] = buff;
      00099F 90r00r08         [24] 2340 	mov	dptr,#(_program_stats + 0x0008)
      0009A2 E0               [24] 2341 	movx	a,@dptr
      0009A3 FE               [12] 2342 	mov	r6,a
      0009A4 A3               [24] 2343 	inc	dptr
      0009A5 E0               [24] 2344 	movx	a,@dptr
      0009A6 FF               [12] 2345 	mov	r7,a
      0009A7 90r00r00         [24] 2346 	mov	dptr,#__mulint_PARM_2
      0009AA EE               [12] 2347 	mov	a,r6
      0009AB F0               [24] 2348 	movx	@dptr,a
      0009AC EF               [12] 2349 	mov	a,r7
      0009AD A3               [24] 2350 	inc	dptr
      0009AE F0               [24] 2351 	movx	@dptr,a
      0009AF 90 00 0C         [24] 2352 	mov	dptr,#0x000c
      0009B2 12r00r00         [24] 2353 	lcall	__mulint
      0009B5 AE 82            [24] 2354 	mov	r6,dpl
      0009B7 AF 83            [24] 2355 	mov	r7,dph
      0009B9 EE               [12] 2356 	mov	a,r6
      0009BA 24r0A            [12] 2357 	add	a,#_buffers_array
      0009BC FE               [12] 2358 	mov	r6,a
      0009BD EF               [12] 2359 	mov	a,r7
      0009BE 34s00            [12] 2360 	addc	a,#(_buffers_array >> 8)
      0009C0 FF               [12] 2361 	mov	r7,a
      0009C1 7D 00            [12] 2362 	mov	r5,#0x00
      0009C3 90r00r00         [24] 2363 	mov	dptr,#___memcpy_PARM_2
      0009C6 74r36            [12] 2364 	mov	a,#_create_new_buffer_buff_65537_84
      0009C8 F0               [24] 2365 	movx	@dptr,a
      0009C9 74s01            [12] 2366 	mov	a,#(_create_new_buffer_buff_65537_84 >> 8)
      0009CB A3               [24] 2367 	inc	dptr
      0009CC F0               [24] 2368 	movx	@dptr,a
      0009CD E4               [12] 2369 	clr	a
      0009CE A3               [24] 2370 	inc	dptr
      0009CF F0               [24] 2371 	movx	@dptr,a
      0009D0 90r00r00         [24] 2372 	mov	dptr,#___memcpy_PARM_3
      0009D3 74 0C            [12] 2373 	mov	a,#0x0c
      0009D5 F0               [24] 2374 	movx	@dptr,a
      0009D6 E4               [12] 2375 	clr	a
      0009D7 A3               [24] 2376 	inc	dptr
      0009D8 F0               [24] 2377 	movx	@dptr,a
      0009D9 8E 82            [24] 2378 	mov	dpl,r6
      0009DB 8F 83            [24] 2379 	mov	dph,r7
      0009DD 8D F0            [24] 2380 	mov	b,r5
      0009DF 12r00r00         [24] 2381 	lcall	___memcpy
                                   2382 ;	program.c:448: program_stats.total_buffers += 1;
      0009E2 90r00r08         [24] 2383 	mov	dptr,#(_program_stats + 0x0008)
      0009E5 E0               [24] 2384 	movx	a,@dptr
      0009E6 FE               [12] 2385 	mov	r6,a
      0009E7 A3               [24] 2386 	inc	dptr
      0009E8 E0               [24] 2387 	movx	a,@dptr
      0009E9 FF               [12] 2388 	mov	r7,a
      0009EA 0E               [12] 2389 	inc	r6
      0009EB BE 00 01         [24] 2390 	cjne	r6,#0x00,00137$
      0009EE 0F               [12] 2391 	inc	r7
      0009EF                       2392 00137$:
      0009EF 90r00r08         [24] 2393 	mov	dptr,#(_program_stats + 0x0008)
      0009F2 EE               [12] 2394 	mov	a,r6
      0009F3 F0               [24] 2395 	movx	@dptr,a
      0009F4 EF               [12] 2396 	mov	a,r7
      0009F5 A3               [24] 2397 	inc	dptr
      0009F6 F0               [24] 2398 	movx	@dptr,a
      0009F7                       2399 00106$:
                                   2400 ;	program.c:450: return 0;
      0009F7 90 00 00         [24] 2401 	mov	dptr,#0x0000
                                   2402 ;	program.c:456: no_heap_left:
      0009FA 22               [24] 2403 	ret
      0009FB                       2404 00111$:
                                   2405 ;	program.c:457: printf("No Heap Memory Left, Delete some buffers...\n\r");
      0009FB 74r8C            [12] 2406 	mov	a,#___str_51
      0009FD C0 E0            [24] 2407 	push	acc
      0009FF 74s07            [12] 2408 	mov	a,#(___str_51 >> 8)
      000A01 C0 E0            [24] 2409 	push	acc
      000A03 74 80            [12] 2410 	mov	a,#0x80
      000A05 C0 E0            [24] 2411 	push	acc
      000A07 12r00r00         [24] 2412 	lcall	_printf
      000A0A 15 81            [12] 2413 	dec	sp
      000A0C 15 81            [12] 2414 	dec	sp
      000A0E 15 81            [12] 2415 	dec	sp
                                   2416 ;	program.c:458: return 0;
      000A10 90 00 00         [24] 2417 	mov	dptr,#0x0000
                                   2418 ;	program.c:459: }
      000A13 22               [24] 2419 	ret
                                   2420 ;------------------------------------------------------------
                                   2421 ;Allocation info for local variables in function 'create_initial_buffers'
                                   2422 ;------------------------------------------------------------
                                   2423 ;buff_size                 Allocated with name '_create_initial_buffers_buff_size_65537_90'
                                   2424 ;buff                      Allocated with name '_create_initial_buffers_buff_65538_91'
                                   2425 ;buff1                     Allocated with name '_create_initial_buffers_buff1_65538_91'
                                   2426 ;------------------------------------------------------------
                                   2427 ;	program.c:467: void create_initial_buffers()
                                   2428 ;	-----------------------------------------
                                   2429 ;	 function create_initial_buffers
                                   2430 ;	-----------------------------------------
      000A14                       2431 _create_initial_buffers:
                                   2432 ;	program.c:469: DEBUGPORT(0x07);
      000A14 75 82 07         [24] 2433 	mov	dpl,#0x07
      000A17 12r13r65         [24] 2434 	lcall	_dataout
                                   2435 ;	program.c:472: get_buff:
      000A1A                       2436 00101$:
                                   2437 ;	program.c:473: printf("\n\rGive Valid Initial Buffer Size(0048-4800):");
      000A1A 74rBA            [12] 2438 	mov	a,#___str_52
      000A1C C0 E0            [24] 2439 	push	acc
      000A1E 74s07            [12] 2440 	mov	a,#(___str_52 >> 8)
      000A20 C0 E0            [24] 2441 	push	acc
      000A22 74 80            [12] 2442 	mov	a,#0x80
      000A24 C0 E0            [24] 2443 	push	acc
      000A26 12r00r00         [24] 2444 	lcall	_printf
      000A29 15 81            [12] 2445 	dec	sp
      000A2B 15 81            [12] 2446 	dec	sp
      000A2D 15 81            [12] 2447 	dec	sp
                                   2448 ;	program.c:474: buff_size = get_number(4);
      000A2F 90 00 04         [24] 2449 	mov	dptr,#0x0004
      000A32 12r11rB5         [24] 2450 	lcall	_get_number
      000A35 AE 82            [24] 2451 	mov	r6,dpl
      000A37 AF 83            [24] 2452 	mov	r7,dph
                                   2453 ;	program.c:478: if (buff_size >= 48 && buff_size <= 4800)
      000A39 C3               [12] 2454 	clr	c
      000A3A EE               [12] 2455 	mov	a,r6
      000A3B 94 30            [12] 2456 	subb	a,#0x30
      000A3D EF               [12] 2457 	mov	a,r7
      000A3E 64 80            [12] 2458 	xrl	a,#0x80
      000A40 94 80            [12] 2459 	subb	a,#0x80
      000A42 40 D6            [24] 2460 	jc	00101$
      000A44 74 C0            [12] 2461 	mov	a,#0xc0
      000A46 9E               [12] 2462 	subb	a,r6
      000A47 74 92            [12] 2463 	mov	a,#(0x12 ^ 0x80)
      000A49 8F F0            [24] 2464 	mov	b,r7
      000A4B 63 F0 80         [24] 2465 	xrl	b,#0x80
      000A4E 95 F0            [12] 2466 	subb	a,b
      000A50 40 C8            [24] 2467 	jc	00101$
                                   2468 ;	program.c:480: buff.buffer_start = malloc(buff_size);
      000A52 8E 82            [24] 2469 	mov	dpl,r6
      000A54 8F 83            [24] 2470 	mov	dph,r7
      000A56 C0 07            [24] 2471 	push	ar7
      000A58 C0 06            [24] 2472 	push	ar6
      000A5A 12r00r00         [24] 2473 	lcall	_malloc
      000A5D AC 82            [24] 2474 	mov	r4,dpl
      000A5F AD 83            [24] 2475 	mov	r5,dph
      000A61 D0 06            [24] 2476 	pop	ar6
      000A63 D0 07            [24] 2477 	pop	ar7
      000A65 7B 00            [12] 2478 	mov	r3,#0x00
      000A67 90r01r44         [24] 2479 	mov	dptr,#(_create_initial_buffers_buff_65538_91 + 0x0002)
      000A6A EC               [12] 2480 	mov	a,r4
      000A6B F0               [24] 2481 	movx	@dptr,a
      000A6C ED               [12] 2482 	mov	a,r5
      000A6D A3               [24] 2483 	inc	dptr
      000A6E F0               [24] 2484 	movx	@dptr,a
      000A6F EB               [12] 2485 	mov	a,r3
      000A70 A3               [24] 2486 	inc	dptr
      000A71 F0               [24] 2487 	movx	@dptr,a
                                   2488 ;	program.c:481: buff1.buffer_start = malloc(buff_size);
      000A72 8E 82            [24] 2489 	mov	dpl,r6
      000A74 8F 83            [24] 2490 	mov	dph,r7
      000A76 C0 07            [24] 2491 	push	ar7
      000A78 C0 06            [24] 2492 	push	ar6
      000A7A 12r00r00         [24] 2493 	lcall	_malloc
      000A7D AC 82            [24] 2494 	mov	r4,dpl
      000A7F AD 83            [24] 2495 	mov	r5,dph
      000A81 D0 06            [24] 2496 	pop	ar6
      000A83 D0 07            [24] 2497 	pop	ar7
      000A85 7B 00            [12] 2498 	mov	r3,#0x00
      000A87 90r01r50         [24] 2499 	mov	dptr,#(_create_initial_buffers_buff1_65538_91 + 0x0002)
      000A8A EC               [12] 2500 	mov	a,r4
      000A8B F0               [24] 2501 	movx	@dptr,a
      000A8C ED               [12] 2502 	mov	a,r5
      000A8D A3               [24] 2503 	inc	dptr
      000A8E F0               [24] 2504 	movx	@dptr,a
      000A8F EB               [12] 2505 	mov	a,r3
      000A90 A3               [24] 2506 	inc	dptr
      000A91 F0               [24] 2507 	movx	@dptr,a
                                   2508 ;	program.c:483: if (buff.buffer_start == NULL || buff1.buffer_start == NULL)
      000A92 90r01r44         [24] 2509 	mov	dptr,#(_create_initial_buffers_buff_65538_91 + 0x0002)
      000A95 E0               [24] 2510 	movx	a,@dptr
      000A96 FB               [12] 2511 	mov	r3,a
      000A97 A3               [24] 2512 	inc	dptr
      000A98 E0               [24] 2513 	movx	a,@dptr
      000A99 FC               [12] 2514 	mov	r4,a
      000A9A A3               [24] 2515 	inc	dptr
      000A9B E0               [24] 2516 	movx	a,@dptr
      000A9C EB               [12] 2517 	mov	a,r3
      000A9D 4C               [12] 2518 	orl	a,r4
      000A9E 60 0F            [24] 2519 	jz	00106$
      000AA0 90r01r50         [24] 2520 	mov	dptr,#(_create_initial_buffers_buff1_65538_91 + 0x0002)
      000AA3 E0               [24] 2521 	movx	a,@dptr
      000AA4 FB               [12] 2522 	mov	r3,a
      000AA5 A3               [24] 2523 	inc	dptr
      000AA6 E0               [24] 2524 	movx	a,@dptr
      000AA7 FC               [12] 2525 	mov	r4,a
      000AA8 A3               [24] 2526 	inc	dptr
      000AA9 E0               [24] 2527 	movx	a,@dptr
      000AAA FD               [12] 2528 	mov	r5,a
      000AAB EB               [12] 2529 	mov	a,r3
      000AAC 4C               [12] 2530 	orl	a,r4
      000AAD 70 60            [24] 2531 	jnz	00107$
      000AAF                       2532 00106$:
                                   2533 ;	program.c:485: printf("\n\r####FAIL, Please give a smaller buffer size####\n\n\r");
      000AAF 74rE7            [12] 2534 	mov	a,#___str_53
      000AB1 C0 E0            [24] 2535 	push	acc
      000AB3 74s07            [12] 2536 	mov	a,#(___str_53 >> 8)
      000AB5 C0 E0            [24] 2537 	push	acc
      000AB7 74 80            [12] 2538 	mov	a,#0x80
      000AB9 C0 E0            [24] 2539 	push	acc
      000ABB 12r00r00         [24] 2540 	lcall	_printf
      000ABE 15 81            [12] 2541 	dec	sp
      000AC0 15 81            [12] 2542 	dec	sp
      000AC2 15 81            [12] 2543 	dec	sp
                                   2544 ;	program.c:487: if (buff.buffer_start != NULL)
      000AC4 90r01r44         [24] 2545 	mov	dptr,#(_create_initial_buffers_buff_65538_91 + 0x0002)
      000AC7 E0               [24] 2546 	movx	a,@dptr
      000AC8 FB               [12] 2547 	mov	r3,a
      000AC9 A3               [24] 2548 	inc	dptr
      000ACA E0               [24] 2549 	movx	a,@dptr
      000ACB FC               [12] 2550 	mov	r4,a
      000ACC A3               [24] 2551 	inc	dptr
      000ACD E0               [24] 2552 	movx	a,@dptr
      000ACE EB               [12] 2553 	mov	a,r3
      000ACF 4C               [12] 2554 	orl	a,r4
      000AD0 60 14            [24] 2555 	jz	00103$
                                   2556 ;	program.c:488: free(buff.buffer_start);
      000AD2 90r01r44         [24] 2557 	mov	dptr,#(_create_initial_buffers_buff_65538_91 + 0x0002)
      000AD5 E0               [24] 2558 	movx	a,@dptr
      000AD6 FB               [12] 2559 	mov	r3,a
      000AD7 A3               [24] 2560 	inc	dptr
      000AD8 E0               [24] 2561 	movx	a,@dptr
      000AD9 FC               [12] 2562 	mov	r4,a
      000ADA A3               [24] 2563 	inc	dptr
      000ADB E0               [24] 2564 	movx	a,@dptr
      000ADC FD               [12] 2565 	mov	r5,a
      000ADD 8B 82            [24] 2566 	mov	dpl,r3
      000ADF 8C 83            [24] 2567 	mov	dph,r4
      000AE1 8D F0            [24] 2568 	mov	b,r5
      000AE3 12r00r00         [24] 2569 	lcall	_free
      000AE6                       2570 00103$:
                                   2571 ;	program.c:489: if (buff1.buffer_start != NULL)
      000AE6 90r01r50         [24] 2572 	mov	dptr,#(_create_initial_buffers_buff1_65538_91 + 0x0002)
      000AE9 E0               [24] 2573 	movx	a,@dptr
      000AEA FB               [12] 2574 	mov	r3,a
      000AEB A3               [24] 2575 	inc	dptr
      000AEC E0               [24] 2576 	movx	a,@dptr
      000AED FC               [12] 2577 	mov	r4,a
      000AEE A3               [24] 2578 	inc	dptr
      000AEF E0               [24] 2579 	movx	a,@dptr
      000AF0 FD               [12] 2580 	mov	r5,a
      000AF1 EB               [12] 2581 	mov	a,r3
      000AF2 4C               [12] 2582 	orl	a,r4
      000AF3 70 03            [24] 2583 	jnz	00145$
      000AF5 02r0Ar1A         [24] 2584 	ljmp	00101$
      000AF8                       2585 00145$:
                                   2586 ;	program.c:490: free(buff1.buffer_start);
      000AF8 90r01r50         [24] 2587 	mov	dptr,#(_create_initial_buffers_buff1_65538_91 + 0x0002)
      000AFB E0               [24] 2588 	movx	a,@dptr
      000AFC FB               [12] 2589 	mov	r3,a
      000AFD A3               [24] 2590 	inc	dptr
      000AFE E0               [24] 2591 	movx	a,@dptr
      000AFF FC               [12] 2592 	mov	r4,a
      000B00 A3               [24] 2593 	inc	dptr
      000B01 E0               [24] 2594 	movx	a,@dptr
      000B02 FD               [12] 2595 	mov	r5,a
      000B03 8B 82            [24] 2596 	mov	dpl,r3
      000B05 8C 83            [24] 2597 	mov	dph,r4
      000B07 8D F0            [24] 2598 	mov	b,r5
      000B09 12r00r00         [24] 2599 	lcall	_free
                                   2600 ;	program.c:492: goto get_buff;
      000B0C 02r0Ar1A         [24] 2601 	ljmp	00101$
      000B0F                       2602 00107$:
                                   2603 ;	program.c:497: printf("\n\n\r####SUCCESS, INITIAL BUFFERS Created####\n\n\r");
      000B0F C0 07            [24] 2604 	push	ar7
      000B11 C0 06            [24] 2605 	push	ar6
      000B13 74r1C            [12] 2606 	mov	a,#___str_54
      000B15 C0 E0            [24] 2607 	push	acc
      000B17 74s08            [12] 2608 	mov	a,#(___str_54 >> 8)
      000B19 C0 E0            [24] 2609 	push	acc
      000B1B 74 80            [12] 2610 	mov	a,#0x80
      000B1D C0 E0            [24] 2611 	push	acc
      000B1F 12r00r00         [24] 2612 	lcall	_printf
      000B22 15 81            [12] 2613 	dec	sp
      000B24 15 81            [12] 2614 	dec	sp
      000B26 15 81            [12] 2615 	dec	sp
      000B28 D0 06            [24] 2616 	pop	ar6
      000B2A D0 07            [24] 2617 	pop	ar7
                                   2618 ;	program.c:498: program_stats.allocated_heap = 2 * buff_size;
      000B2C EE               [12] 2619 	mov	a,r6
      000B2D 2E               [12] 2620 	add	a,r6
      000B2E FC               [12] 2621 	mov	r4,a
      000B2F EF               [12] 2622 	mov	a,r7
      000B30 33               [12] 2623 	rlc	a
      000B31 FD               [12] 2624 	mov	r5,a
      000B32 90r00r02         [24] 2625 	mov	dptr,#(_program_stats + 0x0002)
      000B35 EC               [12] 2626 	mov	a,r4
      000B36 F0               [24] 2627 	movx	@dptr,a
      000B37 ED               [12] 2628 	mov	a,r5
      000B38 A3               [24] 2629 	inc	dptr
      000B39 F0               [24] 2630 	movx	@dptr,a
                                   2631 ;	program.c:499: program_stats.total_heap_size = 4996;
      000B3A 90r00r00         [24] 2632 	mov	dptr,#_program_stats
      000B3D 74 84            [12] 2633 	mov	a,#0x84
      000B3F F0               [24] 2634 	movx	@dptr,a
      000B40 74 13            [12] 2635 	mov	a,#0x13
      000B42 A3               [24] 2636 	inc	dptr
      000B43 F0               [24] 2637 	movx	@dptr,a
                                   2638 ;	program.c:500: program_stats.total_buffers = 2;
      000B44 90r00r08         [24] 2639 	mov	dptr,#(_program_stats + 0x0008)
      000B47 74 02            [12] 2640 	mov	a,#0x02
      000B49 F0               [24] 2641 	movx	@dptr,a
      000B4A E4               [12] 2642 	clr	a
      000B4B A3               [24] 2643 	inc	dptr
      000B4C F0               [24] 2644 	movx	@dptr,a
                                   2645 ;	program.c:502: buff.buff_size = buff_size;
      000B4D 90r01r4A         [24] 2646 	mov	dptr,#(_create_initial_buffers_buff_65538_91 + 0x0008)
      000B50 EE               [12] 2647 	mov	a,r6
      000B51 F0               [24] 2648 	movx	@dptr,a
      000B52 EF               [12] 2649 	mov	a,r7
      000B53 A3               [24] 2650 	inc	dptr
      000B54 F0               [24] 2651 	movx	@dptr,a
                                   2652 ;	program.c:503: buff1.buff_size = buff_size;
      000B55 90r01r56         [24] 2653 	mov	dptr,#(_create_initial_buffers_buff1_65538_91 + 0x0008)
      000B58 EE               [12] 2654 	mov	a,r6
      000B59 F0               [24] 2655 	movx	@dptr,a
      000B5A EF               [12] 2656 	mov	a,r7
      000B5B A3               [24] 2657 	inc	dptr
      000B5C F0               [24] 2658 	movx	@dptr,a
                                   2659 ;	program.c:504: buff.buffer_num = 0;
      000B5D 90r01r42         [24] 2660 	mov	dptr,#_create_initial_buffers_buff_65538_91
      000B60 E4               [12] 2661 	clr	a
      000B61 F0               [24] 2662 	movx	@dptr,a
      000B62 A3               [24] 2663 	inc	dptr
      000B63 F0               [24] 2664 	movx	@dptr,a
                                   2665 ;	program.c:505: buff1.buffer_num = 1;
      000B64 90r01r4E         [24] 2666 	mov	dptr,#_create_initial_buffers_buff1_65538_91
      000B67 04               [12] 2667 	inc	a
      000B68 F0               [24] 2668 	movx	@dptr,a
      000B69 E4               [12] 2669 	clr	a
      000B6A A3               [24] 2670 	inc	dptr
      000B6B F0               [24] 2671 	movx	@dptr,a
                                   2672 ;	program.c:506: buff1.buffer_end = buff1.buffer_start + buff_size;
      000B6C 90r01r50         [24] 2673 	mov	dptr,#(_create_initial_buffers_buff1_65538_91 + 0x0002)
      000B6F E0               [24] 2674 	movx	a,@dptr
      000B70 FB               [12] 2675 	mov	r3,a
      000B71 A3               [24] 2676 	inc	dptr
      000B72 E0               [24] 2677 	movx	a,@dptr
      000B73 FC               [12] 2678 	mov	r4,a
      000B74 A3               [24] 2679 	inc	dptr
      000B75 E0               [24] 2680 	movx	a,@dptr
      000B76 FD               [12] 2681 	mov	r5,a
      000B77 EE               [12] 2682 	mov	a,r6
      000B78 2B               [12] 2683 	add	a,r3
      000B79 FB               [12] 2684 	mov	r3,a
      000B7A EF               [12] 2685 	mov	a,r7
      000B7B 3C               [12] 2686 	addc	a,r4
      000B7C FC               [12] 2687 	mov	r4,a
      000B7D 90r01r53         [24] 2688 	mov	dptr,#(_create_initial_buffers_buff1_65538_91 + 0x0005)
      000B80 EB               [12] 2689 	mov	a,r3
      000B81 F0               [24] 2690 	movx	@dptr,a
      000B82 EC               [12] 2691 	mov	a,r4
      000B83 A3               [24] 2692 	inc	dptr
      000B84 F0               [24] 2693 	movx	@dptr,a
      000B85 ED               [12] 2694 	mov	a,r5
      000B86 A3               [24] 2695 	inc	dptr
      000B87 F0               [24] 2696 	movx	@dptr,a
                                   2697 ;	program.c:507: buff.buffer_end = buff.buffer_start + buff_size;
      000B88 90r01r44         [24] 2698 	mov	dptr,#(_create_initial_buffers_buff_65538_91 + 0x0002)
      000B8B E0               [24] 2699 	movx	a,@dptr
      000B8C FB               [12] 2700 	mov	r3,a
      000B8D A3               [24] 2701 	inc	dptr
      000B8E E0               [24] 2702 	movx	a,@dptr
      000B8F FC               [12] 2703 	mov	r4,a
      000B90 A3               [24] 2704 	inc	dptr
      000B91 E0               [24] 2705 	movx	a,@dptr
      000B92 FD               [12] 2706 	mov	r5,a
      000B93 EE               [12] 2707 	mov	a,r6
      000B94 2B               [12] 2708 	add	a,r3
      000B95 FE               [12] 2709 	mov	r6,a
      000B96 EF               [12] 2710 	mov	a,r7
      000B97 3C               [12] 2711 	addc	a,r4
      000B98 FF               [12] 2712 	mov	r7,a
      000B99 8D 02            [24] 2713 	mov	ar2,r5
      000B9B 90r01r47         [24] 2714 	mov	dptr,#(_create_initial_buffers_buff_65538_91 + 0x0005)
      000B9E EE               [12] 2715 	mov	a,r6
      000B9F F0               [24] 2716 	movx	@dptr,a
      000BA0 EF               [12] 2717 	mov	a,r7
      000BA1 A3               [24] 2718 	inc	dptr
      000BA2 F0               [24] 2719 	movx	@dptr,a
      000BA3 EA               [12] 2720 	mov	a,r2
      000BA4 A3               [24] 2721 	inc	dptr
      000BA5 F0               [24] 2722 	movx	@dptr,a
                                   2723 ;	program.c:508: buff.num_char = 0;
      000BA6 90r01r4C         [24] 2724 	mov	dptr,#(_create_initial_buffers_buff_65538_91 + 0x000a)
      000BA9 E4               [12] 2725 	clr	a
      000BAA F0               [24] 2726 	movx	@dptr,a
      000BAB A3               [24] 2727 	inc	dptr
      000BAC F0               [24] 2728 	movx	@dptr,a
                                   2729 ;	program.c:509: buff1.num_char = 0;
      000BAD 90r01r58         [24] 2730 	mov	dptr,#(_create_initial_buffers_buff1_65538_91 + 0x000a)
      000BB0 F0               [24] 2731 	movx	@dptr,a
      000BB1 A3               [24] 2732 	inc	dptr
      000BB2 F0               [24] 2733 	movx	@dptr,a
                                   2734 ;	program.c:511: buffers_array[0] = buff;
      000BB3 90r00r00         [24] 2735 	mov	dptr,#___memcpy_PARM_2
      000BB6 74r42            [12] 2736 	mov	a,#_create_initial_buffers_buff_65538_91
      000BB8 F0               [24] 2737 	movx	@dptr,a
      000BB9 74s01            [12] 2738 	mov	a,#(_create_initial_buffers_buff_65538_91 >> 8)
      000BBB A3               [24] 2739 	inc	dptr
      000BBC F0               [24] 2740 	movx	@dptr,a
      000BBD E4               [12] 2741 	clr	a
      000BBE A3               [24] 2742 	inc	dptr
      000BBF F0               [24] 2743 	movx	@dptr,a
      000BC0 90r00r00         [24] 2744 	mov	dptr,#___memcpy_PARM_3
      000BC3 74 0C            [12] 2745 	mov	a,#0x0c
      000BC5 F0               [24] 2746 	movx	@dptr,a
      000BC6 E4               [12] 2747 	clr	a
      000BC7 A3               [24] 2748 	inc	dptr
      000BC8 F0               [24] 2749 	movx	@dptr,a
      000BC9 90r00r0A         [24] 2750 	mov	dptr,#_buffers_array
      000BCC 75 F0 00         [24] 2751 	mov	b,#0x00
      000BCF 12r00r00         [24] 2752 	lcall	___memcpy
                                   2753 ;	program.c:512: buffers_array[1] = buff1;
      000BD2 90r00r00         [24] 2754 	mov	dptr,#___memcpy_PARM_2
      000BD5 74r4E            [12] 2755 	mov	a,#_create_initial_buffers_buff1_65538_91
      000BD7 F0               [24] 2756 	movx	@dptr,a
      000BD8 74s01            [12] 2757 	mov	a,#(_create_initial_buffers_buff1_65538_91 >> 8)
      000BDA A3               [24] 2758 	inc	dptr
      000BDB F0               [24] 2759 	movx	@dptr,a
      000BDC E4               [12] 2760 	clr	a
      000BDD A3               [24] 2761 	inc	dptr
      000BDE F0               [24] 2762 	movx	@dptr,a
      000BDF 90r00r00         [24] 2763 	mov	dptr,#___memcpy_PARM_3
      000BE2 74 0C            [12] 2764 	mov	a,#0x0c
      000BE4 F0               [24] 2765 	movx	@dptr,a
      000BE5 E4               [12] 2766 	clr	a
      000BE6 A3               [24] 2767 	inc	dptr
      000BE7 F0               [24] 2768 	movx	@dptr,a
      000BE8 90r00r16         [24] 2769 	mov	dptr,#(_buffers_array + 0x000c)
      000BEB 75 F0 00         [24] 2770 	mov	b,#0x00
                                   2771 ;	program.c:516: goto get_buff;
                                   2772 ;	program.c:517: }
      000BEE 02r00r00         [24] 2773 	ljmp	___memcpy
                                   2774 ;------------------------------------------------------------
                                   2775 ;Allocation info for local variables in function 'enter_chars'
                                   2776 ;------------------------------------------------------------
                                   2777 ;rec                       Allocated with name '_enter_chars_rec_65537_96'
                                   2778 ;------------------------------------------------------------
                                   2779 ;	program.c:525: void enter_chars()
                                   2780 ;	-----------------------------------------
                                   2781 ;	 function enter_chars
                                   2782 ;	-----------------------------------------
      000BF1                       2783 _enter_chars:
                                   2784 ;	program.c:527: DEBUGPORT(0x08);
      000BF1 75 82 08         [24] 2785 	mov	dpl,#0x08
      000BF4 12r13r65         [24] 2786 	lcall	_dataout
                                   2787 ;	program.c:528: print_heap_menu();
      000BF7 12r07rEB         [24] 2788 	lcall	_print_heap_menu
                                   2789 ;	program.c:530: while (1)
      000BFA                       2790 00126$:
                                   2791 ;	program.c:532: rec = getchar();
      000BFA 12r13r29         [24] 2792 	lcall	_getchar
      000BFD AE 82            [24] 2793 	mov	r6,dpl
      000BFF AF 83            [24] 2794 	mov	r7,dph
                                   2795 ;	program.c:533: if (rec > 0x60 && rec < 0x7B)
      000C01 C3               [12] 2796 	clr	c
      000C02 74 60            [12] 2797 	mov	a,#0x60
      000C04 9E               [12] 2798 	subb	a,r6
      000C05 74 80            [12] 2799 	mov	a,#(0x00 ^ 0x80)
      000C07 8F F0            [24] 2800 	mov	b,r7
      000C09 63 F0 80         [24] 2801 	xrl	b,#0x80
      000C0C 95 F0            [12] 2802 	subb	a,b
      000C0E 40 03            [24] 2803 	jc	00170$
      000C10 02r0Cr9F         [24] 2804 	ljmp	00122$
      000C13                       2805 00170$:
      000C13 C3               [12] 2806 	clr	c
      000C14 EE               [12] 2807 	mov	a,r6
      000C15 94 7B            [12] 2808 	subb	a,#0x7b
      000C17 EF               [12] 2809 	mov	a,r7
      000C18 64 80            [12] 2810 	xrl	a,#0x80
      000C1A 94 80            [12] 2811 	subb	a,#0x80
      000C1C 40 03            [24] 2812 	jc	00171$
      000C1E 02r0Cr9F         [24] 2813 	ljmp	00122$
      000C21                       2814 00171$:
                                   2815 ;	program.c:537: if (buffers_array[0].num_char < buffers_array[0].buff_size)
      000C21 90r00r14         [24] 2816 	mov	dptr,#(_buffers_array + 0x000a)
      000C24 E0               [24] 2817 	movx	a,@dptr
      000C25 FC               [12] 2818 	mov	r4,a
      000C26 A3               [24] 2819 	inc	dptr
      000C27 E0               [24] 2820 	movx	a,@dptr
      000C28 FD               [12] 2821 	mov	r5,a
      000C29 90r00r12         [24] 2822 	mov	dptr,#(_buffers_array + 0x0008)
      000C2C E0               [24] 2823 	movx	a,@dptr
      000C2D FA               [12] 2824 	mov	r2,a
      000C2E A3               [24] 2825 	inc	dptr
      000C2F E0               [24] 2826 	movx	a,@dptr
      000C30 FB               [12] 2827 	mov	r3,a
      000C31 C3               [12] 2828 	clr	c
      000C32 EC               [12] 2829 	mov	a,r4
      000C33 9A               [12] 2830 	subb	a,r2
      000C34 ED               [12] 2831 	mov	a,r5
      000C35 64 80            [12] 2832 	xrl	a,#0x80
      000C37 8B F0            [24] 2833 	mov	b,r3
      000C39 63 F0 80         [24] 2834 	xrl	b,#0x80
      000C3C 95 F0            [12] 2835 	subb	a,b
      000C3E 50 32            [24] 2836 	jnc	00102$
                                   2837 ;	program.c:539: *(buffers_array[0].buffer_start + buffers_array[0].num_char) = rec;
      000C40 90r00r0C         [24] 2838 	mov	dptr,#(_buffers_array + 0x0002)
      000C43 E0               [24] 2839 	movx	a,@dptr
      000C44 F9               [12] 2840 	mov	r1,a
      000C45 A3               [24] 2841 	inc	dptr
      000C46 E0               [24] 2842 	movx	a,@dptr
      000C47 FA               [12] 2843 	mov	r2,a
      000C48 A3               [24] 2844 	inc	dptr
      000C49 E0               [24] 2845 	movx	a,@dptr
      000C4A FB               [12] 2846 	mov	r3,a
      000C4B EC               [12] 2847 	mov	a,r4
      000C4C 29               [12] 2848 	add	a,r1
      000C4D F9               [12] 2849 	mov	r1,a
      000C4E ED               [12] 2850 	mov	a,r5
      000C4F 3A               [12] 2851 	addc	a,r2
      000C50 FA               [12] 2852 	mov	r2,a
      000C51 8E 05            [24] 2853 	mov	ar5,r6
      000C53 89 82            [24] 2854 	mov	dpl,r1
      000C55 8A 83            [24] 2855 	mov	dph,r2
      000C57 8B F0            [24] 2856 	mov	b,r3
      000C59 ED               [12] 2857 	mov	a,r5
      000C5A 12r00r00         [24] 2858 	lcall	__gptrput
                                   2859 ;	program.c:540: buffers_array[0].num_char += 1;
      000C5D 90r00r14         [24] 2860 	mov	dptr,#(_buffers_array + 0x000a)
      000C60 E0               [24] 2861 	movx	a,@dptr
      000C61 FC               [12] 2862 	mov	r4,a
      000C62 A3               [24] 2863 	inc	dptr
      000C63 E0               [24] 2864 	movx	a,@dptr
      000C64 FD               [12] 2865 	mov	r5,a
      000C65 0C               [12] 2866 	inc	r4
      000C66 BC 00 01         [24] 2867 	cjne	r4,#0x00,00173$
      000C69 0D               [12] 2868 	inc	r5
      000C6A                       2869 00173$:
      000C6A 90r00r14         [24] 2870 	mov	dptr,#(_buffers_array + 0x000a)
      000C6D EC               [12] 2871 	mov	a,r4
      000C6E F0               [24] 2872 	movx	@dptr,a
      000C6F ED               [12] 2873 	mov	a,r5
      000C70 A3               [24] 2874 	inc	dptr
      000C71 F0               [24] 2875 	movx	@dptr,a
      000C72                       2876 00102$:
                                   2877 ;	program.c:542: program_stats.all_char_count += 1;
      000C72 90r00r04         [24] 2878 	mov	dptr,#(_program_stats + 0x0004)
      000C75 E0               [24] 2879 	movx	a,@dptr
      000C76 FC               [12] 2880 	mov	r4,a
      000C77 A3               [24] 2881 	inc	dptr
      000C78 E0               [24] 2882 	movx	a,@dptr
      000C79 FD               [12] 2883 	mov	r5,a
      000C7A 0C               [12] 2884 	inc	r4
      000C7B BC 00 01         [24] 2885 	cjne	r4,#0x00,00174$
      000C7E 0D               [12] 2886 	inc	r5
      000C7F                       2887 00174$:
      000C7F 90r00r04         [24] 2888 	mov	dptr,#(_program_stats + 0x0004)
      000C82 EC               [12] 2889 	mov	a,r4
      000C83 F0               [24] 2890 	movx	@dptr,a
      000C84 ED               [12] 2891 	mov	a,r5
      000C85 A3               [24] 2892 	inc	dptr
      000C86 F0               [24] 2893 	movx	@dptr,a
                                   2894 ;	program.c:543: program_stats.storage_char_count += 1;
      000C87 90r00r06         [24] 2895 	mov	dptr,#(_program_stats + 0x0006)
      000C8A E0               [24] 2896 	movx	a,@dptr
      000C8B FC               [12] 2897 	mov	r4,a
      000C8C A3               [24] 2898 	inc	dptr
      000C8D E0               [24] 2899 	movx	a,@dptr
      000C8E FD               [12] 2900 	mov	r5,a
      000C8F 0C               [12] 2901 	inc	r4
      000C90 BC 00 01         [24] 2902 	cjne	r4,#0x00,00175$
      000C93 0D               [12] 2903 	inc	r5
      000C94                       2904 00175$:
      000C94 90r00r06         [24] 2905 	mov	dptr,#(_program_stats + 0x0006)
      000C97 EC               [12] 2906 	mov	a,r4
      000C98 F0               [24] 2907 	movx	@dptr,a
      000C99 ED               [12] 2908 	mov	a,r5
      000C9A A3               [24] 2909 	inc	dptr
      000C9B F0               [24] 2910 	movx	@dptr,a
      000C9C 02r0BrFA         [24] 2911 	ljmp	00126$
      000C9F                       2912 00122$:
                                   2913 ;	program.c:545: else if (rec == 0x3F)
      000C9F BE 3F 1F         [24] 2914 	cjne	r6,#0x3f,00119$
      000CA2 BF 00 1C         [24] 2915 	cjne	r7,#0x00,00119$
                                   2916 ;	program.c:548: print_heap_stats();
      000CA5 12r0Fr84         [24] 2917 	lcall	_print_heap_stats
                                   2918 ;	program.c:549: print_all_buffers();
      000CA8 12r10r45         [24] 2919 	lcall	_print_all_buffers
                                   2920 ;	program.c:550: dump_buff_zero_ascii();
      000CAB 12r0Dr21         [24] 2921 	lcall	_dump_buff_zero_ascii
                                   2922 ;	program.c:551: program_stats.all_char_count = 0;
      000CAE 90r00r04         [24] 2923 	mov	dptr,#(_program_stats + 0x0004)
      000CB1 E4               [12] 2924 	clr	a
      000CB2 F0               [24] 2925 	movx	@dptr,a
      000CB3 A3               [24] 2926 	inc	dptr
      000CB4 F0               [24] 2927 	movx	@dptr,a
                                   2928 ;	program.c:552: program_stats.storage_char_count = 0;
      000CB5 90r00r06         [24] 2929 	mov	dptr,#(_program_stats + 0x0006)
      000CB8 F0               [24] 2930 	movx	@dptr,a
      000CB9 A3               [24] 2931 	inc	dptr
      000CBA F0               [24] 2932 	movx	@dptr,a
                                   2933 ;	program.c:553: print_heap_menu();
      000CBB 12r07rEB         [24] 2934 	lcall	_print_heap_menu
      000CBE 02r0BrFA         [24] 2935 	ljmp	00126$
      000CC1                       2936 00119$:
                                   2937 ;	program.c:555: else if (rec == 0x3D)
      000CC1 BE 3D 0C         [24] 2938 	cjne	r6,#0x3d,00116$
      000CC4 BF 00 09         [24] 2939 	cjne	r7,#0x00,00116$
                                   2940 ;	program.c:558: dump_buff_zero_hex();
      000CC7 12r0Er37         [24] 2941 	lcall	_dump_buff_zero_hex
                                   2942 ;	program.c:559: print_heap_menu();
      000CCA 12r07rEB         [24] 2943 	lcall	_print_heap_menu
      000CCD 02r0BrFA         [24] 2944 	ljmp	00126$
      000CD0                       2945 00116$:
                                   2946 ;	program.c:561: else if (rec == 0x40)
      000CD0 BE 40 0C         [24] 2947 	cjne	r6,#0x40,00113$
      000CD3 BF 00 09         [24] 2948 	cjne	r7,#0x00,00113$
                                   2949 ;	program.c:564: at_clear_all_buffers();
      000CD6 12r04r9C         [24] 2950 	lcall	_at_clear_all_buffers
                                   2951 ;	program.c:565: print_heap_menu();
      000CD9 12r07rEB         [24] 2952 	lcall	_print_heap_menu
      000CDC 02r0BrFA         [24] 2953 	ljmp	00126$
      000CDF                       2954 00113$:
                                   2955 ;	program.c:567: else if (rec == 0x2B)
      000CDF BE 2B 0C         [24] 2956 	cjne	r6,#0x2b,00110$
      000CE2 BF 00 09         [24] 2957 	cjne	r7,#0x00,00110$
                                   2958 ;	program.c:570: create_new_buffer();
      000CE5 12r08r9A         [24] 2959 	lcall	_create_new_buffer
                                   2960 ;	program.c:571: print_heap_menu();
      000CE8 12r07rEB         [24] 2961 	lcall	_print_heap_menu
      000CEB 02r0BrFA         [24] 2962 	ljmp	00126$
      000CEE                       2963 00110$:
                                   2964 ;	program.c:573: else if (rec == 0x2D)
      000CEE BE 2D 0C         [24] 2965 	cjne	r6,#0x2d,00107$
      000CF1 BF 00 09         [24] 2966 	cjne	r7,#0x00,00107$
                                   2967 ;	program.c:576: delete_buffer();
      000CF4 12r05r36         [24] 2968 	lcall	_delete_buffer
                                   2969 ;	program.c:577: print_heap_menu();
      000CF7 12r07rEB         [24] 2970 	lcall	_print_heap_menu
      000CFA 02r0BrFA         [24] 2971 	ljmp	00126$
      000CFD                       2972 00107$:
                                   2973 ;	program.c:579: else if (rec == 0x4D)
      000CFD BE 4D 09         [24] 2974 	cjne	r6,#0x4d,00104$
      000D00 BF 00 06         [24] 2975 	cjne	r7,#0x00,00104$
                                   2976 ;	program.c:581: main_menu();
      000D03 12r03r6E         [24] 2977 	lcall	_main_menu
      000D06 02r0BrFA         [24] 2978 	ljmp	00126$
      000D09                       2979 00104$:
                                   2980 ;	program.c:585: program_stats.all_char_count += 1;
      000D09 90r00r04         [24] 2981 	mov	dptr,#(_program_stats + 0x0004)
      000D0C E0               [24] 2982 	movx	a,@dptr
      000D0D FE               [12] 2983 	mov	r6,a
      000D0E A3               [24] 2984 	inc	dptr
      000D0F E0               [24] 2985 	movx	a,@dptr
      000D10 FF               [12] 2986 	mov	r7,a
      000D11 0E               [12] 2987 	inc	r6
      000D12 BE 00 01         [24] 2988 	cjne	r6,#0x00,00188$
      000D15 0F               [12] 2989 	inc	r7
      000D16                       2990 00188$:
      000D16 90r00r04         [24] 2991 	mov	dptr,#(_program_stats + 0x0004)
      000D19 EE               [12] 2992 	mov	a,r6
      000D1A F0               [24] 2993 	movx	@dptr,a
      000D1B EF               [12] 2994 	mov	a,r7
      000D1C A3               [24] 2995 	inc	dptr
      000D1D F0               [24] 2996 	movx	@dptr,a
                                   2997 ;	program.c:588: }
      000D1E 02r0BrFA         [24] 2998 	ljmp	00126$
                                   2999 ;------------------------------------------------------------
                                   3000 ;Allocation info for local variables in function 'dump_buff_zero_ascii'
                                   3001 ;------------------------------------------------------------
                                   3002 ;j                         Allocated with name '_dump_buff_zero_ascii_j_65537_108'
                                   3003 ;i                         Allocated with name '_dump_buff_zero_ascii_i_196609_110'
                                   3004 ;------------------------------------------------------------
                                   3005 ;	program.c:596: void dump_buff_zero_ascii()
                                   3006 ;	-----------------------------------------
                                   3007 ;	 function dump_buff_zero_ascii
                                   3008 ;	-----------------------------------------
      000D21                       3009 _dump_buff_zero_ascii:
                                   3010 ;	program.c:598: DEBUGPORT(0x09);
      000D21 75 82 09         [24] 3011 	mov	dpl,#0x09
      000D24 12r13r65         [24] 3012 	lcall	_dataout
                                   3013 ;	program.c:599: int j = 64;
      000D27 90r01r5A         [24] 3014 	mov	dptr,#_dump_buff_zero_ascii_j_65537_108
      000D2A 74 40            [12] 3015 	mov	a,#0x40
      000D2C F0               [24] 3016 	movx	@dptr,a
      000D2D E4               [12] 3017 	clr	a
      000D2E A3               [24] 3018 	inc	dptr
      000D2F F0               [24] 3019 	movx	@dptr,a
                                   3020 ;	program.c:600: if (buffers_array[0].num_char > 0)
      000D30 90r00r14         [24] 3021 	mov	dptr,#(_buffers_array + 0x000a)
      000D33 E0               [24] 3022 	movx	a,@dptr
      000D34 FE               [12] 3023 	mov	r6,a
      000D35 A3               [24] 3024 	inc	dptr
      000D36 E0               [24] 3025 	movx	a,@dptr
      000D37 FF               [12] 3026 	mov	r7,a
      000D38 C3               [12] 3027 	clr	c
      000D39 E4               [12] 3028 	clr	a
      000D3A 9E               [12] 3029 	subb	a,r6
      000D3B 74 80            [12] 3030 	mov	a,#(0x00 ^ 0x80)
      000D3D 8F F0            [24] 3031 	mov	b,r7
      000D3F 63 F0 80         [24] 3032 	xrl	b,#0x80
      000D42 95 F0            [12] 3033 	subb	a,b
      000D44 40 03            [24] 3034 	jc	00135$
      000D46 02r0Er21         [24] 3035 	ljmp	00107$
      000D49                       3036 00135$:
                                   3037 ;	program.c:602: printf("\n\n\r***********Buffer-0-Contents*********** \n\r");
      000D49 74r4B            [12] 3038 	mov	a,#___str_55
      000D4B C0 E0            [24] 3039 	push	acc
      000D4D 74s08            [12] 3040 	mov	a,#(___str_55 >> 8)
      000D4F C0 E0            [24] 3041 	push	acc
      000D51 74 80            [12] 3042 	mov	a,#0x80
      000D53 C0 E0            [24] 3043 	push	acc
      000D55 12r00r00         [24] 3044 	lcall	_printf
      000D58 15 81            [12] 3045 	dec	sp
      000D5A 15 81            [12] 3046 	dec	sp
      000D5C 15 81            [12] 3047 	dec	sp
                                   3048 ;	program.c:603: for (int i = 0; i < buffers_array[0].num_char; i++)
      000D5E 7E 00            [12] 3049 	mov	r6,#0x00
      000D60 7F 00            [12] 3050 	mov	r7,#0x00
      000D62                       3051 00110$:
      000D62 90r00r14         [24] 3052 	mov	dptr,#(_buffers_array + 0x000a)
      000D65 E0               [24] 3053 	movx	a,@dptr
      000D66 FC               [12] 3054 	mov	r4,a
      000D67 A3               [24] 3055 	inc	dptr
      000D68 E0               [24] 3056 	movx	a,@dptr
      000D69 FD               [12] 3057 	mov	r5,a
      000D6A C3               [12] 3058 	clr	c
      000D6B EE               [12] 3059 	mov	a,r6
      000D6C 9C               [12] 3060 	subb	a,r4
      000D6D EF               [12] 3061 	mov	a,r7
      000D6E 64 80            [12] 3062 	xrl	a,#0x80
      000D70 8D F0            [24] 3063 	mov	b,r5
      000D72 63 F0 80         [24] 3064 	xrl	b,#0x80
      000D75 95 F0            [12] 3065 	subb	a,b
      000D77 40 03            [24] 3066 	jc	00136$
      000D79 02r0Er04         [24] 3067 	ljmp	00105$
      000D7C                       3068 00136$:
                                   3069 ;	program.c:605: if (j == 64)
      000D7C 90r01r5A         [24] 3070 	mov	dptr,#_dump_buff_zero_ascii_j_65537_108
      000D7F E0               [24] 3071 	movx	a,@dptr
      000D80 FC               [12] 3072 	mov	r4,a
      000D81 A3               [24] 3073 	inc	dptr
      000D82 E0               [24] 3074 	movx	a,@dptr
      000D83 FD               [12] 3075 	mov	r5,a
      000D84 BC 40 20         [24] 3076 	cjne	r4,#0x40,00102$
      000D87 BD 00 1D         [24] 3077 	cjne	r5,#0x00,00102$
                                   3078 ;	program.c:607: printf("\n\r");
      000D8A C0 07            [24] 3079 	push	ar7
      000D8C C0 06            [24] 3080 	push	ar6
      000D8E 74r79            [12] 3081 	mov	a,#___str_56
      000D90 C0 E0            [24] 3082 	push	acc
      000D92 74s08            [12] 3083 	mov	a,#(___str_56 >> 8)
      000D94 C0 E0            [24] 3084 	push	acc
      000D96 74 80            [12] 3085 	mov	a,#0x80
      000D98 C0 E0            [24] 3086 	push	acc
      000D9A 12r00r00         [24] 3087 	lcall	_printf
      000D9D 15 81            [12] 3088 	dec	sp
      000D9F 15 81            [12] 3089 	dec	sp
      000DA1 15 81            [12] 3090 	dec	sp
      000DA3 D0 06            [24] 3091 	pop	ar6
      000DA5 D0 07            [24] 3092 	pop	ar7
      000DA7                       3093 00102$:
                                   3094 ;	program.c:609: putchar(*(buffers_array[0].buffer_start + i));
      000DA7 90r00r0C         [24] 3095 	mov	dptr,#(_buffers_array + 0x0002)
      000DAA E0               [24] 3096 	movx	a,@dptr
      000DAB FB               [12] 3097 	mov	r3,a
      000DAC A3               [24] 3098 	inc	dptr
      000DAD E0               [24] 3099 	movx	a,@dptr
      000DAE FC               [12] 3100 	mov	r4,a
      000DAF A3               [24] 3101 	inc	dptr
      000DB0 E0               [24] 3102 	movx	a,@dptr
      000DB1 FD               [12] 3103 	mov	r5,a
      000DB2 EE               [12] 3104 	mov	a,r6
      000DB3 2B               [12] 3105 	add	a,r3
      000DB4 FB               [12] 3106 	mov	r3,a
      000DB5 EF               [12] 3107 	mov	a,r7
      000DB6 3C               [12] 3108 	addc	a,r4
      000DB7 FC               [12] 3109 	mov	r4,a
      000DB8 8B 82            [24] 3110 	mov	dpl,r3
      000DBA 8C 83            [24] 3111 	mov	dph,r4
      000DBC 8D F0            [24] 3112 	mov	b,r5
      000DBE 12r00r00         [24] 3113 	lcall	__gptrget
      000DC1 FB               [12] 3114 	mov	r3,a
      000DC2 7D 00            [12] 3115 	mov	r5,#0x00
      000DC4 8B 82            [24] 3116 	mov	dpl,r3
      000DC6 8D 83            [24] 3117 	mov	dph,r5
      000DC8 C0 07            [24] 3118 	push	ar7
      000DCA C0 06            [24] 3119 	push	ar6
      000DCC 12r13r0A         [24] 3120 	lcall	_putchar
      000DCF D0 06            [24] 3121 	pop	ar6
      000DD1 D0 07            [24] 3122 	pop	ar7
                                   3123 ;	program.c:610: j--;
      000DD3 90r01r5A         [24] 3124 	mov	dptr,#_dump_buff_zero_ascii_j_65537_108
      000DD6 E0               [24] 3125 	movx	a,@dptr
      000DD7 24 FF            [12] 3126 	add	a,#0xff
      000DD9 FC               [12] 3127 	mov	r4,a
      000DDA A3               [24] 3128 	inc	dptr
      000DDB E0               [24] 3129 	movx	a,@dptr
      000DDC 34 FF            [12] 3130 	addc	a,#0xff
      000DDE FD               [12] 3131 	mov	r5,a
      000DDF 90r01r5A         [24] 3132 	mov	dptr,#_dump_buff_zero_ascii_j_65537_108
      000DE2 EC               [12] 3133 	mov	a,r4
      000DE3 F0               [24] 3134 	movx	@dptr,a
      000DE4 ED               [12] 3135 	mov	a,r5
      000DE5 A3               [24] 3136 	inc	dptr
      000DE6 F0               [24] 3137 	movx	@dptr,a
                                   3138 ;	program.c:611: if (j == 0)
      000DE7 90r01r5A         [24] 3139 	mov	dptr,#_dump_buff_zero_ascii_j_65537_108
      000DEA E0               [24] 3140 	movx	a,@dptr
      000DEB F5 F0            [12] 3141 	mov	b,a
      000DED A3               [24] 3142 	inc	dptr
      000DEE E0               [24] 3143 	movx	a,@dptr
      000DEF 45 F0            [12] 3144 	orl	a,b
      000DF1 70 09            [24] 3145 	jnz	00111$
                                   3146 ;	program.c:612: j = 64;
      000DF3 90r01r5A         [24] 3147 	mov	dptr,#_dump_buff_zero_ascii_j_65537_108
      000DF6 74 40            [12] 3148 	mov	a,#0x40
      000DF8 F0               [24] 3149 	movx	@dptr,a
      000DF9 E4               [12] 3150 	clr	a
      000DFA A3               [24] 3151 	inc	dptr
      000DFB F0               [24] 3152 	movx	@dptr,a
      000DFC                       3153 00111$:
                                   3154 ;	program.c:603: for (int i = 0; i < buffers_array[0].num_char; i++)
      000DFC 0E               [12] 3155 	inc	r6
      000DFD BE 00 01         [24] 3156 	cjne	r6,#0x00,00140$
      000E00 0F               [12] 3157 	inc	r7
      000E01                       3158 00140$:
      000E01 02r0Dr62         [24] 3159 	ljmp	00110$
      000E04                       3160 00105$:
                                   3161 ;	program.c:614: buffers_array[0].num_char = 0;
      000E04 90r00r14         [24] 3162 	mov	dptr,#(_buffers_array + 0x000a)
      000E07 E4               [12] 3163 	clr	a
      000E08 F0               [24] 3164 	movx	@dptr,a
      000E09 A3               [24] 3165 	inc	dptr
      000E0A F0               [24] 3166 	movx	@dptr,a
                                   3167 ;	program.c:615: printf("\n\n\r");
      000E0B 74r7C            [12] 3168 	mov	a,#___str_57
      000E0D C0 E0            [24] 3169 	push	acc
      000E0F 74s08            [12] 3170 	mov	a,#(___str_57 >> 8)
      000E11 C0 E0            [24] 3171 	push	acc
      000E13 74 80            [12] 3172 	mov	a,#0x80
      000E15 C0 E0            [24] 3173 	push	acc
      000E17 12r00r00         [24] 3174 	lcall	_printf
      000E1A 15 81            [12] 3175 	dec	sp
      000E1C 15 81            [12] 3176 	dec	sp
      000E1E 15 81            [12] 3177 	dec	sp
      000E20 22               [24] 3178 	ret
      000E21                       3179 00107$:
                                   3180 ;	program.c:619: printf("Buffer0 is Empty....\n\r");
      000E21 74r80            [12] 3181 	mov	a,#___str_58
      000E23 C0 E0            [24] 3182 	push	acc
      000E25 74s08            [12] 3183 	mov	a,#(___str_58 >> 8)
      000E27 C0 E0            [24] 3184 	push	acc
      000E29 74 80            [12] 3185 	mov	a,#0x80
      000E2B C0 E0            [24] 3186 	push	acc
      000E2D 12r00r00         [24] 3187 	lcall	_printf
      000E30 15 81            [12] 3188 	dec	sp
      000E32 15 81            [12] 3189 	dec	sp
      000E34 15 81            [12] 3190 	dec	sp
                                   3191 ;	program.c:621: }
      000E36 22               [24] 3192 	ret
                                   3193 ;------------------------------------------------------------
                                   3194 ;Allocation info for local variables in function 'dump_buff_zero_hex'
                                   3195 ;------------------------------------------------------------
                                   3196 ;j                         Allocated with name '_dump_buff_zero_hex_j_131073_116'
                                   3197 ;i                         Allocated with name '_dump_buff_zero_hex_i_196609_117'
                                   3198 ;------------------------------------------------------------
                                   3199 ;	program.c:628: void dump_buff_zero_hex()
                                   3200 ;	-----------------------------------------
                                   3201 ;	 function dump_buff_zero_hex
                                   3202 ;	-----------------------------------------
      000E37                       3203 _dump_buff_zero_hex:
                                   3204 ;	program.c:630: DEBUGPORT(0xA);
      000E37 75 82 0A         [24] 3205 	mov	dpl,#0x0a
      000E3A 12r13r65         [24] 3206 	lcall	_dataout
                                   3207 ;	program.c:631: if (buffers_array[0].num_char > 0)
      000E3D 90r00r14         [24] 3208 	mov	dptr,#(_buffers_array + 0x000a)
      000E40 E0               [24] 3209 	movx	a,@dptr
      000E41 FE               [12] 3210 	mov	r6,a
      000E42 A3               [24] 3211 	inc	dptr
      000E43 E0               [24] 3212 	movx	a,@dptr
      000E44 FF               [12] 3213 	mov	r7,a
      000E45 C3               [12] 3214 	clr	c
      000E46 E4               [12] 3215 	clr	a
      000E47 9E               [12] 3216 	subb	a,r6
      000E48 74 80            [12] 3217 	mov	a,#(0x00 ^ 0x80)
      000E4A 8F F0            [24] 3218 	mov	b,r7
      000E4C 63 F0 80         [24] 3219 	xrl	b,#0x80
      000E4F 95 F0            [12] 3220 	subb	a,b
      000E51 40 03            [24] 3221 	jc	00135$
      000E53 02r0Fr6E         [24] 3222 	ljmp	00107$
      000E56                       3223 00135$:
                                   3224 ;	program.c:633: printf("\n\r-------------------------HEXDUMP--------------------------------");
      000E56 74r97            [12] 3225 	mov	a,#___str_59
      000E58 C0 E0            [24] 3226 	push	acc
      000E5A 74s08            [12] 3227 	mov	a,#(___str_59 >> 8)
      000E5C C0 E0            [24] 3228 	push	acc
      000E5E 74 80            [12] 3229 	mov	a,#0x80
      000E60 C0 E0            [24] 3230 	push	acc
      000E62 12r00r00         [24] 3231 	lcall	_printf
      000E65 15 81            [12] 3232 	dec	sp
      000E67 15 81            [12] 3233 	dec	sp
      000E69 15 81            [12] 3234 	dec	sp
                                   3235 ;	program.c:634: printf("\n\r    ADDR: +0 +1 +2 +3 +4 +5 +6 +7 +8 +9 +A +B +C +D +E +F \n\r");
      000E6B 74rDA            [12] 3236 	mov	a,#___str_60
      000E6D C0 E0            [24] 3237 	push	acc
      000E6F 74s08            [12] 3238 	mov	a,#(___str_60 >> 8)
      000E71 C0 E0            [24] 3239 	push	acc
      000E73 74 80            [12] 3240 	mov	a,#0x80
      000E75 C0 E0            [24] 3241 	push	acc
      000E77 12r00r00         [24] 3242 	lcall	_printf
      000E7A 15 81            [12] 3243 	dec	sp
      000E7C 15 81            [12] 3244 	dec	sp
      000E7E 15 81            [12] 3245 	dec	sp
                                   3246 ;	program.c:635: int j = 16;
      000E80 90r01r5C         [24] 3247 	mov	dptr,#_dump_buff_zero_hex_j_131073_116
      000E83 74 10            [12] 3248 	mov	a,#0x10
      000E85 F0               [24] 3249 	movx	@dptr,a
      000E86 E4               [12] 3250 	clr	a
      000E87 A3               [24] 3251 	inc	dptr
      000E88 F0               [24] 3252 	movx	@dptr,a
                                   3253 ;	program.c:637: for (int i = 0; i < buffers_array[0].num_char; i++)
      000E89 7E 00            [12] 3254 	mov	r6,#0x00
      000E8B 7F 00            [12] 3255 	mov	r7,#0x00
      000E8D                       3256 00110$:
      000E8D 90r00r14         [24] 3257 	mov	dptr,#(_buffers_array + 0x000a)
      000E90 E0               [24] 3258 	movx	a,@dptr
      000E91 FC               [12] 3259 	mov	r4,a
      000E92 A3               [24] 3260 	inc	dptr
      000E93 E0               [24] 3261 	movx	a,@dptr
      000E94 FD               [12] 3262 	mov	r5,a
      000E95 C3               [12] 3263 	clr	c
      000E96 EE               [12] 3264 	mov	a,r6
      000E97 9C               [12] 3265 	subb	a,r4
      000E98 EF               [12] 3266 	mov	a,r7
      000E99 64 80            [12] 3267 	xrl	a,#0x80
      000E9B 8D F0            [24] 3268 	mov	b,r5
      000E9D 63 F0 80         [24] 3269 	xrl	b,#0x80
      000EA0 95 F0            [12] 3270 	subb	a,b
      000EA2 40 03            [24] 3271 	jc	00136$
      000EA4 02r0Fr58         [24] 3272 	ljmp	00105$
      000EA7                       3273 00136$:
                                   3274 ;	program.c:639: if (j == 16)
      000EA7 90r01r5C         [24] 3275 	mov	dptr,#_dump_buff_zero_hex_j_131073_116
      000EAA E0               [24] 3276 	movx	a,@dptr
      000EAB FC               [12] 3277 	mov	r4,a
      000EAC A3               [24] 3278 	inc	dptr
      000EAD E0               [24] 3279 	movx	a,@dptr
      000EAE FD               [12] 3280 	mov	r5,a
      000EAF BC 10 37         [24] 3281 	cjne	r4,#0x10,00102$
      000EB2 BD 00 34         [24] 3282 	cjne	r5,#0x00,00102$
                                   3283 ;	program.c:641: printf("\n\r%p: ", (buffers_array[0].buffer_start + i));
      000EB5 90r00r0C         [24] 3284 	mov	dptr,#(_buffers_array + 0x0002)
      000EB8 E0               [24] 3285 	movx	a,@dptr
      000EB9 FB               [12] 3286 	mov	r3,a
      000EBA A3               [24] 3287 	inc	dptr
      000EBB E0               [24] 3288 	movx	a,@dptr
      000EBC FC               [12] 3289 	mov	r4,a
      000EBD A3               [24] 3290 	inc	dptr
      000EBE E0               [24] 3291 	movx	a,@dptr
      000EBF FD               [12] 3292 	mov	r5,a
      000EC0 EE               [12] 3293 	mov	a,r6
      000EC1 2B               [12] 3294 	add	a,r3
      000EC2 FB               [12] 3295 	mov	r3,a
      000EC3 EF               [12] 3296 	mov	a,r7
      000EC4 3C               [12] 3297 	addc	a,r4
      000EC5 FC               [12] 3298 	mov	r4,a
      000EC6 C0 07            [24] 3299 	push	ar7
      000EC8 C0 06            [24] 3300 	push	ar6
      000ECA C0 03            [24] 3301 	push	ar3
      000ECC C0 04            [24] 3302 	push	ar4
      000ECE C0 05            [24] 3303 	push	ar5
      000ED0 74r19            [12] 3304 	mov	a,#___str_61
      000ED2 C0 E0            [24] 3305 	push	acc
      000ED4 74s09            [12] 3306 	mov	a,#(___str_61 >> 8)
      000ED6 C0 E0            [24] 3307 	push	acc
      000ED8 74 80            [12] 3308 	mov	a,#0x80
      000EDA C0 E0            [24] 3309 	push	acc
      000EDC 12r00r00         [24] 3310 	lcall	_printf
      000EDF E5 81            [12] 3311 	mov	a,sp
      000EE1 24 FA            [12] 3312 	add	a,#0xfa
      000EE3 F5 81            [12] 3313 	mov	sp,a
      000EE5 D0 06            [24] 3314 	pop	ar6
      000EE7 D0 07            [24] 3315 	pop	ar7
      000EE9                       3316 00102$:
                                   3317 ;	program.c:643: printf("%x ", *(buffers_array[0].buffer_start + i));
      000EE9 90r00r0C         [24] 3318 	mov	dptr,#(_buffers_array + 0x0002)
      000EEC E0               [24] 3319 	movx	a,@dptr
      000EED FB               [12] 3320 	mov	r3,a
      000EEE A3               [24] 3321 	inc	dptr
      000EEF E0               [24] 3322 	movx	a,@dptr
      000EF0 FC               [12] 3323 	mov	r4,a
      000EF1 A3               [24] 3324 	inc	dptr
      000EF2 E0               [24] 3325 	movx	a,@dptr
      000EF3 FD               [12] 3326 	mov	r5,a
      000EF4 EE               [12] 3327 	mov	a,r6
      000EF5 2B               [12] 3328 	add	a,r3
      000EF6 FB               [12] 3329 	mov	r3,a
      000EF7 EF               [12] 3330 	mov	a,r7
      000EF8 3C               [12] 3331 	addc	a,r4
      000EF9 FC               [12] 3332 	mov	r4,a
      000EFA 8B 82            [24] 3333 	mov	dpl,r3
      000EFC 8C 83            [24] 3334 	mov	dph,r4
      000EFE 8D F0            [24] 3335 	mov	b,r5
      000F00 12r00r00         [24] 3336 	lcall	__gptrget
      000F03 FB               [12] 3337 	mov	r3,a
      000F04 7D 00            [12] 3338 	mov	r5,#0x00
      000F06 C0 07            [24] 3339 	push	ar7
      000F08 C0 06            [24] 3340 	push	ar6
      000F0A C0 03            [24] 3341 	push	ar3
      000F0C C0 05            [24] 3342 	push	ar5
      000F0E 74r20            [12] 3343 	mov	a,#___str_62
      000F10 C0 E0            [24] 3344 	push	acc
      000F12 74s09            [12] 3345 	mov	a,#(___str_62 >> 8)
      000F14 C0 E0            [24] 3346 	push	acc
      000F16 74 80            [12] 3347 	mov	a,#0x80
      000F18 C0 E0            [24] 3348 	push	acc
      000F1A 12r00r00         [24] 3349 	lcall	_printf
      000F1D E5 81            [12] 3350 	mov	a,sp
      000F1F 24 FB            [12] 3351 	add	a,#0xfb
      000F21 F5 81            [12] 3352 	mov	sp,a
      000F23 D0 06            [24] 3353 	pop	ar6
      000F25 D0 07            [24] 3354 	pop	ar7
                                   3355 ;	program.c:644: j--;
      000F27 90r01r5C         [24] 3356 	mov	dptr,#_dump_buff_zero_hex_j_131073_116
      000F2A E0               [24] 3357 	movx	a,@dptr
      000F2B 24 FF            [12] 3358 	add	a,#0xff
      000F2D FC               [12] 3359 	mov	r4,a
      000F2E A3               [24] 3360 	inc	dptr
      000F2F E0               [24] 3361 	movx	a,@dptr
      000F30 34 FF            [12] 3362 	addc	a,#0xff
      000F32 FD               [12] 3363 	mov	r5,a
      000F33 90r01r5C         [24] 3364 	mov	dptr,#_dump_buff_zero_hex_j_131073_116
      000F36 EC               [12] 3365 	mov	a,r4
      000F37 F0               [24] 3366 	movx	@dptr,a
      000F38 ED               [12] 3367 	mov	a,r5
      000F39 A3               [24] 3368 	inc	dptr
      000F3A F0               [24] 3369 	movx	@dptr,a
                                   3370 ;	program.c:645: if (j == 0)
      000F3B 90r01r5C         [24] 3371 	mov	dptr,#_dump_buff_zero_hex_j_131073_116
      000F3E E0               [24] 3372 	movx	a,@dptr
      000F3F F5 F0            [12] 3373 	mov	b,a
      000F41 A3               [24] 3374 	inc	dptr
      000F42 E0               [24] 3375 	movx	a,@dptr
      000F43 45 F0            [12] 3376 	orl	a,b
      000F45 70 09            [24] 3377 	jnz	00111$
                                   3378 ;	program.c:646: j = 16;
      000F47 90r01r5C         [24] 3379 	mov	dptr,#_dump_buff_zero_hex_j_131073_116
      000F4A 74 10            [12] 3380 	mov	a,#0x10
      000F4C F0               [24] 3381 	movx	@dptr,a
      000F4D E4               [12] 3382 	clr	a
      000F4E A3               [24] 3383 	inc	dptr
      000F4F F0               [24] 3384 	movx	@dptr,a
      000F50                       3385 00111$:
                                   3386 ;	program.c:637: for (int i = 0; i < buffers_array[0].num_char; i++)
      000F50 0E               [12] 3387 	inc	r6
      000F51 BE 00 01         [24] 3388 	cjne	r6,#0x00,00140$
      000F54 0F               [12] 3389 	inc	r7
      000F55                       3390 00140$:
      000F55 02r0Er8D         [24] 3391 	ljmp	00110$
      000F58                       3392 00105$:
                                   3393 ;	program.c:648: printf("\n\n\r");
      000F58 74r7C            [12] 3394 	mov	a,#___str_57
      000F5A C0 E0            [24] 3395 	push	acc
      000F5C 74s08            [12] 3396 	mov	a,#(___str_57 >> 8)
      000F5E C0 E0            [24] 3397 	push	acc
      000F60 74 80            [12] 3398 	mov	a,#0x80
      000F62 C0 E0            [24] 3399 	push	acc
      000F64 12r00r00         [24] 3400 	lcall	_printf
      000F67 15 81            [12] 3401 	dec	sp
      000F69 15 81            [12] 3402 	dec	sp
      000F6B 15 81            [12] 3403 	dec	sp
      000F6D 22               [24] 3404 	ret
      000F6E                       3405 00107$:
                                   3406 ;	program.c:652: printf("Buffer 0 is empty...\n\r");
      000F6E 74r24            [12] 3407 	mov	a,#___str_63
      000F70 C0 E0            [24] 3408 	push	acc
      000F72 74s09            [12] 3409 	mov	a,#(___str_63 >> 8)
      000F74 C0 E0            [24] 3410 	push	acc
      000F76 74 80            [12] 3411 	mov	a,#0x80
      000F78 C0 E0            [24] 3412 	push	acc
      000F7A 12r00r00         [24] 3413 	lcall	_printf
      000F7D 15 81            [12] 3414 	dec	sp
      000F7F 15 81            [12] 3415 	dec	sp
      000F81 15 81            [12] 3416 	dec	sp
                                   3417 ;	program.c:654: }
      000F83 22               [24] 3418 	ret
                                   3419 ;------------------------------------------------------------
                                   3420 ;Allocation info for local variables in function 'print_heap_stats'
                                   3421 ;------------------------------------------------------------
                                   3422 ;	program.c:661: void print_heap_stats()
                                   3423 ;	-----------------------------------------
                                   3424 ;	 function print_heap_stats
                                   3425 ;	-----------------------------------------
      000F84                       3426 _print_heap_stats:
                                   3427 ;	program.c:663: DEBUGPORT(0xB);
      000F84 75 82 0B         [24] 3428 	mov	dpl,#0x0b
      000F87 12r13r65         [24] 3429 	lcall	_dataout
                                   3430 ;	program.c:664: printf("\n\r****************HEAP*STATS*************\n\r");
      000F8A 74r3B            [12] 3431 	mov	a,#___str_64
      000F8C C0 E0            [24] 3432 	push	acc
      000F8E 74s09            [12] 3433 	mov	a,#(___str_64 >> 8)
      000F90 C0 E0            [24] 3434 	push	acc
      000F92 74 80            [12] 3435 	mov	a,#0x80
      000F94 C0 E0            [24] 3436 	push	acc
      000F96 12r00r00         [24] 3437 	lcall	_printf
      000F99 15 81            [12] 3438 	dec	sp
      000F9B 15 81            [12] 3439 	dec	sp
      000F9D 15 81            [12] 3440 	dec	sp
                                   3441 ;	program.c:665: printf("Total Heap Size: %d \n\r", program_stats.total_heap_size);
      000F9F 90r00r00         [24] 3442 	mov	dptr,#_program_stats
      000FA2 E0               [24] 3443 	movx	a,@dptr
      000FA3 FE               [12] 3444 	mov	r6,a
      000FA4 A3               [24] 3445 	inc	dptr
      000FA5 E0               [24] 3446 	movx	a,@dptr
      000FA6 FF               [12] 3447 	mov	r7,a
      000FA7 C0 06            [24] 3448 	push	ar6
      000FA9 C0 07            [24] 3449 	push	ar7
      000FAB 74r67            [12] 3450 	mov	a,#___str_65
      000FAD C0 E0            [24] 3451 	push	acc
      000FAF 74s09            [12] 3452 	mov	a,#(___str_65 >> 8)
      000FB1 C0 E0            [24] 3453 	push	acc
      000FB3 74 80            [12] 3454 	mov	a,#0x80
      000FB5 C0 E0            [24] 3455 	push	acc
      000FB7 12r00r00         [24] 3456 	lcall	_printf
      000FBA E5 81            [12] 3457 	mov	a,sp
      000FBC 24 FB            [12] 3458 	add	a,#0xfb
      000FBE F5 81            [12] 3459 	mov	sp,a
                                   3460 ;	program.c:666: printf("Allocated Heap Size: %d \n\r", program_stats.allocated_heap);
      000FC0 90r00r02         [24] 3461 	mov	dptr,#(_program_stats + 0x0002)
      000FC3 E0               [24] 3462 	movx	a,@dptr
      000FC4 FE               [12] 3463 	mov	r6,a
      000FC5 A3               [24] 3464 	inc	dptr
      000FC6 E0               [24] 3465 	movx	a,@dptr
      000FC7 FF               [12] 3466 	mov	r7,a
      000FC8 C0 06            [24] 3467 	push	ar6
      000FCA C0 07            [24] 3468 	push	ar7
      000FCC 74r7E            [12] 3469 	mov	a,#___str_66
      000FCE C0 E0            [24] 3470 	push	acc
      000FD0 74s09            [12] 3471 	mov	a,#(___str_66 >> 8)
      000FD2 C0 E0            [24] 3472 	push	acc
      000FD4 74 80            [12] 3473 	mov	a,#0x80
      000FD6 C0 E0            [24] 3474 	push	acc
      000FD8 12r00r00         [24] 3475 	lcall	_printf
      000FDB E5 81            [12] 3476 	mov	a,sp
      000FDD 24 FB            [12] 3477 	add	a,#0xfb
      000FDF F5 81            [12] 3478 	mov	sp,a
                                   3479 ;	program.c:667: printf("All Chars: %d \n\r", program_stats.all_char_count);
      000FE1 90r00r04         [24] 3480 	mov	dptr,#(_program_stats + 0x0004)
      000FE4 E0               [24] 3481 	movx	a,@dptr
      000FE5 FE               [12] 3482 	mov	r6,a
      000FE6 A3               [24] 3483 	inc	dptr
      000FE7 E0               [24] 3484 	movx	a,@dptr
      000FE8 FF               [12] 3485 	mov	r7,a
      000FE9 C0 06            [24] 3486 	push	ar6
      000FEB C0 07            [24] 3487 	push	ar7
      000FED 74r99            [12] 3488 	mov	a,#___str_67
      000FEF C0 E0            [24] 3489 	push	acc
      000FF1 74s09            [12] 3490 	mov	a,#(___str_67 >> 8)
      000FF3 C0 E0            [24] 3491 	push	acc
      000FF5 74 80            [12] 3492 	mov	a,#0x80
      000FF7 C0 E0            [24] 3493 	push	acc
      000FF9 12r00r00         [24] 3494 	lcall	_printf
      000FFC E5 81            [12] 3495 	mov	a,sp
      000FFE 24 FB            [12] 3496 	add	a,#0xfb
      001000 F5 81            [12] 3497 	mov	sp,a
                                   3498 ;	program.c:668: printf("Storage Chars: %d \n\r", program_stats.storage_char_count);
      001002 90r00r06         [24] 3499 	mov	dptr,#(_program_stats + 0x0006)
      001005 E0               [24] 3500 	movx	a,@dptr
      001006 FE               [12] 3501 	mov	r6,a
      001007 A3               [24] 3502 	inc	dptr
      001008 E0               [24] 3503 	movx	a,@dptr
      001009 FF               [12] 3504 	mov	r7,a
      00100A C0 06            [24] 3505 	push	ar6
      00100C C0 07            [24] 3506 	push	ar7
      00100E 74rAA            [12] 3507 	mov	a,#___str_68
      001010 C0 E0            [24] 3508 	push	acc
      001012 74s09            [12] 3509 	mov	a,#(___str_68 >> 8)
      001014 C0 E0            [24] 3510 	push	acc
      001016 74 80            [12] 3511 	mov	a,#0x80
      001018 C0 E0            [24] 3512 	push	acc
      00101A 12r00r00         [24] 3513 	lcall	_printf
      00101D E5 81            [12] 3514 	mov	a,sp
      00101F 24 FB            [12] 3515 	add	a,#0xfb
      001021 F5 81            [12] 3516 	mov	sp,a
                                   3517 ;	program.c:669: printf("Total Buffers: %d \n\r", program_stats.total_buffers);
      001023 90r00r08         [24] 3518 	mov	dptr,#(_program_stats + 0x0008)
      001026 E0               [24] 3519 	movx	a,@dptr
      001027 FE               [12] 3520 	mov	r6,a
      001028 A3               [24] 3521 	inc	dptr
      001029 E0               [24] 3522 	movx	a,@dptr
      00102A FF               [12] 3523 	mov	r7,a
      00102B C0 06            [24] 3524 	push	ar6
      00102D C0 07            [24] 3525 	push	ar7
      00102F 74rBF            [12] 3526 	mov	a,#___str_69
      001031 C0 E0            [24] 3527 	push	acc
      001033 74s09            [12] 3528 	mov	a,#(___str_69 >> 8)
      001035 C0 E0            [24] 3529 	push	acc
      001037 74 80            [12] 3530 	mov	a,#0x80
      001039 C0 E0            [24] 3531 	push	acc
      00103B 12r00r00         [24] 3532 	lcall	_printf
      00103E E5 81            [12] 3533 	mov	a,sp
      001040 24 FB            [12] 3534 	add	a,#0xfb
      001042 F5 81            [12] 3535 	mov	sp,a
                                   3536 ;	program.c:670: }
      001044 22               [24] 3537 	ret
                                   3538 ;------------------------------------------------------------
                                   3539 ;Allocation info for local variables in function 'print_all_buffers'
                                   3540 ;------------------------------------------------------------
                                   3541 ;i                         Allocated with name '_print_all_buffers_i_131072_123'
                                   3542 ;------------------------------------------------------------
                                   3543 ;	program.c:677: void print_all_buffers()
                                   3544 ;	-----------------------------------------
                                   3545 ;	 function print_all_buffers
                                   3546 ;	-----------------------------------------
      001045                       3547 _print_all_buffers:
                                   3548 ;	program.c:679: DEBUGPORT(0xC)
      001045 75 82 0C         [24] 3549 	mov	dpl,#0x0c
      001048 12r13r65         [24] 3550 	lcall	_dataout
                                   3551 ;	program.c:680: for (int i = 0; i < program_stats.total_buffers; i++)
      00104B 7E 00            [12] 3552 	mov	r6,#0x00
      00104D 7F 00            [12] 3553 	mov	r7,#0x00
      00104F                       3554 00103$:
      00104F 90r00r08         [24] 3555 	mov	dptr,#(_program_stats + 0x0008)
      001052 E0               [24] 3556 	movx	a,@dptr
      001053 FC               [12] 3557 	mov	r4,a
      001054 A3               [24] 3558 	inc	dptr
      001055 E0               [24] 3559 	movx	a,@dptr
      001056 FD               [12] 3560 	mov	r5,a
      001057 C3               [12] 3561 	clr	c
      001058 EE               [12] 3562 	mov	a,r6
      001059 9C               [12] 3563 	subb	a,r4
      00105A EF               [12] 3564 	mov	a,r7
      00105B 64 80            [12] 3565 	xrl	a,#0x80
      00105D 8D F0            [24] 3566 	mov	b,r5
      00105F 63 F0 80         [24] 3567 	xrl	b,#0x80
      001062 95 F0            [12] 3568 	subb	a,b
      001064 40 03            [24] 3569 	jc	00116$
      001066 02r11r9F         [24] 3570 	ljmp	00101$
      001069                       3571 00116$:
                                   3572 ;	program.c:682: printf("****************BUFFER*%d***************\n\r", i);
      001069 C0 07            [24] 3573 	push	ar7
      00106B C0 06            [24] 3574 	push	ar6
      00106D C0 06            [24] 3575 	push	ar6
      00106F C0 07            [24] 3576 	push	ar7
      001071 74rD4            [12] 3577 	mov	a,#___str_70
      001073 C0 E0            [24] 3578 	push	acc
      001075 74s09            [12] 3579 	mov	a,#(___str_70 >> 8)
      001077 C0 E0            [24] 3580 	push	acc
      001079 74 80            [12] 3581 	mov	a,#0x80
      00107B C0 E0            [24] 3582 	push	acc
      00107D 12r00r00         [24] 3583 	lcall	_printf
      001080 E5 81            [12] 3584 	mov	a,sp
      001082 24 FB            [12] 3585 	add	a,#0xfb
      001084 F5 81            [12] 3586 	mov	sp,a
      001086 D0 06            [24] 3587 	pop	ar6
      001088 D0 07            [24] 3588 	pop	ar7
                                   3589 ;	program.c:683: printf("Buffer#: %d \n\r", buffers_array[i].buffer_num);
      00108A 90r00r00         [24] 3590 	mov	dptr,#__mulint_PARM_2
      00108D EE               [12] 3591 	mov	a,r6
      00108E F0               [24] 3592 	movx	@dptr,a
      00108F EF               [12] 3593 	mov	a,r7
      001090 A3               [24] 3594 	inc	dptr
      001091 F0               [24] 3595 	movx	@dptr,a
      001092 90 00 0C         [24] 3596 	mov	dptr,#0x000c
      001095 C0 07            [24] 3597 	push	ar7
      001097 C0 06            [24] 3598 	push	ar6
      001099 12r00r00         [24] 3599 	lcall	__mulint
      00109C AC 82            [24] 3600 	mov	r4,dpl
      00109E AD 83            [24] 3601 	mov	r5,dph
      0010A0 EC               [12] 3602 	mov	a,r4
      0010A1 24r0A            [12] 3603 	add	a,#_buffers_array
      0010A3 F5 82            [12] 3604 	mov	dpl,a
      0010A5 ED               [12] 3605 	mov	a,r5
      0010A6 34s00            [12] 3606 	addc	a,#(_buffers_array >> 8)
      0010A8 F5 83            [12] 3607 	mov	dph,a
      0010AA E0               [24] 3608 	movx	a,@dptr
      0010AB FA               [12] 3609 	mov	r2,a
      0010AC A3               [24] 3610 	inc	dptr
      0010AD E0               [24] 3611 	movx	a,@dptr
      0010AE FB               [12] 3612 	mov	r3,a
      0010AF C0 05            [24] 3613 	push	ar5
      0010B1 C0 04            [24] 3614 	push	ar4
      0010B3 C0 02            [24] 3615 	push	ar2
      0010B5 C0 03            [24] 3616 	push	ar3
      0010B7 74rFF            [12] 3617 	mov	a,#___str_71
      0010B9 C0 E0            [24] 3618 	push	acc
      0010BB 74s09            [12] 3619 	mov	a,#(___str_71 >> 8)
      0010BD C0 E0            [24] 3620 	push	acc
      0010BF 74 80            [12] 3621 	mov	a,#0x80
      0010C1 C0 E0            [24] 3622 	push	acc
      0010C3 12r00r00         [24] 3623 	lcall	_printf
      0010C6 E5 81            [12] 3624 	mov	a,sp
      0010C8 24 FB            [12] 3625 	add	a,#0xfb
      0010CA F5 81            [12] 3626 	mov	sp,a
      0010CC D0 04            [24] 3627 	pop	ar4
      0010CE D0 05            [24] 3628 	pop	ar5
                                   3629 ;	program.c:684: printf("BufferStart: %p \n\r", buffers_array[i].buffer_start);
      0010D0 EC               [12] 3630 	mov	a,r4
      0010D1 24r0A            [12] 3631 	add	a,#_buffers_array
      0010D3 FC               [12] 3632 	mov	r4,a
      0010D4 ED               [12] 3633 	mov	a,r5
      0010D5 34s00            [12] 3634 	addc	a,#(_buffers_array >> 8)
      0010D7 FD               [12] 3635 	mov	r5,a
      0010D8 8C 82            [24] 3636 	mov	dpl,r4
      0010DA 8D 83            [24] 3637 	mov	dph,r5
      0010DC A3               [24] 3638 	inc	dptr
      0010DD A3               [24] 3639 	inc	dptr
      0010DE E0               [24] 3640 	movx	a,@dptr
      0010DF F9               [12] 3641 	mov	r1,a
      0010E0 A3               [24] 3642 	inc	dptr
      0010E1 E0               [24] 3643 	movx	a,@dptr
      0010E2 FA               [12] 3644 	mov	r2,a
      0010E3 A3               [24] 3645 	inc	dptr
      0010E4 E0               [24] 3646 	movx	a,@dptr
      0010E5 FB               [12] 3647 	mov	r3,a
      0010E6 C0 05            [24] 3648 	push	ar5
      0010E8 C0 04            [24] 3649 	push	ar4
      0010EA C0 01            [24] 3650 	push	ar1
      0010EC C0 02            [24] 3651 	push	ar2
      0010EE C0 03            [24] 3652 	push	ar3
      0010F0 74r0E            [12] 3653 	mov	a,#___str_72
      0010F2 C0 E0            [24] 3654 	push	acc
      0010F4 74s0A            [12] 3655 	mov	a,#(___str_72 >> 8)
      0010F6 C0 E0            [24] 3656 	push	acc
      0010F8 74 80            [12] 3657 	mov	a,#0x80
      0010FA C0 E0            [24] 3658 	push	acc
      0010FC 12r00r00         [24] 3659 	lcall	_printf
      0010FF E5 81            [12] 3660 	mov	a,sp
      001101 24 FA            [12] 3661 	add	a,#0xfa
      001103 F5 81            [12] 3662 	mov	sp,a
      001105 D0 04            [24] 3663 	pop	ar4
      001107 D0 05            [24] 3664 	pop	ar5
                                   3665 ;	program.c:685: printf("BufferEnd: %p \n\r", buffers_array[i].buffer_end);
      001109 8C 82            [24] 3666 	mov	dpl,r4
      00110B 8D 83            [24] 3667 	mov	dph,r5
      00110D A3               [24] 3668 	inc	dptr
      00110E A3               [24] 3669 	inc	dptr
      00110F A3               [24] 3670 	inc	dptr
      001110 A3               [24] 3671 	inc	dptr
      001111 A3               [24] 3672 	inc	dptr
      001112 E0               [24] 3673 	movx	a,@dptr
      001113 F9               [12] 3674 	mov	r1,a
      001114 A3               [24] 3675 	inc	dptr
      001115 E0               [24] 3676 	movx	a,@dptr
      001116 FA               [12] 3677 	mov	r2,a
      001117 A3               [24] 3678 	inc	dptr
      001118 E0               [24] 3679 	movx	a,@dptr
      001119 FB               [12] 3680 	mov	r3,a
      00111A C0 05            [24] 3681 	push	ar5
      00111C C0 04            [24] 3682 	push	ar4
      00111E C0 01            [24] 3683 	push	ar1
      001120 C0 02            [24] 3684 	push	ar2
      001122 C0 03            [24] 3685 	push	ar3
      001124 74r21            [12] 3686 	mov	a,#___str_73
      001126 C0 E0            [24] 3687 	push	acc
      001128 74s0A            [12] 3688 	mov	a,#(___str_73 >> 8)
      00112A C0 E0            [24] 3689 	push	acc
      00112C 74 80            [12] 3690 	mov	a,#0x80
      00112E C0 E0            [24] 3691 	push	acc
      001130 12r00r00         [24] 3692 	lcall	_printf
      001133 E5 81            [12] 3693 	mov	a,sp
      001135 24 FA            [12] 3694 	add	a,#0xfa
      001137 F5 81            [12] 3695 	mov	sp,a
      001139 D0 04            [24] 3696 	pop	ar4
      00113B D0 05            [24] 3697 	pop	ar5
                                   3698 ;	program.c:686: printf("BufferSize: %d \n\r", buffers_array[i].buff_size);
      00113D 74 08            [12] 3699 	mov	a,#0x08
      00113F 2C               [12] 3700 	add	a,r4
      001140 F5 82            [12] 3701 	mov	dpl,a
      001142 E4               [12] 3702 	clr	a
      001143 3D               [12] 3703 	addc	a,r5
      001144 F5 83            [12] 3704 	mov	dph,a
      001146 E0               [24] 3705 	movx	a,@dptr
      001147 FA               [12] 3706 	mov	r2,a
      001148 A3               [24] 3707 	inc	dptr
      001149 E0               [24] 3708 	movx	a,@dptr
      00114A FB               [12] 3709 	mov	r3,a
      00114B C0 05            [24] 3710 	push	ar5
      00114D C0 04            [24] 3711 	push	ar4
      00114F C0 02            [24] 3712 	push	ar2
      001151 C0 03            [24] 3713 	push	ar3
      001153 74r32            [12] 3714 	mov	a,#___str_74
      001155 C0 E0            [24] 3715 	push	acc
      001157 74s0A            [12] 3716 	mov	a,#(___str_74 >> 8)
      001159 C0 E0            [24] 3717 	push	acc
      00115B 74 80            [12] 3718 	mov	a,#0x80
      00115D C0 E0            [24] 3719 	push	acc
      00115F 12r00r00         [24] 3720 	lcall	_printf
      001162 E5 81            [12] 3721 	mov	a,sp
      001164 24 FB            [12] 3722 	add	a,#0xfb
      001166 F5 81            [12] 3723 	mov	sp,a
      001168 D0 04            [24] 3724 	pop	ar4
      00116A D0 05            [24] 3725 	pop	ar5
                                   3726 ;	program.c:687: printf("TotalUsed: %d \n\r", buffers_array[i].num_char);
      00116C 74 0A            [12] 3727 	mov	a,#0x0a
      00116E 2C               [12] 3728 	add	a,r4
      00116F F5 82            [12] 3729 	mov	dpl,a
      001171 E4               [12] 3730 	clr	a
      001172 3D               [12] 3731 	addc	a,r5
      001173 F5 83            [12] 3732 	mov	dph,a
      001175 E0               [24] 3733 	movx	a,@dptr
      001176 FC               [12] 3734 	mov	r4,a
      001177 A3               [24] 3735 	inc	dptr
      001178 E0               [24] 3736 	movx	a,@dptr
      001179 FD               [12] 3737 	mov	r5,a
      00117A C0 04            [24] 3738 	push	ar4
      00117C C0 05            [24] 3739 	push	ar5
      00117E 74r44            [12] 3740 	mov	a,#___str_75
      001180 C0 E0            [24] 3741 	push	acc
      001182 74s0A            [12] 3742 	mov	a,#(___str_75 >> 8)
      001184 C0 E0            [24] 3743 	push	acc
      001186 74 80            [12] 3744 	mov	a,#0x80
      001188 C0 E0            [24] 3745 	push	acc
      00118A 12r00r00         [24] 3746 	lcall	_printf
      00118D E5 81            [12] 3747 	mov	a,sp
      00118F 24 FB            [12] 3748 	add	a,#0xfb
      001191 F5 81            [12] 3749 	mov	sp,a
      001193 D0 06            [24] 3750 	pop	ar6
      001195 D0 07            [24] 3751 	pop	ar7
                                   3752 ;	program.c:680: for (int i = 0; i < program_stats.total_buffers; i++)
      001197 0E               [12] 3753 	inc	r6
      001198 BE 00 01         [24] 3754 	cjne	r6,#0x00,00117$
      00119B 0F               [12] 3755 	inc	r7
      00119C                       3756 00117$:
      00119C 02r10r4F         [24] 3757 	ljmp	00103$
      00119F                       3758 00101$:
                                   3759 ;	program.c:689: printf("***************************************\n\r");
      00119F 74r55            [12] 3760 	mov	a,#___str_76
      0011A1 C0 E0            [24] 3761 	push	acc
      0011A3 74s0A            [12] 3762 	mov	a,#(___str_76 >> 8)
      0011A5 C0 E0            [24] 3763 	push	acc
      0011A7 74 80            [12] 3764 	mov	a,#0x80
      0011A9 C0 E0            [24] 3765 	push	acc
      0011AB 12r00r00         [24] 3766 	lcall	_printf
      0011AE 15 81            [12] 3767 	dec	sp
      0011B0 15 81            [12] 3768 	dec	sp
      0011B2 15 81            [12] 3769 	dec	sp
                                   3770 ;	program.c:690: }
      0011B4 22               [24] 3771 	ret
                                   3772 ;------------------------------------------------------------
                                   3773 ;Allocation info for local variables in function 'get_number'
                                   3774 ;------------------------------------------------------------
                                   3775 ;total_chars               Allocated with name '_get_number_total_chars_65536_125'
                                   3776 ;rec                       Allocated with name '_get_number_rec_65537_127'
                                   3777 ;num                       Allocated with name '_get_number_num_65537_127'
                                   3778 ;i                         Allocated with name '_get_number_i_131073_128'
                                   3779 ;------------------------------------------------------------
                                   3780 ;	program.c:697: int get_number(int total_chars)
                                   3781 ;	-----------------------------------------
                                   3782 ;	 function get_number
                                   3783 ;	-----------------------------------------
      0011B5                       3784 _get_number:
      0011B5 AF 83            [24] 3785 	mov	r7,dph
      0011B7 E5 82            [12] 3786 	mov	a,dpl
      0011B9 90r01r5E         [24] 3787 	mov	dptr,#_get_number_total_chars_65536_125
      0011BC F0               [24] 3788 	movx	@dptr,a
      0011BD EF               [12] 3789 	mov	a,r7
      0011BE A3               [24] 3790 	inc	dptr
      0011BF F0               [24] 3791 	movx	@dptr,a
                                   3792 ;	program.c:699: DEBUGPORT(0xD);
      0011C0 75 82 0D         [24] 3793 	mov	dpl,#0x0d
      0011C3 12r13r65         [24] 3794 	lcall	_dataout
                                   3795 ;	program.c:701: int num = 0;
      0011C6 90r01r60         [24] 3796 	mov	dptr,#_get_number_num_65537_127
      0011C9 E4               [12] 3797 	clr	a
      0011CA F0               [24] 3798 	movx	@dptr,a
      0011CB A3               [24] 3799 	inc	dptr
      0011CC F0               [24] 3800 	movx	@dptr,a
                                   3801 ;	program.c:702: for (int i = total_chars; i > 0; i--)
      0011CD 90r01r5E         [24] 3802 	mov	dptr,#_get_number_total_chars_65536_125
      0011D0 E0               [24] 3803 	movx	a,@dptr
      0011D1 FE               [12] 3804 	mov	r6,a
      0011D2 A3               [24] 3805 	inc	dptr
      0011D3 E0               [24] 3806 	movx	a,@dptr
      0011D4 FF               [12] 3807 	mov	r7,a
      0011D5                       3808 00107$:
      0011D5 C3               [12] 3809 	clr	c
      0011D6 E4               [12] 3810 	clr	a
      0011D7 9E               [12] 3811 	subb	a,r6
      0011D8 74 80            [12] 3812 	mov	a,#(0x00 ^ 0x80)
      0011DA 8F F0            [24] 3813 	mov	b,r7
      0011DC 63 F0 80         [24] 3814 	xrl	b,#0x80
      0011DF 95 F0            [12] 3815 	subb	a,b
      0011E1 40 03            [24] 3816 	jc	00127$
      0011E3 02r12r81         [24] 3817 	ljmp	00105$
      0011E6                       3818 00127$:
                                   3819 ;	program.c:704: rec = getchar();
      0011E6 C0 07            [24] 3820 	push	ar7
      0011E8 C0 06            [24] 3821 	push	ar6
      0011EA 12r13r29         [24] 3822 	lcall	_getchar
      0011ED AC 82            [24] 3823 	mov	r4,dpl
      0011EF AD 83            [24] 3824 	mov	r5,dph
      0011F1 D0 06            [24] 3825 	pop	ar6
      0011F3 D0 07            [24] 3826 	pop	ar7
                                   3827 ;	program.c:706: if (rec <= 0x39 && rec >= 0x30)
      0011F5 C3               [12] 3828 	clr	c
      0011F6 74 39            [12] 3829 	mov	a,#0x39
      0011F8 9C               [12] 3830 	subb	a,r4
      0011F9 74 80            [12] 3831 	mov	a,#(0x00 ^ 0x80)
      0011FB 8D F0            [24] 3832 	mov	b,r5
      0011FD 63 F0 80         [24] 3833 	xrl	b,#0x80
      001200 95 F0            [12] 3834 	subb	a,b
      001202 40 5C            [24] 3835 	jc	00102$
      001204 EC               [12] 3836 	mov	a,r4
      001205 94 30            [12] 3837 	subb	a,#0x30
      001207 ED               [12] 3838 	mov	a,r5
      001208 64 80            [12] 3839 	xrl	a,#0x80
      00120A 94 80            [12] 3840 	subb	a,#0x80
      00120C 40 52            [24] 3841 	jc	00102$
                                   3842 ;	program.c:708: num += ((rec - 0x30) * get_num_helper(i - 1));
      00120E EC               [12] 3843 	mov	a,r4
      00120F 24 D0            [12] 3844 	add	a,#0xd0
      001211 FC               [12] 3845 	mov	r4,a
      001212 ED               [12] 3846 	mov	a,r5
      001213 34 FF            [12] 3847 	addc	a,#0xff
      001215 FD               [12] 3848 	mov	r5,a
      001216 EE               [12] 3849 	mov	a,r6
      001217 24 FF            [12] 3850 	add	a,#0xff
      001219 FA               [12] 3851 	mov	r2,a
      00121A EF               [12] 3852 	mov	a,r7
      00121B 34 FF            [12] 3853 	addc	a,#0xff
      00121D FB               [12] 3854 	mov	r3,a
      00121E 8A 82            [24] 3855 	mov	dpl,r2
      001220 8B 83            [24] 3856 	mov	dph,r3
      001222 C0 07            [24] 3857 	push	ar7
      001224 C0 06            [24] 3858 	push	ar6
      001226 C0 05            [24] 3859 	push	ar5
      001228 C0 04            [24] 3860 	push	ar4
      00122A 12r12r8D         [24] 3861 	lcall	_get_num_helper
      00122D AA 82            [24] 3862 	mov	r2,dpl
      00122F AB 83            [24] 3863 	mov	r3,dph
      001231 D0 04            [24] 3864 	pop	ar4
      001233 D0 05            [24] 3865 	pop	ar5
      001235 90r00r00         [24] 3866 	mov	dptr,#__mulint_PARM_2
      001238 EA               [12] 3867 	mov	a,r2
      001239 F0               [24] 3868 	movx	@dptr,a
      00123A EB               [12] 3869 	mov	a,r3
      00123B A3               [24] 3870 	inc	dptr
      00123C F0               [24] 3871 	movx	@dptr,a
      00123D 8C 82            [24] 3872 	mov	dpl,r4
      00123F 8D 83            [24] 3873 	mov	dph,r5
      001241 12r00r00         [24] 3874 	lcall	__mulint
      001244 AC 82            [24] 3875 	mov	r4,dpl
      001246 AD 83            [24] 3876 	mov	r5,dph
      001248 D0 06            [24] 3877 	pop	ar6
      00124A D0 07            [24] 3878 	pop	ar7
      00124C 90r01r60         [24] 3879 	mov	dptr,#_get_number_num_65537_127
      00124F E0               [24] 3880 	movx	a,@dptr
      001250 FA               [12] 3881 	mov	r2,a
      001251 A3               [24] 3882 	inc	dptr
      001252 E0               [24] 3883 	movx	a,@dptr
      001253 FB               [12] 3884 	mov	r3,a
      001254 90r01r60         [24] 3885 	mov	dptr,#_get_number_num_65537_127
      001257 EC               [12] 3886 	mov	a,r4
      001258 2A               [12] 3887 	add	a,r2
      001259 F0               [24] 3888 	movx	@dptr,a
      00125A ED               [12] 3889 	mov	a,r5
      00125B 3B               [12] 3890 	addc	a,r3
      00125C A3               [24] 3891 	inc	dptr
      00125D F0               [24] 3892 	movx	@dptr,a
      00125E 80 19            [24] 3893 	sjmp	00108$
      001260                       3894 00102$:
                                   3895 ;	program.c:712: printf("ERR,Numbers ONLY!\n\r");
      001260 74r7F            [12] 3896 	mov	a,#___str_77
      001262 C0 E0            [24] 3897 	push	acc
      001264 74s0A            [12] 3898 	mov	a,#(___str_77 >> 8)
      001266 C0 E0            [24] 3899 	push	acc
      001268 74 80            [12] 3900 	mov	a,#0x80
      00126A C0 E0            [24] 3901 	push	acc
      00126C 12r00r00         [24] 3902 	lcall	_printf
      00126F 15 81            [12] 3903 	dec	sp
      001271 15 81            [12] 3904 	dec	sp
      001273 15 81            [12] 3905 	dec	sp
                                   3906 ;	program.c:713: return -1;
      001275 90 FF FF         [24] 3907 	mov	dptr,#0xffff
      001278 22               [24] 3908 	ret
      001279                       3909 00108$:
                                   3910 ;	program.c:702: for (int i = total_chars; i > 0; i--)
      001279 1E               [12] 3911 	dec	r6
      00127A BE FF 01         [24] 3912 	cjne	r6,#0xff,00130$
      00127D 1F               [12] 3913 	dec	r7
      00127E                       3914 00130$:
      00127E 02r11rD5         [24] 3915 	ljmp	00107$
      001281                       3916 00105$:
                                   3917 ;	program.c:716: return num;
      001281 90r01r60         [24] 3918 	mov	dptr,#_get_number_num_65537_127
      001284 E0               [24] 3919 	movx	a,@dptr
      001285 FE               [12] 3920 	mov	r6,a
      001286 A3               [24] 3921 	inc	dptr
      001287 E0               [24] 3922 	movx	a,@dptr
                                   3923 ;	program.c:717: }
      001288 8E 82            [24] 3924 	mov	dpl,r6
      00128A F5 83            [12] 3925 	mov	dph,a
      00128C 22               [24] 3926 	ret
                                   3927 ;------------------------------------------------------------
                                   3928 ;Allocation info for local variables in function 'get_num_helper'
                                   3929 ;------------------------------------------------------------
                                   3930 ;times                     Allocated with name '_get_num_helper_times_65536_132'
                                   3931 ;num                       Allocated with name '_get_num_helper_num_65536_133'
                                   3932 ;i                         Allocated with name '_get_num_helper_i_131072_134'
                                   3933 ;------------------------------------------------------------
                                   3934 ;	program.c:724: int get_num_helper(int times)
                                   3935 ;	-----------------------------------------
                                   3936 ;	 function get_num_helper
                                   3937 ;	-----------------------------------------
      00128D                       3938 _get_num_helper:
      00128D AF 83            [24] 3939 	mov	r7,dph
      00128F E5 82            [12] 3940 	mov	a,dpl
      001291 90r01r62         [24] 3941 	mov	dptr,#_get_num_helper_times_65536_132
      001294 F0               [24] 3942 	movx	@dptr,a
      001295 EF               [12] 3943 	mov	a,r7
      001296 A3               [24] 3944 	inc	dptr
      001297 F0               [24] 3945 	movx	@dptr,a
                                   3946 ;	program.c:726: int num = 1;
      001298 90r01r64         [24] 3947 	mov	dptr,#_get_num_helper_num_65536_133
      00129B 74 01            [12] 3948 	mov	a,#0x01
      00129D F0               [24] 3949 	movx	@dptr,a
      00129E E4               [12] 3950 	clr	a
      00129F A3               [24] 3951 	inc	dptr
      0012A0 F0               [24] 3952 	movx	@dptr,a
                                   3953 ;	program.c:728: for (int i = 0; i < times; i++)
      0012A1 90r01r62         [24] 3954 	mov	dptr,#_get_num_helper_times_65536_132
      0012A4 E0               [24] 3955 	movx	a,@dptr
      0012A5 FE               [12] 3956 	mov	r6,a
      0012A6 A3               [24] 3957 	inc	dptr
      0012A7 E0               [24] 3958 	movx	a,@dptr
      0012A8 FF               [12] 3959 	mov	r7,a
      0012A9 7C 00            [12] 3960 	mov	r4,#0x00
      0012AB 7D 00            [12] 3961 	mov	r5,#0x00
      0012AD                       3962 00106$:
      0012AD C3               [12] 3963 	clr	c
      0012AE EC               [12] 3964 	mov	a,r4
      0012AF 9E               [12] 3965 	subb	a,r6
      0012B0 ED               [12] 3966 	mov	a,r5
      0012B1 64 80            [12] 3967 	xrl	a,#0x80
      0012B3 8F F0            [24] 3968 	mov	b,r7
      0012B5 63 F0 80         [24] 3969 	xrl	b,#0x80
      0012B8 95 F0            [12] 3970 	subb	a,b
      0012BA 50 3A            [24] 3971 	jnc	00101$
                                   3972 ;	program.c:730: num = num * 10;
      0012BC 90r01r64         [24] 3973 	mov	dptr,#_get_num_helper_num_65536_133
      0012BF E0               [24] 3974 	movx	a,@dptr
      0012C0 FA               [12] 3975 	mov	r2,a
      0012C1 A3               [24] 3976 	inc	dptr
      0012C2 E0               [24] 3977 	movx	a,@dptr
      0012C3 FB               [12] 3978 	mov	r3,a
      0012C4 90r00r00         [24] 3979 	mov	dptr,#__mulint_PARM_2
      0012C7 EA               [12] 3980 	mov	a,r2
      0012C8 F0               [24] 3981 	movx	@dptr,a
      0012C9 EB               [12] 3982 	mov	a,r3
      0012CA A3               [24] 3983 	inc	dptr
      0012CB F0               [24] 3984 	movx	@dptr,a
      0012CC 90 00 0A         [24] 3985 	mov	dptr,#0x000a
      0012CF C0 07            [24] 3986 	push	ar7
      0012D1 C0 06            [24] 3987 	push	ar6
      0012D3 C0 05            [24] 3988 	push	ar5
      0012D5 C0 04            [24] 3989 	push	ar4
      0012D7 12r00r00         [24] 3990 	lcall	__mulint
      0012DA E5 82            [12] 3991 	mov	a,dpl
      0012DC 85 83 F0         [24] 3992 	mov	b,dph
      0012DF D0 04            [24] 3993 	pop	ar4
      0012E1 D0 05            [24] 3994 	pop	ar5
      0012E3 D0 06            [24] 3995 	pop	ar6
      0012E5 D0 07            [24] 3996 	pop	ar7
      0012E7 90r01r64         [24] 3997 	mov	dptr,#_get_num_helper_num_65536_133
      0012EA F0               [24] 3998 	movx	@dptr,a
      0012EB E5 F0            [12] 3999 	mov	a,b
      0012ED A3               [24] 4000 	inc	dptr
      0012EE F0               [24] 4001 	movx	@dptr,a
                                   4002 ;	program.c:728: for (int i = 0; i < times; i++)
      0012EF 0C               [12] 4003 	inc	r4
      0012F0 BC 00 BA         [24] 4004 	cjne	r4,#0x00,00106$
      0012F3 0D               [12] 4005 	inc	r5
      0012F4 80 B7            [24] 4006 	sjmp	00106$
      0012F6                       4007 00101$:
                                   4008 ;	program.c:732: if (times == 0)
      0012F6 EE               [12] 4009 	mov	a,r6
      0012F7 4F               [12] 4010 	orl	a,r7
      0012F8 70 04            [24] 4011 	jnz	00103$
                                   4012 ;	program.c:733: return 1;
      0012FA 90 00 01         [24] 4013 	mov	dptr,#0x0001
      0012FD 22               [24] 4014 	ret
      0012FE                       4015 00103$:
                                   4016 ;	program.c:735: return num;
      0012FE 90r01r64         [24] 4017 	mov	dptr,#_get_num_helper_num_65536_133
      001301 E0               [24] 4018 	movx	a,@dptr
      001302 FE               [12] 4019 	mov	r6,a
      001303 A3               [24] 4020 	inc	dptr
      001304 E0               [24] 4021 	movx	a,@dptr
                                   4022 ;	program.c:736: }
      001305 8E 82            [24] 4023 	mov	dpl,r6
      001307 F5 83            [12] 4024 	mov	dph,a
      001309 22               [24] 4025 	ret
                                   4026 ;------------------------------------------------------------
                                   4027 ;Allocation info for local variables in function 'putchar'
                                   4028 ;------------------------------------------------------------
                                   4029 ;c                         Allocated with name '_putchar_c_65536_136'
                                   4030 ;------------------------------------------------------------
                                   4031 ;	program.c:743: int putchar(int c)
                                   4032 ;	-----------------------------------------
                                   4033 ;	 function putchar
                                   4034 ;	-----------------------------------------
      00130A                       4035 _putchar:
      00130A AF 83            [24] 4036 	mov	r7,dph
      00130C E5 82            [12] 4037 	mov	a,dpl
      00130E 90r01r66         [24] 4038 	mov	dptr,#_putchar_c_65536_136
      001311 F0               [24] 4039 	movx	@dptr,a
      001312 EF               [12] 4040 	mov	a,r7
      001313 A3               [24] 4041 	inc	dptr
      001314 F0               [24] 4042 	movx	@dptr,a
                                   4043 ;	program.c:745: while ((SCON & 0x02) == 0)
      001315                       4044 00101$:
      001315 E5 98            [12] 4045 	mov	a,_SCON
      001317 30 E1 FB         [24] 4046 	jnb	acc.1,00101$
                                   4047 ;	program.c:747: TI = 0;
                                   4048 ;	assignBit
      00131A C2 99            [12] 4049 	clr	_TI
                                   4050 ;	program.c:748: SBUF = c;
      00131C 90r01r66         [24] 4051 	mov	dptr,#_putchar_c_65536_136
      00131F E0               [24] 4052 	movx	a,@dptr
      001320 FE               [12] 4053 	mov	r6,a
      001321 A3               [24] 4054 	inc	dptr
      001322 E0               [24] 4055 	movx	a,@dptr
      001323 8E 99            [24] 4056 	mov	_SBUF,r6
                                   4057 ;	program.c:749: return 0;
      001325 90 00 00         [24] 4058 	mov	dptr,#0x0000
                                   4059 ;	program.c:750: }
      001328 22               [24] 4060 	ret
                                   4061 ;------------------------------------------------------------
                                   4062 ;Allocation info for local variables in function 'getchar'
                                   4063 ;------------------------------------------------------------
                                   4064 ;	program.c:757: int getchar()
                                   4065 ;	-----------------------------------------
                                   4066 ;	 function getchar
                                   4067 ;	-----------------------------------------
      001329                       4068 _getchar:
                                   4069 ;	program.c:759: while (RI == 0)
      001329                       4070 00101$:
                                   4071 ;	program.c:761: RI = 0;
                                   4072 ;	assignBit
      001329 10 98 02         [24] 4073 	jbc	_RI,00140$
      00132C 80 FB            [24] 4074 	sjmp	00101$
      00132E                       4075 00140$:
                                   4076 ;	program.c:763: if (SBUF != 0x3F && SBUF != 0x3D && SBUF != 0x40 && SBUF != 0x2B && SBUF != 0x2D)
      00132E 74 3F            [12] 4077 	mov	a,#0x3f
      001330 B5 99 02         [24] 4078 	cjne	a,_SBUF,00141$
      001333 80 27            [24] 4079 	sjmp	00105$
      001335                       4080 00141$:
      001335 74 3D            [12] 4081 	mov	a,#0x3d
      001337 B5 99 02         [24] 4082 	cjne	a,_SBUF,00142$
      00133A 80 20            [24] 4083 	sjmp	00105$
      00133C                       4084 00142$:
      00133C 74 40            [12] 4085 	mov	a,#0x40
      00133E B5 99 02         [24] 4086 	cjne	a,_SBUF,00143$
      001341 80 19            [24] 4087 	sjmp	00105$
      001343                       4088 00143$:
      001343 74 2B            [12] 4089 	mov	a,#0x2b
      001345 B5 99 02         [24] 4090 	cjne	a,_SBUF,00144$
      001348 80 12            [24] 4091 	sjmp	00105$
      00134A                       4092 00144$:
      00134A 74 2D            [12] 4093 	mov	a,#0x2d
      00134C B5 99 02         [24] 4094 	cjne	a,_SBUF,00145$
      00134F 80 0B            [24] 4095 	sjmp	00105$
      001351                       4096 00145$:
                                   4097 ;	program.c:764: putchar(SBUF);
      001351 AE 99            [24] 4098 	mov	r6,_SBUF
      001353 7F 00            [12] 4099 	mov	r7,#0x00
      001355 8E 82            [24] 4100 	mov	dpl,r6
      001357 8F 83            [24] 4101 	mov	dph,r7
      001359 12r13r0A         [24] 4102 	lcall	_putchar
      00135C                       4103 00105$:
                                   4104 ;	program.c:765: return SBUF;
      00135C AE 99            [24] 4105 	mov	r6,_SBUF
      00135E 7F 00            [12] 4106 	mov	r7,#0x00
      001360 8E 82            [24] 4107 	mov	dpl,r6
      001362 8F 83            [24] 4108 	mov	dph,r7
                                   4109 ;	program.c:766: }
      001364 22               [24] 4110 	ret
                                   4111 ;------------------------------------------------------------
                                   4112 ;Allocation info for local variables in function 'dataout'
                                   4113 ;------------------------------------------------------------
                                   4114 ;data                      Allocated with name '_dataout_data_65536_139'
                                   4115 ;------------------------------------------------------------
                                   4116 ;	program.c:773: void dataout(unsigned char data)
                                   4117 ;	-----------------------------------------
                                   4118 ;	 function dataout
                                   4119 ;	-----------------------------------------
      001365                       4120 _dataout:
      001365 E5 82            [12] 4121 	mov	a,dpl
      001367 90r01r68         [24] 4122 	mov	dptr,#_dataout_data_65536_139
      00136A F0               [24] 4123 	movx	@dptr,a
                                   4124 ;	program.c:775: DEBUG_LOC = data;
      00136B E0               [24] 4125 	movx	a,@dptr
      00136C 90 80 00         [24] 4126 	mov	dptr,#_DEBUG_LOC
      00136F F0               [24] 4127 	movx	@dptr,a
                                   4128 ;	program.c:776: }
      001370 22               [24] 4129 	ret
                                   4130 ;------------------------------------------------------------
                                   4131 ;Allocation info for local variables in function '_sdcc_external_startup'
                                   4132 ;------------------------------------------------------------
                                   4133 ;	program.c:783: _sdcc_external_startup()
                                   4134 ;	-----------------------------------------
                                   4135 ;	 function _sdcc_external_startup
                                   4136 ;	-----------------------------------------
      001371                       4137 __sdcc_external_startup:
                                   4138 ;	program.c:785: CKCON0 |= 0x1;
      001371 43 8F 01         [24] 4139 	orl	_CKCON0,#0x01
                                   4140 ;	program.c:787: _AUXR = 0xC;
      001374 75 8E 0C         [24] 4141 	mov	__AUXR,#0x0c
                                   4142 ;	program.c:789: SCON = 0x42;
      001377 75 98 42         [24] 4143 	mov	_SCON,#0x42
                                   4144 ;	program.c:791: PCON = 0x80;
      00137A 75 87 80         [24] 4145 	mov	_PCON,#0x80
                                   4146 ;	program.c:793: TH1 = 255;
      00137D 75 8D FF         [24] 4147 	mov	_TH1,#0xff
                                   4148 ;	program.c:794: TL1 = 255;
      001380 75 8B FF         [24] 4149 	mov	_TL1,#0xff
                                   4150 ;	program.c:796: TMOD = 0x20;
      001383 75 89 20         [24] 4151 	mov	_TMOD,#0x20
                                   4152 ;	program.c:798: REN = 1;
                                   4153 ;	assignBit
      001386 D2 9C            [12] 4154 	setb	_REN
                                   4155 ;	program.c:800: TR1 = 1;
                                   4156 ;	assignBit
      001388 D2 8E            [12] 4157 	setb	_TR1
                                   4158 ;	program.c:802: EA = 1;
                                   4159 ;	assignBit
      00138A D2 AF            [12] 4160 	setb	_EA
                                   4161 ;	program.c:804: EC = 1;
                                   4162 ;	assignBit
      00138C D2 AE            [12] 4163 	setb	_EC
                                   4164 ;	program.c:805: return 0;
      00138E 90 00 00         [24] 4165 	mov	dptr,#0x0000
                                   4166 ;	program.c:806: }
      001391 22               [24] 4167 	ret
                                   4168 	.area CSEG    (CODE)
                                   4169 	.area CONST   (CODE)
                                   4170 	.area CONST   (CODE)
      000000                       4171 ___str_0:
      000000 0A                    4172 	.db 0x0a
      000001 0D                    4173 	.db 0x0d
      000002 20 48 45 4C 4C 4F 21  4174 	.ascii " HELLO! Started in X2 Mode "
             20 53 74 61 72 74 65
             64 20 69 6E 20 58 32
             20 4D 6F 64 65 20
      00001D 0A                    4175 	.db 0x0a
      00001E 0D                    4176 	.db 0x0d
      00001F 00                    4177 	.db 0x00
                                   4178 	.area CSEG    (CODE)
                                   4179 	.area CONST   (CODE)
      000020                       4180 ___str_1:
      000020 48 65 6C 6C 6F 2C 20  4181 	.ascii "Hello, In PCA Demo mode "
             49 6E 20 50 43 41 20
             44 65 6D 6F 20 6D 6F
             64 65 20
      000038 0A                    4182 	.db 0x0a
      000039 0D                    4183 	.db 0x0d
      00003A 00                    4184 	.db 0x00
                                   4185 	.area CSEG    (CODE)
                                   4186 	.area CONST   (CODE)
      00003B                       4187 ___str_2:
      00003B 50 6C 65 61 73 65 20  4188 	.ascii "Please make a valid choice "
             6D 61 6B 65 20 61 20
             76 61 6C 69 64 20 63
             68 6F 69 63 65 20
      000056 0A                    4189 	.db 0x0a
      000057 0D                    4190 	.db 0x0d
      000058 00                    4191 	.db 0x00
                                   4192 	.area CSEG    (CODE)
                                   4193 	.area CONST   (CODE)
      000059                       4194 ___str_3:
      000059 50 6C 65 61 73 65 20  4195 	.ascii "Please 'E' to exit or Reset "
             27 45 27 20 74 6F 20
             65 78 69 74 20 6F 72
             20 52 65 73 65 74 20
      000075 0A                    4196 	.db 0x0a
      000076 0D                    4197 	.db 0x0d
      000077 00                    4198 	.db 0x00
                                   4199 	.area CSEG    (CODE)
                                   4200 	.area CONST   (CODE)
      000078                       4201 ___str_4:
      000078 43 61 70 74 75 72 65  4202 	.ascii "Captured Value CCPL -> %d CCPH -> %d "
             64 20 56 61 6C 75 65
             20 43 43 50 4C 20 2D
             3E 20 25 64 20 43 43
             50 48 20 2D 3E 20 25
             64 20
      00009D 0A                    4203 	.db 0x0a
      00009E 0D                    4204 	.db 0x0d
      00009F 00                    4205 	.db 0x00
                                   4206 	.area CSEG    (CODE)
                                   4207 	.area CONST   (CODE)
      0000A0                       4208 ___str_5:
      0000A0 54 69 6D 65 72 20 49  4209 	.ascii "Timer Interrupt"
             6E 74 65 72 72 75 70
             74
      0000AF 0A                    4210 	.db 0x0a
      0000B0 0D                    4211 	.db 0x0d
      0000B1 00                    4212 	.db 0x00
                                   4213 	.area CSEG    (CODE)
                                   4214 	.area CONST   (CODE)
      0000B2                       4215 ___str_6:
      0000B2 47 6F 69 6E 67 20 74  4216 	.ascii "Going to main menu.. "
             6F 20 6D 61 69 6E 20
             6D 65 6E 75 2E 2E 20
      0000C7 0A                    4217 	.db 0x0a
      0000C8 0D                    4218 	.db 0x0d
      0000C9 00                    4219 	.db 0x00
                                   4220 	.area CSEG    (CODE)
                                   4221 	.area CONST   (CODE)
      0000CA                       4222 ___str_7:
      0000CA 53 65 74 74 69 6E 67  4223 	.ascii "Setting P1.3 as falling edge detector, enabling PCA interrup"
             20 50 31 2E 33 20 61
             73 20 66 61 6C 6C 69
             6E 67 20 65 64 67 65
             20 64 65 74 65 63 74
             6F 72 2C 20 65 6E 61
             62 6C 69 6E 67 20 50
             43 41 20 69 6E 74 65
             72 72 75 70
      000106 74 20                 4224 	.ascii "t "
      000108 0A                    4225 	.db 0x0a
      000109 0D                    4226 	.db 0x0d
      00010A 00                    4227 	.db 0x00
                                   4228 	.area CSEG    (CODE)
                                   4229 	.area CONST   (CODE)
      00010B                       4230 ___str_8:
      00010B 45 6E 74 65 72 69 6E  4231 	.ascii "Entering Software Timer Mode "
             67 20 53 6F 66 74 77
             61 72 65 20 54 69 6D
             65 72 20 4D 6F 64 65
             20
      000128 0A                    4232 	.db 0x0a
      000129 0D                    4233 	.db 0x0d
      00012A 00                    4234 	.db 0x00
                                   4235 	.area CSEG    (CODE)
                                   4236 	.area CONST   (CODE)
      00012B                       4237 ___str_9:
      00012B 45 6E 74 65 72 69 6E  4238 	.ascii "Entering High Speed Toggle Mode, P1.5 "
             67 20 48 69 67 68 20
             53 70 65 65 64 20 54
             6F 67 67 6C 65 20 4D
             6F 64 65 2C 20 50 31
             2E 35 20
      000151 0A                    4239 	.db 0x0a
      000152 0D                    4240 	.db 0x0d
      000153 00                    4241 	.db 0x00
                                   4242 	.area CSEG    (CODE)
                                   4243 	.area CONST   (CODE)
      000154                       4244 ___str_10:
      000154 45 6E 74 65 72 69 6E  4245 	.ascii "Entering PWM Mode, 25 percent Duty Cycle P1.6"
             67 20 50 57 4D 20 4D
             6F 64 65 2C 20 32 35
             20 70 65 72 63 65 6E
             74 20 44 75 74 79 20
             43 79 63 6C 65 20 50
             31 2E 36
      000181 0A                    4246 	.db 0x0a
      000182 0D                    4247 	.db 0x0d
      000183 00                    4248 	.db 0x00
                                   4249 	.area CSEG    (CODE)
                                   4250 	.area CONST   (CODE)
      000184                       4251 ___str_11:
      000184 45 6E 61 62 6C 69 6E  4252 	.ascii "Enabling Watchdog Timer.."
             67 20 57 61 74 63 68
             64 6F 67 20 54 69 6D
             65 72 2E 2E
      00019D 0A                    4253 	.db 0x0a
      00019E 0D                    4254 	.db 0x0d
      00019F 00                    4255 	.db 0x00
                                   4256 	.area CSEG    (CODE)
                                   4257 	.area CONST   (CODE)
      0001A0                       4258 ___str_12:
      0001A0 43 75 72 72 65 6E 74  4259 	.ascii "Currently Watchdog is being serviced"
             6C 79 20 57 61 74 63
             68 64 6F 67 20 69 73
             20 62 65 69 6E 67 20
             73 65 72 76 69 63 65
             64
      0001C4 0A                    4260 	.db 0x0a
      0001C5 0D                    4261 	.db 0x0d
      0001C6 50 72 65 73 73 20 27  4262 	.ascii "Press 'S' to stop and generate a reset "
             53 27 20 74 6F 20 73
             74 6F 70 20 61 6E 64
             20 67 65 6E 65 72 61
             74 65 20 61 20 72 65
             73 65 74 20
      0001ED 0A                    4263 	.db 0x0a
      0001EE 0D                    4264 	.db 0x0d
      0001EF 00                    4265 	.db 0x00
                                   4266 	.area CSEG    (CODE)
                                   4267 	.area CONST   (CODE)
      0001F0                       4268 ___str_13:
      0001F0 45 6E 74 65 72 69 6E  4269 	.ascii "Entering Idle, Will Exit on external interrupt 0"
             67 20 49 64 6C 65 2C
             20 57 69 6C 6C 20 45
             78 69 74 20 6F 6E 20
             65 78 74 65 72 6E 61
             6C 20 69 6E 74 65 72
             72 75 70 74 20 30
      000220 0A                    4270 	.db 0x0a
      000221 0D                    4271 	.db 0x0d
      000222 00                    4272 	.db 0x00
                                   4273 	.area CSEG    (CODE)
                                   4274 	.area CONST   (CODE)
      000223                       4275 ___str_14:
      000223 57 6F 6B 65 20 75 70  4276 	.ascii "Woke up from Idle/Power down, going to main menu "
             20 66 72 6F 6D 20 49
             64 6C 65 2F 50 6F 77
             65 72 20 64 6F 77 6E
             2C 20 67 6F 69 6E 67
             20 74 6F 20 6D 61 69
             6E 20 6D 65 6E 75 20
      000254 0A                    4277 	.db 0x0a
      000255 0D                    4278 	.db 0x0d
      000256 00                    4279 	.db 0x00
                                   4280 	.area CSEG    (CODE)
                                   4281 	.area CONST   (CODE)
      000257                       4282 ___str_15:
      000257 45 6E 74 65 72 69 6E  4283 	.ascii "Entering power down, Will Exit on external interrupt 0"
             67 20 70 6F 77 65 72
             20 64 6F 77 6E 2C 20
             57 69 6C 6C 20 45 78
             69 74 20 6F 6E 20 65
             78 74 65 72 6E 61 6C
             20 69 6E 74 65 72 72
             75 70 74 20 30
      00028D 0A                    4284 	.db 0x0a
      00028E 0D                    4285 	.db 0x0d
      00028F 00                    4286 	.db 0x00
                                   4287 	.area CSEG    (CODE)
                                   4288 	.area CONST   (CODE)
      000290                       4289 ___str_16:
      000290 43 68 61 6E 67 69 6E  4290 	.ascii "Changing Clock prescalar to go to lowest frequency in X2 Mod"
             67 20 43 6C 6F 63 6B
             20 70 72 65 73 63 61
             6C 61 72 20 74 6F 20
             67 6F 20 74 6F 20 6C
             6F 77 65 73 74 20 66
             72 65 71 75 65 6E 63
             79 20 69 6E 20 58 32
             20 4D 6F 64
      0002CC 65 2E 2E              4291 	.ascii "e.."
      0002CF 0A                    4292 	.db 0x0a
      0002D0 0D                    4293 	.db 0x0d
      0002D1 00                    4294 	.db 0x00
                                   4295 	.area CSEG    (CODE)
                                   4296 	.area CONST   (CODE)
      0002D2                       4297 ___str_17:
      0002D2 54 68 69 73 20 55 41  4298 	.ascii "This UART Session will stop working..."
             52 54 20 53 65 73 73
             69 6F 6E 20 77 69 6C
             6C 20 73 74 6F 70 20
             77 6F 72 6B 69 6E 67
             2E 2E 2E
      0002F8 0A                    4299 	.db 0x0a
      0002F9 0D                    4300 	.db 0x0d
      0002FA 00                    4301 	.db 0x00
                                   4302 	.area CSEG    (CODE)
                                   4303 	.area CONST   (CODE)
      0002FB                       4304 ___str_18:
      0002FB 0A                    4305 	.db 0x0a
      0002FC 0A                    4306 	.db 0x0a
      0002FD 0D                    4307 	.db 0x0d
      0002FE 5E 5E 5E 5E 5E 5E 5E  4308 	.ascii "^^^^^^^^^^^^^^^^^^^-MENU-^^^^^^^^^^^^^^^^^^^^^^^^^^ "
             5E 5E 5E 5E 5E 5E 5E
             5E 5E 5E 5E 5E 2D 4D
             45 4E 55 2D 5E 5E 5E
             5E 5E 5E 5E 5E 5E 5E
             5E 5E 5E 5E 5E 5E 5E
             5E 5E 5E 5E 5E 5E 5E
             5E 5E 20
      000332 0A                    4309 	.db 0x0a
      000333 0A                    4310 	.db 0x0a
      000334 0D                    4311 	.db 0x0d
      000335 00                    4312 	.db 0x00
                                   4313 	.area CSEG    (CODE)
                                   4314 	.area CONST   (CODE)
      000336                       4315 ___str_19:
      000336 27 48 27 20 2D 3E 20  4316 	.ascii "'H' -> Enter Heap Demo Mode "
             45 6E 74 65 72 20 48
             65 61 70 20 44 65 6D
             6F 20 4D 6F 64 65 20
      000352 0A                    4317 	.db 0x0a
      000353 0D                    4318 	.db 0x0d
      000354 00                    4319 	.db 0x00
                                   4320 	.area CSEG    (CODE)
                                   4321 	.area CONST   (CODE)
      000355                       4322 ___str_20:
      000355 27 50 27 20 2D 3E 20  4323 	.ascii "'P' -> Enter PCA Demo Mode "
             45 6E 74 65 72 20 50
             43 41 20 44 65 6D 6F
             20 4D 6F 64 65 20
      000370 0A                    4324 	.db 0x0a
      000371 0D                    4325 	.db 0x0d
      000372 00                    4326 	.db 0x00
                                   4327 	.area CSEG    (CODE)
                                   4328 	.area CONST   (CODE)
      000373                       4329 ___str_21:
      000373 27 41 27 20 2D 3E 20  4330 	.ascii "'A' -> Assembly C Mix "
             41 73 73 65 6D 62 6C
             79 20 43 20 4D 69 78
             20
      000389 0A                    4331 	.db 0x0a
      00038A 0D                    4332 	.db 0x0d
      00038B 00                    4333 	.db 0x00
                                   4334 	.area CSEG    (CODE)
                                   4335 	.area CONST   (CODE)
      00038C                       4336 ___str_22:
      00038C 0A                    4337 	.db 0x0a
      00038D 0D                    4338 	.db 0x0d
      00038E 20 47 69 76 65 20 70  4339 	.ascii " Give param 1, 8bit "
             61 72 61 6D 20 31 2C
             20 38 62 69 74 20
      0003A2 0A                    4340 	.db 0x0a
      0003A3 0D                    4341 	.db 0x0d
      0003A4 00                    4342 	.db 0x00
                                   4343 	.area CSEG    (CODE)
                                   4344 	.area CONST   (CODE)
      0003A5                       4345 ___str_23:
      0003A5 0A                    4346 	.db 0x0a
      0003A6 0D                    4347 	.db 0x0d
      0003A7 20 47 69 76 65 20 70  4348 	.ascii " Give param 2, 8bit "
             61 72 61 6D 20 32 2C
             20 38 62 69 74 20
      0003BB 0A                    4349 	.db 0x0a
      0003BC 0D                    4350 	.db 0x0d
      0003BD 00                    4351 	.db 0x00
                                   4352 	.area CSEG    (CODE)
                                   4353 	.area CONST   (CODE)
      0003BE                       4354 ___str_24:
      0003BE 0A                    4355 	.db 0x0a
      0003BF 0D                    4356 	.db 0x0d
      0003C0 20 47 69 76 65 20 70  4357 	.ascii " Give param 3, 8bit "
             61 72 61 6D 20 33 2C
             20 38 62 69 74 20
      0003D4 0A                    4358 	.db 0x0a
      0003D5 0D                    4359 	.db 0x0d
      0003D6 00                    4360 	.db 0x00
                                   4361 	.area CSEG    (CODE)
                                   4362 	.area CONST   (CODE)
      0003D7                       4363 ___str_25:
      0003D7 0A                    4364 	.db 0x0a
      0003D8 0D                    4365 	.db 0x0d
      0003D9 20 52 45 53 55 4C 54  4366 	.ascii " RESULT-> param3<Mod>param2 * param1 = %d "
             2D 3E 20 70 61 72 61
             6D 33 3C 4D 6F 64 3E
             70 61 72 61 6D 32 20
             2A 20 70 61 72 61 6D
             31 20 3D 20 25 64 20
      000403 0A                    4367 	.db 0x0a
      000404 0D                    4368 	.db 0x0d
      000405 00                    4369 	.db 0x00
                                   4370 	.area CSEG    (CODE)
                                   4371 	.area CONST   (CODE)
      000406                       4372 ___str_26:
      000406 0A                    4373 	.db 0x0a
      000407 0D                    4374 	.db 0x0d
      000408 20 47 6F 69 6E 67 20  4375 	.ascii " Going back to main menu.. "
             62 61 63 6B 20 74 6F
             20 6D 61 69 6E 20 6D
             65 6E 75 2E 2E 20
      000423 0A                    4376 	.db 0x0a
      000424 0D                    4377 	.db 0x0d
      000425 00                    4378 	.db 0x00
                                   4379 	.area CSEG    (CODE)
                                   4380 	.area CONST   (CODE)
      000426                       4381 ___str_27:
      000426 42 75 66 66 65 72 20  4382 	.ascii "Buffer %d Freed ...."
             25 64 20 46 72 65 65
             64 20 2E 2E 2E 2E
      00043A 0A                    4383 	.db 0x0a
      00043B 0D                    4384 	.db 0x0d
      00043C 00                    4385 	.db 0x00
                                   4386 	.area CSEG    (CODE)
                                   4387 	.area CONST   (CODE)
      00043D                       4388 ___str_28:
      00043D 4C 65 74 27 73 20 62  4389 	.ascii "Let's begin again.."
             65 67 69 6E 20 61 67
             61 69 6E 2E 2E
      000450 0A                    4390 	.db 0x0a
      000451 0D                    4391 	.db 0x0d
      000452 00                    4392 	.db 0x00
                                   4393 	.area CSEG    (CODE)
                                   4394 	.area CONST   (CODE)
      000453                       4395 ___str_29:
      000453 0A                    4396 	.db 0x0a
      000454 0D                    4397 	.db 0x0d
      000455 47 69 76 65 20 56 61  4398 	.ascii "Give Valid Buffer Number to delete(1-%d) in 3 digits"
             6C 69 64 20 42 75 66
             66 65 72 20 4E 75 6D
             62 65 72 20 74 6F 20
             64 65 6C 65 74 65 28
             31 2D 25 64 29 20 69
             6E 20 33 20 64 69 67
             69 74 73
      000489 0A                    4399 	.db 0x0a
      00048A 0D                    4400 	.db 0x0d
      00048B 00                    4401 	.db 0x00
                                   4402 	.area CSEG    (CODE)
                                   4403 	.area CONST   (CODE)
      00048C                       4404 ___str_30:
      00048C 42 75 66 66 65 72 20  4405 	.ascii "Buffer %d Successfully Deleted.. "
             25 64 20 53 75 63 63
             65 73 73 66 75 6C 6C
             79 20 44 65 6C 65 74
             65 64 2E 2E 20
      0004AD 0A                    4406 	.db 0x0a
      0004AE 0D                    4407 	.db 0x0d
      0004AF 00                    4408 	.db 0x00
                                   4409 	.area CSEG    (CODE)
                                   4410 	.area CONST   (CODE)
      0004B0                       4411 ___str_31:
      0004B0 0A                    4412 	.db 0x0a
      0004B1 0A                    4413 	.db 0x0a
      0004B2 0D                    4414 	.db 0x0d
      0004B3 5E 5E 5E 5E 5E 5E 5E  4415 	.ascii "^^^^^^^^^^^^^^^^^^^-PCA-MENU-^^^^^^^^^^^^^^^^^^^^^^^^^^ "
             5E 5E 5E 5E 5E 5E 5E
             5E 5E 5E 5E 5E 2D 50
             43 41 2D 4D 45 4E 55
             2D 5E 5E 5E 5E 5E 5E
             5E 5E 5E 5E 5E 5E 5E
             5E 5E 5E 5E 5E 5E 5E
             5E 5E 5E 5E 5E 5E 20
      0004EB 0A                    4416 	.db 0x0a
      0004EC 0A                    4417 	.db 0x0a
      0004ED 0D                    4418 	.db 0x0d
      0004EE 00                    4419 	.db 0x00
                                   4420 	.area CSEG    (CODE)
                                   4421 	.area CONST   (CODE)
      0004EF                       4422 ___str_32:
      0004EF 27 46 27 20 2D 3E 20  4423 	.ascii "'F' -> Falling Edge Capture Mode"
             46 61 6C 6C 69 6E 67
             20 45 64 67 65 20 43
             61 70 74 75 72 65 20
             4D 6F 64 65
      00050F 0A                    4424 	.db 0x0a
      000510 0D                    4425 	.db 0x0d
      000511 00                    4426 	.db 0x00
                                   4427 	.area CSEG    (CODE)
                                   4428 	.area CONST   (CODE)
      000512                       4429 ___str_33:
      000512 27 53 27 20 2D 3E 20  4430 	.ascii "'S' -> Software Timer Mode"
             53 6F 66 74 77 61 72
             65 20 54 69 6D 65 72
             20 4D 6F 64 65
      00052C 0A                    4431 	.db 0x0a
      00052D 0D                    4432 	.db 0x0d
      00052E 00                    4433 	.db 0x00
                                   4434 	.area CSEG    (CODE)
                                   4435 	.area CONST   (CODE)
      00052F                       4436 ___str_34:
      00052F 27 48 27 20 2D 3E 20  4437 	.ascii "'H' -> High Speed Output Mode"
             48 69 67 68 20 53 70
             65 65 64 20 4F 75 74
             70 75 74 20 4D 6F 64
             65
      00054C 0A                    4438 	.db 0x0a
      00054D 0D                    4439 	.db 0x0d
      00054E 00                    4440 	.db 0x00
                                   4441 	.area CSEG    (CODE)
                                   4442 	.area CONST   (CODE)
      00054F                       4443 ___str_35:
      00054F 27 50 27 20 2D 3E 20  4444 	.ascii "'P' -> PWM Mode "
             50 57 4D 20 4D 6F 64
             65 20
      00055F 0A                    4445 	.db 0x0a
      000560 0D                    4446 	.db 0x0d
      000561 00                    4447 	.db 0x00
                                   4448 	.area CSEG    (CODE)
                                   4449 	.area CONST   (CODE)
      000562                       4450 ___str_36:
      000562 27 57 27 20 2D 3E 20  4451 	.ascii "'W' -> Watchdog Timer Mode"
             57 61 74 63 68 64 6F
             67 20 54 69 6D 65 72
             20 4D 6F 64 65
      00057C 0A                    4452 	.db 0x0a
      00057D 0D                    4453 	.db 0x0d
      00057E 00                    4454 	.db 0x00
                                   4455 	.area CSEG    (CODE)
                                   4456 	.area CONST   (CODE)
      00057F                       4457 ___str_37:
      00057F 27 49 27 20 2D 3E 20  4458 	.ascii "'I' -> Idle Mode with PWM"
             49 64 6C 65 20 4D 6F
             64 65 20 77 69 74 68
             20 50 57 4D
      000598 0A                    4459 	.db 0x0a
      000599 0D                    4460 	.db 0x0d
      00059A 00                    4461 	.db 0x00
                                   4462 	.area CSEG    (CODE)
                                   4463 	.area CONST   (CODE)
      00059B                       4464 ___str_38:
      00059B 27 4C 27 20 2D 3E 20  4465 	.ascii "'L' -> Change Prescalar to lowest frequency"
             43 68 61 6E 67 65 20
             50 72 65 73 63 61 6C
             61 72 20 74 6F 20 6C
             6F 77 65 73 74 20 66
             72 65 71 75 65 6E 63
             79
      0005C6 0A                    4466 	.db 0x0a
      0005C7 0D                    4467 	.db 0x0d
      0005C8 00                    4468 	.db 0x00
                                   4469 	.area CSEG    (CODE)
                                   4470 	.area CONST   (CODE)
      0005C9                       4471 ___str_39:
      0005C9 27 44 27 20 2D 3E 20  4472 	.ascii "'D' -> Power Down Mode"
             50 6F 77 65 72 20 44
             6F 77 6E 20 4D 6F 64
             65
      0005DF 0A                    4473 	.db 0x0a
      0005E0 0A                    4474 	.db 0x0a
      0005E1 0D                    4475 	.db 0x0d
      0005E2 00                    4476 	.db 0x00
                                   4477 	.area CSEG    (CODE)
                                   4478 	.area CONST   (CODE)
      0005E3                       4479 ___str_40:
      0005E3 27 4D 27 20 2D 3E 20  4480 	.ascii "'M' -> Go to Main Menu "
             47 6F 20 74 6F 20 4D
             61 69 6E 20 4D 65 6E
             75 20
      0005FA 0A                    4481 	.db 0x0a
      0005FB 0A                    4482 	.db 0x0a
      0005FC 0D                    4483 	.db 0x0d
      0005FD 00                    4484 	.db 0x00
                                   4485 	.area CSEG    (CODE)
                                   4486 	.area CONST   (CODE)
      0005FE                       4487 ___str_41:
      0005FE 0A                    4488 	.db 0x0a
      0005FF 0A                    4489 	.db 0x0a
      000600 0D                    4490 	.db 0x0d
      000601 5E 5E 5E 5E 5E 5E 5E  4491 	.ascii "^^^^^^^^^^^^^^^^^^^-HEAP-MENU-^^^^^^^^^^^^^^^^^^^^^^^^^^ "
             5E 5E 5E 5E 5E 5E 5E
             5E 5E 5E 5E 5E 2D 48
             45 41 50 2D 4D 45 4E
             55 2D 5E 5E 5E 5E 5E
             5E 5E 5E 5E 5E 5E 5E
             5E 5E 5E 5E 5E 5E 5E
             5E 5E 5E 5E 5E 5E 5E
             20
      00063A 0A                    4492 	.db 0x0a
      00063B 0A                    4493 	.db 0x0a
      00063C 0D                    4494 	.db 0x0d
      00063D 00                    4495 	.db 0x00
                                   4496 	.area CSEG    (CODE)
                                   4497 	.area CONST   (CODE)
      00063E                       4498 ___str_42:
      00063E 59 6F 75 20 63 61 6E  4499 	.ascii "You can enter characters or use commands from below "
             20 65 6E 74 65 72 20
             63 68 61 72 61 63 74
             65 72 73 20 6F 72 20
             75 73 65 20 63 6F 6D
             6D 61 6E 64 73 20 66
             72 6F 6D 20 62 65 6C
             6F 77 20
      000672 0A                    4500 	.db 0x0a
      000673 0D                    4501 	.db 0x0d
      000674 00                    4502 	.db 0x00
                                   4503 	.area CSEG    (CODE)
                                   4504 	.area CONST   (CODE)
      000675                       4505 ___str_43:
      000675 27 3F 27 20 2D 3E 20  4506 	.ascii "'?' -> Show heap status, dump & clear Buffer 0 "
             53 68 6F 77 20 68 65
             61 70 20 73 74 61 74
             75 73 2C 20 64 75 6D
             70 20 26 20 63 6C 65
             61 72 20 42 75 66 66
             65 72 20 30 20
      0006A4 0A                    4507 	.db 0x0a
      0006A5 0D                    4508 	.db 0x0d
      0006A6 00                    4509 	.db 0x00
                                   4510 	.area CSEG    (CODE)
                                   4511 	.area CONST   (CODE)
      0006A7                       4512 ___str_44:
      0006A7 27 2B 27 20 2D 3E 20  4513 	.ascii "'+' -> Add a new Buffer"
             41 64 64 20 61 20 6E
             65 77 20 42 75 66 66
             65 72
      0006BE 0A                    4514 	.db 0x0a
      0006BF 0D                    4515 	.db 0x0d
      0006C0 00                    4516 	.db 0x00
                                   4517 	.area CSEG    (CODE)
                                   4518 	.area CONST   (CODE)
      0006C1                       4519 ___str_45:
      0006C1 27 2D 27 20 2D 3E 20  4520 	.ascii "'-' -> Delete existing Buffer"
             44 65 6C 65 74 65 20
             65 78 69 73 74 69 6E
             67 20 42 75 66 66 65
             72
      0006DE 0A                    4521 	.db 0x0a
      0006DF 0D                    4522 	.db 0x0d
      0006E0 00                    4523 	.db 0x00
                                   4524 	.area CSEG    (CODE)
                                   4525 	.area CONST   (CODE)
      0006E1                       4526 ___str_46:
      0006E1 27 3D 27 20 2D 3E 20  4527 	.ascii "'=' -> Dump Buffer 0 in hex"
             44 75 6D 70 20 42 75
             66 66 65 72 20 30 20
             69 6E 20 68 65 78
      0006FC 0A                    4528 	.db 0x0a
      0006FD 0D                    4529 	.db 0x0d
      0006FE 00                    4530 	.db 0x00
                                   4531 	.area CSEG    (CODE)
                                   4532 	.area CONST   (CODE)
      0006FF                       4533 ___str_47:
      0006FF 27 40 27 20 2D 3E 20  4534 	.ascii "'@' -> Free all Heap & begin again"
             46 72 65 65 20 61 6C
             6C 20 48 65 61 70 20
             26 20 62 65 67 69 6E
             20 61 67 61 69 6E
      000721 0A                    4535 	.db 0x0a
      000722 0A                    4536 	.db 0x0a
      000723 0D                    4537 	.db 0x0d
      000724 00                    4538 	.db 0x00
                                   4539 	.area CSEG    (CODE)
                                   4540 	.area CONST   (CODE)
      000725                       4541 ___str_48:
      000725 0A                    4542 	.db 0x0a
      000726 0D                    4543 	.db 0x0d
      000727 47 69 76 65 20 56 61  4544 	.ascii "Give Valid Buffer Size(030-300):"
             6C 69 64 20 42 75 66
             66 65 72 20 53 69 7A
             65 28 30 33 30 2D 33
             30 30 29 3A
      000747 00                    4545 	.db 0x00
                                   4546 	.area CSEG    (CODE)
                                   4547 	.area CONST   (CODE)
      000748                       4548 ___str_49:
      000748 46 61 69 6C 65 64 2C  4549 	.ascii "Failed, give smaller buffer"
             20 67 69 76 65 20 73
             6D 61 6C 6C 65 72 20
             62 75 66 66 65 72
      000763 0A                    4550 	.db 0x0a
      000764 0D                    4551 	.db 0x0d
      000765 00                    4552 	.db 0x00
                                   4553 	.area CSEG    (CODE)
                                   4554 	.area CONST   (CODE)
      000766                       4555 ___str_50:
      000766 0A                    4556 	.db 0x0a
      000767 0A                    4557 	.db 0x0a
      000768 0D                    4558 	.db 0x0d
      000769 23 23 23 23 53 55 43  4559 	.ascii "####SUCCESS, BUFFER Created####"
             43 45 53 53 2C 20 42
             55 46 46 45 52 20 43
             72 65 61 74 65 64 23
             23 23 23
      000788 0A                    4560 	.db 0x0a
      000789 0A                    4561 	.db 0x0a
      00078A 0D                    4562 	.db 0x0d
      00078B 00                    4563 	.db 0x00
                                   4564 	.area CSEG    (CODE)
                                   4565 	.area CONST   (CODE)
      00078C                       4566 ___str_51:
      00078C 4E 6F 20 48 65 61 70  4567 	.ascii "No Heap Memory Left, Delete some buffers..."
             20 4D 65 6D 6F 72 79
             20 4C 65 66 74 2C 20
             44 65 6C 65 74 65 20
             73 6F 6D 65 20 62 75
             66 66 65 72 73 2E 2E
             2E
      0007B7 0A                    4568 	.db 0x0a
      0007B8 0D                    4569 	.db 0x0d
      0007B9 00                    4570 	.db 0x00
                                   4571 	.area CSEG    (CODE)
                                   4572 	.area CONST   (CODE)
      0007BA                       4573 ___str_52:
      0007BA 0A                    4574 	.db 0x0a
      0007BB 0D                    4575 	.db 0x0d
      0007BC 47 69 76 65 20 56 61  4576 	.ascii "Give Valid Initial Buffer Size(0048-4800):"
             6C 69 64 20 49 6E 69
             74 69 61 6C 20 42 75
             66 66 65 72 20 53 69
             7A 65 28 30 30 34 38
             2D 34 38 30 30 29 3A
      0007E6 00                    4577 	.db 0x00
                                   4578 	.area CSEG    (CODE)
                                   4579 	.area CONST   (CODE)
      0007E7                       4580 ___str_53:
      0007E7 0A                    4581 	.db 0x0a
      0007E8 0D                    4582 	.db 0x0d
      0007E9 23 23 23 23 46 41 49  4583 	.ascii "####FAIL, Please give a smaller buffer size####"
             4C 2C 20 50 6C 65 61
             73 65 20 67 69 76 65
             20 61 20 73 6D 61 6C
             6C 65 72 20 62 75 66
             66 65 72 20 73 69 7A
             65 23 23 23 23
      000818 0A                    4584 	.db 0x0a
      000819 0A                    4585 	.db 0x0a
      00081A 0D                    4586 	.db 0x0d
      00081B 00                    4587 	.db 0x00
                                   4588 	.area CSEG    (CODE)
                                   4589 	.area CONST   (CODE)
      00081C                       4590 ___str_54:
      00081C 0A                    4591 	.db 0x0a
      00081D 0A                    4592 	.db 0x0a
      00081E 0D                    4593 	.db 0x0d
      00081F 23 23 23 23 53 55 43  4594 	.ascii "####SUCCESS, INITIAL BUFFERS Created####"
             43 45 53 53 2C 20 49
             4E 49 54 49 41 4C 20
             42 55 46 46 45 52 53
             20 43 72 65 61 74 65
             64 23 23 23 23
      000847 0A                    4595 	.db 0x0a
      000848 0A                    4596 	.db 0x0a
      000849 0D                    4597 	.db 0x0d
      00084A 00                    4598 	.db 0x00
                                   4599 	.area CSEG    (CODE)
                                   4600 	.area CONST   (CODE)
      00084B                       4601 ___str_55:
      00084B 0A                    4602 	.db 0x0a
      00084C 0A                    4603 	.db 0x0a
      00084D 0D                    4604 	.db 0x0d
      00084E 2A 2A 2A 2A 2A 2A 2A  4605 	.ascii "***********Buffer-0-Contents*********** "
             2A 2A 2A 2A 42 75 66
             66 65 72 2D 30 2D 43
             6F 6E 74 65 6E 74 73
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 20
      000876 0A                    4606 	.db 0x0a
      000877 0D                    4607 	.db 0x0d
      000878 00                    4608 	.db 0x00
                                   4609 	.area CSEG    (CODE)
                                   4610 	.area CONST   (CODE)
      000879                       4611 ___str_56:
      000879 0A                    4612 	.db 0x0a
      00087A 0D                    4613 	.db 0x0d
      00087B 00                    4614 	.db 0x00
                                   4615 	.area CSEG    (CODE)
                                   4616 	.area CONST   (CODE)
      00087C                       4617 ___str_57:
      00087C 0A                    4618 	.db 0x0a
      00087D 0A                    4619 	.db 0x0a
      00087E 0D                    4620 	.db 0x0d
      00087F 00                    4621 	.db 0x00
                                   4622 	.area CSEG    (CODE)
                                   4623 	.area CONST   (CODE)
      000880                       4624 ___str_58:
      000880 42 75 66 66 65 72 30  4625 	.ascii "Buffer0 is Empty...."
             20 69 73 20 45 6D 70
             74 79 2E 2E 2E 2E
      000894 0A                    4626 	.db 0x0a
      000895 0D                    4627 	.db 0x0d
      000896 00                    4628 	.db 0x00
                                   4629 	.area CSEG    (CODE)
                                   4630 	.area CONST   (CODE)
      000897                       4631 ___str_59:
      000897 0A                    4632 	.db 0x0a
      000898 0D                    4633 	.db 0x0d
      000899 2D 2D 2D 2D 2D 2D 2D  4634 	.ascii "-------------------------HEXDUMP----------------------------"
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 48 45 58
             44 55 4D 50 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D
      0008D5 2D 2D 2D 2D           4635 	.ascii "----"
      0008D9 00                    4636 	.db 0x00
                                   4637 	.area CSEG    (CODE)
                                   4638 	.area CONST   (CODE)
      0008DA                       4639 ___str_60:
      0008DA 0A                    4640 	.db 0x0a
      0008DB 0D                    4641 	.db 0x0d
      0008DC 20 20 20 20 41 44 44  4642 	.ascii "    ADDR: +0 +1 +2 +3 +4 +5 +6 +7 +8 +9 +A +B +C +D +E +F "
             52 3A 20 2B 30 20 2B
             31 20 2B 32 20 2B 33
             20 2B 34 20 2B 35 20
             2B 36 20 2B 37 20 2B
             38 20 2B 39 20 2B 41
             20 2B 42 20 2B 43 20
             2B 44 20 2B 45 20 2B
             46 20
      000916 0A                    4643 	.db 0x0a
      000917 0D                    4644 	.db 0x0d
      000918 00                    4645 	.db 0x00
                                   4646 	.area CSEG    (CODE)
                                   4647 	.area CONST   (CODE)
      000919                       4648 ___str_61:
      000919 0A                    4649 	.db 0x0a
      00091A 0D                    4650 	.db 0x0d
      00091B 25 70 3A 20           4651 	.ascii "%p: "
      00091F 00                    4652 	.db 0x00
                                   4653 	.area CSEG    (CODE)
                                   4654 	.area CONST   (CODE)
      000920                       4655 ___str_62:
      000920 25 78 20              4656 	.ascii "%x "
      000923 00                    4657 	.db 0x00
                                   4658 	.area CSEG    (CODE)
                                   4659 	.area CONST   (CODE)
      000924                       4660 ___str_63:
      000924 42 75 66 66 65 72 20  4661 	.ascii "Buffer 0 is empty..."
             30 20 69 73 20 65 6D
             70 74 79 2E 2E 2E
      000938 0A                    4662 	.db 0x0a
      000939 0D                    4663 	.db 0x0d
      00093A 00                    4664 	.db 0x00
                                   4665 	.area CSEG    (CODE)
                                   4666 	.area CONST   (CODE)
      00093B                       4667 ___str_64:
      00093B 0A                    4668 	.db 0x0a
      00093C 0D                    4669 	.db 0x0d
      00093D 2A 2A 2A 2A 2A 2A 2A  4670 	.ascii "****************HEAP*STATS*************"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 48 45 41 50 2A
             53 54 41 54 53 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A
      000964 0A                    4671 	.db 0x0a
      000965 0D                    4672 	.db 0x0d
      000966 00                    4673 	.db 0x00
                                   4674 	.area CSEG    (CODE)
                                   4675 	.area CONST   (CODE)
      000967                       4676 ___str_65:
      000967 54 6F 74 61 6C 20 48  4677 	.ascii "Total Heap Size: %d "
             65 61 70 20 53 69 7A
             65 3A 20 25 64 20
      00097B 0A                    4678 	.db 0x0a
      00097C 0D                    4679 	.db 0x0d
      00097D 00                    4680 	.db 0x00
                                   4681 	.area CSEG    (CODE)
                                   4682 	.area CONST   (CODE)
      00097E                       4683 ___str_66:
      00097E 41 6C 6C 6F 63 61 74  4684 	.ascii "Allocated Heap Size: %d "
             65 64 20 48 65 61 70
             20 53 69 7A 65 3A 20
             25 64 20
      000996 0A                    4685 	.db 0x0a
      000997 0D                    4686 	.db 0x0d
      000998 00                    4687 	.db 0x00
                                   4688 	.area CSEG    (CODE)
                                   4689 	.area CONST   (CODE)
      000999                       4690 ___str_67:
      000999 41 6C 6C 20 43 68 61  4691 	.ascii "All Chars: %d "
             72 73 3A 20 25 64 20
      0009A7 0A                    4692 	.db 0x0a
      0009A8 0D                    4693 	.db 0x0d
      0009A9 00                    4694 	.db 0x00
                                   4695 	.area CSEG    (CODE)
                                   4696 	.area CONST   (CODE)
      0009AA                       4697 ___str_68:
      0009AA 53 74 6F 72 61 67 65  4698 	.ascii "Storage Chars: %d "
             20 43 68 61 72 73 3A
             20 25 64 20
      0009BC 0A                    4699 	.db 0x0a
      0009BD 0D                    4700 	.db 0x0d
      0009BE 00                    4701 	.db 0x00
                                   4702 	.area CSEG    (CODE)
                                   4703 	.area CONST   (CODE)
      0009BF                       4704 ___str_69:
      0009BF 54 6F 74 61 6C 20 42  4705 	.ascii "Total Buffers: %d "
             75 66 66 65 72 73 3A
             20 25 64 20
      0009D1 0A                    4706 	.db 0x0a
      0009D2 0D                    4707 	.db 0x0d
      0009D3 00                    4708 	.db 0x00
                                   4709 	.area CSEG    (CODE)
                                   4710 	.area CONST   (CODE)
      0009D4                       4711 ___str_70:
      0009D4 2A 2A 2A 2A 2A 2A 2A  4712 	.ascii "****************BUFFER*%d***************"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 42 55 46 46 45
             52 2A 25 64 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A
      0009FC 0A                    4713 	.db 0x0a
      0009FD 0D                    4714 	.db 0x0d
      0009FE 00                    4715 	.db 0x00
                                   4716 	.area CSEG    (CODE)
                                   4717 	.area CONST   (CODE)
      0009FF                       4718 ___str_71:
      0009FF 42 75 66 66 65 72 23  4719 	.ascii "Buffer#: %d "
             3A 20 25 64 20
      000A0B 0A                    4720 	.db 0x0a
      000A0C 0D                    4721 	.db 0x0d
      000A0D 00                    4722 	.db 0x00
                                   4723 	.area CSEG    (CODE)
                                   4724 	.area CONST   (CODE)
      000A0E                       4725 ___str_72:
      000A0E 42 75 66 66 65 72 53  4726 	.ascii "BufferStart: %p "
             74 61 72 74 3A 20 25
             70 20
      000A1E 0A                    4727 	.db 0x0a
      000A1F 0D                    4728 	.db 0x0d
      000A20 00                    4729 	.db 0x00
                                   4730 	.area CSEG    (CODE)
                                   4731 	.area CONST   (CODE)
      000A21                       4732 ___str_73:
      000A21 42 75 66 66 65 72 45  4733 	.ascii "BufferEnd: %p "
             6E 64 3A 20 25 70 20
      000A2F 0A                    4734 	.db 0x0a
      000A30 0D                    4735 	.db 0x0d
      000A31 00                    4736 	.db 0x00
                                   4737 	.area CSEG    (CODE)
                                   4738 	.area CONST   (CODE)
      000A32                       4739 ___str_74:
      000A32 42 75 66 66 65 72 53  4740 	.ascii "BufferSize: %d "
             69 7A 65 3A 20 25 64
             20
      000A41 0A                    4741 	.db 0x0a
      000A42 0D                    4742 	.db 0x0d
      000A43 00                    4743 	.db 0x00
                                   4744 	.area CSEG    (CODE)
                                   4745 	.area CONST   (CODE)
      000A44                       4746 ___str_75:
      000A44 54 6F 74 61 6C 55 73  4747 	.ascii "TotalUsed: %d "
             65 64 3A 20 25 64 20
      000A52 0A                    4748 	.db 0x0a
      000A53 0D                    4749 	.db 0x0d
      000A54 00                    4750 	.db 0x00
                                   4751 	.area CSEG    (CODE)
                                   4752 	.area CONST   (CODE)
      000A55                       4753 ___str_76:
      000A55 2A 2A 2A 2A 2A 2A 2A  4754 	.ascii "***************************************"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A
      000A7C 0A                    4755 	.db 0x0a
      000A7D 0D                    4756 	.db 0x0d
      000A7E 00                    4757 	.db 0x00
                                   4758 	.area CSEG    (CODE)
                                   4759 	.area CONST   (CODE)
      000A7F                       4760 ___str_77:
      000A7F 45 52 52 2C 4E 75 6D  4761 	.ascii "ERR,Numbers ONLY!"
             62 65 72 73 20 4F 4E
             4C 59 21
      000A90 0A                    4762 	.db 0x0a
      000A91 0D                    4763 	.db 0x0d
      000A92 00                    4764 	.db 0x00
                                   4765 	.area CSEG    (CODE)
                                   4766 	.area XINIT   (CODE)
      000000                       4767 __xinit__global_var_test:
      000000 02                    4768 	.db #0x02	; 2
      000001                       4769 __xinit__watchdog_flag:
      000001 00                    4770 	.db #0x00	; 0
                                   4771 	.area CABS    (ABS,CODE)
