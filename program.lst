                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.0 #12072 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module program
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl __sdcc_external_startup
                                     12 	.globl _main
                                     13 	.globl _printf
                                     14 	.globl _free
                                     15 	.globl _malloc
                                     16 	.globl _TF1
                                     17 	.globl _TR1
                                     18 	.globl _TF0
                                     19 	.globl _TR0
                                     20 	.globl _IE1
                                     21 	.globl _IT1
                                     22 	.globl _IE0
                                     23 	.globl _IT0
                                     24 	.globl _SM0
                                     25 	.globl _SM1
                                     26 	.globl _SM2
                                     27 	.globl _REN
                                     28 	.globl _TB8
                                     29 	.globl _RB8
                                     30 	.globl _TI
                                     31 	.globl _RI
                                     32 	.globl _CY
                                     33 	.globl _AC
                                     34 	.globl _F0
                                     35 	.globl _RS1
                                     36 	.globl _RS0
                                     37 	.globl _OV
                                     38 	.globl _F1
                                     39 	.globl _P
                                     40 	.globl _RD
                                     41 	.globl _WR
                                     42 	.globl _T1
                                     43 	.globl _T0
                                     44 	.globl _INT1
                                     45 	.globl _INT0
                                     46 	.globl _TXD0
                                     47 	.globl _TXD
                                     48 	.globl _RXD0
                                     49 	.globl _RXD
                                     50 	.globl _P3_7
                                     51 	.globl _P3_6
                                     52 	.globl _P3_5
                                     53 	.globl _P3_4
                                     54 	.globl _P3_3
                                     55 	.globl _P3_2
                                     56 	.globl _P3_1
                                     57 	.globl _P3_0
                                     58 	.globl _P2_7
                                     59 	.globl _P2_6
                                     60 	.globl _P2_5
                                     61 	.globl _P2_4
                                     62 	.globl _P2_3
                                     63 	.globl _P2_2
                                     64 	.globl _P2_1
                                     65 	.globl _P2_0
                                     66 	.globl _P1_7
                                     67 	.globl _P1_6
                                     68 	.globl _P1_5
                                     69 	.globl _P1_4
                                     70 	.globl _P1_3
                                     71 	.globl _P1_2
                                     72 	.globl _P1_1
                                     73 	.globl _P1_0
                                     74 	.globl _P0_7
                                     75 	.globl _P0_6
                                     76 	.globl _P0_5
                                     77 	.globl _P0_4
                                     78 	.globl _P0_3
                                     79 	.globl _P0_2
                                     80 	.globl _P0_1
                                     81 	.globl _P0_0
                                     82 	.globl _PS
                                     83 	.globl _PT1
                                     84 	.globl _PX1
                                     85 	.globl _PT0
                                     86 	.globl _PX0
                                     87 	.globl _EA
                                     88 	.globl _ES
                                     89 	.globl _ET1
                                     90 	.globl _EX1
                                     91 	.globl _ET0
                                     92 	.globl _EX0
                                     93 	.globl _BREG_F7
                                     94 	.globl _BREG_F6
                                     95 	.globl _BREG_F5
                                     96 	.globl _BREG_F4
                                     97 	.globl _BREG_F3
                                     98 	.globl _BREG_F2
                                     99 	.globl _BREG_F1
                                    100 	.globl _BREG_F0
                                    101 	.globl _P5_7
                                    102 	.globl _P5_6
                                    103 	.globl _P5_5
                                    104 	.globl _P5_4
                                    105 	.globl _P5_3
                                    106 	.globl _P5_2
                                    107 	.globl _P5_1
                                    108 	.globl _P5_0
                                    109 	.globl _P4_7
                                    110 	.globl _P4_6
                                    111 	.globl _P4_5
                                    112 	.globl _P4_4
                                    113 	.globl _P4_3
                                    114 	.globl _P4_2
                                    115 	.globl _P4_1
                                    116 	.globl _P4_0
                                    117 	.globl _PX0L
                                    118 	.globl _PT0L
                                    119 	.globl _PX1L
                                    120 	.globl _PT1L
                                    121 	.globl _PSL
                                    122 	.globl _PT2L
                                    123 	.globl _PPCL
                                    124 	.globl _EC
                                    125 	.globl _CCF0
                                    126 	.globl _CCF1
                                    127 	.globl _CCF2
                                    128 	.globl _CCF3
                                    129 	.globl _CCF4
                                    130 	.globl _CR
                                    131 	.globl _CF
                                    132 	.globl _TF2
                                    133 	.globl _EXF2
                                    134 	.globl _RCLK
                                    135 	.globl _TCLK
                                    136 	.globl _EXEN2
                                    137 	.globl _TR2
                                    138 	.globl _C_T2
                                    139 	.globl _CP_RL2
                                    140 	.globl _T2CON_7
                                    141 	.globl _T2CON_6
                                    142 	.globl _T2CON_5
                                    143 	.globl _T2CON_4
                                    144 	.globl _T2CON_3
                                    145 	.globl _T2CON_2
                                    146 	.globl _T2CON_1
                                    147 	.globl _T2CON_0
                                    148 	.globl _PT2
                                    149 	.globl _ET2
                                    150 	.globl __AUXR
                                    151 	.globl _TMOD
                                    152 	.globl _TL1
                                    153 	.globl _TL0
                                    154 	.globl _TH1
                                    155 	.globl _TH0
                                    156 	.globl _TCON
                                    157 	.globl _SP
                                    158 	.globl _SCON
                                    159 	.globl _SBUF0
                                    160 	.globl _SBUF
                                    161 	.globl _PSW
                                    162 	.globl _PCON
                                    163 	.globl _P3
                                    164 	.globl _P2
                                    165 	.globl _P1
                                    166 	.globl _P0
                                    167 	.globl _IP
                                    168 	.globl _IE
                                    169 	.globl _DP0L
                                    170 	.globl _DPL
                                    171 	.globl _DP0H
                                    172 	.globl _DPH
                                    173 	.globl _B
                                    174 	.globl _ACC
                                    175 	.globl _EECON
                                    176 	.globl _KBF
                                    177 	.globl _KBE
                                    178 	.globl _KBLS
                                    179 	.globl _BRL
                                    180 	.globl _BDRCON
                                    181 	.globl _T2MOD
                                    182 	.globl _SPDAT
                                    183 	.globl _SPSTA
                                    184 	.globl _SPCON
                                    185 	.globl _SADEN
                                    186 	.globl _SADDR
                                    187 	.globl _WDTPRG
                                    188 	.globl _WDTRST
                                    189 	.globl _P5
                                    190 	.globl _P4
                                    191 	.globl _IPH1
                                    192 	.globl _IPL1
                                    193 	.globl _IPH0
                                    194 	.globl _IPL0
                                    195 	.globl _IEN1
                                    196 	.globl _IEN0
                                    197 	.globl _CMOD
                                    198 	.globl _CL
                                    199 	.globl _CH
                                    200 	.globl _CCON
                                    201 	.globl _CCAPM4
                                    202 	.globl _CCAPM3
                                    203 	.globl _CCAPM2
                                    204 	.globl _CCAPM1
                                    205 	.globl _CCAPM0
                                    206 	.globl _CCAP4L
                                    207 	.globl _CCAP3L
                                    208 	.globl _CCAP2L
                                    209 	.globl _CCAP1L
                                    210 	.globl _CCAP0L
                                    211 	.globl _CCAP4H
                                    212 	.globl _CCAP3H
                                    213 	.globl _CCAP2H
                                    214 	.globl _CCAP1H
                                    215 	.globl _CCAP0H
                                    216 	.globl _CKCON1
                                    217 	.globl _CKCON0
                                    218 	.globl _CKRL
                                    219 	.globl _AUXR1
                                    220 	.globl _AUXR
                                    221 	.globl _TH2
                                    222 	.globl _TL2
                                    223 	.globl _RCAP2H
                                    224 	.globl _RCAP2L
                                    225 	.globl _T2CON
                                    226 	.globl _buffers_array
                                    227 	.globl _program_stats
                                    228 	.globl _DEBUG_LOC
                                    229 	.globl _user_interface
                                    230 	.globl _at_clear_all_buffers
                                    231 	.globl _delete_buffer
                                    232 	.globl _print_menu
                                    233 	.globl _create_new_buffer
                                    234 	.globl _create_initial_buffers
                                    235 	.globl _enter_chars
                                    236 	.globl _dump_buff_zero_ascii
                                    237 	.globl _dump_buff_zero_hex
                                    238 	.globl _print_heap_stats
                                    239 	.globl _print_all_buffers
                                    240 	.globl _get_number
                                    241 	.globl _get_num_helper
                                    242 	.globl _putchar
                                    243 	.globl _getchar
                                    244 	.globl _dataout
                                    245 ;--------------------------------------------------------
                                    246 ; special function registers
                                    247 ;--------------------------------------------------------
                                    248 	.area RSEG    (ABS,DATA)
      000000                        249 	.org 0x0000
                           0000C8   250 _T2CON	=	0x00c8
                           0000CA   251 _RCAP2L	=	0x00ca
                           0000CB   252 _RCAP2H	=	0x00cb
                           0000CC   253 _TL2	=	0x00cc
                           0000CD   254 _TH2	=	0x00cd
                           00008E   255 _AUXR	=	0x008e
                           0000A2   256 _AUXR1	=	0x00a2
                           000097   257 _CKRL	=	0x0097
                           00008F   258 _CKCON0	=	0x008f
                           0000AF   259 _CKCON1	=	0x00af
                           0000FA   260 _CCAP0H	=	0x00fa
                           0000FB   261 _CCAP1H	=	0x00fb
                           0000FC   262 _CCAP2H	=	0x00fc
                           0000FD   263 _CCAP3H	=	0x00fd
                           0000FE   264 _CCAP4H	=	0x00fe
                           0000EA   265 _CCAP0L	=	0x00ea
                           0000EB   266 _CCAP1L	=	0x00eb
                           0000EC   267 _CCAP2L	=	0x00ec
                           0000ED   268 _CCAP3L	=	0x00ed
                           0000EE   269 _CCAP4L	=	0x00ee
                           0000DA   270 _CCAPM0	=	0x00da
                           0000DB   271 _CCAPM1	=	0x00db
                           0000DC   272 _CCAPM2	=	0x00dc
                           0000DD   273 _CCAPM3	=	0x00dd
                           0000DE   274 _CCAPM4	=	0x00de
                           0000D8   275 _CCON	=	0x00d8
                           0000F9   276 _CH	=	0x00f9
                           0000E9   277 _CL	=	0x00e9
                           0000D9   278 _CMOD	=	0x00d9
                           0000A8   279 _IEN0	=	0x00a8
                           0000B1   280 _IEN1	=	0x00b1
                           0000B8   281 _IPL0	=	0x00b8
                           0000B7   282 _IPH0	=	0x00b7
                           0000B2   283 _IPL1	=	0x00b2
                           0000B3   284 _IPH1	=	0x00b3
                           0000C0   285 _P4	=	0x00c0
                           0000E8   286 _P5	=	0x00e8
                           0000A6   287 _WDTRST	=	0x00a6
                           0000A7   288 _WDTPRG	=	0x00a7
                           0000A9   289 _SADDR	=	0x00a9
                           0000B9   290 _SADEN	=	0x00b9
                           0000C3   291 _SPCON	=	0x00c3
                           0000C4   292 _SPSTA	=	0x00c4
                           0000C5   293 _SPDAT	=	0x00c5
                           0000C9   294 _T2MOD	=	0x00c9
                           00009B   295 _BDRCON	=	0x009b
                           00009A   296 _BRL	=	0x009a
                           00009C   297 _KBLS	=	0x009c
                           00009D   298 _KBE	=	0x009d
                           00009E   299 _KBF	=	0x009e
                           0000D2   300 _EECON	=	0x00d2
                           0000E0   301 _ACC	=	0x00e0
                           0000F0   302 _B	=	0x00f0
                           000083   303 _DPH	=	0x0083
                           000083   304 _DP0H	=	0x0083
                           000082   305 _DPL	=	0x0082
                           000082   306 _DP0L	=	0x0082
                           0000A8   307 _IE	=	0x00a8
                           0000B8   308 _IP	=	0x00b8
                           000080   309 _P0	=	0x0080
                           000090   310 _P1	=	0x0090
                           0000A0   311 _P2	=	0x00a0
                           0000B0   312 _P3	=	0x00b0
                           000087   313 _PCON	=	0x0087
                           0000D0   314 _PSW	=	0x00d0
                           000099   315 _SBUF	=	0x0099
                           000099   316 _SBUF0	=	0x0099
                           000098   317 _SCON	=	0x0098
                           000081   318 _SP	=	0x0081
                           000088   319 _TCON	=	0x0088
                           00008C   320 _TH0	=	0x008c
                           00008D   321 _TH1	=	0x008d
                           00008A   322 _TL0	=	0x008a
                           00008B   323 _TL1	=	0x008b
                           000089   324 _TMOD	=	0x0089
                           00008E   325 __AUXR	=	0x008e
                                    326 ;--------------------------------------------------------
                                    327 ; special function bits
                                    328 ;--------------------------------------------------------
                                    329 	.area RSEG    (ABS,DATA)
      000000                        330 	.org 0x0000
                           0000AD   331 _ET2	=	0x00ad
                           0000BD   332 _PT2	=	0x00bd
                           0000C8   333 _T2CON_0	=	0x00c8
                           0000C9   334 _T2CON_1	=	0x00c9
                           0000CA   335 _T2CON_2	=	0x00ca
                           0000CB   336 _T2CON_3	=	0x00cb
                           0000CC   337 _T2CON_4	=	0x00cc
                           0000CD   338 _T2CON_5	=	0x00cd
                           0000CE   339 _T2CON_6	=	0x00ce
                           0000CF   340 _T2CON_7	=	0x00cf
                           0000C8   341 _CP_RL2	=	0x00c8
                           0000C9   342 _C_T2	=	0x00c9
                           0000CA   343 _TR2	=	0x00ca
                           0000CB   344 _EXEN2	=	0x00cb
                           0000CC   345 _TCLK	=	0x00cc
                           0000CD   346 _RCLK	=	0x00cd
                           0000CE   347 _EXF2	=	0x00ce
                           0000CF   348 _TF2	=	0x00cf
                           0000DF   349 _CF	=	0x00df
                           0000DE   350 _CR	=	0x00de
                           0000DC   351 _CCF4	=	0x00dc
                           0000DB   352 _CCF3	=	0x00db
                           0000DA   353 _CCF2	=	0x00da
                           0000D9   354 _CCF1	=	0x00d9
                           0000D8   355 _CCF0	=	0x00d8
                           0000AE   356 _EC	=	0x00ae
                           0000BE   357 _PPCL	=	0x00be
                           0000BD   358 _PT2L	=	0x00bd
                           0000BC   359 _PSL	=	0x00bc
                           0000BB   360 _PT1L	=	0x00bb
                           0000BA   361 _PX1L	=	0x00ba
                           0000B9   362 _PT0L	=	0x00b9
                           0000B8   363 _PX0L	=	0x00b8
                           0000C0   364 _P4_0	=	0x00c0
                           0000C1   365 _P4_1	=	0x00c1
                           0000C2   366 _P4_2	=	0x00c2
                           0000C3   367 _P4_3	=	0x00c3
                           0000C4   368 _P4_4	=	0x00c4
                           0000C5   369 _P4_5	=	0x00c5
                           0000C6   370 _P4_6	=	0x00c6
                           0000C7   371 _P4_7	=	0x00c7
                           0000E8   372 _P5_0	=	0x00e8
                           0000E9   373 _P5_1	=	0x00e9
                           0000EA   374 _P5_2	=	0x00ea
                           0000EB   375 _P5_3	=	0x00eb
                           0000EC   376 _P5_4	=	0x00ec
                           0000ED   377 _P5_5	=	0x00ed
                           0000EE   378 _P5_6	=	0x00ee
                           0000EF   379 _P5_7	=	0x00ef
                           0000F0   380 _BREG_F0	=	0x00f0
                           0000F1   381 _BREG_F1	=	0x00f1
                           0000F2   382 _BREG_F2	=	0x00f2
                           0000F3   383 _BREG_F3	=	0x00f3
                           0000F4   384 _BREG_F4	=	0x00f4
                           0000F5   385 _BREG_F5	=	0x00f5
                           0000F6   386 _BREG_F6	=	0x00f6
                           0000F7   387 _BREG_F7	=	0x00f7
                           0000A8   388 _EX0	=	0x00a8
                           0000A9   389 _ET0	=	0x00a9
                           0000AA   390 _EX1	=	0x00aa
                           0000AB   391 _ET1	=	0x00ab
                           0000AC   392 _ES	=	0x00ac
                           0000AF   393 _EA	=	0x00af
                           0000B8   394 _PX0	=	0x00b8
                           0000B9   395 _PT0	=	0x00b9
                           0000BA   396 _PX1	=	0x00ba
                           0000BB   397 _PT1	=	0x00bb
                           0000BC   398 _PS	=	0x00bc
                           000080   399 _P0_0	=	0x0080
                           000081   400 _P0_1	=	0x0081
                           000082   401 _P0_2	=	0x0082
                           000083   402 _P0_3	=	0x0083
                           000084   403 _P0_4	=	0x0084
                           000085   404 _P0_5	=	0x0085
                           000086   405 _P0_6	=	0x0086
                           000087   406 _P0_7	=	0x0087
                           000090   407 _P1_0	=	0x0090
                           000091   408 _P1_1	=	0x0091
                           000092   409 _P1_2	=	0x0092
                           000093   410 _P1_3	=	0x0093
                           000094   411 _P1_4	=	0x0094
                           000095   412 _P1_5	=	0x0095
                           000096   413 _P1_6	=	0x0096
                           000097   414 _P1_7	=	0x0097
                           0000A0   415 _P2_0	=	0x00a0
                           0000A1   416 _P2_1	=	0x00a1
                           0000A2   417 _P2_2	=	0x00a2
                           0000A3   418 _P2_3	=	0x00a3
                           0000A4   419 _P2_4	=	0x00a4
                           0000A5   420 _P2_5	=	0x00a5
                           0000A6   421 _P2_6	=	0x00a6
                           0000A7   422 _P2_7	=	0x00a7
                           0000B0   423 _P3_0	=	0x00b0
                           0000B1   424 _P3_1	=	0x00b1
                           0000B2   425 _P3_2	=	0x00b2
                           0000B3   426 _P3_3	=	0x00b3
                           0000B4   427 _P3_4	=	0x00b4
                           0000B5   428 _P3_5	=	0x00b5
                           0000B6   429 _P3_6	=	0x00b6
                           0000B7   430 _P3_7	=	0x00b7
                           0000B0   431 _RXD	=	0x00b0
                           0000B0   432 _RXD0	=	0x00b0
                           0000B1   433 _TXD	=	0x00b1
                           0000B1   434 _TXD0	=	0x00b1
                           0000B2   435 _INT0	=	0x00b2
                           0000B3   436 _INT1	=	0x00b3
                           0000B4   437 _T0	=	0x00b4
                           0000B5   438 _T1	=	0x00b5
                           0000B6   439 _WR	=	0x00b6
                           0000B7   440 _RD	=	0x00b7
                           0000D0   441 _P	=	0x00d0
                           0000D1   442 _F1	=	0x00d1
                           0000D2   443 _OV	=	0x00d2
                           0000D3   444 _RS0	=	0x00d3
                           0000D4   445 _RS1	=	0x00d4
                           0000D5   446 _F0	=	0x00d5
                           0000D6   447 _AC	=	0x00d6
                           0000D7   448 _CY	=	0x00d7
                           000098   449 _RI	=	0x0098
                           000099   450 _TI	=	0x0099
                           00009A   451 _RB8	=	0x009a
                           00009B   452 _TB8	=	0x009b
                           00009C   453 _REN	=	0x009c
                           00009D   454 _SM2	=	0x009d
                           00009E   455 _SM1	=	0x009e
                           00009F   456 _SM0	=	0x009f
                           000088   457 _IT0	=	0x0088
                           000089   458 _IE0	=	0x0089
                           00008A   459 _IT1	=	0x008a
                           00008B   460 _IE1	=	0x008b
                           00008C   461 _TR0	=	0x008c
                           00008D   462 _TF0	=	0x008d
                           00008E   463 _TR1	=	0x008e
                           00008F   464 _TF1	=	0x008f
                                    465 ;--------------------------------------------------------
                                    466 ; overlayable register banks
                                    467 ;--------------------------------------------------------
                                    468 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        469 	.ds 8
                                    470 ;--------------------------------------------------------
                                    471 ; internal ram data
                                    472 ;--------------------------------------------------------
                                    473 	.area DSEG    (DATA)
      000000                        474 _delete_buffer_sloc0_1_0:
      000000                        475 	.ds 2
      000002                        476 _delete_buffer_sloc1_1_0:
      000002                        477 	.ds 2
      000004                        478 _delete_buffer_sloc2_1_0:
      000004                        479 	.ds 3
                                    480 ;--------------------------------------------------------
                                    481 ; overlayable items in internal ram 
                                    482 ;--------------------------------------------------------
                                    483 ;--------------------------------------------------------
                                    484 ; Stack segment in internal ram 
                                    485 ;--------------------------------------------------------
                                    486 	.area	SSEG
      000000                        487 __start__stack:
      000000                        488 	.ds	1
                                    489 
                                    490 ;--------------------------------------------------------
                                    491 ; indirectly addressable internal ram data
                                    492 ;--------------------------------------------------------
                                    493 	.area ISEG    (DATA)
                                    494 ;--------------------------------------------------------
                                    495 ; absolute internal ram data
                                    496 ;--------------------------------------------------------
                                    497 	.area IABS    (ABS,DATA)
                                    498 	.area IABS    (ABS,DATA)
                                    499 ;--------------------------------------------------------
                                    500 ; bit data
                                    501 ;--------------------------------------------------------
                                    502 	.area BSEG    (BIT)
                                    503 ;--------------------------------------------------------
                                    504 ; paged external ram data
                                    505 ;--------------------------------------------------------
                                    506 	.area PSEG    (PAG,XDATA)
                                    507 ;--------------------------------------------------------
                                    508 ; external ram data
                                    509 ;--------------------------------------------------------
                                    510 	.area XSEG    (XDATA)
                           006FFF   511 _DEBUG_LOC	=	0x6fff
      000000                        512 _program_stats::
      000000                        513 	.ds 10
      00000A                        514 _buffers_array::
      00000A                        515 	.ds 300
      000136                        516 _create_new_buffer_buff_65537_61:
      000136                        517 	.ds 12
      000142                        518 _create_initial_buffers_buff_65538_68:
      000142                        519 	.ds 12
      00014E                        520 _create_initial_buffers_buff1_65538_68:
      00014E                        521 	.ds 12
      00015A                        522 _dump_buff_zero_ascii_j_65537_84:
      00015A                        523 	.ds 2
      00015C                        524 _dump_buff_zero_hex_j_131073_92:
      00015C                        525 	.ds 2
      00015E                        526 _get_number_total_chars_65536_101:
      00015E                        527 	.ds 2
      000160                        528 _get_number_num_65537_103:
      000160                        529 	.ds 2
      000162                        530 _get_num_helper_times_65536_108:
      000162                        531 	.ds 2
      000164                        532 _get_num_helper_num_65536_109:
      000164                        533 	.ds 2
      000166                        534 _putchar_c_65536_112:
      000166                        535 	.ds 2
      000168                        536 _dataout_data_65536_115:
      000168                        537 	.ds 1
                                    538 ;--------------------------------------------------------
                                    539 ; absolute external ram data
                                    540 ;--------------------------------------------------------
                                    541 	.area XABS    (ABS,XDATA)
                                    542 ;--------------------------------------------------------
                                    543 ; external initialized ram data
                                    544 ;--------------------------------------------------------
                                    545 	.area XISEG   (XDATA)
                                    546 	.area HOME    (CODE)
                                    547 	.area GSINIT0 (CODE)
                                    548 	.area GSINIT1 (CODE)
                                    549 	.area GSINIT2 (CODE)
                                    550 	.area GSINIT3 (CODE)
                                    551 	.area GSINIT4 (CODE)
                                    552 	.area GSINIT5 (CODE)
                                    553 	.area GSINIT  (CODE)
                                    554 	.area GSFINAL (CODE)
                                    555 	.area CSEG    (CODE)
                                    556 ;--------------------------------------------------------
                                    557 ; interrupt vector 
                                    558 ;--------------------------------------------------------
                                    559 	.area HOME    (CODE)
      000000                        560 __interrupt_vect:
      000000 02r00r00         [24]  561 	ljmp	__sdcc_gsinit_startup
                                    562 ;--------------------------------------------------------
                                    563 ; global & static initialisations
                                    564 ;--------------------------------------------------------
                                    565 	.area HOME    (CODE)
                                    566 	.area GSINIT  (CODE)
                                    567 	.area GSFINAL (CODE)
                                    568 	.area GSINIT  (CODE)
                                    569 	.globl __sdcc_gsinit_startup
                                    570 	.globl __sdcc_program_startup
                                    571 	.globl __start__stack
                                    572 	.globl __mcs51_genXINIT
                                    573 	.globl __mcs51_genXRAMCLEAR
                                    574 	.globl __mcs51_genRAMCLEAR
                                    575 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  576 	ljmp	__sdcc_program_startup
                                    577 ;--------------------------------------------------------
                                    578 ; Home
                                    579 ;--------------------------------------------------------
                                    580 	.area HOME    (CODE)
                                    581 	.area HOME    (CODE)
      000003                        582 __sdcc_program_startup:
      000003 02r00r00         [24]  583 	ljmp	_main
                                    584 ;	return from main will return to caller
                                    585 ;--------------------------------------------------------
                                    586 ; code
                                    587 ;--------------------------------------------------------
                                    588 	.area CSEG    (CODE)
                                    589 ;------------------------------------------------------------
                                    590 ;Allocation info for local variables in function 'main'
                                    591 ;------------------------------------------------------------
                                    592 ;	program.c:68: void main(void)
                                    593 ;	-----------------------------------------
                                    594 ;	 function main
                                    595 ;	-----------------------------------------
      000000                        596 _main:
                           000007   597 	ar7 = 0x07
                           000006   598 	ar6 = 0x06
                           000005   599 	ar5 = 0x05
                           000004   600 	ar4 = 0x04
                           000003   601 	ar3 = 0x03
                           000002   602 	ar2 = 0x02
                           000001   603 	ar1 = 0x01
                           000000   604 	ar0 = 0x00
                                    605 ;	program.c:70: printf("HELLO! \n\r");
      000000 74r00            [12]  606 	mov	a,#___str_0
      000002 C0 E0            [24]  607 	push	acc
      000004 74s00            [12]  608 	mov	a,#(___str_0 >> 8)
      000006 C0 E0            [24]  609 	push	acc
      000008 74 80            [12]  610 	mov	a,#0x80
      00000A C0 E0            [24]  611 	push	acc
      00000C 12r00r00         [24]  612 	lcall	_printf
      00000F 15 81            [12]  613 	dec	sp
      000011 15 81            [12]  614 	dec	sp
      000013 15 81            [12]  615 	dec	sp
                                    616 ;	program.c:71: DEBUGPORT(0x01);
      000015 75 82 01         [24]  617 	mov	dpl,#0x01
      000018 12r0DrFC         [24]  618 	lcall	_dataout
                                    619 ;	program.c:72: user_interface();
                                    620 ;	program.c:73: }
      00001B 02r00r1E         [24]  621 	ljmp	_user_interface
                                    622 ;------------------------------------------------------------
                                    623 ;Allocation info for local variables in function 'user_interface'
                                    624 ;------------------------------------------------------------
                                    625 ;	program.c:80: void user_interface()
                                    626 ;	-----------------------------------------
                                    627 ;	 function user_interface
                                    628 ;	-----------------------------------------
      00001E                        629 _user_interface:
                                    630 ;	program.c:82: DEBUGPORT(0x02);
      00001E 75 82 02         [24]  631 	mov	dpl,#0x02
      000021 12r0DrFC         [24]  632 	lcall	_dataout
                                    633 ;	program.c:83: create_initial_buffers();
      000024 12r04rB7         [24]  634 	lcall	_create_initial_buffers
                                    635 ;	program.c:84: print_all_buffers();
      000027 12r0ArDC         [24]  636 	lcall	_print_all_buffers
                                    637 ;	program.c:85: enter_chars();
                                    638 ;	program.c:86: }
      00002A 02r06r94         [24]  639 	ljmp	_enter_chars
                                    640 ;------------------------------------------------------------
                                    641 ;Allocation info for local variables in function 'at_clear_all_buffers'
                                    642 ;------------------------------------------------------------
                                    643 ;i                         Allocated with name '_at_clear_all_buffers_i_131072_50'
                                    644 ;------------------------------------------------------------
                                    645 ;	program.c:94: void at_clear_all_buffers()
                                    646 ;	-----------------------------------------
                                    647 ;	 function at_clear_all_buffers
                                    648 ;	-----------------------------------------
      00002D                        649 _at_clear_all_buffers:
                                    650 ;	program.c:96: DEBUGPORT(0x03);
      00002D 75 82 03         [24]  651 	mov	dpl,#0x03
      000030 12r0DrFC         [24]  652 	lcall	_dataout
                                    653 ;	program.c:97: for (int i = 0; i < program_stats.total_buffers; i++)
      000033 7E 00            [12]  654 	mov	r6,#0x00
      000035 7F 00            [12]  655 	mov	r7,#0x00
      000037                        656 00103$:
      000037 90r00r08         [24]  657 	mov	dptr,#(_program_stats + 0x0008)
      00003A E0               [24]  658 	movx	a,@dptr
      00003B FC               [12]  659 	mov	r4,a
      00003C A3               [24]  660 	inc	dptr
      00003D E0               [24]  661 	movx	a,@dptr
      00003E FD               [12]  662 	mov	r5,a
      00003F C3               [12]  663 	clr	c
      000040 EE               [12]  664 	mov	a,r6
      000041 9C               [12]  665 	subb	a,r4
      000042 EF               [12]  666 	mov	a,r7
      000043 64 80            [12]  667 	xrl	a,#0x80
      000045 8D F0            [24]  668 	mov	b,r5
      000047 63 F0 80         [24]  669 	xrl	b,#0x80
      00004A 95 F0            [12]  670 	subb	a,b
      00004C 50 61            [24]  671 	jnc	00101$
                                    672 ;	program.c:99: free(buffers_array[i].buffer_start);
      00004E 90r00r00         [24]  673 	mov	dptr,#__mulint_PARM_2
      000051 EE               [12]  674 	mov	a,r6
      000052 F0               [24]  675 	movx	@dptr,a
      000053 EF               [12]  676 	mov	a,r7
      000054 A3               [24]  677 	inc	dptr
      000055 F0               [24]  678 	movx	@dptr,a
      000056 90 00 0C         [24]  679 	mov	dptr,#0x000c
      000059 C0 07            [24]  680 	push	ar7
      00005B C0 06            [24]  681 	push	ar6
      00005D 12r00r00         [24]  682 	lcall	__mulint
      000060 AC 82            [24]  683 	mov	r4,dpl
      000062 AD 83            [24]  684 	mov	r5,dph
      000064 EC               [12]  685 	mov	a,r4
      000065 24r0A            [12]  686 	add	a,#_buffers_array
      000067 FC               [12]  687 	mov	r4,a
      000068 ED               [12]  688 	mov	a,r5
      000069 34s00            [12]  689 	addc	a,#(_buffers_array >> 8)
      00006B FD               [12]  690 	mov	r5,a
      00006C 8C 82            [24]  691 	mov	dpl,r4
      00006E 8D 83            [24]  692 	mov	dph,r5
      000070 A3               [24]  693 	inc	dptr
      000071 A3               [24]  694 	inc	dptr
      000072 E0               [24]  695 	movx	a,@dptr
      000073 FB               [12]  696 	mov	r3,a
      000074 A3               [24]  697 	inc	dptr
      000075 E0               [24]  698 	movx	a,@dptr
      000076 FC               [12]  699 	mov	r4,a
      000077 A3               [24]  700 	inc	dptr
      000078 E0               [24]  701 	movx	a,@dptr
      000079 FD               [12]  702 	mov	r5,a
      00007A 8B 82            [24]  703 	mov	dpl,r3
      00007C 8C 83            [24]  704 	mov	dph,r4
      00007E 8D F0            [24]  705 	mov	b,r5
      000080 12r00r00         [24]  706 	lcall	_free
      000083 D0 06            [24]  707 	pop	ar6
      000085 D0 07            [24]  708 	pop	ar7
                                    709 ;	program.c:100: printf("Buffer %d Freed ....\n\r", i);
      000087 C0 07            [24]  710 	push	ar7
      000089 C0 06            [24]  711 	push	ar6
      00008B C0 06            [24]  712 	push	ar6
      00008D C0 07            [24]  713 	push	ar7
      00008F 74r0A            [12]  714 	mov	a,#___str_1
      000091 C0 E0            [24]  715 	push	acc
      000093 74s00            [12]  716 	mov	a,#(___str_1 >> 8)
      000095 C0 E0            [24]  717 	push	acc
      000097 74 80            [12]  718 	mov	a,#0x80
      000099 C0 E0            [24]  719 	push	acc
      00009B 12r00r00         [24]  720 	lcall	_printf
      00009E E5 81            [12]  721 	mov	a,sp
      0000A0 24 FB            [12]  722 	add	a,#0xfb
      0000A2 F5 81            [12]  723 	mov	sp,a
      0000A4 D0 06            [24]  724 	pop	ar6
      0000A6 D0 07            [24]  725 	pop	ar7
                                    726 ;	program.c:97: for (int i = 0; i < program_stats.total_buffers; i++)
      0000A8 0E               [12]  727 	inc	r6
      0000A9 BE 00 8B         [24]  728 	cjne	r6,#0x00,00103$
      0000AC 0F               [12]  729 	inc	r7
      0000AD 80 88            [24]  730 	sjmp	00103$
      0000AF                        731 00101$:
                                    732 ;	program.c:102: printf("Let's begin again..\n\r");
      0000AF 74r21            [12]  733 	mov	a,#___str_2
      0000B1 C0 E0            [24]  734 	push	acc
      0000B3 74s00            [12]  735 	mov	a,#(___str_2 >> 8)
      0000B5 C0 E0            [24]  736 	push	acc
      0000B7 74 80            [12]  737 	mov	a,#0x80
      0000B9 C0 E0            [24]  738 	push	acc
      0000BB 12r00r00         [24]  739 	lcall	_printf
      0000BE 15 81            [12]  740 	dec	sp
      0000C0 15 81            [12]  741 	dec	sp
      0000C2 15 81            [12]  742 	dec	sp
                                    743 ;	program.c:103: user_interface();
                                    744 ;	program.c:104: }
      0000C4 02r00r1E         [24]  745 	ljmp	_user_interface
                                    746 ;------------------------------------------------------------
                                    747 ;Allocation info for local variables in function 'delete_buffer'
                                    748 ;------------------------------------------------------------
                                    749 ;sloc0                     Allocated with name '_delete_buffer_sloc0_1_0'
                                    750 ;sloc1                     Allocated with name '_delete_buffer_sloc1_1_0'
                                    751 ;sloc2                     Allocated with name '_delete_buffer_sloc2_1_0'
                                    752 ;buff_number               Allocated with name '_delete_buffer_buff_number_65537_53'
                                    753 ;buff_to_free              Allocated with name '_delete_buffer_buff_to_free_65537_53'
                                    754 ;buffer_freed_size         Allocated with name '_delete_buffer_buffer_freed_size_65537_53'
                                    755 ;i                         Allocated with name '_delete_buffer_i_196609_55'
                                    756 ;------------------------------------------------------------
                                    757 ;	program.c:111: int delete_buffer()
                                    758 ;	-----------------------------------------
                                    759 ;	 function delete_buffer
                                    760 ;	-----------------------------------------
      0000C7                        761 _delete_buffer:
                                    762 ;	program.c:113: DEBUGPORT(0x04);
      0000C7 75 82 04         [24]  763 	mov	dpl,#0x04
      0000CA 12r0DrFC         [24]  764 	lcall	_dataout
                                    765 ;	program.c:117: get_del_num:
      0000CD                        766 00101$:
                                    767 ;	program.c:118: printf("\n\rGive Valid Buffer Number to delete(1-%d) in 3 digits\n\r", (program_stats.total_buffers - 1));
      0000CD 90r00r08         [24]  768 	mov	dptr,#(_program_stats + 0x0008)
      0000D0 E0               [24]  769 	movx	a,@dptr
      0000D1 FE               [12]  770 	mov	r6,a
      0000D2 A3               [24]  771 	inc	dptr
      0000D3 E0               [24]  772 	movx	a,@dptr
      0000D4 FF               [12]  773 	mov	r7,a
      0000D5 1E               [12]  774 	dec	r6
      0000D6 BE FF 01         [24]  775 	cjne	r6,#0xff,00139$
      0000D9 1F               [12]  776 	dec	r7
      0000DA                        777 00139$:
      0000DA C0 06            [24]  778 	push	ar6
      0000DC C0 07            [24]  779 	push	ar7
      0000DE 74r37            [12]  780 	mov	a,#___str_3
      0000E0 C0 E0            [24]  781 	push	acc
      0000E2 74s00            [12]  782 	mov	a,#(___str_3 >> 8)
      0000E4 C0 E0            [24]  783 	push	acc
      0000E6 74 80            [12]  784 	mov	a,#0x80
      0000E8 C0 E0            [24]  785 	push	acc
      0000EA 12r00r00         [24]  786 	lcall	_printf
      0000ED E5 81            [12]  787 	mov	a,sp
      0000EF 24 FB            [12]  788 	add	a,#0xfb
      0000F1 F5 81            [12]  789 	mov	sp,a
                                    790 ;	program.c:119: buff_number = get_number(3);
      0000F3 90 00 03         [24]  791 	mov	dptr,#0x0003
      0000F6 12r0Cr4C         [24]  792 	lcall	_get_number
      0000F9 AE 82            [24]  793 	mov	r6,dpl
      0000FB AF 83            [24]  794 	mov	r7,dph
                                    795 ;	program.c:121: if (buff_number > 0 && buff_number < program_stats.total_buffers)
      0000FD C3               [12]  796 	clr	c
      0000FE E4               [12]  797 	clr	a
      0000FF 9E               [12]  798 	subb	a,r6
      000100 74 80            [12]  799 	mov	a,#(0x00 ^ 0x80)
      000102 8F F0            [24]  800 	mov	b,r7
      000104 63 F0 80         [24]  801 	xrl	b,#0x80
      000107 95 F0            [12]  802 	subb	a,b
      000109 50 C2            [24]  803 	jnc	00101$
      00010B 90r00r08         [24]  804 	mov	dptr,#(_program_stats + 0x0008)
      00010E E0               [24]  805 	movx	a,@dptr
      00010F FC               [12]  806 	mov	r4,a
      000110 A3               [24]  807 	inc	dptr
      000111 E0               [24]  808 	movx	a,@dptr
      000112 FD               [12]  809 	mov	r5,a
      000113 C3               [12]  810 	clr	c
      000114 EE               [12]  811 	mov	a,r6
      000115 9C               [12]  812 	subb	a,r4
      000116 EF               [12]  813 	mov	a,r7
      000117 64 80            [12]  814 	xrl	a,#0x80
      000119 8D F0            [24]  815 	mov	b,r5
      00011B 63 F0 80         [24]  816 	xrl	b,#0x80
      00011E 95 F0            [12]  817 	subb	a,b
      000120 50 AB            [24]  818 	jnc	00101$
                                    819 ;	program.c:125: buff_to_free = buffers_array[buff_number].buffer_start;
      000122 90r00r00         [24]  820 	mov	dptr,#__mulint_PARM_2
      000125 EE               [12]  821 	mov	a,r6
      000126 F0               [24]  822 	movx	@dptr,a
      000127 EF               [12]  823 	mov	a,r7
      000128 A3               [24]  824 	inc	dptr
      000129 F0               [24]  825 	movx	@dptr,a
      00012A 90 00 0C         [24]  826 	mov	dptr,#0x000c
      00012D C0 07            [24]  827 	push	ar7
      00012F C0 06            [24]  828 	push	ar6
      000131 12r00r00         [24]  829 	lcall	__mulint
      000134 AC 82            [24]  830 	mov	r4,dpl
      000136 AD 83            [24]  831 	mov	r5,dph
      000138 D0 06            [24]  832 	pop	ar6
      00013A D0 07            [24]  833 	pop	ar7
      00013C EC               [12]  834 	mov	a,r4
      00013D 24r0A            [12]  835 	add	a,#_buffers_array
      00013F FC               [12]  836 	mov	r4,a
      000140 ED               [12]  837 	mov	a,r5
      000141 34s00            [12]  838 	addc	a,#(_buffers_array >> 8)
      000143 FD               [12]  839 	mov	r5,a
      000144 8C 82            [24]  840 	mov	dpl,r4
      000146 8D 83            [24]  841 	mov	dph,r5
      000148 A3               [24]  842 	inc	dptr
      000149 A3               [24]  843 	inc	dptr
      00014A E0               [24]  844 	movx	a,@dptr
      00014B F5*04            [12]  845 	mov	_delete_buffer_sloc2_1_0,a
      00014D A3               [24]  846 	inc	dptr
      00014E E0               [24]  847 	movx	a,@dptr
      00014F F5*05            [12]  848 	mov	(_delete_buffer_sloc2_1_0 + 1),a
      000151 A3               [24]  849 	inc	dptr
      000152 E0               [24]  850 	movx	a,@dptr
      000153 F5*06            [12]  851 	mov	(_delete_buffer_sloc2_1_0 + 2),a
                                    852 ;	program.c:126: buffer_freed_size = buffers_array[buff_number].buff_size;
      000155 74 08            [12]  853 	mov	a,#0x08
      000157 2C               [12]  854 	add	a,r4
      000158 F5 82            [12]  855 	mov	dpl,a
      00015A E4               [12]  856 	clr	a
      00015B 3D               [12]  857 	addc	a,r5
      00015C F5 83            [12]  858 	mov	dph,a
      00015E E0               [24]  859 	movx	a,@dptr
      00015F FC               [12]  860 	mov	r4,a
      000160 A3               [24]  861 	inc	dptr
      000161 E0               [24]  862 	movx	a,@dptr
      000162 FD               [12]  863 	mov	r5,a
                                    864 ;	program.c:128: for (int i = 0; i < (program_stats.total_buffers - 1); i++)
      000163 E4               [12]  865 	clr	a
      000164 F5*00            [12]  866 	mov	_delete_buffer_sloc0_1_0,a
      000166 F5*01            [12]  867 	mov	(_delete_buffer_sloc0_1_0 + 1),a
      000168                        868 00110$:
      000168 C0 04            [24]  869 	push	ar4
      00016A C0 05            [24]  870 	push	ar5
      00016C 90r00r08         [24]  871 	mov	dptr,#(_program_stats + 0x0008)
      00016F E0               [24]  872 	movx	a,@dptr
      000170 F5*02            [12]  873 	mov	_delete_buffer_sloc1_1_0,a
      000172 A3               [24]  874 	inc	dptr
      000173 E0               [24]  875 	movx	a,@dptr
      000174 F5*03            [12]  876 	mov	(_delete_buffer_sloc1_1_0 + 1),a
      000176 E5*02            [12]  877 	mov	a,_delete_buffer_sloc1_1_0
      000178 24 FF            [12]  878 	add	a,#0xff
      00017A F8               [12]  879 	mov	r0,a
      00017B E5*03            [12]  880 	mov	a,(_delete_buffer_sloc1_1_0 + 1)
      00017D 34 FF            [12]  881 	addc	a,#0xff
      00017F FD               [12]  882 	mov	r5,a
      000180 C3               [12]  883 	clr	c
      000181 E5*00            [12]  884 	mov	a,_delete_buffer_sloc0_1_0
      000183 98               [12]  885 	subb	a,r0
      000184 E5*01            [12]  886 	mov	a,(_delete_buffer_sloc0_1_0 + 1)
      000186 64 80            [12]  887 	xrl	a,#0x80
      000188 8D F0            [24]  888 	mov	b,r5
      00018A 63 F0 80         [24]  889 	xrl	b,#0x80
      00018D 95 F0            [12]  890 	subb	a,b
      00018F D0 05            [24]  891 	pop	ar5
      000191 D0 04            [24]  892 	pop	ar4
      000193 40 03            [24]  893 	jc	00142$
      000195 02r02r46         [24]  894 	ljmp	00104$
      000198                        895 00142$:
                                    896 ;	program.c:130: if (i >= buff_number)
      000198 C3               [12]  897 	clr	c
      000199 E5*00            [12]  898 	mov	a,_delete_buffer_sloc0_1_0
      00019B 9E               [12]  899 	subb	a,r6
      00019C E5*01            [12]  900 	mov	a,(_delete_buffer_sloc0_1_0 + 1)
      00019E 64 80            [12]  901 	xrl	a,#0x80
      0001A0 8F F0            [24]  902 	mov	b,r7
      0001A2 63 F0 80         [24]  903 	xrl	b,#0x80
      0001A5 95 F0            [12]  904 	subb	a,b
      0001A7 50 03            [24]  905 	jnc	00143$
      0001A9 02r02r3B         [24]  906 	ljmp	00111$
      0001AC                        907 00143$:
                                    908 ;	program.c:132: buffers_array[i + 1].buffer_num = i;
      0001AC C0 04            [24]  909 	push	ar4
      0001AE C0 05            [24]  910 	push	ar5
      0001B0 90r00r00         [24]  911 	mov	dptr,#__mulint_PARM_2
      0001B3 74 01            [12]  912 	mov	a,#0x01
      0001B5 25*00            [12]  913 	add	a,_delete_buffer_sloc0_1_0
      0001B7 F0               [24]  914 	movx	@dptr,a
      0001B8 E4               [12]  915 	clr	a
      0001B9 35*01            [12]  916 	addc	a,(_delete_buffer_sloc0_1_0 + 1)
      0001BB A3               [24]  917 	inc	dptr
      0001BC F0               [24]  918 	movx	@dptr,a
      0001BD 90 00 0C         [24]  919 	mov	dptr,#0x000c
      0001C0 C0 07            [24]  920 	push	ar7
      0001C2 C0 06            [24]  921 	push	ar6
      0001C4 C0 04            [24]  922 	push	ar4
      0001C6 12r00r00         [24]  923 	lcall	__mulint
      0001C9 A8 82            [24]  924 	mov	r0,dpl
      0001CB AD 83            [24]  925 	mov	r5,dph
      0001CD D0 04            [24]  926 	pop	ar4
      0001CF E8               [12]  927 	mov	a,r0
      0001D0 24r0A            [12]  928 	add	a,#_buffers_array
      0001D2 F5 82            [12]  929 	mov	dpl,a
      0001D4 ED               [12]  930 	mov	a,r5
      0001D5 34s00            [12]  931 	addc	a,#(_buffers_array >> 8)
      0001D7 F5 83            [12]  932 	mov	dph,a
      0001D9 E5*00            [12]  933 	mov	a,_delete_buffer_sloc0_1_0
      0001DB F0               [24]  934 	movx	@dptr,a
      0001DC E5*01            [12]  935 	mov	a,(_delete_buffer_sloc0_1_0 + 1)
      0001DE A3               [24]  936 	inc	dptr
      0001DF F0               [24]  937 	movx	@dptr,a
                                    938 ;	program.c:133: buffers_array[i] = buffers_array[i + 1];
      0001E0 90r00r00         [24]  939 	mov	dptr,#__mulint_PARM_2
      0001E3 E5*00            [12]  940 	mov	a,_delete_buffer_sloc0_1_0
      0001E5 F0               [24]  941 	movx	@dptr,a
      0001E6 E5*01            [12]  942 	mov	a,(_delete_buffer_sloc0_1_0 + 1)
      0001E8 A3               [24]  943 	inc	dptr
      0001E9 F0               [24]  944 	movx	@dptr,a
      0001EA 90 00 0C         [24]  945 	mov	dptr,#0x000c
      0001ED C0 05            [24]  946 	push	ar5
      0001EF C0 00            [24]  947 	push	ar0
      0001F1 12r00r00         [24]  948 	lcall	__mulint
      0001F4 AB 82            [24]  949 	mov	r3,dpl
      0001F6 AC 83            [24]  950 	mov	r4,dph
      0001F8 D0 00            [24]  951 	pop	ar0
      0001FA D0 05            [24]  952 	pop	ar5
      0001FC EB               [12]  953 	mov	a,r3
      0001FD 24r0A            [12]  954 	add	a,#_buffers_array
      0001FF FB               [12]  955 	mov	r3,a
      000200 EC               [12]  956 	mov	a,r4
      000201 34s00            [12]  957 	addc	a,#(_buffers_array >> 8)
      000203 FC               [12]  958 	mov	r4,a
      000204 7A 00            [12]  959 	mov	r2,#0x00
      000206 E8               [12]  960 	mov	a,r0
      000207 24r0A            [12]  961 	add	a,#_buffers_array
      000209 F8               [12]  962 	mov	r0,a
      00020A ED               [12]  963 	mov	a,r5
      00020B 34s00            [12]  964 	addc	a,#(_buffers_array >> 8)
      00020D FD               [12]  965 	mov	r5,a
      00020E 90r00r00         [24]  966 	mov	dptr,#___memcpy_PARM_2
      000211 E8               [12]  967 	mov	a,r0
      000212 F0               [24]  968 	movx	@dptr,a
      000213 ED               [12]  969 	mov	a,r5
      000214 A3               [24]  970 	inc	dptr
      000215 F0               [24]  971 	movx	@dptr,a
      000216 E4               [12]  972 	clr	a
      000217 A3               [24]  973 	inc	dptr
      000218 F0               [24]  974 	movx	@dptr,a
      000219 90r00r00         [24]  975 	mov	dptr,#___memcpy_PARM_3
      00021C 74 0C            [12]  976 	mov	a,#0x0c
      00021E F0               [24]  977 	movx	@dptr,a
      00021F E4               [12]  978 	clr	a
      000220 A3               [24]  979 	inc	dptr
      000221 F0               [24]  980 	movx	@dptr,a
      000222 8B 82            [24]  981 	mov	dpl,r3
      000224 8C 83            [24]  982 	mov	dph,r4
      000226 8A F0            [24]  983 	mov	b,r2
      000228 C0 05            [24]  984 	push	ar5
      00022A C0 04            [24]  985 	push	ar4
      00022C 12r00r00         [24]  986 	lcall	___memcpy
      00022F D0 04            [24]  987 	pop	ar4
      000231 D0 05            [24]  988 	pop	ar5
      000233 D0 06            [24]  989 	pop	ar6
      000235 D0 07            [24]  990 	pop	ar7
                                    991 ;	program.c:146: goto get_del_num;
      000237 D0 05            [24]  992 	pop	ar5
      000239 D0 04            [24]  993 	pop	ar4
                                    994 ;	program.c:133: buffers_array[i] = buffers_array[i + 1];
      00023B                        995 00111$:
                                    996 ;	program.c:128: for (int i = 0; i < (program_stats.total_buffers - 1); i++)
      00023B 05*00            [12]  997 	inc	_delete_buffer_sloc0_1_0
      00023D E4               [12]  998 	clr	a
      00023E B5*00 02         [24]  999 	cjne	a,_delete_buffer_sloc0_1_0,00144$
      000241 05*01            [12] 1000 	inc	(_delete_buffer_sloc0_1_0 + 1)
      000243                       1001 00144$:
      000243 02r01r68         [24] 1002 	ljmp	00110$
      000246                       1003 00104$:
                                   1004 ;	program.c:137: program_stats.total_buffers -= 1;
      000246 E5*02            [12] 1005 	mov	a,_delete_buffer_sloc1_1_0
      000248 24 FF            [12] 1006 	add	a,#0xff
      00024A FA               [12] 1007 	mov	r2,a
      00024B E5*03            [12] 1008 	mov	a,(_delete_buffer_sloc1_1_0 + 1)
      00024D 34 FF            [12] 1009 	addc	a,#0xff
      00024F FB               [12] 1010 	mov	r3,a
      000250 90r00r08         [24] 1011 	mov	dptr,#(_program_stats + 0x0008)
      000253 EA               [12] 1012 	mov	a,r2
      000254 F0               [24] 1013 	movx	@dptr,a
      000255 EB               [12] 1014 	mov	a,r3
      000256 A3               [24] 1015 	inc	dptr
      000257 F0               [24] 1016 	movx	@dptr,a
                                   1017 ;	program.c:138: program_stats.allocated_heap -= buffer_freed_size;
      000258 90r00r02         [24] 1018 	mov	dptr,#(_program_stats + 0x0002)
      00025B E0               [24] 1019 	movx	a,@dptr
      00025C FA               [12] 1020 	mov	r2,a
      00025D A3               [24] 1021 	inc	dptr
      00025E E0               [24] 1022 	movx	a,@dptr
      00025F FB               [12] 1023 	mov	r3,a
      000260 EA               [12] 1024 	mov	a,r2
      000261 C3               [12] 1025 	clr	c
      000262 9C               [12] 1026 	subb	a,r4
      000263 FC               [12] 1027 	mov	r4,a
      000264 EB               [12] 1028 	mov	a,r3
      000265 9D               [12] 1029 	subb	a,r5
      000266 FD               [12] 1030 	mov	r5,a
      000267 90r00r02         [24] 1031 	mov	dptr,#(_program_stats + 0x0002)
      00026A EC               [12] 1032 	mov	a,r4
      00026B F0               [24] 1033 	movx	@dptr,a
      00026C ED               [12] 1034 	mov	a,r5
      00026D A3               [24] 1035 	inc	dptr
      00026E F0               [24] 1036 	movx	@dptr,a
                                   1037 ;	program.c:140: free(buff_to_free);
      00026F AB*04            [24] 1038 	mov	r3,_delete_buffer_sloc2_1_0
      000271 AC*05            [24] 1039 	mov	r4,(_delete_buffer_sloc2_1_0 + 1)
      000273 AD*06            [24] 1040 	mov	r5,(_delete_buffer_sloc2_1_0 + 2)
      000275 8B 82            [24] 1041 	mov	dpl,r3
      000277 8C 83            [24] 1042 	mov	dph,r4
      000279 8D F0            [24] 1043 	mov	b,r5
      00027B C0 07            [24] 1044 	push	ar7
      00027D C0 06            [24] 1045 	push	ar6
      00027F 12r00r00         [24] 1046 	lcall	_free
      000282 D0 06            [24] 1047 	pop	ar6
      000284 D0 07            [24] 1048 	pop	ar7
                                   1049 ;	program.c:141: printf("Buffer %d Successfully Deleted.. \n\r", buff_number);
      000286 C0 06            [24] 1050 	push	ar6
      000288 C0 07            [24] 1051 	push	ar7
      00028A 74r70            [12] 1052 	mov	a,#___str_4
      00028C C0 E0            [24] 1053 	push	acc
      00028E 74s00            [12] 1054 	mov	a,#(___str_4 >> 8)
      000290 C0 E0            [24] 1055 	push	acc
      000292 74 80            [12] 1056 	mov	a,#0x80
      000294 C0 E0            [24] 1057 	push	acc
      000296 12r00r00         [24] 1058 	lcall	_printf
      000299 E5 81            [12] 1059 	mov	a,sp
      00029B 24 FB            [12] 1060 	add	a,#0xfb
      00029D F5 81            [12] 1061 	mov	sp,a
                                   1062 ;	program.c:142: return 0;
      00029F 90 00 00         [24] 1063 	mov	dptr,#0x0000
                                   1064 ;	program.c:146: goto get_del_num;
                                   1065 ;	program.c:148: }
      0002A2 22               [24] 1066 	ret
                                   1067 ;------------------------------------------------------------
                                   1068 ;Allocation info for local variables in function 'print_menu'
                                   1069 ;------------------------------------------------------------
                                   1070 ;	program.c:155: void print_menu()
                                   1071 ;	-----------------------------------------
                                   1072 ;	 function print_menu
                                   1073 ;	-----------------------------------------
      0002A3                       1074 _print_menu:
                                   1075 ;	program.c:157: DEBUGPORT(0x05);
      0002A3 75 82 05         [24] 1076 	mov	dpl,#0x05
      0002A6 12r0DrFC         [24] 1077 	lcall	_dataout
                                   1078 ;	program.c:158: printf("\n\n\r^^^^^^^^^^^^^^^^^^^-MENU-^^^^^^^^^^^^^^^^^^^^^^^^^^ \n\n\r");
      0002A9 74r94            [12] 1079 	mov	a,#___str_5
      0002AB C0 E0            [24] 1080 	push	acc
      0002AD 74s00            [12] 1081 	mov	a,#(___str_5 >> 8)
      0002AF C0 E0            [24] 1082 	push	acc
      0002B1 74 80            [12] 1083 	mov	a,#0x80
      0002B3 C0 E0            [24] 1084 	push	acc
      0002B5 12r00r00         [24] 1085 	lcall	_printf
      0002B8 15 81            [12] 1086 	dec	sp
      0002BA 15 81            [12] 1087 	dec	sp
      0002BC 15 81            [12] 1088 	dec	sp
                                   1089 ;	program.c:159: printf("You can enter characters or use commands from below \n\r");
      0002BE 74rCF            [12] 1090 	mov	a,#___str_6
      0002C0 C0 E0            [24] 1091 	push	acc
      0002C2 74s00            [12] 1092 	mov	a,#(___str_6 >> 8)
      0002C4 C0 E0            [24] 1093 	push	acc
      0002C6 74 80            [12] 1094 	mov	a,#0x80
      0002C8 C0 E0            [24] 1095 	push	acc
      0002CA 12r00r00         [24] 1096 	lcall	_printf
      0002CD 15 81            [12] 1097 	dec	sp
      0002CF 15 81            [12] 1098 	dec	sp
      0002D1 15 81            [12] 1099 	dec	sp
                                   1100 ;	program.c:160: printf("'?' -> Show heap status, dump & clear Buffer 0 \n\r");
      0002D3 74r06            [12] 1101 	mov	a,#___str_7
      0002D5 C0 E0            [24] 1102 	push	acc
      0002D7 74s01            [12] 1103 	mov	a,#(___str_7 >> 8)
      0002D9 C0 E0            [24] 1104 	push	acc
      0002DB 74 80            [12] 1105 	mov	a,#0x80
      0002DD C0 E0            [24] 1106 	push	acc
      0002DF 12r00r00         [24] 1107 	lcall	_printf
      0002E2 15 81            [12] 1108 	dec	sp
      0002E4 15 81            [12] 1109 	dec	sp
      0002E6 15 81            [12] 1110 	dec	sp
                                   1111 ;	program.c:161: printf("'+' -> Add a new Buffer\n\r");
      0002E8 74r38            [12] 1112 	mov	a,#___str_8
      0002EA C0 E0            [24] 1113 	push	acc
      0002EC 74s01            [12] 1114 	mov	a,#(___str_8 >> 8)
      0002EE C0 E0            [24] 1115 	push	acc
      0002F0 74 80            [12] 1116 	mov	a,#0x80
      0002F2 C0 E0            [24] 1117 	push	acc
      0002F4 12r00r00         [24] 1118 	lcall	_printf
      0002F7 15 81            [12] 1119 	dec	sp
      0002F9 15 81            [12] 1120 	dec	sp
      0002FB 15 81            [12] 1121 	dec	sp
                                   1122 ;	program.c:162: printf("'-' -> Delete existing Buffer\n\r");
      0002FD 74r52            [12] 1123 	mov	a,#___str_9
      0002FF C0 E0            [24] 1124 	push	acc
      000301 74s01            [12] 1125 	mov	a,#(___str_9 >> 8)
      000303 C0 E0            [24] 1126 	push	acc
      000305 74 80            [12] 1127 	mov	a,#0x80
      000307 C0 E0            [24] 1128 	push	acc
      000309 12r00r00         [24] 1129 	lcall	_printf
      00030C 15 81            [12] 1130 	dec	sp
      00030E 15 81            [12] 1131 	dec	sp
      000310 15 81            [12] 1132 	dec	sp
                                   1133 ;	program.c:163: printf("'=' -> Dump Buffer 0 in hex\n\r");
      000312 74r72            [12] 1134 	mov	a,#___str_10
      000314 C0 E0            [24] 1135 	push	acc
      000316 74s01            [12] 1136 	mov	a,#(___str_10 >> 8)
      000318 C0 E0            [24] 1137 	push	acc
      00031A 74 80            [12] 1138 	mov	a,#0x80
      00031C C0 E0            [24] 1139 	push	acc
      00031E 12r00r00         [24] 1140 	lcall	_printf
      000321 15 81            [12] 1141 	dec	sp
      000323 15 81            [12] 1142 	dec	sp
      000325 15 81            [12] 1143 	dec	sp
                                   1144 ;	program.c:164: printf("'@' -> Free all Heap & begin again\n\n\r");
      000327 74r90            [12] 1145 	mov	a,#___str_11
      000329 C0 E0            [24] 1146 	push	acc
      00032B 74s01            [12] 1147 	mov	a,#(___str_11 >> 8)
      00032D C0 E0            [24] 1148 	push	acc
      00032F 74 80            [12] 1149 	mov	a,#0x80
      000331 C0 E0            [24] 1150 	push	acc
      000333 12r00r00         [24] 1151 	lcall	_printf
      000336 15 81            [12] 1152 	dec	sp
      000338 15 81            [12] 1153 	dec	sp
      00033A 15 81            [12] 1154 	dec	sp
                                   1155 ;	program.c:165: }
      00033C 22               [24] 1156 	ret
                                   1157 ;------------------------------------------------------------
                                   1158 ;Allocation info for local variables in function 'create_new_buffer'
                                   1159 ;------------------------------------------------------------
                                   1160 ;buff_size                 Allocated with name '_create_new_buffer_buff_size_65537_61'
                                   1161 ;buff                      Allocated with name '_create_new_buffer_buff_65537_61'
                                   1162 ;------------------------------------------------------------
                                   1163 ;	program.c:173: int create_new_buffer()
                                   1164 ;	-----------------------------------------
                                   1165 ;	 function create_new_buffer
                                   1166 ;	-----------------------------------------
      00033D                       1167 _create_new_buffer:
                                   1168 ;	program.c:175: DEBUGPORT(0x06);
      00033D 75 82 06         [24] 1169 	mov	dpl,#0x06
      000340 12r0DrFC         [24] 1170 	lcall	_dataout
                                   1171 ;	program.c:178: if (program_stats.allocated_heap == program_stats.total_heap_size)
      000343 90r00r02         [24] 1172 	mov	dptr,#(_program_stats + 0x0002)
      000346 E0               [24] 1173 	movx	a,@dptr
      000347 FE               [12] 1174 	mov	r6,a
      000348 A3               [24] 1175 	inc	dptr
      000349 E0               [24] 1176 	movx	a,@dptr
      00034A FF               [12] 1177 	mov	r7,a
      00034B 90r00r00         [24] 1178 	mov	dptr,#_program_stats
      00034E E0               [24] 1179 	movx	a,@dptr
      00034F FC               [12] 1180 	mov	r4,a
      000350 A3               [24] 1181 	inc	dptr
      000351 E0               [24] 1182 	movx	a,@dptr
      000352 FD               [12] 1183 	mov	r5,a
      000353 EE               [12] 1184 	mov	a,r6
      000354 B5 04 07         [24] 1185 	cjne	a,ar4,00133$
      000357 EF               [12] 1186 	mov	a,r7
      000358 B5 05 03         [24] 1187 	cjne	a,ar5,00133$
      00035B 02r04r9E         [24] 1188 	ljmp	00111$
      00035E                       1189 00133$:
                                   1190 ;	program.c:181: get_new_buff:
      00035E                       1191 00103$:
                                   1192 ;	program.c:182: printf("\n\rGive Valid Buffer Size(030-300):");
      00035E 74rB6            [12] 1193 	mov	a,#___str_12
      000360 C0 E0            [24] 1194 	push	acc
      000362 74s01            [12] 1195 	mov	a,#(___str_12 >> 8)
      000364 C0 E0            [24] 1196 	push	acc
      000366 74 80            [12] 1197 	mov	a,#0x80
      000368 C0 E0            [24] 1198 	push	acc
      00036A 12r00r00         [24] 1199 	lcall	_printf
      00036D 15 81            [12] 1200 	dec	sp
      00036F 15 81            [12] 1201 	dec	sp
      000371 15 81            [12] 1202 	dec	sp
                                   1203 ;	program.c:183: buff_size = get_number(3);
      000373 90 00 03         [24] 1204 	mov	dptr,#0x0003
      000376 12r0Cr4C         [24] 1205 	lcall	_get_number
      000379 AE 82            [24] 1206 	mov	r6,dpl
      00037B AF 83            [24] 1207 	mov	r7,dph
                                   1208 ;	program.c:184: if (buff_size >= 30 && buff_size <= 300)
      00037D C3               [12] 1209 	clr	c
      00037E EE               [12] 1210 	mov	a,r6
      00037F 94 1E            [12] 1211 	subb	a,#0x1e
      000381 EF               [12] 1212 	mov	a,r7
      000382 64 80            [12] 1213 	xrl	a,#0x80
      000384 94 80            [12] 1214 	subb	a,#0x80
      000386 40 D6            [24] 1215 	jc	00103$
      000388 74 2C            [12] 1216 	mov	a,#0x2c
      00038A 9E               [12] 1217 	subb	a,r6
      00038B 74 81            [12] 1218 	mov	a,#(0x01 ^ 0x80)
      00038D 8F F0            [24] 1219 	mov	b,r7
      00038F 63 F0 80         [24] 1220 	xrl	b,#0x80
      000392 95 F0            [12] 1221 	subb	a,b
      000394 40 C8            [24] 1222 	jc	00103$
                                   1223 ;	program.c:186: buff.buffer_start = malloc(buff_size);
      000396 8E 82            [24] 1224 	mov	dpl,r6
      000398 8F 83            [24] 1225 	mov	dph,r7
      00039A C0 07            [24] 1226 	push	ar7
      00039C C0 06            [24] 1227 	push	ar6
      00039E 12r00r00         [24] 1228 	lcall	_malloc
      0003A1 AC 82            [24] 1229 	mov	r4,dpl
      0003A3 AD 83            [24] 1230 	mov	r5,dph
      0003A5 D0 06            [24] 1231 	pop	ar6
      0003A7 D0 07            [24] 1232 	pop	ar7
      0003A9 7B 00            [12] 1233 	mov	r3,#0x00
      0003AB 90r01r38         [24] 1234 	mov	dptr,#(_create_new_buffer_buff_65537_61 + 0x0002)
      0003AE EC               [12] 1235 	mov	a,r4
      0003AF F0               [24] 1236 	movx	@dptr,a
      0003B0 ED               [12] 1237 	mov	a,r5
      0003B1 A3               [24] 1238 	inc	dptr
      0003B2 F0               [24] 1239 	movx	@dptr,a
      0003B3 EB               [12] 1240 	mov	a,r3
      0003B4 A3               [24] 1241 	inc	dptr
      0003B5 F0               [24] 1242 	movx	@dptr,a
                                   1243 ;	program.c:187: if (buff.buffer_start == NULL)
      0003B6 EC               [12] 1244 	mov	a,r4
      0003B7 4D               [12] 1245 	orl	a,r5
      0003B8 70 18            [24] 1246 	jnz	00105$
                                   1247 ;	program.c:189: printf("Failed, give smaller buffer\n\r");
      0003BA 74rD9            [12] 1248 	mov	a,#___str_13
      0003BC C0 E0            [24] 1249 	push	acc
      0003BE 74s01            [12] 1250 	mov	a,#(___str_13 >> 8)
      0003C0 C0 E0            [24] 1251 	push	acc
      0003C2 74 80            [12] 1252 	mov	a,#0x80
      0003C4 C0 E0            [24] 1253 	push	acc
      0003C6 12r00r00         [24] 1254 	lcall	_printf
      0003C9 15 81            [12] 1255 	dec	sp
      0003CB 15 81            [12] 1256 	dec	sp
      0003CD 15 81            [12] 1257 	dec	sp
      0003CF 02r04r9A         [24] 1258 	ljmp	00106$
      0003D2                       1259 00105$:
                                   1260 ;	program.c:193: printf("\n\n\r####SUCCESS, BUFFER Created####\n\n\r");
      0003D2 C0 07            [24] 1261 	push	ar7
      0003D4 C0 06            [24] 1262 	push	ar6
      0003D6 74rF7            [12] 1263 	mov	a,#___str_14
      0003D8 C0 E0            [24] 1264 	push	acc
      0003DA 74s01            [12] 1265 	mov	a,#(___str_14 >> 8)
      0003DC C0 E0            [24] 1266 	push	acc
      0003DE 74 80            [12] 1267 	mov	a,#0x80
      0003E0 C0 E0            [24] 1268 	push	acc
      0003E2 12r00r00         [24] 1269 	lcall	_printf
      0003E5 15 81            [12] 1270 	dec	sp
      0003E7 15 81            [12] 1271 	dec	sp
      0003E9 15 81            [12] 1272 	dec	sp
      0003EB D0 06            [24] 1273 	pop	ar6
      0003ED D0 07            [24] 1274 	pop	ar7
                                   1275 ;	program.c:195: program_stats.allocated_heap += buff_size;
      0003EF 90r00r02         [24] 1276 	mov	dptr,#(_program_stats + 0x0002)
      0003F2 E0               [24] 1277 	movx	a,@dptr
      0003F3 FC               [12] 1278 	mov	r4,a
      0003F4 A3               [24] 1279 	inc	dptr
      0003F5 E0               [24] 1280 	movx	a,@dptr
      0003F6 FD               [12] 1281 	mov	r5,a
      0003F7 EE               [12] 1282 	mov	a,r6
      0003F8 2C               [12] 1283 	add	a,r4
      0003F9 FC               [12] 1284 	mov	r4,a
      0003FA EF               [12] 1285 	mov	a,r7
      0003FB 3D               [12] 1286 	addc	a,r5
      0003FC FD               [12] 1287 	mov	r5,a
      0003FD 90r00r02         [24] 1288 	mov	dptr,#(_program_stats + 0x0002)
      000400 EC               [12] 1289 	mov	a,r4
      000401 F0               [24] 1290 	movx	@dptr,a
      000402 ED               [12] 1291 	mov	a,r5
      000403 A3               [24] 1292 	inc	dptr
      000404 F0               [24] 1293 	movx	@dptr,a
                                   1294 ;	program.c:196: buff.buff_size = buff_size;
      000405 90r01r3E         [24] 1295 	mov	dptr,#(_create_new_buffer_buff_65537_61 + 0x0008)
      000408 EE               [12] 1296 	mov	a,r6
      000409 F0               [24] 1297 	movx	@dptr,a
      00040A EF               [12] 1298 	mov	a,r7
      00040B A3               [24] 1299 	inc	dptr
      00040C F0               [24] 1300 	movx	@dptr,a
                                   1301 ;	program.c:197: buff.buffer_num = program_stats.total_buffers;
      00040D 90r00r08         [24] 1302 	mov	dptr,#(_program_stats + 0x0008)
      000410 E0               [24] 1303 	movx	a,@dptr
      000411 FC               [12] 1304 	mov	r4,a
      000412 A3               [24] 1305 	inc	dptr
      000413 E0               [24] 1306 	movx	a,@dptr
      000414 FD               [12] 1307 	mov	r5,a
      000415 90r01r36         [24] 1308 	mov	dptr,#_create_new_buffer_buff_65537_61
      000418 EC               [12] 1309 	mov	a,r4
      000419 F0               [24] 1310 	movx	@dptr,a
      00041A ED               [12] 1311 	mov	a,r5
      00041B A3               [24] 1312 	inc	dptr
      00041C F0               [24] 1313 	movx	@dptr,a
                                   1314 ;	program.c:198: buff.buffer_end = buff.buffer_start + buff_size;
      00041D 90r01r38         [24] 1315 	mov	dptr,#(_create_new_buffer_buff_65537_61 + 0x0002)
      000420 E0               [24] 1316 	movx	a,@dptr
      000421 FB               [12] 1317 	mov	r3,a
      000422 A3               [24] 1318 	inc	dptr
      000423 E0               [24] 1319 	movx	a,@dptr
      000424 FC               [12] 1320 	mov	r4,a
      000425 A3               [24] 1321 	inc	dptr
      000426 E0               [24] 1322 	movx	a,@dptr
      000427 FD               [12] 1323 	mov	r5,a
      000428 EE               [12] 1324 	mov	a,r6
      000429 2B               [12] 1325 	add	a,r3
      00042A FE               [12] 1326 	mov	r6,a
      00042B EF               [12] 1327 	mov	a,r7
      00042C 3C               [12] 1328 	addc	a,r4
      00042D FF               [12] 1329 	mov	r7,a
      00042E 8D 02            [24] 1330 	mov	ar2,r5
      000430 90r01r3B         [24] 1331 	mov	dptr,#(_create_new_buffer_buff_65537_61 + 0x0005)
      000433 EE               [12] 1332 	mov	a,r6
      000434 F0               [24] 1333 	movx	@dptr,a
      000435 EF               [12] 1334 	mov	a,r7
      000436 A3               [24] 1335 	inc	dptr
      000437 F0               [24] 1336 	movx	@dptr,a
      000438 EA               [12] 1337 	mov	a,r2
      000439 A3               [24] 1338 	inc	dptr
      00043A F0               [24] 1339 	movx	@dptr,a
                                   1340 ;	program.c:199: buff.num_char = 0;
      00043B 90r01r40         [24] 1341 	mov	dptr,#(_create_new_buffer_buff_65537_61 + 0x000a)
      00043E E4               [12] 1342 	clr	a
      00043F F0               [24] 1343 	movx	@dptr,a
      000440 A3               [24] 1344 	inc	dptr
      000441 F0               [24] 1345 	movx	@dptr,a
                                   1346 ;	program.c:201: buffers_array[program_stats.total_buffers] = buff;
      000442 90r00r08         [24] 1347 	mov	dptr,#(_program_stats + 0x0008)
      000445 E0               [24] 1348 	movx	a,@dptr
      000446 FE               [12] 1349 	mov	r6,a
      000447 A3               [24] 1350 	inc	dptr
      000448 E0               [24] 1351 	movx	a,@dptr
      000449 FF               [12] 1352 	mov	r7,a
      00044A 90r00r00         [24] 1353 	mov	dptr,#__mulint_PARM_2
      00044D EE               [12] 1354 	mov	a,r6
      00044E F0               [24] 1355 	movx	@dptr,a
      00044F EF               [12] 1356 	mov	a,r7
      000450 A3               [24] 1357 	inc	dptr
      000451 F0               [24] 1358 	movx	@dptr,a
      000452 90 00 0C         [24] 1359 	mov	dptr,#0x000c
      000455 12r00r00         [24] 1360 	lcall	__mulint
      000458 AE 82            [24] 1361 	mov	r6,dpl
      00045A AF 83            [24] 1362 	mov	r7,dph
      00045C EE               [12] 1363 	mov	a,r6
      00045D 24r0A            [12] 1364 	add	a,#_buffers_array
      00045F FE               [12] 1365 	mov	r6,a
      000460 EF               [12] 1366 	mov	a,r7
      000461 34s00            [12] 1367 	addc	a,#(_buffers_array >> 8)
      000463 FF               [12] 1368 	mov	r7,a
      000464 7D 00            [12] 1369 	mov	r5,#0x00
      000466 90r00r00         [24] 1370 	mov	dptr,#___memcpy_PARM_2
      000469 74r36            [12] 1371 	mov	a,#_create_new_buffer_buff_65537_61
      00046B F0               [24] 1372 	movx	@dptr,a
      00046C 74s01            [12] 1373 	mov	a,#(_create_new_buffer_buff_65537_61 >> 8)
      00046E A3               [24] 1374 	inc	dptr
      00046F F0               [24] 1375 	movx	@dptr,a
      000470 E4               [12] 1376 	clr	a
      000471 A3               [24] 1377 	inc	dptr
      000472 F0               [24] 1378 	movx	@dptr,a
      000473 90r00r00         [24] 1379 	mov	dptr,#___memcpy_PARM_3
      000476 74 0C            [12] 1380 	mov	a,#0x0c
      000478 F0               [24] 1381 	movx	@dptr,a
      000479 E4               [12] 1382 	clr	a
      00047A A3               [24] 1383 	inc	dptr
      00047B F0               [24] 1384 	movx	@dptr,a
      00047C 8E 82            [24] 1385 	mov	dpl,r6
      00047E 8F 83            [24] 1386 	mov	dph,r7
      000480 8D F0            [24] 1387 	mov	b,r5
      000482 12r00r00         [24] 1388 	lcall	___memcpy
                                   1389 ;	program.c:202: program_stats.total_buffers += 1;
      000485 90r00r08         [24] 1390 	mov	dptr,#(_program_stats + 0x0008)
      000488 E0               [24] 1391 	movx	a,@dptr
      000489 FE               [12] 1392 	mov	r6,a
      00048A A3               [24] 1393 	inc	dptr
      00048B E0               [24] 1394 	movx	a,@dptr
      00048C FF               [12] 1395 	mov	r7,a
      00048D 0E               [12] 1396 	inc	r6
      00048E BE 00 01         [24] 1397 	cjne	r6,#0x00,00137$
      000491 0F               [12] 1398 	inc	r7
      000492                       1399 00137$:
      000492 90r00r08         [24] 1400 	mov	dptr,#(_program_stats + 0x0008)
      000495 EE               [12] 1401 	mov	a,r6
      000496 F0               [24] 1402 	movx	@dptr,a
      000497 EF               [12] 1403 	mov	a,r7
      000498 A3               [24] 1404 	inc	dptr
      000499 F0               [24] 1405 	movx	@dptr,a
      00049A                       1406 00106$:
                                   1407 ;	program.c:204: return 0;
      00049A 90 00 00         [24] 1408 	mov	dptr,#0x0000
                                   1409 ;	program.c:210: no_heap_left:
      00049D 22               [24] 1410 	ret
      00049E                       1411 00111$:
                                   1412 ;	program.c:211: printf("No Heap Memory Left, Delete some buffers...\n\r");
      00049E 74r1D            [12] 1413 	mov	a,#___str_15
      0004A0 C0 E0            [24] 1414 	push	acc
      0004A2 74s02            [12] 1415 	mov	a,#(___str_15 >> 8)
      0004A4 C0 E0            [24] 1416 	push	acc
      0004A6 74 80            [12] 1417 	mov	a,#0x80
      0004A8 C0 E0            [24] 1418 	push	acc
      0004AA 12r00r00         [24] 1419 	lcall	_printf
      0004AD 15 81            [12] 1420 	dec	sp
      0004AF 15 81            [12] 1421 	dec	sp
      0004B1 15 81            [12] 1422 	dec	sp
                                   1423 ;	program.c:212: return 0;
      0004B3 90 00 00         [24] 1424 	mov	dptr,#0x0000
                                   1425 ;	program.c:213: }
      0004B6 22               [24] 1426 	ret
                                   1427 ;------------------------------------------------------------
                                   1428 ;Allocation info for local variables in function 'create_initial_buffers'
                                   1429 ;------------------------------------------------------------
                                   1430 ;buff_size                 Allocated with name '_create_initial_buffers_buff_size_65537_67'
                                   1431 ;buff                      Allocated with name '_create_initial_buffers_buff_65538_68'
                                   1432 ;buff1                     Allocated with name '_create_initial_buffers_buff1_65538_68'
                                   1433 ;------------------------------------------------------------
                                   1434 ;	program.c:221: void create_initial_buffers()
                                   1435 ;	-----------------------------------------
                                   1436 ;	 function create_initial_buffers
                                   1437 ;	-----------------------------------------
      0004B7                       1438 _create_initial_buffers:
                                   1439 ;	program.c:223: DEBUGPORT(0x07);
      0004B7 75 82 07         [24] 1440 	mov	dpl,#0x07
      0004BA 12r0DrFC         [24] 1441 	lcall	_dataout
                                   1442 ;	program.c:226: get_buff:
      0004BD                       1443 00101$:
                                   1444 ;	program.c:227: printf("\n\rGive Valid Initial Buffer Size(0048-4800):");
      0004BD 74r4B            [12] 1445 	mov	a,#___str_16
      0004BF C0 E0            [24] 1446 	push	acc
      0004C1 74s02            [12] 1447 	mov	a,#(___str_16 >> 8)
      0004C3 C0 E0            [24] 1448 	push	acc
      0004C5 74 80            [12] 1449 	mov	a,#0x80
      0004C7 C0 E0            [24] 1450 	push	acc
      0004C9 12r00r00         [24] 1451 	lcall	_printf
      0004CC 15 81            [12] 1452 	dec	sp
      0004CE 15 81            [12] 1453 	dec	sp
      0004D0 15 81            [12] 1454 	dec	sp
                                   1455 ;	program.c:228: buff_size = get_number(4);
      0004D2 90 00 04         [24] 1456 	mov	dptr,#0x0004
      0004D5 12r0Cr4C         [24] 1457 	lcall	_get_number
      0004D8 AE 82            [24] 1458 	mov	r6,dpl
      0004DA AF 83            [24] 1459 	mov	r7,dph
                                   1460 ;	program.c:232: if (buff_size >= 48 && buff_size <= 4800)
      0004DC C3               [12] 1461 	clr	c
      0004DD EE               [12] 1462 	mov	a,r6
      0004DE 94 30            [12] 1463 	subb	a,#0x30
      0004E0 EF               [12] 1464 	mov	a,r7
      0004E1 64 80            [12] 1465 	xrl	a,#0x80
      0004E3 94 80            [12] 1466 	subb	a,#0x80
      0004E5 40 D6            [24] 1467 	jc	00101$
      0004E7 74 C0            [12] 1468 	mov	a,#0xc0
      0004E9 9E               [12] 1469 	subb	a,r6
      0004EA 74 92            [12] 1470 	mov	a,#(0x12 ^ 0x80)
      0004EC 8F F0            [24] 1471 	mov	b,r7
      0004EE 63 F0 80         [24] 1472 	xrl	b,#0x80
      0004F1 95 F0            [12] 1473 	subb	a,b
      0004F3 40 C8            [24] 1474 	jc	00101$
                                   1475 ;	program.c:234: buff.buffer_start = malloc(buff_size);
      0004F5 8E 82            [24] 1476 	mov	dpl,r6
      0004F7 8F 83            [24] 1477 	mov	dph,r7
      0004F9 C0 07            [24] 1478 	push	ar7
      0004FB C0 06            [24] 1479 	push	ar6
      0004FD 12r00r00         [24] 1480 	lcall	_malloc
      000500 AC 82            [24] 1481 	mov	r4,dpl
      000502 AD 83            [24] 1482 	mov	r5,dph
      000504 D0 06            [24] 1483 	pop	ar6
      000506 D0 07            [24] 1484 	pop	ar7
      000508 7B 00            [12] 1485 	mov	r3,#0x00
      00050A 90r01r44         [24] 1486 	mov	dptr,#(_create_initial_buffers_buff_65538_68 + 0x0002)
      00050D EC               [12] 1487 	mov	a,r4
      00050E F0               [24] 1488 	movx	@dptr,a
      00050F ED               [12] 1489 	mov	a,r5
      000510 A3               [24] 1490 	inc	dptr
      000511 F0               [24] 1491 	movx	@dptr,a
      000512 EB               [12] 1492 	mov	a,r3
      000513 A3               [24] 1493 	inc	dptr
      000514 F0               [24] 1494 	movx	@dptr,a
                                   1495 ;	program.c:235: buff1.buffer_start = malloc(buff_size);
      000515 8E 82            [24] 1496 	mov	dpl,r6
      000517 8F 83            [24] 1497 	mov	dph,r7
      000519 C0 07            [24] 1498 	push	ar7
      00051B C0 06            [24] 1499 	push	ar6
      00051D 12r00r00         [24] 1500 	lcall	_malloc
      000520 AC 82            [24] 1501 	mov	r4,dpl
      000522 AD 83            [24] 1502 	mov	r5,dph
      000524 D0 06            [24] 1503 	pop	ar6
      000526 D0 07            [24] 1504 	pop	ar7
      000528 7B 00            [12] 1505 	mov	r3,#0x00
      00052A 90r01r50         [24] 1506 	mov	dptr,#(_create_initial_buffers_buff1_65538_68 + 0x0002)
      00052D EC               [12] 1507 	mov	a,r4
      00052E F0               [24] 1508 	movx	@dptr,a
      00052F ED               [12] 1509 	mov	a,r5
      000530 A3               [24] 1510 	inc	dptr
      000531 F0               [24] 1511 	movx	@dptr,a
      000532 EB               [12] 1512 	mov	a,r3
      000533 A3               [24] 1513 	inc	dptr
      000534 F0               [24] 1514 	movx	@dptr,a
                                   1515 ;	program.c:237: if (buff.buffer_start == NULL || buff1.buffer_start == NULL)
      000535 90r01r44         [24] 1516 	mov	dptr,#(_create_initial_buffers_buff_65538_68 + 0x0002)
      000538 E0               [24] 1517 	movx	a,@dptr
      000539 FB               [12] 1518 	mov	r3,a
      00053A A3               [24] 1519 	inc	dptr
      00053B E0               [24] 1520 	movx	a,@dptr
      00053C FC               [12] 1521 	mov	r4,a
      00053D A3               [24] 1522 	inc	dptr
      00053E E0               [24] 1523 	movx	a,@dptr
      00053F EB               [12] 1524 	mov	a,r3
      000540 4C               [12] 1525 	orl	a,r4
      000541 60 0F            [24] 1526 	jz	00106$
      000543 90r01r50         [24] 1527 	mov	dptr,#(_create_initial_buffers_buff1_65538_68 + 0x0002)
      000546 E0               [24] 1528 	movx	a,@dptr
      000547 FB               [12] 1529 	mov	r3,a
      000548 A3               [24] 1530 	inc	dptr
      000549 E0               [24] 1531 	movx	a,@dptr
      00054A FC               [12] 1532 	mov	r4,a
      00054B A3               [24] 1533 	inc	dptr
      00054C E0               [24] 1534 	movx	a,@dptr
      00054D FD               [12] 1535 	mov	r5,a
      00054E EB               [12] 1536 	mov	a,r3
      00054F 4C               [12] 1537 	orl	a,r4
      000550 70 60            [24] 1538 	jnz	00107$
      000552                       1539 00106$:
                                   1540 ;	program.c:239: printf("\n\r####FAIL, Please give a smaller buffer size####\n\n\r");
      000552 74r78            [12] 1541 	mov	a,#___str_17
      000554 C0 E0            [24] 1542 	push	acc
      000556 74s02            [12] 1543 	mov	a,#(___str_17 >> 8)
      000558 C0 E0            [24] 1544 	push	acc
      00055A 74 80            [12] 1545 	mov	a,#0x80
      00055C C0 E0            [24] 1546 	push	acc
      00055E 12r00r00         [24] 1547 	lcall	_printf
      000561 15 81            [12] 1548 	dec	sp
      000563 15 81            [12] 1549 	dec	sp
      000565 15 81            [12] 1550 	dec	sp
                                   1551 ;	program.c:241: if (buff.buffer_start != NULL)
      000567 90r01r44         [24] 1552 	mov	dptr,#(_create_initial_buffers_buff_65538_68 + 0x0002)
      00056A E0               [24] 1553 	movx	a,@dptr
      00056B FB               [12] 1554 	mov	r3,a
      00056C A3               [24] 1555 	inc	dptr
      00056D E0               [24] 1556 	movx	a,@dptr
      00056E FC               [12] 1557 	mov	r4,a
      00056F A3               [24] 1558 	inc	dptr
      000570 E0               [24] 1559 	movx	a,@dptr
      000571 EB               [12] 1560 	mov	a,r3
      000572 4C               [12] 1561 	orl	a,r4
      000573 60 14            [24] 1562 	jz	00103$
                                   1563 ;	program.c:242: free(buff.buffer_start);
      000575 90r01r44         [24] 1564 	mov	dptr,#(_create_initial_buffers_buff_65538_68 + 0x0002)
      000578 E0               [24] 1565 	movx	a,@dptr
      000579 FB               [12] 1566 	mov	r3,a
      00057A A3               [24] 1567 	inc	dptr
      00057B E0               [24] 1568 	movx	a,@dptr
      00057C FC               [12] 1569 	mov	r4,a
      00057D A3               [24] 1570 	inc	dptr
      00057E E0               [24] 1571 	movx	a,@dptr
      00057F FD               [12] 1572 	mov	r5,a
      000580 8B 82            [24] 1573 	mov	dpl,r3
      000582 8C 83            [24] 1574 	mov	dph,r4
      000584 8D F0            [24] 1575 	mov	b,r5
      000586 12r00r00         [24] 1576 	lcall	_free
      000589                       1577 00103$:
                                   1578 ;	program.c:243: if (buff1.buffer_start != NULL)
      000589 90r01r50         [24] 1579 	mov	dptr,#(_create_initial_buffers_buff1_65538_68 + 0x0002)
      00058C E0               [24] 1580 	movx	a,@dptr
      00058D FB               [12] 1581 	mov	r3,a
      00058E A3               [24] 1582 	inc	dptr
      00058F E0               [24] 1583 	movx	a,@dptr
      000590 FC               [12] 1584 	mov	r4,a
      000591 A3               [24] 1585 	inc	dptr
      000592 E0               [24] 1586 	movx	a,@dptr
      000593 FD               [12] 1587 	mov	r5,a
      000594 EB               [12] 1588 	mov	a,r3
      000595 4C               [12] 1589 	orl	a,r4
      000596 70 03            [24] 1590 	jnz	00145$
      000598 02r04rBD         [24] 1591 	ljmp	00101$
      00059B                       1592 00145$:
                                   1593 ;	program.c:244: free(buff1.buffer_start);
      00059B 90r01r50         [24] 1594 	mov	dptr,#(_create_initial_buffers_buff1_65538_68 + 0x0002)
      00059E E0               [24] 1595 	movx	a,@dptr
      00059F FB               [12] 1596 	mov	r3,a
      0005A0 A3               [24] 1597 	inc	dptr
      0005A1 E0               [24] 1598 	movx	a,@dptr
      0005A2 FC               [12] 1599 	mov	r4,a
      0005A3 A3               [24] 1600 	inc	dptr
      0005A4 E0               [24] 1601 	movx	a,@dptr
      0005A5 FD               [12] 1602 	mov	r5,a
      0005A6 8B 82            [24] 1603 	mov	dpl,r3
      0005A8 8C 83            [24] 1604 	mov	dph,r4
      0005AA 8D F0            [24] 1605 	mov	b,r5
      0005AC 12r00r00         [24] 1606 	lcall	_free
                                   1607 ;	program.c:246: goto get_buff;
      0005AF 02r04rBD         [24] 1608 	ljmp	00101$
      0005B2                       1609 00107$:
                                   1610 ;	program.c:251: printf("\n\n\r####SUCCESS, INITIAL BUFFERS Created####\n\n\r");
      0005B2 C0 07            [24] 1611 	push	ar7
      0005B4 C0 06            [24] 1612 	push	ar6
      0005B6 74rAD            [12] 1613 	mov	a,#___str_18
      0005B8 C0 E0            [24] 1614 	push	acc
      0005BA 74s02            [12] 1615 	mov	a,#(___str_18 >> 8)
      0005BC C0 E0            [24] 1616 	push	acc
      0005BE 74 80            [12] 1617 	mov	a,#0x80
      0005C0 C0 E0            [24] 1618 	push	acc
      0005C2 12r00r00         [24] 1619 	lcall	_printf
      0005C5 15 81            [12] 1620 	dec	sp
      0005C7 15 81            [12] 1621 	dec	sp
      0005C9 15 81            [12] 1622 	dec	sp
      0005CB D0 06            [24] 1623 	pop	ar6
      0005CD D0 07            [24] 1624 	pop	ar7
                                   1625 ;	program.c:252: program_stats.allocated_heap = 2 * buff_size;
      0005CF EE               [12] 1626 	mov	a,r6
      0005D0 2E               [12] 1627 	add	a,r6
      0005D1 FC               [12] 1628 	mov	r4,a
      0005D2 EF               [12] 1629 	mov	a,r7
      0005D3 33               [12] 1630 	rlc	a
      0005D4 FD               [12] 1631 	mov	r5,a
      0005D5 90r00r02         [24] 1632 	mov	dptr,#(_program_stats + 0x0002)
      0005D8 EC               [12] 1633 	mov	a,r4
      0005D9 F0               [24] 1634 	movx	@dptr,a
      0005DA ED               [12] 1635 	mov	a,r5
      0005DB A3               [24] 1636 	inc	dptr
      0005DC F0               [24] 1637 	movx	@dptr,a
                                   1638 ;	program.c:253: program_stats.total_heap_size = 4996;
      0005DD 90r00r00         [24] 1639 	mov	dptr,#_program_stats
      0005E0 74 84            [12] 1640 	mov	a,#0x84
      0005E2 F0               [24] 1641 	movx	@dptr,a
      0005E3 74 13            [12] 1642 	mov	a,#0x13
      0005E5 A3               [24] 1643 	inc	dptr
      0005E6 F0               [24] 1644 	movx	@dptr,a
                                   1645 ;	program.c:254: program_stats.total_buffers = 2;
      0005E7 90r00r08         [24] 1646 	mov	dptr,#(_program_stats + 0x0008)
      0005EA 74 02            [12] 1647 	mov	a,#0x02
      0005EC F0               [24] 1648 	movx	@dptr,a
      0005ED E4               [12] 1649 	clr	a
      0005EE A3               [24] 1650 	inc	dptr
      0005EF F0               [24] 1651 	movx	@dptr,a
                                   1652 ;	program.c:256: buff.buff_size = buff_size;
      0005F0 90r01r4A         [24] 1653 	mov	dptr,#(_create_initial_buffers_buff_65538_68 + 0x0008)
      0005F3 EE               [12] 1654 	mov	a,r6
      0005F4 F0               [24] 1655 	movx	@dptr,a
      0005F5 EF               [12] 1656 	mov	a,r7
      0005F6 A3               [24] 1657 	inc	dptr
      0005F7 F0               [24] 1658 	movx	@dptr,a
                                   1659 ;	program.c:257: buff1.buff_size = buff_size;
      0005F8 90r01r56         [24] 1660 	mov	dptr,#(_create_initial_buffers_buff1_65538_68 + 0x0008)
      0005FB EE               [12] 1661 	mov	a,r6
      0005FC F0               [24] 1662 	movx	@dptr,a
      0005FD EF               [12] 1663 	mov	a,r7
      0005FE A3               [24] 1664 	inc	dptr
      0005FF F0               [24] 1665 	movx	@dptr,a
                                   1666 ;	program.c:258: buff.buffer_num = 0;
      000600 90r01r42         [24] 1667 	mov	dptr,#_create_initial_buffers_buff_65538_68
      000603 E4               [12] 1668 	clr	a
      000604 F0               [24] 1669 	movx	@dptr,a
      000605 A3               [24] 1670 	inc	dptr
      000606 F0               [24] 1671 	movx	@dptr,a
                                   1672 ;	program.c:259: buff1.buffer_num = 1;
      000607 90r01r4E         [24] 1673 	mov	dptr,#_create_initial_buffers_buff1_65538_68
      00060A 04               [12] 1674 	inc	a
      00060B F0               [24] 1675 	movx	@dptr,a
      00060C E4               [12] 1676 	clr	a
      00060D A3               [24] 1677 	inc	dptr
      00060E F0               [24] 1678 	movx	@dptr,a
                                   1679 ;	program.c:260: buff1.buffer_end = buff1.buffer_start + buff_size;
      00060F 90r01r50         [24] 1680 	mov	dptr,#(_create_initial_buffers_buff1_65538_68 + 0x0002)
      000612 E0               [24] 1681 	movx	a,@dptr
      000613 FB               [12] 1682 	mov	r3,a
      000614 A3               [24] 1683 	inc	dptr
      000615 E0               [24] 1684 	movx	a,@dptr
      000616 FC               [12] 1685 	mov	r4,a
      000617 A3               [24] 1686 	inc	dptr
      000618 E0               [24] 1687 	movx	a,@dptr
      000619 FD               [12] 1688 	mov	r5,a
      00061A EE               [12] 1689 	mov	a,r6
      00061B 2B               [12] 1690 	add	a,r3
      00061C FB               [12] 1691 	mov	r3,a
      00061D EF               [12] 1692 	mov	a,r7
      00061E 3C               [12] 1693 	addc	a,r4
      00061F FC               [12] 1694 	mov	r4,a
      000620 90r01r53         [24] 1695 	mov	dptr,#(_create_initial_buffers_buff1_65538_68 + 0x0005)
      000623 EB               [12] 1696 	mov	a,r3
      000624 F0               [24] 1697 	movx	@dptr,a
      000625 EC               [12] 1698 	mov	a,r4
      000626 A3               [24] 1699 	inc	dptr
      000627 F0               [24] 1700 	movx	@dptr,a
      000628 ED               [12] 1701 	mov	a,r5
      000629 A3               [24] 1702 	inc	dptr
      00062A F0               [24] 1703 	movx	@dptr,a
                                   1704 ;	program.c:261: buff.buffer_end = buff.buffer_start + buff_size;
      00062B 90r01r44         [24] 1705 	mov	dptr,#(_create_initial_buffers_buff_65538_68 + 0x0002)
      00062E E0               [24] 1706 	movx	a,@dptr
      00062F FB               [12] 1707 	mov	r3,a
      000630 A3               [24] 1708 	inc	dptr
      000631 E0               [24] 1709 	movx	a,@dptr
      000632 FC               [12] 1710 	mov	r4,a
      000633 A3               [24] 1711 	inc	dptr
      000634 E0               [24] 1712 	movx	a,@dptr
      000635 FD               [12] 1713 	mov	r5,a
      000636 EE               [12] 1714 	mov	a,r6
      000637 2B               [12] 1715 	add	a,r3
      000638 FE               [12] 1716 	mov	r6,a
      000639 EF               [12] 1717 	mov	a,r7
      00063A 3C               [12] 1718 	addc	a,r4
      00063B FF               [12] 1719 	mov	r7,a
      00063C 8D 02            [24] 1720 	mov	ar2,r5
      00063E 90r01r47         [24] 1721 	mov	dptr,#(_create_initial_buffers_buff_65538_68 + 0x0005)
      000641 EE               [12] 1722 	mov	a,r6
      000642 F0               [24] 1723 	movx	@dptr,a
      000643 EF               [12] 1724 	mov	a,r7
      000644 A3               [24] 1725 	inc	dptr
      000645 F0               [24] 1726 	movx	@dptr,a
      000646 EA               [12] 1727 	mov	a,r2
      000647 A3               [24] 1728 	inc	dptr
      000648 F0               [24] 1729 	movx	@dptr,a
                                   1730 ;	program.c:262: buff.num_char = 0;
      000649 90r01r4C         [24] 1731 	mov	dptr,#(_create_initial_buffers_buff_65538_68 + 0x000a)
      00064C E4               [12] 1732 	clr	a
      00064D F0               [24] 1733 	movx	@dptr,a
      00064E A3               [24] 1734 	inc	dptr
      00064F F0               [24] 1735 	movx	@dptr,a
                                   1736 ;	program.c:263: buff1.num_char = 0;
      000650 90r01r58         [24] 1737 	mov	dptr,#(_create_initial_buffers_buff1_65538_68 + 0x000a)
      000653 F0               [24] 1738 	movx	@dptr,a
      000654 A3               [24] 1739 	inc	dptr
      000655 F0               [24] 1740 	movx	@dptr,a
                                   1741 ;	program.c:265: buffers_array[0] = buff;
      000656 90r00r00         [24] 1742 	mov	dptr,#___memcpy_PARM_2
      000659 74r42            [12] 1743 	mov	a,#_create_initial_buffers_buff_65538_68
      00065B F0               [24] 1744 	movx	@dptr,a
      00065C 74s01            [12] 1745 	mov	a,#(_create_initial_buffers_buff_65538_68 >> 8)
      00065E A3               [24] 1746 	inc	dptr
      00065F F0               [24] 1747 	movx	@dptr,a
      000660 E4               [12] 1748 	clr	a
      000661 A3               [24] 1749 	inc	dptr
      000662 F0               [24] 1750 	movx	@dptr,a
      000663 90r00r00         [24] 1751 	mov	dptr,#___memcpy_PARM_3
      000666 74 0C            [12] 1752 	mov	a,#0x0c
      000668 F0               [24] 1753 	movx	@dptr,a
      000669 E4               [12] 1754 	clr	a
      00066A A3               [24] 1755 	inc	dptr
      00066B F0               [24] 1756 	movx	@dptr,a
      00066C 90r00r0A         [24] 1757 	mov	dptr,#_buffers_array
      00066F 75 F0 00         [24] 1758 	mov	b,#0x00
      000672 12r00r00         [24] 1759 	lcall	___memcpy
                                   1760 ;	program.c:266: buffers_array[1] = buff1;
      000675 90r00r00         [24] 1761 	mov	dptr,#___memcpy_PARM_2
      000678 74r4E            [12] 1762 	mov	a,#_create_initial_buffers_buff1_65538_68
      00067A F0               [24] 1763 	movx	@dptr,a
      00067B 74s01            [12] 1764 	mov	a,#(_create_initial_buffers_buff1_65538_68 >> 8)
      00067D A3               [24] 1765 	inc	dptr
      00067E F0               [24] 1766 	movx	@dptr,a
      00067F E4               [12] 1767 	clr	a
      000680 A3               [24] 1768 	inc	dptr
      000681 F0               [24] 1769 	movx	@dptr,a
      000682 90r00r00         [24] 1770 	mov	dptr,#___memcpy_PARM_3
      000685 74 0C            [12] 1771 	mov	a,#0x0c
      000687 F0               [24] 1772 	movx	@dptr,a
      000688 E4               [12] 1773 	clr	a
      000689 A3               [24] 1774 	inc	dptr
      00068A F0               [24] 1775 	movx	@dptr,a
      00068B 90r00r16         [24] 1776 	mov	dptr,#(_buffers_array + 0x000c)
      00068E 75 F0 00         [24] 1777 	mov	b,#0x00
                                   1778 ;	program.c:270: goto get_buff;
                                   1779 ;	program.c:271: }
      000691 02r00r00         [24] 1780 	ljmp	___memcpy
                                   1781 ;------------------------------------------------------------
                                   1782 ;Allocation info for local variables in function 'enter_chars'
                                   1783 ;------------------------------------------------------------
                                   1784 ;rec                       Allocated with name '_enter_chars_rec_65537_73'
                                   1785 ;------------------------------------------------------------
                                   1786 ;	program.c:279: void enter_chars()
                                   1787 ;	-----------------------------------------
                                   1788 ;	 function enter_chars
                                   1789 ;	-----------------------------------------
      000694                       1790 _enter_chars:
                                   1791 ;	program.c:281: DEBUGPORT(0x08);
      000694 75 82 08         [24] 1792 	mov	dpl,#0x08
      000697 12r0DrFC         [24] 1793 	lcall	_dataout
                                   1794 ;	program.c:282: print_menu();
      00069A 12r02rA3         [24] 1795 	lcall	_print_menu
                                   1796 ;	program.c:284: while (1)
      00069D                       1797 00123$:
                                   1798 ;	program.c:286: rec = getchar();
      00069D 12r0DrC0         [24] 1799 	lcall	_getchar
      0006A0 AE 82            [24] 1800 	mov	r6,dpl
      0006A2 AF 83            [24] 1801 	mov	r7,dph
                                   1802 ;	program.c:287: if (rec > 0x60 && rec < 0x7B)
      0006A4 C3               [12] 1803 	clr	c
      0006A5 74 60            [12] 1804 	mov	a,#0x60
      0006A7 9E               [12] 1805 	subb	a,r6
      0006A8 74 80            [12] 1806 	mov	a,#(0x00 ^ 0x80)
      0006AA 8F F0            [24] 1807 	mov	b,r7
      0006AC 63 F0 80         [24] 1808 	xrl	b,#0x80
      0006AF 95 F0            [12] 1809 	subb	a,b
      0006B1 40 03            [24] 1810 	jc	00163$
      0006B3 02r07r42         [24] 1811 	ljmp	00119$
      0006B6                       1812 00163$:
      0006B6 C3               [12] 1813 	clr	c
      0006B7 EE               [12] 1814 	mov	a,r6
      0006B8 94 7B            [12] 1815 	subb	a,#0x7b
      0006BA EF               [12] 1816 	mov	a,r7
      0006BB 64 80            [12] 1817 	xrl	a,#0x80
      0006BD 94 80            [12] 1818 	subb	a,#0x80
      0006BF 40 03            [24] 1819 	jc	00164$
      0006C1 02r07r42         [24] 1820 	ljmp	00119$
      0006C4                       1821 00164$:
                                   1822 ;	program.c:291: if (buffers_array[0].num_char < buffers_array[0].buff_size)
      0006C4 90r00r14         [24] 1823 	mov	dptr,#(_buffers_array + 0x000a)
      0006C7 E0               [24] 1824 	movx	a,@dptr
      0006C8 FC               [12] 1825 	mov	r4,a
      0006C9 A3               [24] 1826 	inc	dptr
      0006CA E0               [24] 1827 	movx	a,@dptr
      0006CB FD               [12] 1828 	mov	r5,a
      0006CC 90r00r12         [24] 1829 	mov	dptr,#(_buffers_array + 0x0008)
      0006CF E0               [24] 1830 	movx	a,@dptr
      0006D0 FA               [12] 1831 	mov	r2,a
      0006D1 A3               [24] 1832 	inc	dptr
      0006D2 E0               [24] 1833 	movx	a,@dptr
      0006D3 FB               [12] 1834 	mov	r3,a
      0006D4 C3               [12] 1835 	clr	c
      0006D5 EC               [12] 1836 	mov	a,r4
      0006D6 9A               [12] 1837 	subb	a,r2
      0006D7 ED               [12] 1838 	mov	a,r5
      0006D8 64 80            [12] 1839 	xrl	a,#0x80
      0006DA 8B F0            [24] 1840 	mov	b,r3
      0006DC 63 F0 80         [24] 1841 	xrl	b,#0x80
      0006DF 95 F0            [12] 1842 	subb	a,b
      0006E1 50 32            [24] 1843 	jnc	00102$
                                   1844 ;	program.c:293: *(buffers_array[0].buffer_start + buffers_array[0].num_char) = rec;
      0006E3 90r00r0C         [24] 1845 	mov	dptr,#(_buffers_array + 0x0002)
      0006E6 E0               [24] 1846 	movx	a,@dptr
      0006E7 F9               [12] 1847 	mov	r1,a
      0006E8 A3               [24] 1848 	inc	dptr
      0006E9 E0               [24] 1849 	movx	a,@dptr
      0006EA FA               [12] 1850 	mov	r2,a
      0006EB A3               [24] 1851 	inc	dptr
      0006EC E0               [24] 1852 	movx	a,@dptr
      0006ED FB               [12] 1853 	mov	r3,a
      0006EE EC               [12] 1854 	mov	a,r4
      0006EF 29               [12] 1855 	add	a,r1
      0006F0 F9               [12] 1856 	mov	r1,a
      0006F1 ED               [12] 1857 	mov	a,r5
      0006F2 3A               [12] 1858 	addc	a,r2
      0006F3 FA               [12] 1859 	mov	r2,a
      0006F4 8E 05            [24] 1860 	mov	ar5,r6
      0006F6 89 82            [24] 1861 	mov	dpl,r1
      0006F8 8A 83            [24] 1862 	mov	dph,r2
      0006FA 8B F0            [24] 1863 	mov	b,r3
      0006FC ED               [12] 1864 	mov	a,r5
      0006FD 12r00r00         [24] 1865 	lcall	__gptrput
                                   1866 ;	program.c:294: buffers_array[0].num_char += 1;
      000700 90r00r14         [24] 1867 	mov	dptr,#(_buffers_array + 0x000a)
      000703 E0               [24] 1868 	movx	a,@dptr
      000704 FC               [12] 1869 	mov	r4,a
      000705 A3               [24] 1870 	inc	dptr
      000706 E0               [24] 1871 	movx	a,@dptr
      000707 FD               [12] 1872 	mov	r5,a
      000708 0C               [12] 1873 	inc	r4
      000709 BC 00 01         [24] 1874 	cjne	r4,#0x00,00166$
      00070C 0D               [12] 1875 	inc	r5
      00070D                       1876 00166$:
      00070D 90r00r14         [24] 1877 	mov	dptr,#(_buffers_array + 0x000a)
      000710 EC               [12] 1878 	mov	a,r4
      000711 F0               [24] 1879 	movx	@dptr,a
      000712 ED               [12] 1880 	mov	a,r5
      000713 A3               [24] 1881 	inc	dptr
      000714 F0               [24] 1882 	movx	@dptr,a
      000715                       1883 00102$:
                                   1884 ;	program.c:296: program_stats.all_char_count += 1;
      000715 90r00r04         [24] 1885 	mov	dptr,#(_program_stats + 0x0004)
      000718 E0               [24] 1886 	movx	a,@dptr
      000719 FC               [12] 1887 	mov	r4,a
      00071A A3               [24] 1888 	inc	dptr
      00071B E0               [24] 1889 	movx	a,@dptr
      00071C FD               [12] 1890 	mov	r5,a
      00071D 0C               [12] 1891 	inc	r4
      00071E BC 00 01         [24] 1892 	cjne	r4,#0x00,00167$
      000721 0D               [12] 1893 	inc	r5
      000722                       1894 00167$:
      000722 90r00r04         [24] 1895 	mov	dptr,#(_program_stats + 0x0004)
      000725 EC               [12] 1896 	mov	a,r4
      000726 F0               [24] 1897 	movx	@dptr,a
      000727 ED               [12] 1898 	mov	a,r5
      000728 A3               [24] 1899 	inc	dptr
      000729 F0               [24] 1900 	movx	@dptr,a
                                   1901 ;	program.c:297: program_stats.storage_char_count += 1;
      00072A 90r00r06         [24] 1902 	mov	dptr,#(_program_stats + 0x0006)
      00072D E0               [24] 1903 	movx	a,@dptr
      00072E FC               [12] 1904 	mov	r4,a
      00072F A3               [24] 1905 	inc	dptr
      000730 E0               [24] 1906 	movx	a,@dptr
      000731 FD               [12] 1907 	mov	r5,a
      000732 0C               [12] 1908 	inc	r4
      000733 BC 00 01         [24] 1909 	cjne	r4,#0x00,00168$
      000736 0D               [12] 1910 	inc	r5
      000737                       1911 00168$:
      000737 90r00r06         [24] 1912 	mov	dptr,#(_program_stats + 0x0006)
      00073A EC               [12] 1913 	mov	a,r4
      00073B F0               [24] 1914 	movx	@dptr,a
      00073C ED               [12] 1915 	mov	a,r5
      00073D A3               [24] 1916 	inc	dptr
      00073E F0               [24] 1917 	movx	@dptr,a
      00073F 02r06r9D         [24] 1918 	ljmp	00123$
      000742                       1919 00119$:
                                   1920 ;	program.c:299: else if (rec == 0x3F)
      000742 BE 3F 1F         [24] 1921 	cjne	r6,#0x3f,00116$
      000745 BF 00 1C         [24] 1922 	cjne	r7,#0x00,00116$
                                   1923 ;	program.c:302: print_heap_stats();
      000748 12r0Ar1B         [24] 1924 	lcall	_print_heap_stats
                                   1925 ;	program.c:303: print_all_buffers();
      00074B 12r0ArDC         [24] 1926 	lcall	_print_all_buffers
                                   1927 ;	program.c:304: dump_buff_zero_ascii();
      00074E 12r07rB8         [24] 1928 	lcall	_dump_buff_zero_ascii
                                   1929 ;	program.c:305: program_stats.all_char_count = 0;
      000751 90r00r04         [24] 1930 	mov	dptr,#(_program_stats + 0x0004)
      000754 E4               [12] 1931 	clr	a
      000755 F0               [24] 1932 	movx	@dptr,a
      000756 A3               [24] 1933 	inc	dptr
      000757 F0               [24] 1934 	movx	@dptr,a
                                   1935 ;	program.c:306: program_stats.storage_char_count = 0;
      000758 90r00r06         [24] 1936 	mov	dptr,#(_program_stats + 0x0006)
      00075B F0               [24] 1937 	movx	@dptr,a
      00075C A3               [24] 1938 	inc	dptr
      00075D F0               [24] 1939 	movx	@dptr,a
                                   1940 ;	program.c:307: print_menu();
      00075E 12r02rA3         [24] 1941 	lcall	_print_menu
      000761 02r06r9D         [24] 1942 	ljmp	00123$
      000764                       1943 00116$:
                                   1944 ;	program.c:309: else if (rec == 0x3D)
      000764 BE 3D 0C         [24] 1945 	cjne	r6,#0x3d,00113$
      000767 BF 00 09         [24] 1946 	cjne	r7,#0x00,00113$
                                   1947 ;	program.c:312: dump_buff_zero_hex();
      00076A 12r08rCE         [24] 1948 	lcall	_dump_buff_zero_hex
                                   1949 ;	program.c:313: print_menu();
      00076D 12r02rA3         [24] 1950 	lcall	_print_menu
      000770 02r06r9D         [24] 1951 	ljmp	00123$
      000773                       1952 00113$:
                                   1953 ;	program.c:315: else if (rec == 0x40)
      000773 BE 40 0C         [24] 1954 	cjne	r6,#0x40,00110$
      000776 BF 00 09         [24] 1955 	cjne	r7,#0x00,00110$
                                   1956 ;	program.c:318: at_clear_all_buffers();
      000779 12r00r2D         [24] 1957 	lcall	_at_clear_all_buffers
                                   1958 ;	program.c:319: print_menu();
      00077C 12r02rA3         [24] 1959 	lcall	_print_menu
      00077F 02r06r9D         [24] 1960 	ljmp	00123$
      000782                       1961 00110$:
                                   1962 ;	program.c:321: else if (rec == 0x2B)
      000782 BE 2B 0C         [24] 1963 	cjne	r6,#0x2b,00107$
      000785 BF 00 09         [24] 1964 	cjne	r7,#0x00,00107$
                                   1965 ;	program.c:324: create_new_buffer();
      000788 12r03r3D         [24] 1966 	lcall	_create_new_buffer
                                   1967 ;	program.c:325: print_menu();
      00078B 12r02rA3         [24] 1968 	lcall	_print_menu
      00078E 02r06r9D         [24] 1969 	ljmp	00123$
      000791                       1970 00107$:
                                   1971 ;	program.c:327: else if (rec == 0x2D)
      000791 BE 2D 0C         [24] 1972 	cjne	r6,#0x2d,00104$
      000794 BF 00 09         [24] 1973 	cjne	r7,#0x00,00104$
                                   1974 ;	program.c:330: delete_buffer();
      000797 12r00rC7         [24] 1975 	lcall	_delete_buffer
                                   1976 ;	program.c:331: print_menu();
      00079A 12r02rA3         [24] 1977 	lcall	_print_menu
      00079D 02r06r9D         [24] 1978 	ljmp	00123$
      0007A0                       1979 00104$:
                                   1980 ;	program.c:335: program_stats.all_char_count += 1;
      0007A0 90r00r04         [24] 1981 	mov	dptr,#(_program_stats + 0x0004)
      0007A3 E0               [24] 1982 	movx	a,@dptr
      0007A4 FE               [12] 1983 	mov	r6,a
      0007A5 A3               [24] 1984 	inc	dptr
      0007A6 E0               [24] 1985 	movx	a,@dptr
      0007A7 FF               [12] 1986 	mov	r7,a
      0007A8 0E               [12] 1987 	inc	r6
      0007A9 BE 00 01         [24] 1988 	cjne	r6,#0x00,00179$
      0007AC 0F               [12] 1989 	inc	r7
      0007AD                       1990 00179$:
      0007AD 90r00r04         [24] 1991 	mov	dptr,#(_program_stats + 0x0004)
      0007B0 EE               [12] 1992 	mov	a,r6
      0007B1 F0               [24] 1993 	movx	@dptr,a
      0007B2 EF               [12] 1994 	mov	a,r7
      0007B3 A3               [24] 1995 	inc	dptr
      0007B4 F0               [24] 1996 	movx	@dptr,a
                                   1997 ;	program.c:338: }
      0007B5 02r06r9D         [24] 1998 	ljmp	00123$
                                   1999 ;------------------------------------------------------------
                                   2000 ;Allocation info for local variables in function 'dump_buff_zero_ascii'
                                   2001 ;------------------------------------------------------------
                                   2002 ;j                         Allocated with name '_dump_buff_zero_ascii_j_65537_84'
                                   2003 ;i                         Allocated with name '_dump_buff_zero_ascii_i_196609_86'
                                   2004 ;------------------------------------------------------------
                                   2005 ;	program.c:346: void dump_buff_zero_ascii()
                                   2006 ;	-----------------------------------------
                                   2007 ;	 function dump_buff_zero_ascii
                                   2008 ;	-----------------------------------------
      0007B8                       2009 _dump_buff_zero_ascii:
                                   2010 ;	program.c:348: DEBUGPORT(0x09);
      0007B8 75 82 09         [24] 2011 	mov	dpl,#0x09
      0007BB 12r0DrFC         [24] 2012 	lcall	_dataout
                                   2013 ;	program.c:349: int j = 64;
      0007BE 90r01r5A         [24] 2014 	mov	dptr,#_dump_buff_zero_ascii_j_65537_84
      0007C1 74 40            [12] 2015 	mov	a,#0x40
      0007C3 F0               [24] 2016 	movx	@dptr,a
      0007C4 E4               [12] 2017 	clr	a
      0007C5 A3               [24] 2018 	inc	dptr
      0007C6 F0               [24] 2019 	movx	@dptr,a
                                   2020 ;	program.c:350: if (buffers_array[0].num_char > 0)
      0007C7 90r00r14         [24] 2021 	mov	dptr,#(_buffers_array + 0x000a)
      0007CA E0               [24] 2022 	movx	a,@dptr
      0007CB FE               [12] 2023 	mov	r6,a
      0007CC A3               [24] 2024 	inc	dptr
      0007CD E0               [24] 2025 	movx	a,@dptr
      0007CE FF               [12] 2026 	mov	r7,a
      0007CF C3               [12] 2027 	clr	c
      0007D0 E4               [12] 2028 	clr	a
      0007D1 9E               [12] 2029 	subb	a,r6
      0007D2 74 80            [12] 2030 	mov	a,#(0x00 ^ 0x80)
      0007D4 8F F0            [24] 2031 	mov	b,r7
      0007D6 63 F0 80         [24] 2032 	xrl	b,#0x80
      0007D9 95 F0            [12] 2033 	subb	a,b
      0007DB 40 03            [24] 2034 	jc	00135$
      0007DD 02r08rB8         [24] 2035 	ljmp	00107$
      0007E0                       2036 00135$:
                                   2037 ;	program.c:352: printf("\n\n\r***********Buffer-0-Contents*********** \n\r");
      0007E0 74rDC            [12] 2038 	mov	a,#___str_19
      0007E2 C0 E0            [24] 2039 	push	acc
      0007E4 74s02            [12] 2040 	mov	a,#(___str_19 >> 8)
      0007E6 C0 E0            [24] 2041 	push	acc
      0007E8 74 80            [12] 2042 	mov	a,#0x80
      0007EA C0 E0            [24] 2043 	push	acc
      0007EC 12r00r00         [24] 2044 	lcall	_printf
      0007EF 15 81            [12] 2045 	dec	sp
      0007F1 15 81            [12] 2046 	dec	sp
      0007F3 15 81            [12] 2047 	dec	sp
                                   2048 ;	program.c:353: for (int i = 0; i < buffers_array[0].num_char; i++)
      0007F5 7E 00            [12] 2049 	mov	r6,#0x00
      0007F7 7F 00            [12] 2050 	mov	r7,#0x00
      0007F9                       2051 00110$:
      0007F9 90r00r14         [24] 2052 	mov	dptr,#(_buffers_array + 0x000a)
      0007FC E0               [24] 2053 	movx	a,@dptr
      0007FD FC               [12] 2054 	mov	r4,a
      0007FE A3               [24] 2055 	inc	dptr
      0007FF E0               [24] 2056 	movx	a,@dptr
      000800 FD               [12] 2057 	mov	r5,a
      000801 C3               [12] 2058 	clr	c
      000802 EE               [12] 2059 	mov	a,r6
      000803 9C               [12] 2060 	subb	a,r4
      000804 EF               [12] 2061 	mov	a,r7
      000805 64 80            [12] 2062 	xrl	a,#0x80
      000807 8D F0            [24] 2063 	mov	b,r5
      000809 63 F0 80         [24] 2064 	xrl	b,#0x80
      00080C 95 F0            [12] 2065 	subb	a,b
      00080E 40 03            [24] 2066 	jc	00136$
      000810 02r08r9B         [24] 2067 	ljmp	00105$
      000813                       2068 00136$:
                                   2069 ;	program.c:355: if (j == 64)
      000813 90r01r5A         [24] 2070 	mov	dptr,#_dump_buff_zero_ascii_j_65537_84
      000816 E0               [24] 2071 	movx	a,@dptr
      000817 FC               [12] 2072 	mov	r4,a
      000818 A3               [24] 2073 	inc	dptr
      000819 E0               [24] 2074 	movx	a,@dptr
      00081A FD               [12] 2075 	mov	r5,a
      00081B BC 40 20         [24] 2076 	cjne	r4,#0x40,00102$
      00081E BD 00 1D         [24] 2077 	cjne	r5,#0x00,00102$
                                   2078 ;	program.c:357: printf("\n\r");
      000821 C0 07            [24] 2079 	push	ar7
      000823 C0 06            [24] 2080 	push	ar6
      000825 74r0A            [12] 2081 	mov	a,#___str_20
      000827 C0 E0            [24] 2082 	push	acc
      000829 74s03            [12] 2083 	mov	a,#(___str_20 >> 8)
      00082B C0 E0            [24] 2084 	push	acc
      00082D 74 80            [12] 2085 	mov	a,#0x80
      00082F C0 E0            [24] 2086 	push	acc
      000831 12r00r00         [24] 2087 	lcall	_printf
      000834 15 81            [12] 2088 	dec	sp
      000836 15 81            [12] 2089 	dec	sp
      000838 15 81            [12] 2090 	dec	sp
      00083A D0 06            [24] 2091 	pop	ar6
      00083C D0 07            [24] 2092 	pop	ar7
      00083E                       2093 00102$:
                                   2094 ;	program.c:359: putchar(*(buffers_array[0].buffer_start + i));
      00083E 90r00r0C         [24] 2095 	mov	dptr,#(_buffers_array + 0x0002)
      000841 E0               [24] 2096 	movx	a,@dptr
      000842 FB               [12] 2097 	mov	r3,a
      000843 A3               [24] 2098 	inc	dptr
      000844 E0               [24] 2099 	movx	a,@dptr
      000845 FC               [12] 2100 	mov	r4,a
      000846 A3               [24] 2101 	inc	dptr
      000847 E0               [24] 2102 	movx	a,@dptr
      000848 FD               [12] 2103 	mov	r5,a
      000849 EE               [12] 2104 	mov	a,r6
      00084A 2B               [12] 2105 	add	a,r3
      00084B FB               [12] 2106 	mov	r3,a
      00084C EF               [12] 2107 	mov	a,r7
      00084D 3C               [12] 2108 	addc	a,r4
      00084E FC               [12] 2109 	mov	r4,a
      00084F 8B 82            [24] 2110 	mov	dpl,r3
      000851 8C 83            [24] 2111 	mov	dph,r4
      000853 8D F0            [24] 2112 	mov	b,r5
      000855 12r00r00         [24] 2113 	lcall	__gptrget
      000858 FB               [12] 2114 	mov	r3,a
      000859 7D 00            [12] 2115 	mov	r5,#0x00
      00085B 8B 82            [24] 2116 	mov	dpl,r3
      00085D 8D 83            [24] 2117 	mov	dph,r5
      00085F C0 07            [24] 2118 	push	ar7
      000861 C0 06            [24] 2119 	push	ar6
      000863 12r0DrA1         [24] 2120 	lcall	_putchar
      000866 D0 06            [24] 2121 	pop	ar6
      000868 D0 07            [24] 2122 	pop	ar7
                                   2123 ;	program.c:360: j--;
      00086A 90r01r5A         [24] 2124 	mov	dptr,#_dump_buff_zero_ascii_j_65537_84
      00086D E0               [24] 2125 	movx	a,@dptr
      00086E 24 FF            [12] 2126 	add	a,#0xff
      000870 FC               [12] 2127 	mov	r4,a
      000871 A3               [24] 2128 	inc	dptr
      000872 E0               [24] 2129 	movx	a,@dptr
      000873 34 FF            [12] 2130 	addc	a,#0xff
      000875 FD               [12] 2131 	mov	r5,a
      000876 90r01r5A         [24] 2132 	mov	dptr,#_dump_buff_zero_ascii_j_65537_84
      000879 EC               [12] 2133 	mov	a,r4
      00087A F0               [24] 2134 	movx	@dptr,a
      00087B ED               [12] 2135 	mov	a,r5
      00087C A3               [24] 2136 	inc	dptr
      00087D F0               [24] 2137 	movx	@dptr,a
                                   2138 ;	program.c:361: if (j == 0)
      00087E 90r01r5A         [24] 2139 	mov	dptr,#_dump_buff_zero_ascii_j_65537_84
      000881 E0               [24] 2140 	movx	a,@dptr
      000882 F5 F0            [12] 2141 	mov	b,a
      000884 A3               [24] 2142 	inc	dptr
      000885 E0               [24] 2143 	movx	a,@dptr
      000886 45 F0            [12] 2144 	orl	a,b
      000888 70 09            [24] 2145 	jnz	00111$
                                   2146 ;	program.c:362: j = 64;
      00088A 90r01r5A         [24] 2147 	mov	dptr,#_dump_buff_zero_ascii_j_65537_84
      00088D 74 40            [12] 2148 	mov	a,#0x40
      00088F F0               [24] 2149 	movx	@dptr,a
      000890 E4               [12] 2150 	clr	a
      000891 A3               [24] 2151 	inc	dptr
      000892 F0               [24] 2152 	movx	@dptr,a
      000893                       2153 00111$:
                                   2154 ;	program.c:353: for (int i = 0; i < buffers_array[0].num_char; i++)
      000893 0E               [12] 2155 	inc	r6
      000894 BE 00 01         [24] 2156 	cjne	r6,#0x00,00140$
      000897 0F               [12] 2157 	inc	r7
      000898                       2158 00140$:
      000898 02r07rF9         [24] 2159 	ljmp	00110$
      00089B                       2160 00105$:
                                   2161 ;	program.c:364: buffers_array[0].num_char = 0;
      00089B 90r00r14         [24] 2162 	mov	dptr,#(_buffers_array + 0x000a)
      00089E E4               [12] 2163 	clr	a
      00089F F0               [24] 2164 	movx	@dptr,a
      0008A0 A3               [24] 2165 	inc	dptr
      0008A1 F0               [24] 2166 	movx	@dptr,a
                                   2167 ;	program.c:365: printf("\n\n\r");
      0008A2 74r0D            [12] 2168 	mov	a,#___str_21
      0008A4 C0 E0            [24] 2169 	push	acc
      0008A6 74s03            [12] 2170 	mov	a,#(___str_21 >> 8)
      0008A8 C0 E0            [24] 2171 	push	acc
      0008AA 74 80            [12] 2172 	mov	a,#0x80
      0008AC C0 E0            [24] 2173 	push	acc
      0008AE 12r00r00         [24] 2174 	lcall	_printf
      0008B1 15 81            [12] 2175 	dec	sp
      0008B3 15 81            [12] 2176 	dec	sp
      0008B5 15 81            [12] 2177 	dec	sp
      0008B7 22               [24] 2178 	ret
      0008B8                       2179 00107$:
                                   2180 ;	program.c:369: printf("Buffer0 is Empty....\n\r");
      0008B8 74r11            [12] 2181 	mov	a,#___str_22
      0008BA C0 E0            [24] 2182 	push	acc
      0008BC 74s03            [12] 2183 	mov	a,#(___str_22 >> 8)
      0008BE C0 E0            [24] 2184 	push	acc
      0008C0 74 80            [12] 2185 	mov	a,#0x80
      0008C2 C0 E0            [24] 2186 	push	acc
      0008C4 12r00r00         [24] 2187 	lcall	_printf
      0008C7 15 81            [12] 2188 	dec	sp
      0008C9 15 81            [12] 2189 	dec	sp
      0008CB 15 81            [12] 2190 	dec	sp
                                   2191 ;	program.c:371: }
      0008CD 22               [24] 2192 	ret
                                   2193 ;------------------------------------------------------------
                                   2194 ;Allocation info for local variables in function 'dump_buff_zero_hex'
                                   2195 ;------------------------------------------------------------
                                   2196 ;j                         Allocated with name '_dump_buff_zero_hex_j_131073_92'
                                   2197 ;i                         Allocated with name '_dump_buff_zero_hex_i_196609_93'
                                   2198 ;------------------------------------------------------------
                                   2199 ;	program.c:378: void dump_buff_zero_hex()
                                   2200 ;	-----------------------------------------
                                   2201 ;	 function dump_buff_zero_hex
                                   2202 ;	-----------------------------------------
      0008CE                       2203 _dump_buff_zero_hex:
                                   2204 ;	program.c:380: DEBUGPORT(0xA);
      0008CE 75 82 0A         [24] 2205 	mov	dpl,#0x0a
      0008D1 12r0DrFC         [24] 2206 	lcall	_dataout
                                   2207 ;	program.c:381: if (buffers_array[0].num_char > 0)
      0008D4 90r00r14         [24] 2208 	mov	dptr,#(_buffers_array + 0x000a)
      0008D7 E0               [24] 2209 	movx	a,@dptr
      0008D8 FE               [12] 2210 	mov	r6,a
      0008D9 A3               [24] 2211 	inc	dptr
      0008DA E0               [24] 2212 	movx	a,@dptr
      0008DB FF               [12] 2213 	mov	r7,a
      0008DC C3               [12] 2214 	clr	c
      0008DD E4               [12] 2215 	clr	a
      0008DE 9E               [12] 2216 	subb	a,r6
      0008DF 74 80            [12] 2217 	mov	a,#(0x00 ^ 0x80)
      0008E1 8F F0            [24] 2218 	mov	b,r7
      0008E3 63 F0 80         [24] 2219 	xrl	b,#0x80
      0008E6 95 F0            [12] 2220 	subb	a,b
      0008E8 40 03            [24] 2221 	jc	00135$
      0008EA 02r0Ar05         [24] 2222 	ljmp	00107$
      0008ED                       2223 00135$:
                                   2224 ;	program.c:383: printf("\n\r-------------------------HEXDUMP--------------------------------");
      0008ED 74r28            [12] 2225 	mov	a,#___str_23
      0008EF C0 E0            [24] 2226 	push	acc
      0008F1 74s03            [12] 2227 	mov	a,#(___str_23 >> 8)
      0008F3 C0 E0            [24] 2228 	push	acc
      0008F5 74 80            [12] 2229 	mov	a,#0x80
      0008F7 C0 E0            [24] 2230 	push	acc
      0008F9 12r00r00         [24] 2231 	lcall	_printf
      0008FC 15 81            [12] 2232 	dec	sp
      0008FE 15 81            [12] 2233 	dec	sp
      000900 15 81            [12] 2234 	dec	sp
                                   2235 ;	program.c:384: printf("\n\r    ADDR: +0 +1 +2 +3 +4 +5 +6 +7 +8 +9 +A +B +C +D +E +F \n\r");
      000902 74r6B            [12] 2236 	mov	a,#___str_24
      000904 C0 E0            [24] 2237 	push	acc
      000906 74s03            [12] 2238 	mov	a,#(___str_24 >> 8)
      000908 C0 E0            [24] 2239 	push	acc
      00090A 74 80            [12] 2240 	mov	a,#0x80
      00090C C0 E0            [24] 2241 	push	acc
      00090E 12r00r00         [24] 2242 	lcall	_printf
      000911 15 81            [12] 2243 	dec	sp
      000913 15 81            [12] 2244 	dec	sp
      000915 15 81            [12] 2245 	dec	sp
                                   2246 ;	program.c:385: int j = 16;
      000917 90r01r5C         [24] 2247 	mov	dptr,#_dump_buff_zero_hex_j_131073_92
      00091A 74 10            [12] 2248 	mov	a,#0x10
      00091C F0               [24] 2249 	movx	@dptr,a
      00091D E4               [12] 2250 	clr	a
      00091E A3               [24] 2251 	inc	dptr
      00091F F0               [24] 2252 	movx	@dptr,a
                                   2253 ;	program.c:387: for (int i = 0; i < buffers_array[0].num_char; i++)
      000920 7E 00            [12] 2254 	mov	r6,#0x00
      000922 7F 00            [12] 2255 	mov	r7,#0x00
      000924                       2256 00110$:
      000924 90r00r14         [24] 2257 	mov	dptr,#(_buffers_array + 0x000a)
      000927 E0               [24] 2258 	movx	a,@dptr
      000928 FC               [12] 2259 	mov	r4,a
      000929 A3               [24] 2260 	inc	dptr
      00092A E0               [24] 2261 	movx	a,@dptr
      00092B FD               [12] 2262 	mov	r5,a
      00092C C3               [12] 2263 	clr	c
      00092D EE               [12] 2264 	mov	a,r6
      00092E 9C               [12] 2265 	subb	a,r4
      00092F EF               [12] 2266 	mov	a,r7
      000930 64 80            [12] 2267 	xrl	a,#0x80
      000932 8D F0            [24] 2268 	mov	b,r5
      000934 63 F0 80         [24] 2269 	xrl	b,#0x80
      000937 95 F0            [12] 2270 	subb	a,b
      000939 40 03            [24] 2271 	jc	00136$
      00093B 02r09rEF         [24] 2272 	ljmp	00105$
      00093E                       2273 00136$:
                                   2274 ;	program.c:389: if (j == 16)
      00093E 90r01r5C         [24] 2275 	mov	dptr,#_dump_buff_zero_hex_j_131073_92
      000941 E0               [24] 2276 	movx	a,@dptr
      000942 FC               [12] 2277 	mov	r4,a
      000943 A3               [24] 2278 	inc	dptr
      000944 E0               [24] 2279 	movx	a,@dptr
      000945 FD               [12] 2280 	mov	r5,a
      000946 BC 10 37         [24] 2281 	cjne	r4,#0x10,00102$
      000949 BD 00 34         [24] 2282 	cjne	r5,#0x00,00102$
                                   2283 ;	program.c:391: printf("\n\r%p: ", (buffers_array[0].buffer_start + i));
      00094C 90r00r0C         [24] 2284 	mov	dptr,#(_buffers_array + 0x0002)
      00094F E0               [24] 2285 	movx	a,@dptr
      000950 FB               [12] 2286 	mov	r3,a
      000951 A3               [24] 2287 	inc	dptr
      000952 E0               [24] 2288 	movx	a,@dptr
      000953 FC               [12] 2289 	mov	r4,a
      000954 A3               [24] 2290 	inc	dptr
      000955 E0               [24] 2291 	movx	a,@dptr
      000956 FD               [12] 2292 	mov	r5,a
      000957 EE               [12] 2293 	mov	a,r6
      000958 2B               [12] 2294 	add	a,r3
      000959 FB               [12] 2295 	mov	r3,a
      00095A EF               [12] 2296 	mov	a,r7
      00095B 3C               [12] 2297 	addc	a,r4
      00095C FC               [12] 2298 	mov	r4,a
      00095D C0 07            [24] 2299 	push	ar7
      00095F C0 06            [24] 2300 	push	ar6
      000961 C0 03            [24] 2301 	push	ar3
      000963 C0 04            [24] 2302 	push	ar4
      000965 C0 05            [24] 2303 	push	ar5
      000967 74rAA            [12] 2304 	mov	a,#___str_25
      000969 C0 E0            [24] 2305 	push	acc
      00096B 74s03            [12] 2306 	mov	a,#(___str_25 >> 8)
      00096D C0 E0            [24] 2307 	push	acc
      00096F 74 80            [12] 2308 	mov	a,#0x80
      000971 C0 E0            [24] 2309 	push	acc
      000973 12r00r00         [24] 2310 	lcall	_printf
      000976 E5 81            [12] 2311 	mov	a,sp
      000978 24 FA            [12] 2312 	add	a,#0xfa
      00097A F5 81            [12] 2313 	mov	sp,a
      00097C D0 06            [24] 2314 	pop	ar6
      00097E D0 07            [24] 2315 	pop	ar7
      000980                       2316 00102$:
                                   2317 ;	program.c:393: printf("%x ", *(buffers_array[0].buffer_start + i));
      000980 90r00r0C         [24] 2318 	mov	dptr,#(_buffers_array + 0x0002)
      000983 E0               [24] 2319 	movx	a,@dptr
      000984 FB               [12] 2320 	mov	r3,a
      000985 A3               [24] 2321 	inc	dptr
      000986 E0               [24] 2322 	movx	a,@dptr
      000987 FC               [12] 2323 	mov	r4,a
      000988 A3               [24] 2324 	inc	dptr
      000989 E0               [24] 2325 	movx	a,@dptr
      00098A FD               [12] 2326 	mov	r5,a
      00098B EE               [12] 2327 	mov	a,r6
      00098C 2B               [12] 2328 	add	a,r3
      00098D FB               [12] 2329 	mov	r3,a
      00098E EF               [12] 2330 	mov	a,r7
      00098F 3C               [12] 2331 	addc	a,r4
      000990 FC               [12] 2332 	mov	r4,a
      000991 8B 82            [24] 2333 	mov	dpl,r3
      000993 8C 83            [24] 2334 	mov	dph,r4
      000995 8D F0            [24] 2335 	mov	b,r5
      000997 12r00r00         [24] 2336 	lcall	__gptrget
      00099A FB               [12] 2337 	mov	r3,a
      00099B 7D 00            [12] 2338 	mov	r5,#0x00
      00099D C0 07            [24] 2339 	push	ar7
      00099F C0 06            [24] 2340 	push	ar6
      0009A1 C0 03            [24] 2341 	push	ar3
      0009A3 C0 05            [24] 2342 	push	ar5
      0009A5 74rB1            [12] 2343 	mov	a,#___str_26
      0009A7 C0 E0            [24] 2344 	push	acc
      0009A9 74s03            [12] 2345 	mov	a,#(___str_26 >> 8)
      0009AB C0 E0            [24] 2346 	push	acc
      0009AD 74 80            [12] 2347 	mov	a,#0x80
      0009AF C0 E0            [24] 2348 	push	acc
      0009B1 12r00r00         [24] 2349 	lcall	_printf
      0009B4 E5 81            [12] 2350 	mov	a,sp
      0009B6 24 FB            [12] 2351 	add	a,#0xfb
      0009B8 F5 81            [12] 2352 	mov	sp,a
      0009BA D0 06            [24] 2353 	pop	ar6
      0009BC D0 07            [24] 2354 	pop	ar7
                                   2355 ;	program.c:394: j--;
      0009BE 90r01r5C         [24] 2356 	mov	dptr,#_dump_buff_zero_hex_j_131073_92
      0009C1 E0               [24] 2357 	movx	a,@dptr
      0009C2 24 FF            [12] 2358 	add	a,#0xff
      0009C4 FC               [12] 2359 	mov	r4,a
      0009C5 A3               [24] 2360 	inc	dptr
      0009C6 E0               [24] 2361 	movx	a,@dptr
      0009C7 34 FF            [12] 2362 	addc	a,#0xff
      0009C9 FD               [12] 2363 	mov	r5,a
      0009CA 90r01r5C         [24] 2364 	mov	dptr,#_dump_buff_zero_hex_j_131073_92
      0009CD EC               [12] 2365 	mov	a,r4
      0009CE F0               [24] 2366 	movx	@dptr,a
      0009CF ED               [12] 2367 	mov	a,r5
      0009D0 A3               [24] 2368 	inc	dptr
      0009D1 F0               [24] 2369 	movx	@dptr,a
                                   2370 ;	program.c:395: if (j == 0)
      0009D2 90r01r5C         [24] 2371 	mov	dptr,#_dump_buff_zero_hex_j_131073_92
      0009D5 E0               [24] 2372 	movx	a,@dptr
      0009D6 F5 F0            [12] 2373 	mov	b,a
      0009D8 A3               [24] 2374 	inc	dptr
      0009D9 E0               [24] 2375 	movx	a,@dptr
      0009DA 45 F0            [12] 2376 	orl	a,b
      0009DC 70 09            [24] 2377 	jnz	00111$
                                   2378 ;	program.c:396: j = 16;
      0009DE 90r01r5C         [24] 2379 	mov	dptr,#_dump_buff_zero_hex_j_131073_92
      0009E1 74 10            [12] 2380 	mov	a,#0x10
      0009E3 F0               [24] 2381 	movx	@dptr,a
      0009E4 E4               [12] 2382 	clr	a
      0009E5 A3               [24] 2383 	inc	dptr
      0009E6 F0               [24] 2384 	movx	@dptr,a
      0009E7                       2385 00111$:
                                   2386 ;	program.c:387: for (int i = 0; i < buffers_array[0].num_char; i++)
      0009E7 0E               [12] 2387 	inc	r6
      0009E8 BE 00 01         [24] 2388 	cjne	r6,#0x00,00140$
      0009EB 0F               [12] 2389 	inc	r7
      0009EC                       2390 00140$:
      0009EC 02r09r24         [24] 2391 	ljmp	00110$
      0009EF                       2392 00105$:
                                   2393 ;	program.c:398: printf("\n\n\r");
      0009EF 74r0D            [12] 2394 	mov	a,#___str_21
      0009F1 C0 E0            [24] 2395 	push	acc
      0009F3 74s03            [12] 2396 	mov	a,#(___str_21 >> 8)
      0009F5 C0 E0            [24] 2397 	push	acc
      0009F7 74 80            [12] 2398 	mov	a,#0x80
      0009F9 C0 E0            [24] 2399 	push	acc
      0009FB 12r00r00         [24] 2400 	lcall	_printf
      0009FE 15 81            [12] 2401 	dec	sp
      000A00 15 81            [12] 2402 	dec	sp
      000A02 15 81            [12] 2403 	dec	sp
      000A04 22               [24] 2404 	ret
      000A05                       2405 00107$:
                                   2406 ;	program.c:402: printf("Buffer 0 is empty...\n\r");
      000A05 74rB5            [12] 2407 	mov	a,#___str_27
      000A07 C0 E0            [24] 2408 	push	acc
      000A09 74s03            [12] 2409 	mov	a,#(___str_27 >> 8)
      000A0B C0 E0            [24] 2410 	push	acc
      000A0D 74 80            [12] 2411 	mov	a,#0x80
      000A0F C0 E0            [24] 2412 	push	acc
      000A11 12r00r00         [24] 2413 	lcall	_printf
      000A14 15 81            [12] 2414 	dec	sp
      000A16 15 81            [12] 2415 	dec	sp
      000A18 15 81            [12] 2416 	dec	sp
                                   2417 ;	program.c:404: }
      000A1A 22               [24] 2418 	ret
                                   2419 ;------------------------------------------------------------
                                   2420 ;Allocation info for local variables in function 'print_heap_stats'
                                   2421 ;------------------------------------------------------------
                                   2422 ;	program.c:411: void print_heap_stats()
                                   2423 ;	-----------------------------------------
                                   2424 ;	 function print_heap_stats
                                   2425 ;	-----------------------------------------
      000A1B                       2426 _print_heap_stats:
                                   2427 ;	program.c:413: DEBUGPORT(0xB);
      000A1B 75 82 0B         [24] 2428 	mov	dpl,#0x0b
      000A1E 12r0DrFC         [24] 2429 	lcall	_dataout
                                   2430 ;	program.c:414: printf("\n\r****************HEAP*STATS*************\n\r");
      000A21 74rCC            [12] 2431 	mov	a,#___str_28
      000A23 C0 E0            [24] 2432 	push	acc
      000A25 74s03            [12] 2433 	mov	a,#(___str_28 >> 8)
      000A27 C0 E0            [24] 2434 	push	acc
      000A29 74 80            [12] 2435 	mov	a,#0x80
      000A2B C0 E0            [24] 2436 	push	acc
      000A2D 12r00r00         [24] 2437 	lcall	_printf
      000A30 15 81            [12] 2438 	dec	sp
      000A32 15 81            [12] 2439 	dec	sp
      000A34 15 81            [12] 2440 	dec	sp
                                   2441 ;	program.c:415: printf("Total Heap Size: %d \n\r", program_stats.total_heap_size);
      000A36 90r00r00         [24] 2442 	mov	dptr,#_program_stats
      000A39 E0               [24] 2443 	movx	a,@dptr
      000A3A FE               [12] 2444 	mov	r6,a
      000A3B A3               [24] 2445 	inc	dptr
      000A3C E0               [24] 2446 	movx	a,@dptr
      000A3D FF               [12] 2447 	mov	r7,a
      000A3E C0 06            [24] 2448 	push	ar6
      000A40 C0 07            [24] 2449 	push	ar7
      000A42 74rF8            [12] 2450 	mov	a,#___str_29
      000A44 C0 E0            [24] 2451 	push	acc
      000A46 74s03            [12] 2452 	mov	a,#(___str_29 >> 8)
      000A48 C0 E0            [24] 2453 	push	acc
      000A4A 74 80            [12] 2454 	mov	a,#0x80
      000A4C C0 E0            [24] 2455 	push	acc
      000A4E 12r00r00         [24] 2456 	lcall	_printf
      000A51 E5 81            [12] 2457 	mov	a,sp
      000A53 24 FB            [12] 2458 	add	a,#0xfb
      000A55 F5 81            [12] 2459 	mov	sp,a
                                   2460 ;	program.c:416: printf("Allocated Heap Size: %d \n\r", program_stats.allocated_heap);
      000A57 90r00r02         [24] 2461 	mov	dptr,#(_program_stats + 0x0002)
      000A5A E0               [24] 2462 	movx	a,@dptr
      000A5B FE               [12] 2463 	mov	r6,a
      000A5C A3               [24] 2464 	inc	dptr
      000A5D E0               [24] 2465 	movx	a,@dptr
      000A5E FF               [12] 2466 	mov	r7,a
      000A5F C0 06            [24] 2467 	push	ar6
      000A61 C0 07            [24] 2468 	push	ar7
      000A63 74r0F            [12] 2469 	mov	a,#___str_30
      000A65 C0 E0            [24] 2470 	push	acc
      000A67 74s04            [12] 2471 	mov	a,#(___str_30 >> 8)
      000A69 C0 E0            [24] 2472 	push	acc
      000A6B 74 80            [12] 2473 	mov	a,#0x80
      000A6D C0 E0            [24] 2474 	push	acc
      000A6F 12r00r00         [24] 2475 	lcall	_printf
      000A72 E5 81            [12] 2476 	mov	a,sp
      000A74 24 FB            [12] 2477 	add	a,#0xfb
      000A76 F5 81            [12] 2478 	mov	sp,a
                                   2479 ;	program.c:417: printf("All Chars: %d \n\r", program_stats.all_char_count);
      000A78 90r00r04         [24] 2480 	mov	dptr,#(_program_stats + 0x0004)
      000A7B E0               [24] 2481 	movx	a,@dptr
      000A7C FE               [12] 2482 	mov	r6,a
      000A7D A3               [24] 2483 	inc	dptr
      000A7E E0               [24] 2484 	movx	a,@dptr
      000A7F FF               [12] 2485 	mov	r7,a
      000A80 C0 06            [24] 2486 	push	ar6
      000A82 C0 07            [24] 2487 	push	ar7
      000A84 74r2A            [12] 2488 	mov	a,#___str_31
      000A86 C0 E0            [24] 2489 	push	acc
      000A88 74s04            [12] 2490 	mov	a,#(___str_31 >> 8)
      000A8A C0 E0            [24] 2491 	push	acc
      000A8C 74 80            [12] 2492 	mov	a,#0x80
      000A8E C0 E0            [24] 2493 	push	acc
      000A90 12r00r00         [24] 2494 	lcall	_printf
      000A93 E5 81            [12] 2495 	mov	a,sp
      000A95 24 FB            [12] 2496 	add	a,#0xfb
      000A97 F5 81            [12] 2497 	mov	sp,a
                                   2498 ;	program.c:418: printf("Storage Chars: %d \n\r", program_stats.storage_char_count);
      000A99 90r00r06         [24] 2499 	mov	dptr,#(_program_stats + 0x0006)
      000A9C E0               [24] 2500 	movx	a,@dptr
      000A9D FE               [12] 2501 	mov	r6,a
      000A9E A3               [24] 2502 	inc	dptr
      000A9F E0               [24] 2503 	movx	a,@dptr
      000AA0 FF               [12] 2504 	mov	r7,a
      000AA1 C0 06            [24] 2505 	push	ar6
      000AA3 C0 07            [24] 2506 	push	ar7
      000AA5 74r3B            [12] 2507 	mov	a,#___str_32
      000AA7 C0 E0            [24] 2508 	push	acc
      000AA9 74s04            [12] 2509 	mov	a,#(___str_32 >> 8)
      000AAB C0 E0            [24] 2510 	push	acc
      000AAD 74 80            [12] 2511 	mov	a,#0x80
      000AAF C0 E0            [24] 2512 	push	acc
      000AB1 12r00r00         [24] 2513 	lcall	_printf
      000AB4 E5 81            [12] 2514 	mov	a,sp
      000AB6 24 FB            [12] 2515 	add	a,#0xfb
      000AB8 F5 81            [12] 2516 	mov	sp,a
                                   2517 ;	program.c:419: printf("Total Buffers: %d \n\r", program_stats.total_buffers);
      000ABA 90r00r08         [24] 2518 	mov	dptr,#(_program_stats + 0x0008)
      000ABD E0               [24] 2519 	movx	a,@dptr
      000ABE FE               [12] 2520 	mov	r6,a
      000ABF A3               [24] 2521 	inc	dptr
      000AC0 E0               [24] 2522 	movx	a,@dptr
      000AC1 FF               [12] 2523 	mov	r7,a
      000AC2 C0 06            [24] 2524 	push	ar6
      000AC4 C0 07            [24] 2525 	push	ar7
      000AC6 74r50            [12] 2526 	mov	a,#___str_33
      000AC8 C0 E0            [24] 2527 	push	acc
      000ACA 74s04            [12] 2528 	mov	a,#(___str_33 >> 8)
      000ACC C0 E0            [24] 2529 	push	acc
      000ACE 74 80            [12] 2530 	mov	a,#0x80
      000AD0 C0 E0            [24] 2531 	push	acc
      000AD2 12r00r00         [24] 2532 	lcall	_printf
      000AD5 E5 81            [12] 2533 	mov	a,sp
      000AD7 24 FB            [12] 2534 	add	a,#0xfb
      000AD9 F5 81            [12] 2535 	mov	sp,a
                                   2536 ;	program.c:420: }
      000ADB 22               [24] 2537 	ret
                                   2538 ;------------------------------------------------------------
                                   2539 ;Allocation info for local variables in function 'print_all_buffers'
                                   2540 ;------------------------------------------------------------
                                   2541 ;i                         Allocated with name '_print_all_buffers_i_131072_99'
                                   2542 ;------------------------------------------------------------
                                   2543 ;	program.c:427: void print_all_buffers()
                                   2544 ;	-----------------------------------------
                                   2545 ;	 function print_all_buffers
                                   2546 ;	-----------------------------------------
      000ADC                       2547 _print_all_buffers:
                                   2548 ;	program.c:429: DEBUGPORT(0xC)
      000ADC 75 82 0C         [24] 2549 	mov	dpl,#0x0c
      000ADF 12r0DrFC         [24] 2550 	lcall	_dataout
                                   2551 ;	program.c:430: for (int i = 0; i < program_stats.total_buffers; i++)
      000AE2 7E 00            [12] 2552 	mov	r6,#0x00
      000AE4 7F 00            [12] 2553 	mov	r7,#0x00
      000AE6                       2554 00103$:
      000AE6 90r00r08         [24] 2555 	mov	dptr,#(_program_stats + 0x0008)
      000AE9 E0               [24] 2556 	movx	a,@dptr
      000AEA FC               [12] 2557 	mov	r4,a
      000AEB A3               [24] 2558 	inc	dptr
      000AEC E0               [24] 2559 	movx	a,@dptr
      000AED FD               [12] 2560 	mov	r5,a
      000AEE C3               [12] 2561 	clr	c
      000AEF EE               [12] 2562 	mov	a,r6
      000AF0 9C               [12] 2563 	subb	a,r4
      000AF1 EF               [12] 2564 	mov	a,r7
      000AF2 64 80            [12] 2565 	xrl	a,#0x80
      000AF4 8D F0            [24] 2566 	mov	b,r5
      000AF6 63 F0 80         [24] 2567 	xrl	b,#0x80
      000AF9 95 F0            [12] 2568 	subb	a,b
      000AFB 40 03            [24] 2569 	jc	00116$
      000AFD 02r0Cr36         [24] 2570 	ljmp	00101$
      000B00                       2571 00116$:
                                   2572 ;	program.c:432: printf("****************BUFFER*%d***************\n\r", i);
      000B00 C0 07            [24] 2573 	push	ar7
      000B02 C0 06            [24] 2574 	push	ar6
      000B04 C0 06            [24] 2575 	push	ar6
      000B06 C0 07            [24] 2576 	push	ar7
      000B08 74r65            [12] 2577 	mov	a,#___str_34
      000B0A C0 E0            [24] 2578 	push	acc
      000B0C 74s04            [12] 2579 	mov	a,#(___str_34 >> 8)
      000B0E C0 E0            [24] 2580 	push	acc
      000B10 74 80            [12] 2581 	mov	a,#0x80
      000B12 C0 E0            [24] 2582 	push	acc
      000B14 12r00r00         [24] 2583 	lcall	_printf
      000B17 E5 81            [12] 2584 	mov	a,sp
      000B19 24 FB            [12] 2585 	add	a,#0xfb
      000B1B F5 81            [12] 2586 	mov	sp,a
      000B1D D0 06            [24] 2587 	pop	ar6
      000B1F D0 07            [24] 2588 	pop	ar7
                                   2589 ;	program.c:433: printf("Buffer#: %d \n\r", buffers_array[i].buffer_num);
      000B21 90r00r00         [24] 2590 	mov	dptr,#__mulint_PARM_2
      000B24 EE               [12] 2591 	mov	a,r6
      000B25 F0               [24] 2592 	movx	@dptr,a
      000B26 EF               [12] 2593 	mov	a,r7
      000B27 A3               [24] 2594 	inc	dptr
      000B28 F0               [24] 2595 	movx	@dptr,a
      000B29 90 00 0C         [24] 2596 	mov	dptr,#0x000c
      000B2C C0 07            [24] 2597 	push	ar7
      000B2E C0 06            [24] 2598 	push	ar6
      000B30 12r00r00         [24] 2599 	lcall	__mulint
      000B33 AC 82            [24] 2600 	mov	r4,dpl
      000B35 AD 83            [24] 2601 	mov	r5,dph
      000B37 EC               [12] 2602 	mov	a,r4
      000B38 24r0A            [12] 2603 	add	a,#_buffers_array
      000B3A F5 82            [12] 2604 	mov	dpl,a
      000B3C ED               [12] 2605 	mov	a,r5
      000B3D 34s00            [12] 2606 	addc	a,#(_buffers_array >> 8)
      000B3F F5 83            [12] 2607 	mov	dph,a
      000B41 E0               [24] 2608 	movx	a,@dptr
      000B42 FA               [12] 2609 	mov	r2,a
      000B43 A3               [24] 2610 	inc	dptr
      000B44 E0               [24] 2611 	movx	a,@dptr
      000B45 FB               [12] 2612 	mov	r3,a
      000B46 C0 05            [24] 2613 	push	ar5
      000B48 C0 04            [24] 2614 	push	ar4
      000B4A C0 02            [24] 2615 	push	ar2
      000B4C C0 03            [24] 2616 	push	ar3
      000B4E 74r90            [12] 2617 	mov	a,#___str_35
      000B50 C0 E0            [24] 2618 	push	acc
      000B52 74s04            [12] 2619 	mov	a,#(___str_35 >> 8)
      000B54 C0 E0            [24] 2620 	push	acc
      000B56 74 80            [12] 2621 	mov	a,#0x80
      000B58 C0 E0            [24] 2622 	push	acc
      000B5A 12r00r00         [24] 2623 	lcall	_printf
      000B5D E5 81            [12] 2624 	mov	a,sp
      000B5F 24 FB            [12] 2625 	add	a,#0xfb
      000B61 F5 81            [12] 2626 	mov	sp,a
      000B63 D0 04            [24] 2627 	pop	ar4
      000B65 D0 05            [24] 2628 	pop	ar5
                                   2629 ;	program.c:434: printf("BufferStart: %p \n\r", buffers_array[i].buffer_start);
      000B67 EC               [12] 2630 	mov	a,r4
      000B68 24r0A            [12] 2631 	add	a,#_buffers_array
      000B6A FC               [12] 2632 	mov	r4,a
      000B6B ED               [12] 2633 	mov	a,r5
      000B6C 34s00            [12] 2634 	addc	a,#(_buffers_array >> 8)
      000B6E FD               [12] 2635 	mov	r5,a
      000B6F 8C 82            [24] 2636 	mov	dpl,r4
      000B71 8D 83            [24] 2637 	mov	dph,r5
      000B73 A3               [24] 2638 	inc	dptr
      000B74 A3               [24] 2639 	inc	dptr
      000B75 E0               [24] 2640 	movx	a,@dptr
      000B76 F9               [12] 2641 	mov	r1,a
      000B77 A3               [24] 2642 	inc	dptr
      000B78 E0               [24] 2643 	movx	a,@dptr
      000B79 FA               [12] 2644 	mov	r2,a
      000B7A A3               [24] 2645 	inc	dptr
      000B7B E0               [24] 2646 	movx	a,@dptr
      000B7C FB               [12] 2647 	mov	r3,a
      000B7D C0 05            [24] 2648 	push	ar5
      000B7F C0 04            [24] 2649 	push	ar4
      000B81 C0 01            [24] 2650 	push	ar1
      000B83 C0 02            [24] 2651 	push	ar2
      000B85 C0 03            [24] 2652 	push	ar3
      000B87 74r9F            [12] 2653 	mov	a,#___str_36
      000B89 C0 E0            [24] 2654 	push	acc
      000B8B 74s04            [12] 2655 	mov	a,#(___str_36 >> 8)
      000B8D C0 E0            [24] 2656 	push	acc
      000B8F 74 80            [12] 2657 	mov	a,#0x80
      000B91 C0 E0            [24] 2658 	push	acc
      000B93 12r00r00         [24] 2659 	lcall	_printf
      000B96 E5 81            [12] 2660 	mov	a,sp
      000B98 24 FA            [12] 2661 	add	a,#0xfa
      000B9A F5 81            [12] 2662 	mov	sp,a
      000B9C D0 04            [24] 2663 	pop	ar4
      000B9E D0 05            [24] 2664 	pop	ar5
                                   2665 ;	program.c:435: printf("BufferEnd: %p \n\r", buffers_array[i].buffer_end);
      000BA0 8C 82            [24] 2666 	mov	dpl,r4
      000BA2 8D 83            [24] 2667 	mov	dph,r5
      000BA4 A3               [24] 2668 	inc	dptr
      000BA5 A3               [24] 2669 	inc	dptr
      000BA6 A3               [24] 2670 	inc	dptr
      000BA7 A3               [24] 2671 	inc	dptr
      000BA8 A3               [24] 2672 	inc	dptr
      000BA9 E0               [24] 2673 	movx	a,@dptr
      000BAA F9               [12] 2674 	mov	r1,a
      000BAB A3               [24] 2675 	inc	dptr
      000BAC E0               [24] 2676 	movx	a,@dptr
      000BAD FA               [12] 2677 	mov	r2,a
      000BAE A3               [24] 2678 	inc	dptr
      000BAF E0               [24] 2679 	movx	a,@dptr
      000BB0 FB               [12] 2680 	mov	r3,a
      000BB1 C0 05            [24] 2681 	push	ar5
      000BB3 C0 04            [24] 2682 	push	ar4
      000BB5 C0 01            [24] 2683 	push	ar1
      000BB7 C0 02            [24] 2684 	push	ar2
      000BB9 C0 03            [24] 2685 	push	ar3
      000BBB 74rB2            [12] 2686 	mov	a,#___str_37
      000BBD C0 E0            [24] 2687 	push	acc
      000BBF 74s04            [12] 2688 	mov	a,#(___str_37 >> 8)
      000BC1 C0 E0            [24] 2689 	push	acc
      000BC3 74 80            [12] 2690 	mov	a,#0x80
      000BC5 C0 E0            [24] 2691 	push	acc
      000BC7 12r00r00         [24] 2692 	lcall	_printf
      000BCA E5 81            [12] 2693 	mov	a,sp
      000BCC 24 FA            [12] 2694 	add	a,#0xfa
      000BCE F5 81            [12] 2695 	mov	sp,a
      000BD0 D0 04            [24] 2696 	pop	ar4
      000BD2 D0 05            [24] 2697 	pop	ar5
                                   2698 ;	program.c:436: printf("BufferSize: %d \n\r", buffers_array[i].buff_size);
      000BD4 74 08            [12] 2699 	mov	a,#0x08
      000BD6 2C               [12] 2700 	add	a,r4
      000BD7 F5 82            [12] 2701 	mov	dpl,a
      000BD9 E4               [12] 2702 	clr	a
      000BDA 3D               [12] 2703 	addc	a,r5
      000BDB F5 83            [12] 2704 	mov	dph,a
      000BDD E0               [24] 2705 	movx	a,@dptr
      000BDE FA               [12] 2706 	mov	r2,a
      000BDF A3               [24] 2707 	inc	dptr
      000BE0 E0               [24] 2708 	movx	a,@dptr
      000BE1 FB               [12] 2709 	mov	r3,a
      000BE2 C0 05            [24] 2710 	push	ar5
      000BE4 C0 04            [24] 2711 	push	ar4
      000BE6 C0 02            [24] 2712 	push	ar2
      000BE8 C0 03            [24] 2713 	push	ar3
      000BEA 74rC3            [12] 2714 	mov	a,#___str_38
      000BEC C0 E0            [24] 2715 	push	acc
      000BEE 74s04            [12] 2716 	mov	a,#(___str_38 >> 8)
      000BF0 C0 E0            [24] 2717 	push	acc
      000BF2 74 80            [12] 2718 	mov	a,#0x80
      000BF4 C0 E0            [24] 2719 	push	acc
      000BF6 12r00r00         [24] 2720 	lcall	_printf
      000BF9 E5 81            [12] 2721 	mov	a,sp
      000BFB 24 FB            [12] 2722 	add	a,#0xfb
      000BFD F5 81            [12] 2723 	mov	sp,a
      000BFF D0 04            [24] 2724 	pop	ar4
      000C01 D0 05            [24] 2725 	pop	ar5
                                   2726 ;	program.c:437: printf("TotalUsed: %d \n\r", buffers_array[i].num_char);
      000C03 74 0A            [12] 2727 	mov	a,#0x0a
      000C05 2C               [12] 2728 	add	a,r4
      000C06 F5 82            [12] 2729 	mov	dpl,a
      000C08 E4               [12] 2730 	clr	a
      000C09 3D               [12] 2731 	addc	a,r5
      000C0A F5 83            [12] 2732 	mov	dph,a
      000C0C E0               [24] 2733 	movx	a,@dptr
      000C0D FC               [12] 2734 	mov	r4,a
      000C0E A3               [24] 2735 	inc	dptr
      000C0F E0               [24] 2736 	movx	a,@dptr
      000C10 FD               [12] 2737 	mov	r5,a
      000C11 C0 04            [24] 2738 	push	ar4
      000C13 C0 05            [24] 2739 	push	ar5
      000C15 74rD5            [12] 2740 	mov	a,#___str_39
      000C17 C0 E0            [24] 2741 	push	acc
      000C19 74s04            [12] 2742 	mov	a,#(___str_39 >> 8)
      000C1B C0 E0            [24] 2743 	push	acc
      000C1D 74 80            [12] 2744 	mov	a,#0x80
      000C1F C0 E0            [24] 2745 	push	acc
      000C21 12r00r00         [24] 2746 	lcall	_printf
      000C24 E5 81            [12] 2747 	mov	a,sp
      000C26 24 FB            [12] 2748 	add	a,#0xfb
      000C28 F5 81            [12] 2749 	mov	sp,a
      000C2A D0 06            [24] 2750 	pop	ar6
      000C2C D0 07            [24] 2751 	pop	ar7
                                   2752 ;	program.c:430: for (int i = 0; i < program_stats.total_buffers; i++)
      000C2E 0E               [12] 2753 	inc	r6
      000C2F BE 00 01         [24] 2754 	cjne	r6,#0x00,00117$
      000C32 0F               [12] 2755 	inc	r7
      000C33                       2756 00117$:
      000C33 02r0ArE6         [24] 2757 	ljmp	00103$
      000C36                       2758 00101$:
                                   2759 ;	program.c:439: printf("***************************************\n\r");
      000C36 74rE6            [12] 2760 	mov	a,#___str_40
      000C38 C0 E0            [24] 2761 	push	acc
      000C3A 74s04            [12] 2762 	mov	a,#(___str_40 >> 8)
      000C3C C0 E0            [24] 2763 	push	acc
      000C3E 74 80            [12] 2764 	mov	a,#0x80
      000C40 C0 E0            [24] 2765 	push	acc
      000C42 12r00r00         [24] 2766 	lcall	_printf
      000C45 15 81            [12] 2767 	dec	sp
      000C47 15 81            [12] 2768 	dec	sp
      000C49 15 81            [12] 2769 	dec	sp
                                   2770 ;	program.c:440: }
      000C4B 22               [24] 2771 	ret
                                   2772 ;------------------------------------------------------------
                                   2773 ;Allocation info for local variables in function 'get_number'
                                   2774 ;------------------------------------------------------------
                                   2775 ;total_chars               Allocated with name '_get_number_total_chars_65536_101'
                                   2776 ;rec                       Allocated with name '_get_number_rec_65537_103'
                                   2777 ;num                       Allocated with name '_get_number_num_65537_103'
                                   2778 ;i                         Allocated with name '_get_number_i_131073_104'
                                   2779 ;------------------------------------------------------------
                                   2780 ;	program.c:447: int get_number(int total_chars)
                                   2781 ;	-----------------------------------------
                                   2782 ;	 function get_number
                                   2783 ;	-----------------------------------------
      000C4C                       2784 _get_number:
      000C4C AF 83            [24] 2785 	mov	r7,dph
      000C4E E5 82            [12] 2786 	mov	a,dpl
      000C50 90r01r5E         [24] 2787 	mov	dptr,#_get_number_total_chars_65536_101
      000C53 F0               [24] 2788 	movx	@dptr,a
      000C54 EF               [12] 2789 	mov	a,r7
      000C55 A3               [24] 2790 	inc	dptr
      000C56 F0               [24] 2791 	movx	@dptr,a
                                   2792 ;	program.c:449: DEBUGPORT(0xD);
      000C57 75 82 0D         [24] 2793 	mov	dpl,#0x0d
      000C5A 12r0DrFC         [24] 2794 	lcall	_dataout
                                   2795 ;	program.c:451: int num = 0;
      000C5D 90r01r60         [24] 2796 	mov	dptr,#_get_number_num_65537_103
      000C60 E4               [12] 2797 	clr	a
      000C61 F0               [24] 2798 	movx	@dptr,a
      000C62 A3               [24] 2799 	inc	dptr
      000C63 F0               [24] 2800 	movx	@dptr,a
                                   2801 ;	program.c:452: for (int i = total_chars; i > 0; i--)
      000C64 90r01r5E         [24] 2802 	mov	dptr,#_get_number_total_chars_65536_101
      000C67 E0               [24] 2803 	movx	a,@dptr
      000C68 FE               [12] 2804 	mov	r6,a
      000C69 A3               [24] 2805 	inc	dptr
      000C6A E0               [24] 2806 	movx	a,@dptr
      000C6B FF               [12] 2807 	mov	r7,a
      000C6C                       2808 00107$:
      000C6C C3               [12] 2809 	clr	c
      000C6D E4               [12] 2810 	clr	a
      000C6E 9E               [12] 2811 	subb	a,r6
      000C6F 74 80            [12] 2812 	mov	a,#(0x00 ^ 0x80)
      000C71 8F F0            [24] 2813 	mov	b,r7
      000C73 63 F0 80         [24] 2814 	xrl	b,#0x80
      000C76 95 F0            [12] 2815 	subb	a,b
      000C78 40 03            [24] 2816 	jc	00127$
      000C7A 02r0Dr18         [24] 2817 	ljmp	00105$
      000C7D                       2818 00127$:
                                   2819 ;	program.c:454: rec = getchar();
      000C7D C0 07            [24] 2820 	push	ar7
      000C7F C0 06            [24] 2821 	push	ar6
      000C81 12r0DrC0         [24] 2822 	lcall	_getchar
      000C84 AC 82            [24] 2823 	mov	r4,dpl
      000C86 AD 83            [24] 2824 	mov	r5,dph
      000C88 D0 06            [24] 2825 	pop	ar6
      000C8A D0 07            [24] 2826 	pop	ar7
                                   2827 ;	program.c:456: if (rec <= 0x39 && rec >= 0x30)
      000C8C C3               [12] 2828 	clr	c
      000C8D 74 39            [12] 2829 	mov	a,#0x39
      000C8F 9C               [12] 2830 	subb	a,r4
      000C90 74 80            [12] 2831 	mov	a,#(0x00 ^ 0x80)
      000C92 8D F0            [24] 2832 	mov	b,r5
      000C94 63 F0 80         [24] 2833 	xrl	b,#0x80
      000C97 95 F0            [12] 2834 	subb	a,b
      000C99 40 5C            [24] 2835 	jc	00102$
      000C9B EC               [12] 2836 	mov	a,r4
      000C9C 94 30            [12] 2837 	subb	a,#0x30
      000C9E ED               [12] 2838 	mov	a,r5
      000C9F 64 80            [12] 2839 	xrl	a,#0x80
      000CA1 94 80            [12] 2840 	subb	a,#0x80
      000CA3 40 52            [24] 2841 	jc	00102$
                                   2842 ;	program.c:458: num += ((rec - 0x30) * get_num_helper(i - 1));
      000CA5 EC               [12] 2843 	mov	a,r4
      000CA6 24 D0            [12] 2844 	add	a,#0xd0
      000CA8 FC               [12] 2845 	mov	r4,a
      000CA9 ED               [12] 2846 	mov	a,r5
      000CAA 34 FF            [12] 2847 	addc	a,#0xff
      000CAC FD               [12] 2848 	mov	r5,a
      000CAD EE               [12] 2849 	mov	a,r6
      000CAE 24 FF            [12] 2850 	add	a,#0xff
      000CB0 FA               [12] 2851 	mov	r2,a
      000CB1 EF               [12] 2852 	mov	a,r7
      000CB2 34 FF            [12] 2853 	addc	a,#0xff
      000CB4 FB               [12] 2854 	mov	r3,a
      000CB5 8A 82            [24] 2855 	mov	dpl,r2
      000CB7 8B 83            [24] 2856 	mov	dph,r3
      000CB9 C0 07            [24] 2857 	push	ar7
      000CBB C0 06            [24] 2858 	push	ar6
      000CBD C0 05            [24] 2859 	push	ar5
      000CBF C0 04            [24] 2860 	push	ar4
      000CC1 12r0Dr24         [24] 2861 	lcall	_get_num_helper
      000CC4 AA 82            [24] 2862 	mov	r2,dpl
      000CC6 AB 83            [24] 2863 	mov	r3,dph
      000CC8 D0 04            [24] 2864 	pop	ar4
      000CCA D0 05            [24] 2865 	pop	ar5
      000CCC 90r00r00         [24] 2866 	mov	dptr,#__mulint_PARM_2
      000CCF EA               [12] 2867 	mov	a,r2
      000CD0 F0               [24] 2868 	movx	@dptr,a
      000CD1 EB               [12] 2869 	mov	a,r3
      000CD2 A3               [24] 2870 	inc	dptr
      000CD3 F0               [24] 2871 	movx	@dptr,a
      000CD4 8C 82            [24] 2872 	mov	dpl,r4
      000CD6 8D 83            [24] 2873 	mov	dph,r5
      000CD8 12r00r00         [24] 2874 	lcall	__mulint
      000CDB AC 82            [24] 2875 	mov	r4,dpl
      000CDD AD 83            [24] 2876 	mov	r5,dph
      000CDF D0 06            [24] 2877 	pop	ar6
      000CE1 D0 07            [24] 2878 	pop	ar7
      000CE3 90r01r60         [24] 2879 	mov	dptr,#_get_number_num_65537_103
      000CE6 E0               [24] 2880 	movx	a,@dptr
      000CE7 FA               [12] 2881 	mov	r2,a
      000CE8 A3               [24] 2882 	inc	dptr
      000CE9 E0               [24] 2883 	movx	a,@dptr
      000CEA FB               [12] 2884 	mov	r3,a
      000CEB 90r01r60         [24] 2885 	mov	dptr,#_get_number_num_65537_103
      000CEE EC               [12] 2886 	mov	a,r4
      000CEF 2A               [12] 2887 	add	a,r2
      000CF0 F0               [24] 2888 	movx	@dptr,a
      000CF1 ED               [12] 2889 	mov	a,r5
      000CF2 3B               [12] 2890 	addc	a,r3
      000CF3 A3               [24] 2891 	inc	dptr
      000CF4 F0               [24] 2892 	movx	@dptr,a
      000CF5 80 19            [24] 2893 	sjmp	00108$
      000CF7                       2894 00102$:
                                   2895 ;	program.c:462: printf("ERR,Numbers ONLY!\n\r");
      000CF7 74r10            [12] 2896 	mov	a,#___str_41
      000CF9 C0 E0            [24] 2897 	push	acc
      000CFB 74s05            [12] 2898 	mov	a,#(___str_41 >> 8)
      000CFD C0 E0            [24] 2899 	push	acc
      000CFF 74 80            [12] 2900 	mov	a,#0x80
      000D01 C0 E0            [24] 2901 	push	acc
      000D03 12r00r00         [24] 2902 	lcall	_printf
      000D06 15 81            [12] 2903 	dec	sp
      000D08 15 81            [12] 2904 	dec	sp
      000D0A 15 81            [12] 2905 	dec	sp
                                   2906 ;	program.c:463: return -1;
      000D0C 90 FF FF         [24] 2907 	mov	dptr,#0xffff
      000D0F 22               [24] 2908 	ret
      000D10                       2909 00108$:
                                   2910 ;	program.c:452: for (int i = total_chars; i > 0; i--)
      000D10 1E               [12] 2911 	dec	r6
      000D11 BE FF 01         [24] 2912 	cjne	r6,#0xff,00130$
      000D14 1F               [12] 2913 	dec	r7
      000D15                       2914 00130$:
      000D15 02r0Cr6C         [24] 2915 	ljmp	00107$
      000D18                       2916 00105$:
                                   2917 ;	program.c:466: return num;
      000D18 90r01r60         [24] 2918 	mov	dptr,#_get_number_num_65537_103
      000D1B E0               [24] 2919 	movx	a,@dptr
      000D1C FE               [12] 2920 	mov	r6,a
      000D1D A3               [24] 2921 	inc	dptr
      000D1E E0               [24] 2922 	movx	a,@dptr
                                   2923 ;	program.c:467: }
      000D1F 8E 82            [24] 2924 	mov	dpl,r6
      000D21 F5 83            [12] 2925 	mov	dph,a
      000D23 22               [24] 2926 	ret
                                   2927 ;------------------------------------------------------------
                                   2928 ;Allocation info for local variables in function 'get_num_helper'
                                   2929 ;------------------------------------------------------------
                                   2930 ;times                     Allocated with name '_get_num_helper_times_65536_108'
                                   2931 ;num                       Allocated with name '_get_num_helper_num_65536_109'
                                   2932 ;i                         Allocated with name '_get_num_helper_i_131072_110'
                                   2933 ;------------------------------------------------------------
                                   2934 ;	program.c:474: int get_num_helper(int times)
                                   2935 ;	-----------------------------------------
                                   2936 ;	 function get_num_helper
                                   2937 ;	-----------------------------------------
      000D24                       2938 _get_num_helper:
      000D24 AF 83            [24] 2939 	mov	r7,dph
      000D26 E5 82            [12] 2940 	mov	a,dpl
      000D28 90r01r62         [24] 2941 	mov	dptr,#_get_num_helper_times_65536_108
      000D2B F0               [24] 2942 	movx	@dptr,a
      000D2C EF               [12] 2943 	mov	a,r7
      000D2D A3               [24] 2944 	inc	dptr
      000D2E F0               [24] 2945 	movx	@dptr,a
                                   2946 ;	program.c:476: int num = 1;
      000D2F 90r01r64         [24] 2947 	mov	dptr,#_get_num_helper_num_65536_109
      000D32 74 01            [12] 2948 	mov	a,#0x01
      000D34 F0               [24] 2949 	movx	@dptr,a
      000D35 E4               [12] 2950 	clr	a
      000D36 A3               [24] 2951 	inc	dptr
      000D37 F0               [24] 2952 	movx	@dptr,a
                                   2953 ;	program.c:478: for (int i = 0; i < times; i++)
      000D38 90r01r62         [24] 2954 	mov	dptr,#_get_num_helper_times_65536_108
      000D3B E0               [24] 2955 	movx	a,@dptr
      000D3C FE               [12] 2956 	mov	r6,a
      000D3D A3               [24] 2957 	inc	dptr
      000D3E E0               [24] 2958 	movx	a,@dptr
      000D3F FF               [12] 2959 	mov	r7,a
      000D40 7C 00            [12] 2960 	mov	r4,#0x00
      000D42 7D 00            [12] 2961 	mov	r5,#0x00
      000D44                       2962 00106$:
      000D44 C3               [12] 2963 	clr	c
      000D45 EC               [12] 2964 	mov	a,r4
      000D46 9E               [12] 2965 	subb	a,r6
      000D47 ED               [12] 2966 	mov	a,r5
      000D48 64 80            [12] 2967 	xrl	a,#0x80
      000D4A 8F F0            [24] 2968 	mov	b,r7
      000D4C 63 F0 80         [24] 2969 	xrl	b,#0x80
      000D4F 95 F0            [12] 2970 	subb	a,b
      000D51 50 3A            [24] 2971 	jnc	00101$
                                   2972 ;	program.c:480: num = num * 10;
      000D53 90r01r64         [24] 2973 	mov	dptr,#_get_num_helper_num_65536_109
      000D56 E0               [24] 2974 	movx	a,@dptr
      000D57 FA               [12] 2975 	mov	r2,a
      000D58 A3               [24] 2976 	inc	dptr
      000D59 E0               [24] 2977 	movx	a,@dptr
      000D5A FB               [12] 2978 	mov	r3,a
      000D5B 90r00r00         [24] 2979 	mov	dptr,#__mulint_PARM_2
      000D5E EA               [12] 2980 	mov	a,r2
      000D5F F0               [24] 2981 	movx	@dptr,a
      000D60 EB               [12] 2982 	mov	a,r3
      000D61 A3               [24] 2983 	inc	dptr
      000D62 F0               [24] 2984 	movx	@dptr,a
      000D63 90 00 0A         [24] 2985 	mov	dptr,#0x000a
      000D66 C0 07            [24] 2986 	push	ar7
      000D68 C0 06            [24] 2987 	push	ar6
      000D6A C0 05            [24] 2988 	push	ar5
      000D6C C0 04            [24] 2989 	push	ar4
      000D6E 12r00r00         [24] 2990 	lcall	__mulint
      000D71 E5 82            [12] 2991 	mov	a,dpl
      000D73 85 83 F0         [24] 2992 	mov	b,dph
      000D76 D0 04            [24] 2993 	pop	ar4
      000D78 D0 05            [24] 2994 	pop	ar5
      000D7A D0 06            [24] 2995 	pop	ar6
      000D7C D0 07            [24] 2996 	pop	ar7
      000D7E 90r01r64         [24] 2997 	mov	dptr,#_get_num_helper_num_65536_109
      000D81 F0               [24] 2998 	movx	@dptr,a
      000D82 E5 F0            [12] 2999 	mov	a,b
      000D84 A3               [24] 3000 	inc	dptr
      000D85 F0               [24] 3001 	movx	@dptr,a
                                   3002 ;	program.c:478: for (int i = 0; i < times; i++)
      000D86 0C               [12] 3003 	inc	r4
      000D87 BC 00 BA         [24] 3004 	cjne	r4,#0x00,00106$
      000D8A 0D               [12] 3005 	inc	r5
      000D8B 80 B7            [24] 3006 	sjmp	00106$
      000D8D                       3007 00101$:
                                   3008 ;	program.c:482: if (times == 0)
      000D8D EE               [12] 3009 	mov	a,r6
      000D8E 4F               [12] 3010 	orl	a,r7
      000D8F 70 04            [24] 3011 	jnz	00103$
                                   3012 ;	program.c:483: return 1;
      000D91 90 00 01         [24] 3013 	mov	dptr,#0x0001
      000D94 22               [24] 3014 	ret
      000D95                       3015 00103$:
                                   3016 ;	program.c:485: return num;
      000D95 90r01r64         [24] 3017 	mov	dptr,#_get_num_helper_num_65536_109
      000D98 E0               [24] 3018 	movx	a,@dptr
      000D99 FE               [12] 3019 	mov	r6,a
      000D9A A3               [24] 3020 	inc	dptr
      000D9B E0               [24] 3021 	movx	a,@dptr
                                   3022 ;	program.c:486: }
      000D9C 8E 82            [24] 3023 	mov	dpl,r6
      000D9E F5 83            [12] 3024 	mov	dph,a
      000DA0 22               [24] 3025 	ret
                                   3026 ;------------------------------------------------------------
                                   3027 ;Allocation info for local variables in function 'putchar'
                                   3028 ;------------------------------------------------------------
                                   3029 ;c                         Allocated with name '_putchar_c_65536_112'
                                   3030 ;------------------------------------------------------------
                                   3031 ;	program.c:493: int putchar(int c)
                                   3032 ;	-----------------------------------------
                                   3033 ;	 function putchar
                                   3034 ;	-----------------------------------------
      000DA1                       3035 _putchar:
      000DA1 AF 83            [24] 3036 	mov	r7,dph
      000DA3 E5 82            [12] 3037 	mov	a,dpl
      000DA5 90r01r66         [24] 3038 	mov	dptr,#_putchar_c_65536_112
      000DA8 F0               [24] 3039 	movx	@dptr,a
      000DA9 EF               [12] 3040 	mov	a,r7
      000DAA A3               [24] 3041 	inc	dptr
      000DAB F0               [24] 3042 	movx	@dptr,a
                                   3043 ;	program.c:495: while ((SCON & 0x02) == 0)
      000DAC                       3044 00101$:
      000DAC E5 98            [12] 3045 	mov	a,_SCON
      000DAE 30 E1 FB         [24] 3046 	jnb	acc.1,00101$
                                   3047 ;	program.c:497: TI = 0;
                                   3048 ;	assignBit
      000DB1 C2 99            [12] 3049 	clr	_TI
                                   3050 ;	program.c:498: SBUF = c;
      000DB3 90r01r66         [24] 3051 	mov	dptr,#_putchar_c_65536_112
      000DB6 E0               [24] 3052 	movx	a,@dptr
      000DB7 FE               [12] 3053 	mov	r6,a
      000DB8 A3               [24] 3054 	inc	dptr
      000DB9 E0               [24] 3055 	movx	a,@dptr
      000DBA 8E 99            [24] 3056 	mov	_SBUF,r6
                                   3057 ;	program.c:499: return 0;
      000DBC 90 00 00         [24] 3058 	mov	dptr,#0x0000
                                   3059 ;	program.c:500: }
      000DBF 22               [24] 3060 	ret
                                   3061 ;------------------------------------------------------------
                                   3062 ;Allocation info for local variables in function 'getchar'
                                   3063 ;------------------------------------------------------------
                                   3064 ;	program.c:507: int getchar()
                                   3065 ;	-----------------------------------------
                                   3066 ;	 function getchar
                                   3067 ;	-----------------------------------------
      000DC0                       3068 _getchar:
                                   3069 ;	program.c:509: while (RI == 0)
      000DC0                       3070 00101$:
                                   3071 ;	program.c:511: RI = 0;
                                   3072 ;	assignBit
      000DC0 10 98 02         [24] 3073 	jbc	_RI,00140$
      000DC3 80 FB            [24] 3074 	sjmp	00101$
      000DC5                       3075 00140$:
                                   3076 ;	program.c:513: if (SBUF != 0x3F && SBUF != 0x3D && SBUF != 0x40 && SBUF != 0x2B && SBUF != 0x2D)
      000DC5 74 3F            [12] 3077 	mov	a,#0x3f
      000DC7 B5 99 02         [24] 3078 	cjne	a,_SBUF,00141$
      000DCA 80 27            [24] 3079 	sjmp	00105$
      000DCC                       3080 00141$:
      000DCC 74 3D            [12] 3081 	mov	a,#0x3d
      000DCE B5 99 02         [24] 3082 	cjne	a,_SBUF,00142$
      000DD1 80 20            [24] 3083 	sjmp	00105$
      000DD3                       3084 00142$:
      000DD3 74 40            [12] 3085 	mov	a,#0x40
      000DD5 B5 99 02         [24] 3086 	cjne	a,_SBUF,00143$
      000DD8 80 19            [24] 3087 	sjmp	00105$
      000DDA                       3088 00143$:
      000DDA 74 2B            [12] 3089 	mov	a,#0x2b
      000DDC B5 99 02         [24] 3090 	cjne	a,_SBUF,00144$
      000DDF 80 12            [24] 3091 	sjmp	00105$
      000DE1                       3092 00144$:
      000DE1 74 2D            [12] 3093 	mov	a,#0x2d
      000DE3 B5 99 02         [24] 3094 	cjne	a,_SBUF,00145$
      000DE6 80 0B            [24] 3095 	sjmp	00105$
      000DE8                       3096 00145$:
                                   3097 ;	program.c:514: putchar(SBUF);
      000DE8 AE 99            [24] 3098 	mov	r6,_SBUF
      000DEA 7F 00            [12] 3099 	mov	r7,#0x00
      000DEC 8E 82            [24] 3100 	mov	dpl,r6
      000DEE 8F 83            [24] 3101 	mov	dph,r7
      000DF0 12r0DrA1         [24] 3102 	lcall	_putchar
      000DF3                       3103 00105$:
                                   3104 ;	program.c:515: return SBUF;
      000DF3 AE 99            [24] 3105 	mov	r6,_SBUF
      000DF5 7F 00            [12] 3106 	mov	r7,#0x00
      000DF7 8E 82            [24] 3107 	mov	dpl,r6
      000DF9 8F 83            [24] 3108 	mov	dph,r7
                                   3109 ;	program.c:516: }
      000DFB 22               [24] 3110 	ret
                                   3111 ;------------------------------------------------------------
                                   3112 ;Allocation info for local variables in function 'dataout'
                                   3113 ;------------------------------------------------------------
                                   3114 ;data                      Allocated with name '_dataout_data_65536_115'
                                   3115 ;------------------------------------------------------------
                                   3116 ;	program.c:523: void dataout(unsigned char data)
                                   3117 ;	-----------------------------------------
                                   3118 ;	 function dataout
                                   3119 ;	-----------------------------------------
      000DFC                       3120 _dataout:
      000DFC E5 82            [12] 3121 	mov	a,dpl
      000DFE 90r01r68         [24] 3122 	mov	dptr,#_dataout_data_65536_115
      000E01 F0               [24] 3123 	movx	@dptr,a
                                   3124 ;	program.c:525: DEBUG_LOC = data;
      000E02 E0               [24] 3125 	movx	a,@dptr
      000E03 90 6F FF         [24] 3126 	mov	dptr,#_DEBUG_LOC
      000E06 F0               [24] 3127 	movx	@dptr,a
                                   3128 ;	program.c:526: }
      000E07 22               [24] 3129 	ret
                                   3130 ;------------------------------------------------------------
                                   3131 ;Allocation info for local variables in function '_sdcc_external_startup'
                                   3132 ;------------------------------------------------------------
                                   3133 ;	program.c:533: _sdcc_external_startup()
                                   3134 ;	-----------------------------------------
                                   3135 ;	 function _sdcc_external_startup
                                   3136 ;	-----------------------------------------
      000E08                       3137 __sdcc_external_startup:
                                   3138 ;	program.c:535: _AUXR = 0xC;
      000E08 75 8E 0C         [24] 3139 	mov	__AUXR,#0x0c
                                   3140 ;	program.c:537: SCON = 0x42;
      000E0B 75 98 42         [24] 3141 	mov	_SCON,#0x42
                                   3142 ;	program.c:539: PCON = 0x80;
      000E0E 75 87 80         [24] 3143 	mov	_PCON,#0x80
                                   3144 ;	program.c:541: TH1 = 255;
      000E11 75 8D FF         [24] 3145 	mov	_TH1,#0xff
                                   3146 ;	program.c:542: TL1 = 255;
      000E14 75 8B FF         [24] 3147 	mov	_TL1,#0xff
                                   3148 ;	program.c:544: TMOD = 0x20;
      000E17 75 89 20         [24] 3149 	mov	_TMOD,#0x20
                                   3150 ;	program.c:546: REN = 1;
                                   3151 ;	assignBit
      000E1A D2 9C            [12] 3152 	setb	_REN
                                   3153 ;	program.c:548: TR1 = 1;
                                   3154 ;	assignBit
      000E1C D2 8E            [12] 3155 	setb	_TR1
                                   3156 ;	program.c:550: return 0;
      000E1E 90 00 00         [24] 3157 	mov	dptr,#0x0000
                                   3158 ;	program.c:551: }
      000E21 22               [24] 3159 	ret
                                   3160 	.area CSEG    (CODE)
                                   3161 	.area CONST   (CODE)
                                   3162 	.area CONST   (CODE)
      000000                       3163 ___str_0:
      000000 48 45 4C 4C 4F 21 20  3164 	.ascii "HELLO! "
      000007 0A                    3165 	.db 0x0a
      000008 0D                    3166 	.db 0x0d
      000009 00                    3167 	.db 0x00
                                   3168 	.area CSEG    (CODE)
                                   3169 	.area CONST   (CODE)
      00000A                       3170 ___str_1:
      00000A 42 75 66 66 65 72 20  3171 	.ascii "Buffer %d Freed ...."
             25 64 20 46 72 65 65
             64 20 2E 2E 2E 2E
      00001E 0A                    3172 	.db 0x0a
      00001F 0D                    3173 	.db 0x0d
      000020 00                    3174 	.db 0x00
                                   3175 	.area CSEG    (CODE)
                                   3176 	.area CONST   (CODE)
      000021                       3177 ___str_2:
      000021 4C 65 74 27 73 20 62  3178 	.ascii "Let's begin again.."
             65 67 69 6E 20 61 67
             61 69 6E 2E 2E
      000034 0A                    3179 	.db 0x0a
      000035 0D                    3180 	.db 0x0d
      000036 00                    3181 	.db 0x00
                                   3182 	.area CSEG    (CODE)
                                   3183 	.area CONST   (CODE)
      000037                       3184 ___str_3:
      000037 0A                    3185 	.db 0x0a
      000038 0D                    3186 	.db 0x0d
      000039 47 69 76 65 20 56 61  3187 	.ascii "Give Valid Buffer Number to delete(1-%d) in 3 digits"
             6C 69 64 20 42 75 66
             66 65 72 20 4E 75 6D
             62 65 72 20 74 6F 20
             64 65 6C 65 74 65 28
             31 2D 25 64 29 20 69
             6E 20 33 20 64 69 67
             69 74 73
      00006D 0A                    3188 	.db 0x0a
      00006E 0D                    3189 	.db 0x0d
      00006F 00                    3190 	.db 0x00
                                   3191 	.area CSEG    (CODE)
                                   3192 	.area CONST   (CODE)
      000070                       3193 ___str_4:
      000070 42 75 66 66 65 72 20  3194 	.ascii "Buffer %d Successfully Deleted.. "
             25 64 20 53 75 63 63
             65 73 73 66 75 6C 6C
             79 20 44 65 6C 65 74
             65 64 2E 2E 20
      000091 0A                    3195 	.db 0x0a
      000092 0D                    3196 	.db 0x0d
      000093 00                    3197 	.db 0x00
                                   3198 	.area CSEG    (CODE)
                                   3199 	.area CONST   (CODE)
      000094                       3200 ___str_5:
      000094 0A                    3201 	.db 0x0a
      000095 0A                    3202 	.db 0x0a
      000096 0D                    3203 	.db 0x0d
      000097 5E 5E 5E 5E 5E 5E 5E  3204 	.ascii "^^^^^^^^^^^^^^^^^^^-MENU-^^^^^^^^^^^^^^^^^^^^^^^^^^ "
             5E 5E 5E 5E 5E 5E 5E
             5E 5E 5E 5E 5E 2D 4D
             45 4E 55 2D 5E 5E 5E
             5E 5E 5E 5E 5E 5E 5E
             5E 5E 5E 5E 5E 5E 5E
             5E 5E 5E 5E 5E 5E 5E
             5E 5E 20
      0000CB 0A                    3205 	.db 0x0a
      0000CC 0A                    3206 	.db 0x0a
      0000CD 0D                    3207 	.db 0x0d
      0000CE 00                    3208 	.db 0x00
                                   3209 	.area CSEG    (CODE)
                                   3210 	.area CONST   (CODE)
      0000CF                       3211 ___str_6:
      0000CF 59 6F 75 20 63 61 6E  3212 	.ascii "You can enter characters or use commands from below "
             20 65 6E 74 65 72 20
             63 68 61 72 61 63 74
             65 72 73 20 6F 72 20
             75 73 65 20 63 6F 6D
             6D 61 6E 64 73 20 66
             72 6F 6D 20 62 65 6C
             6F 77 20
      000103 0A                    3213 	.db 0x0a
      000104 0D                    3214 	.db 0x0d
      000105 00                    3215 	.db 0x00
                                   3216 	.area CSEG    (CODE)
                                   3217 	.area CONST   (CODE)
      000106                       3218 ___str_7:
      000106 27 3F 27 20 2D 3E 20  3219 	.ascii "'?' -> Show heap status, dump & clear Buffer 0 "
             53 68 6F 77 20 68 65
             61 70 20 73 74 61 74
             75 73 2C 20 64 75 6D
             70 20 26 20 63 6C 65
             61 72 20 42 75 66 66
             65 72 20 30 20
      000135 0A                    3220 	.db 0x0a
      000136 0D                    3221 	.db 0x0d
      000137 00                    3222 	.db 0x00
                                   3223 	.area CSEG    (CODE)
                                   3224 	.area CONST   (CODE)
      000138                       3225 ___str_8:
      000138 27 2B 27 20 2D 3E 20  3226 	.ascii "'+' -> Add a new Buffer"
             41 64 64 20 61 20 6E
             65 77 20 42 75 66 66
             65 72
      00014F 0A                    3227 	.db 0x0a
      000150 0D                    3228 	.db 0x0d
      000151 00                    3229 	.db 0x00
                                   3230 	.area CSEG    (CODE)
                                   3231 	.area CONST   (CODE)
      000152                       3232 ___str_9:
      000152 27 2D 27 20 2D 3E 20  3233 	.ascii "'-' -> Delete existing Buffer"
             44 65 6C 65 74 65 20
             65 78 69 73 74 69 6E
             67 20 42 75 66 66 65
             72
      00016F 0A                    3234 	.db 0x0a
      000170 0D                    3235 	.db 0x0d
      000171 00                    3236 	.db 0x00
                                   3237 	.area CSEG    (CODE)
                                   3238 	.area CONST   (CODE)
      000172                       3239 ___str_10:
      000172 27 3D 27 20 2D 3E 20  3240 	.ascii "'=' -> Dump Buffer 0 in hex"
             44 75 6D 70 20 42 75
             66 66 65 72 20 30 20
             69 6E 20 68 65 78
      00018D 0A                    3241 	.db 0x0a
      00018E 0D                    3242 	.db 0x0d
      00018F 00                    3243 	.db 0x00
                                   3244 	.area CSEG    (CODE)
                                   3245 	.area CONST   (CODE)
      000190                       3246 ___str_11:
      000190 27 40 27 20 2D 3E 20  3247 	.ascii "'@' -> Free all Heap & begin again"
             46 72 65 65 20 61 6C
             6C 20 48 65 61 70 20
             26 20 62 65 67 69 6E
             20 61 67 61 69 6E
      0001B2 0A                    3248 	.db 0x0a
      0001B3 0A                    3249 	.db 0x0a
      0001B4 0D                    3250 	.db 0x0d
      0001B5 00                    3251 	.db 0x00
                                   3252 	.area CSEG    (CODE)
                                   3253 	.area CONST   (CODE)
      0001B6                       3254 ___str_12:
      0001B6 0A                    3255 	.db 0x0a
      0001B7 0D                    3256 	.db 0x0d
      0001B8 47 69 76 65 20 56 61  3257 	.ascii "Give Valid Buffer Size(030-300):"
             6C 69 64 20 42 75 66
             66 65 72 20 53 69 7A
             65 28 30 33 30 2D 33
             30 30 29 3A
      0001D8 00                    3258 	.db 0x00
                                   3259 	.area CSEG    (CODE)
                                   3260 	.area CONST   (CODE)
      0001D9                       3261 ___str_13:
      0001D9 46 61 69 6C 65 64 2C  3262 	.ascii "Failed, give smaller buffer"
             20 67 69 76 65 20 73
             6D 61 6C 6C 65 72 20
             62 75 66 66 65 72
      0001F4 0A                    3263 	.db 0x0a
      0001F5 0D                    3264 	.db 0x0d
      0001F6 00                    3265 	.db 0x00
                                   3266 	.area CSEG    (CODE)
                                   3267 	.area CONST   (CODE)
      0001F7                       3268 ___str_14:
      0001F7 0A                    3269 	.db 0x0a
      0001F8 0A                    3270 	.db 0x0a
      0001F9 0D                    3271 	.db 0x0d
      0001FA 23 23 23 23 53 55 43  3272 	.ascii "####SUCCESS, BUFFER Created####"
             43 45 53 53 2C 20 42
             55 46 46 45 52 20 43
             72 65 61 74 65 64 23
             23 23 23
      000219 0A                    3273 	.db 0x0a
      00021A 0A                    3274 	.db 0x0a
      00021B 0D                    3275 	.db 0x0d
      00021C 00                    3276 	.db 0x00
                                   3277 	.area CSEG    (CODE)
                                   3278 	.area CONST   (CODE)
      00021D                       3279 ___str_15:
      00021D 4E 6F 20 48 65 61 70  3280 	.ascii "No Heap Memory Left, Delete some buffers..."
             20 4D 65 6D 6F 72 79
             20 4C 65 66 74 2C 20
             44 65 6C 65 74 65 20
             73 6F 6D 65 20 62 75
             66 66 65 72 73 2E 2E
             2E
      000248 0A                    3281 	.db 0x0a
      000249 0D                    3282 	.db 0x0d
      00024A 00                    3283 	.db 0x00
                                   3284 	.area CSEG    (CODE)
                                   3285 	.area CONST   (CODE)
      00024B                       3286 ___str_16:
      00024B 0A                    3287 	.db 0x0a
      00024C 0D                    3288 	.db 0x0d
      00024D 47 69 76 65 20 56 61  3289 	.ascii "Give Valid Initial Buffer Size(0048-4800):"
             6C 69 64 20 49 6E 69
             74 69 61 6C 20 42 75
             66 66 65 72 20 53 69
             7A 65 28 30 30 34 38
             2D 34 38 30 30 29 3A
      000277 00                    3290 	.db 0x00
                                   3291 	.area CSEG    (CODE)
                                   3292 	.area CONST   (CODE)
      000278                       3293 ___str_17:
      000278 0A                    3294 	.db 0x0a
      000279 0D                    3295 	.db 0x0d
      00027A 23 23 23 23 46 41 49  3296 	.ascii "####FAIL, Please give a smaller buffer size####"
             4C 2C 20 50 6C 65 61
             73 65 20 67 69 76 65
             20 61 20 73 6D 61 6C
             6C 65 72 20 62 75 66
             66 65 72 20 73 69 7A
             65 23 23 23 23
      0002A9 0A                    3297 	.db 0x0a
      0002AA 0A                    3298 	.db 0x0a
      0002AB 0D                    3299 	.db 0x0d
      0002AC 00                    3300 	.db 0x00
                                   3301 	.area CSEG    (CODE)
                                   3302 	.area CONST   (CODE)
      0002AD                       3303 ___str_18:
      0002AD 0A                    3304 	.db 0x0a
      0002AE 0A                    3305 	.db 0x0a
      0002AF 0D                    3306 	.db 0x0d
      0002B0 23 23 23 23 53 55 43  3307 	.ascii "####SUCCESS, INITIAL BUFFERS Created####"
             43 45 53 53 2C 20 49
             4E 49 54 49 41 4C 20
             42 55 46 46 45 52 53
             20 43 72 65 61 74 65
             64 23 23 23 23
      0002D8 0A                    3308 	.db 0x0a
      0002D9 0A                    3309 	.db 0x0a
      0002DA 0D                    3310 	.db 0x0d
      0002DB 00                    3311 	.db 0x00
                                   3312 	.area CSEG    (CODE)
                                   3313 	.area CONST   (CODE)
      0002DC                       3314 ___str_19:
      0002DC 0A                    3315 	.db 0x0a
      0002DD 0A                    3316 	.db 0x0a
      0002DE 0D                    3317 	.db 0x0d
      0002DF 2A 2A 2A 2A 2A 2A 2A  3318 	.ascii "***********Buffer-0-Contents*********** "
             2A 2A 2A 2A 42 75 66
             66 65 72 2D 30 2D 43
             6F 6E 74 65 6E 74 73
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 20
      000307 0A                    3319 	.db 0x0a
      000308 0D                    3320 	.db 0x0d
      000309 00                    3321 	.db 0x00
                                   3322 	.area CSEG    (CODE)
                                   3323 	.area CONST   (CODE)
      00030A                       3324 ___str_20:
      00030A 0A                    3325 	.db 0x0a
      00030B 0D                    3326 	.db 0x0d
      00030C 00                    3327 	.db 0x00
                                   3328 	.area CSEG    (CODE)
                                   3329 	.area CONST   (CODE)
      00030D                       3330 ___str_21:
      00030D 0A                    3331 	.db 0x0a
      00030E 0A                    3332 	.db 0x0a
      00030F 0D                    3333 	.db 0x0d
      000310 00                    3334 	.db 0x00
                                   3335 	.area CSEG    (CODE)
                                   3336 	.area CONST   (CODE)
      000311                       3337 ___str_22:
      000311 42 75 66 66 65 72 30  3338 	.ascii "Buffer0 is Empty...."
             20 69 73 20 45 6D 70
             74 79 2E 2E 2E 2E
      000325 0A                    3339 	.db 0x0a
      000326 0D                    3340 	.db 0x0d
      000327 00                    3341 	.db 0x00
                                   3342 	.area CSEG    (CODE)
                                   3343 	.area CONST   (CODE)
      000328                       3344 ___str_23:
      000328 0A                    3345 	.db 0x0a
      000329 0D                    3346 	.db 0x0d
      00032A 2D 2D 2D 2D 2D 2D 2D  3347 	.ascii "-------------------------HEXDUMP----------------------------"
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 48 45 58
             44 55 4D 50 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D
      000366 2D 2D 2D 2D           3348 	.ascii "----"
      00036A 00                    3349 	.db 0x00
                                   3350 	.area CSEG    (CODE)
                                   3351 	.area CONST   (CODE)
      00036B                       3352 ___str_24:
      00036B 0A                    3353 	.db 0x0a
      00036C 0D                    3354 	.db 0x0d
      00036D 20 20 20 20 41 44 44  3355 	.ascii "    ADDR: +0 +1 +2 +3 +4 +5 +6 +7 +8 +9 +A +B +C +D +E +F "
             52 3A 20 2B 30 20 2B
             31 20 2B 32 20 2B 33
             20 2B 34 20 2B 35 20
             2B 36 20 2B 37 20 2B
             38 20 2B 39 20 2B 41
             20 2B 42 20 2B 43 20
             2B 44 20 2B 45 20 2B
             46 20
      0003A7 0A                    3356 	.db 0x0a
      0003A8 0D                    3357 	.db 0x0d
      0003A9 00                    3358 	.db 0x00
                                   3359 	.area CSEG    (CODE)
                                   3360 	.area CONST   (CODE)
      0003AA                       3361 ___str_25:
      0003AA 0A                    3362 	.db 0x0a
      0003AB 0D                    3363 	.db 0x0d
      0003AC 25 70 3A 20           3364 	.ascii "%p: "
      0003B0 00                    3365 	.db 0x00
                                   3366 	.area CSEG    (CODE)
                                   3367 	.area CONST   (CODE)
      0003B1                       3368 ___str_26:
      0003B1 25 78 20              3369 	.ascii "%x "
      0003B4 00                    3370 	.db 0x00
                                   3371 	.area CSEG    (CODE)
                                   3372 	.area CONST   (CODE)
      0003B5                       3373 ___str_27:
      0003B5 42 75 66 66 65 72 20  3374 	.ascii "Buffer 0 is empty..."
             30 20 69 73 20 65 6D
             70 74 79 2E 2E 2E
      0003C9 0A                    3375 	.db 0x0a
      0003CA 0D                    3376 	.db 0x0d
      0003CB 00                    3377 	.db 0x00
                                   3378 	.area CSEG    (CODE)
                                   3379 	.area CONST   (CODE)
      0003CC                       3380 ___str_28:
      0003CC 0A                    3381 	.db 0x0a
      0003CD 0D                    3382 	.db 0x0d
      0003CE 2A 2A 2A 2A 2A 2A 2A  3383 	.ascii "****************HEAP*STATS*************"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 48 45 41 50 2A
             53 54 41 54 53 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A
      0003F5 0A                    3384 	.db 0x0a
      0003F6 0D                    3385 	.db 0x0d
      0003F7 00                    3386 	.db 0x00
                                   3387 	.area CSEG    (CODE)
                                   3388 	.area CONST   (CODE)
      0003F8                       3389 ___str_29:
      0003F8 54 6F 74 61 6C 20 48  3390 	.ascii "Total Heap Size: %d "
             65 61 70 20 53 69 7A
             65 3A 20 25 64 20
      00040C 0A                    3391 	.db 0x0a
      00040D 0D                    3392 	.db 0x0d
      00040E 00                    3393 	.db 0x00
                                   3394 	.area CSEG    (CODE)
                                   3395 	.area CONST   (CODE)
      00040F                       3396 ___str_30:
      00040F 41 6C 6C 6F 63 61 74  3397 	.ascii "Allocated Heap Size: %d "
             65 64 20 48 65 61 70
             20 53 69 7A 65 3A 20
             25 64 20
      000427 0A                    3398 	.db 0x0a
      000428 0D                    3399 	.db 0x0d
      000429 00                    3400 	.db 0x00
                                   3401 	.area CSEG    (CODE)
                                   3402 	.area CONST   (CODE)
      00042A                       3403 ___str_31:
      00042A 41 6C 6C 20 43 68 61  3404 	.ascii "All Chars: %d "
             72 73 3A 20 25 64 20
      000438 0A                    3405 	.db 0x0a
      000439 0D                    3406 	.db 0x0d
      00043A 00                    3407 	.db 0x00
                                   3408 	.area CSEG    (CODE)
                                   3409 	.area CONST   (CODE)
      00043B                       3410 ___str_32:
      00043B 53 74 6F 72 61 67 65  3411 	.ascii "Storage Chars: %d "
             20 43 68 61 72 73 3A
             20 25 64 20
      00044D 0A                    3412 	.db 0x0a
      00044E 0D                    3413 	.db 0x0d
      00044F 00                    3414 	.db 0x00
                                   3415 	.area CSEG    (CODE)
                                   3416 	.area CONST   (CODE)
      000450                       3417 ___str_33:
      000450 54 6F 74 61 6C 20 42  3418 	.ascii "Total Buffers: %d "
             75 66 66 65 72 73 3A
             20 25 64 20
      000462 0A                    3419 	.db 0x0a
      000463 0D                    3420 	.db 0x0d
      000464 00                    3421 	.db 0x00
                                   3422 	.area CSEG    (CODE)
                                   3423 	.area CONST   (CODE)
      000465                       3424 ___str_34:
      000465 2A 2A 2A 2A 2A 2A 2A  3425 	.ascii "****************BUFFER*%d***************"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 42 55 46 46 45
             52 2A 25 64 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A
      00048D 0A                    3426 	.db 0x0a
      00048E 0D                    3427 	.db 0x0d
      00048F 00                    3428 	.db 0x00
                                   3429 	.area CSEG    (CODE)
                                   3430 	.area CONST   (CODE)
      000490                       3431 ___str_35:
      000490 42 75 66 66 65 72 23  3432 	.ascii "Buffer#: %d "
             3A 20 25 64 20
      00049C 0A                    3433 	.db 0x0a
      00049D 0D                    3434 	.db 0x0d
      00049E 00                    3435 	.db 0x00
                                   3436 	.area CSEG    (CODE)
                                   3437 	.area CONST   (CODE)
      00049F                       3438 ___str_36:
      00049F 42 75 66 66 65 72 53  3439 	.ascii "BufferStart: %p "
             74 61 72 74 3A 20 25
             70 20
      0004AF 0A                    3440 	.db 0x0a
      0004B0 0D                    3441 	.db 0x0d
      0004B1 00                    3442 	.db 0x00
                                   3443 	.area CSEG    (CODE)
                                   3444 	.area CONST   (CODE)
      0004B2                       3445 ___str_37:
      0004B2 42 75 66 66 65 72 45  3446 	.ascii "BufferEnd: %p "
             6E 64 3A 20 25 70 20
      0004C0 0A                    3447 	.db 0x0a
      0004C1 0D                    3448 	.db 0x0d
      0004C2 00                    3449 	.db 0x00
                                   3450 	.area CSEG    (CODE)
                                   3451 	.area CONST   (CODE)
      0004C3                       3452 ___str_38:
      0004C3 42 75 66 66 65 72 53  3453 	.ascii "BufferSize: %d "
             69 7A 65 3A 20 25 64
             20
      0004D2 0A                    3454 	.db 0x0a
      0004D3 0D                    3455 	.db 0x0d
      0004D4 00                    3456 	.db 0x00
                                   3457 	.area CSEG    (CODE)
                                   3458 	.area CONST   (CODE)
      0004D5                       3459 ___str_39:
      0004D5 54 6F 74 61 6C 55 73  3460 	.ascii "TotalUsed: %d "
             65 64 3A 20 25 64 20
      0004E3 0A                    3461 	.db 0x0a
      0004E4 0D                    3462 	.db 0x0d
      0004E5 00                    3463 	.db 0x00
                                   3464 	.area CSEG    (CODE)
                                   3465 	.area CONST   (CODE)
      0004E6                       3466 ___str_40:
      0004E6 2A 2A 2A 2A 2A 2A 2A  3467 	.ascii "***************************************"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A
      00050D 0A                    3468 	.db 0x0a
      00050E 0D                    3469 	.db 0x0d
      00050F 00                    3470 	.db 0x00
                                   3471 	.area CSEG    (CODE)
                                   3472 	.area CONST   (CODE)
      000510                       3473 ___str_41:
      000510 45 52 52 2C 4E 75 6D  3474 	.ascii "ERR,Numbers ONLY!"
             62 65 72 73 20 4F 4E
             4C 59 21
      000521 0A                    3475 	.db 0x0a
      000522 0D                    3476 	.db 0x0d
      000523 00                    3477 	.db 0x00
                                   3478 	.area CSEG    (CODE)
                                   3479 	.area XINIT   (CODE)
                                   3480 	.area CABS    (ABS,CODE)
