                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.0 #12072 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module program
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl __sdcc_external_startup
                                     12 	.globl _idle_interrupt
                                     13 	.globl _pca_interrupt
                                     14 	.globl _main
                                     15 	.globl _i2c_read_val
                                     16 	.globl _i2c_read_init
                                     17 	.globl _i2c_write_val
                                     18 	.globl _i2c_addr
                                     19 	.globl _i2c_write_init
                                     20 	.globl _asmtest
                                     21 	.globl _printf
                                     22 	.globl _free
                                     23 	.globl _malloc
                                     24 	.globl _TF1
                                     25 	.globl _TR1
                                     26 	.globl _TF0
                                     27 	.globl _TR0
                                     28 	.globl _IE1
                                     29 	.globl _IT1
                                     30 	.globl _IE0
                                     31 	.globl _IT0
                                     32 	.globl _SM0
                                     33 	.globl _SM1
                                     34 	.globl _SM2
                                     35 	.globl _REN
                                     36 	.globl _TB8
                                     37 	.globl _RB8
                                     38 	.globl _TI
                                     39 	.globl _RI
                                     40 	.globl _CY
                                     41 	.globl _AC
                                     42 	.globl _F0
                                     43 	.globl _RS1
                                     44 	.globl _RS0
                                     45 	.globl _OV
                                     46 	.globl _F1
                                     47 	.globl _P
                                     48 	.globl _RD
                                     49 	.globl _WR
                                     50 	.globl _T1
                                     51 	.globl _T0
                                     52 	.globl _INT1
                                     53 	.globl _INT0
                                     54 	.globl _TXD0
                                     55 	.globl _TXD
                                     56 	.globl _RXD0
                                     57 	.globl _RXD
                                     58 	.globl _P3_7
                                     59 	.globl _P3_6
                                     60 	.globl _P3_5
                                     61 	.globl _P3_4
                                     62 	.globl _P3_3
                                     63 	.globl _P3_2
                                     64 	.globl _P3_1
                                     65 	.globl _P3_0
                                     66 	.globl _P2_7
                                     67 	.globl _P2_6
                                     68 	.globl _P2_5
                                     69 	.globl _P2_4
                                     70 	.globl _P2_3
                                     71 	.globl _P2_2
                                     72 	.globl _P2_1
                                     73 	.globl _P2_0
                                     74 	.globl _P1_7
                                     75 	.globl _P1_6
                                     76 	.globl _P1_5
                                     77 	.globl _P1_4
                                     78 	.globl _P1_3
                                     79 	.globl _P1_2
                                     80 	.globl _P1_1
                                     81 	.globl _P1_0
                                     82 	.globl _P0_7
                                     83 	.globl _P0_6
                                     84 	.globl _P0_5
                                     85 	.globl _P0_4
                                     86 	.globl _P0_3
                                     87 	.globl _P0_2
                                     88 	.globl _P0_1
                                     89 	.globl _P0_0
                                     90 	.globl _PS
                                     91 	.globl _PT1
                                     92 	.globl _PX1
                                     93 	.globl _PT0
                                     94 	.globl _PX0
                                     95 	.globl _EA
                                     96 	.globl _ES
                                     97 	.globl _ET1
                                     98 	.globl _EX1
                                     99 	.globl _ET0
                                    100 	.globl _EX0
                                    101 	.globl _BREG_F7
                                    102 	.globl _BREG_F6
                                    103 	.globl _BREG_F5
                                    104 	.globl _BREG_F4
                                    105 	.globl _BREG_F3
                                    106 	.globl _BREG_F2
                                    107 	.globl _BREG_F1
                                    108 	.globl _BREG_F0
                                    109 	.globl _P5_7
                                    110 	.globl _P5_6
                                    111 	.globl _P5_5
                                    112 	.globl _P5_4
                                    113 	.globl _P5_3
                                    114 	.globl _P5_2
                                    115 	.globl _P5_1
                                    116 	.globl _P5_0
                                    117 	.globl _P4_7
                                    118 	.globl _P4_6
                                    119 	.globl _P4_5
                                    120 	.globl _P4_4
                                    121 	.globl _P4_3
                                    122 	.globl _P4_2
                                    123 	.globl _P4_1
                                    124 	.globl _P4_0
                                    125 	.globl _PX0L
                                    126 	.globl _PT0L
                                    127 	.globl _PX1L
                                    128 	.globl _PT1L
                                    129 	.globl _PSL
                                    130 	.globl _PT2L
                                    131 	.globl _PPCL
                                    132 	.globl _EC
                                    133 	.globl _CCF0
                                    134 	.globl _CCF1
                                    135 	.globl _CCF2
                                    136 	.globl _CCF3
                                    137 	.globl _CCF4
                                    138 	.globl _CR
                                    139 	.globl _CF
                                    140 	.globl _TF2
                                    141 	.globl _EXF2
                                    142 	.globl _RCLK
                                    143 	.globl _TCLK
                                    144 	.globl _EXEN2
                                    145 	.globl _TR2
                                    146 	.globl _C_T2
                                    147 	.globl _CP_RL2
                                    148 	.globl _T2CON_7
                                    149 	.globl _T2CON_6
                                    150 	.globl _T2CON_5
                                    151 	.globl _T2CON_4
                                    152 	.globl _T2CON_3
                                    153 	.globl _T2CON_2
                                    154 	.globl _T2CON_1
                                    155 	.globl _T2CON_0
                                    156 	.globl _PT2
                                    157 	.globl _ET2
                                    158 	.globl __AUXR
                                    159 	.globl _TMOD
                                    160 	.globl _TL1
                                    161 	.globl _TL0
                                    162 	.globl _TH1
                                    163 	.globl _TH0
                                    164 	.globl _TCON
                                    165 	.globl _SP
                                    166 	.globl _SCON
                                    167 	.globl _SBUF0
                                    168 	.globl _SBUF
                                    169 	.globl _PSW
                                    170 	.globl _PCON
                                    171 	.globl _P3
                                    172 	.globl _P2
                                    173 	.globl _P1
                                    174 	.globl _P0
                                    175 	.globl _IP
                                    176 	.globl _IE
                                    177 	.globl _DP0L
                                    178 	.globl _DPL
                                    179 	.globl _DP0H
                                    180 	.globl _DPH
                                    181 	.globl _B
                                    182 	.globl _ACC
                                    183 	.globl _EECON
                                    184 	.globl _KBF
                                    185 	.globl _KBE
                                    186 	.globl _KBLS
                                    187 	.globl _BRL
                                    188 	.globl _BDRCON
                                    189 	.globl _T2MOD
                                    190 	.globl _SPDAT
                                    191 	.globl _SPSTA
                                    192 	.globl _SPCON
                                    193 	.globl _SADEN
                                    194 	.globl _SADDR
                                    195 	.globl _WDTPRG
                                    196 	.globl _WDTRST
                                    197 	.globl _P5
                                    198 	.globl _P4
                                    199 	.globl _IPH1
                                    200 	.globl _IPL1
                                    201 	.globl _IPH0
                                    202 	.globl _IPL0
                                    203 	.globl _IEN1
                                    204 	.globl _IEN0
                                    205 	.globl _CMOD
                                    206 	.globl _CL
                                    207 	.globl _CH
                                    208 	.globl _CCON
                                    209 	.globl _CCAPM4
                                    210 	.globl _CCAPM3
                                    211 	.globl _CCAPM2
                                    212 	.globl _CCAPM1
                                    213 	.globl _CCAPM0
                                    214 	.globl _CCAP4L
                                    215 	.globl _CCAP3L
                                    216 	.globl _CCAP2L
                                    217 	.globl _CCAP1L
                                    218 	.globl _CCAP0L
                                    219 	.globl _CCAP4H
                                    220 	.globl _CCAP3H
                                    221 	.globl _CCAP2H
                                    222 	.globl _CCAP1H
                                    223 	.globl _CCAP0H
                                    224 	.globl _CKCON1
                                    225 	.globl _CKCON0
                                    226 	.globl _CKRL
                                    227 	.globl _AUXR1
                                    228 	.globl _AUXR
                                    229 	.globl _TH2
                                    230 	.globl _TL2
                                    231 	.globl _RCAP2H
                                    232 	.globl _RCAP2L
                                    233 	.globl _T2CON
                                    234 	.globl _watchdog_flag
                                    235 	.globl _global_var_test
                                    236 	.globl _i2c_read_random_PARM_2
                                    237 	.globl _i2c_write_random_PARM_3
                                    238 	.globl _i2c_write_random_PARM_2
                                    239 	.globl _buffers_array
                                    240 	.globl _program_stats
                                    241 	.globl _DEBUG_LOC
                                    242 	.globl _user_interface_heap
                                    243 	.globl _user_interface_PCA
                                    244 	.globl _pca_falling_edge
                                    245 	.globl _pca_software_timer
                                    246 	.globl _pca_high_speed
                                    247 	.globl _pca_pwm
                                    248 	.globl _pca_watchdog
                                    249 	.globl _hardware_watchdog
                                    250 	.globl _pca_idle
                                    251 	.globl _pca_pdown
                                    252 	.globl _fclk_lowest
                                    253 	.globl _main_menu
                                    254 	.globl _i2c_write_random
                                    255 	.globl _i2c_read_random
                                    256 	.globl _i2c_testasm
                                    257 	.globl _asm_clang
                                    258 	.globl _at_clear_all_buffers
                                    259 	.globl _delete_buffer
                                    260 	.globl _print_pca_menu
                                    261 	.globl _print_heap_menu
                                    262 	.globl _create_new_buffer
                                    263 	.globl _create_initial_buffers
                                    264 	.globl _enter_chars
                                    265 	.globl _dump_buff_zero_ascii
                                    266 	.globl _dump_buff_zero_hex
                                    267 	.globl _print_heap_stats
                                    268 	.globl _print_all_buffers
                                    269 	.globl _get_number
                                    270 	.globl _get_num_helper
                                    271 	.globl _putchar
                                    272 	.globl _getchar
                                    273 	.globl _dataout
                                    274 	.globl _asm_call
                                    275 ;--------------------------------------------------------
                                    276 ; special function registers
                                    277 ;--------------------------------------------------------
                                    278 	.area RSEG    (ABS,DATA)
      000000                        279 	.org 0x0000
                           0000C8   280 _T2CON	=	0x00c8
                           0000CA   281 _RCAP2L	=	0x00ca
                           0000CB   282 _RCAP2H	=	0x00cb
                           0000CC   283 _TL2	=	0x00cc
                           0000CD   284 _TH2	=	0x00cd
                           00008E   285 _AUXR	=	0x008e
                           0000A2   286 _AUXR1	=	0x00a2
                           000097   287 _CKRL	=	0x0097
                           00008F   288 _CKCON0	=	0x008f
                           0000AF   289 _CKCON1	=	0x00af
                           0000FA   290 _CCAP0H	=	0x00fa
                           0000FB   291 _CCAP1H	=	0x00fb
                           0000FC   292 _CCAP2H	=	0x00fc
                           0000FD   293 _CCAP3H	=	0x00fd
                           0000FE   294 _CCAP4H	=	0x00fe
                           0000EA   295 _CCAP0L	=	0x00ea
                           0000EB   296 _CCAP1L	=	0x00eb
                           0000EC   297 _CCAP2L	=	0x00ec
                           0000ED   298 _CCAP3L	=	0x00ed
                           0000EE   299 _CCAP4L	=	0x00ee
                           0000DA   300 _CCAPM0	=	0x00da
                           0000DB   301 _CCAPM1	=	0x00db
                           0000DC   302 _CCAPM2	=	0x00dc
                           0000DD   303 _CCAPM3	=	0x00dd
                           0000DE   304 _CCAPM4	=	0x00de
                           0000D8   305 _CCON	=	0x00d8
                           0000F9   306 _CH	=	0x00f9
                           0000E9   307 _CL	=	0x00e9
                           0000D9   308 _CMOD	=	0x00d9
                           0000A8   309 _IEN0	=	0x00a8
                           0000B1   310 _IEN1	=	0x00b1
                           0000B8   311 _IPL0	=	0x00b8
                           0000B7   312 _IPH0	=	0x00b7
                           0000B2   313 _IPL1	=	0x00b2
                           0000B3   314 _IPH1	=	0x00b3
                           0000C0   315 _P4	=	0x00c0
                           0000E8   316 _P5	=	0x00e8
                           0000A6   317 _WDTRST	=	0x00a6
                           0000A7   318 _WDTPRG	=	0x00a7
                           0000A9   319 _SADDR	=	0x00a9
                           0000B9   320 _SADEN	=	0x00b9
                           0000C3   321 _SPCON	=	0x00c3
                           0000C4   322 _SPSTA	=	0x00c4
                           0000C5   323 _SPDAT	=	0x00c5
                           0000C9   324 _T2MOD	=	0x00c9
                           00009B   325 _BDRCON	=	0x009b
                           00009A   326 _BRL	=	0x009a
                           00009C   327 _KBLS	=	0x009c
                           00009D   328 _KBE	=	0x009d
                           00009E   329 _KBF	=	0x009e
                           0000D2   330 _EECON	=	0x00d2
                           0000E0   331 _ACC	=	0x00e0
                           0000F0   332 _B	=	0x00f0
                           000083   333 _DPH	=	0x0083
                           000083   334 _DP0H	=	0x0083
                           000082   335 _DPL	=	0x0082
                           000082   336 _DP0L	=	0x0082
                           0000A8   337 _IE	=	0x00a8
                           0000B8   338 _IP	=	0x00b8
                           000080   339 _P0	=	0x0080
                           000090   340 _P1	=	0x0090
                           0000A0   341 _P2	=	0x00a0
                           0000B0   342 _P3	=	0x00b0
                           000087   343 _PCON	=	0x0087
                           0000D0   344 _PSW	=	0x00d0
                           000099   345 _SBUF	=	0x0099
                           000099   346 _SBUF0	=	0x0099
                           000098   347 _SCON	=	0x0098
                           000081   348 _SP	=	0x0081
                           000088   349 _TCON	=	0x0088
                           00008C   350 _TH0	=	0x008c
                           00008D   351 _TH1	=	0x008d
                           00008A   352 _TL0	=	0x008a
                           00008B   353 _TL1	=	0x008b
                           000089   354 _TMOD	=	0x0089
                           00008E   355 __AUXR	=	0x008e
                                    356 ;--------------------------------------------------------
                                    357 ; special function bits
                                    358 ;--------------------------------------------------------
                                    359 	.area RSEG    (ABS,DATA)
      000000                        360 	.org 0x0000
                           0000AD   361 _ET2	=	0x00ad
                           0000BD   362 _PT2	=	0x00bd
                           0000C8   363 _T2CON_0	=	0x00c8
                           0000C9   364 _T2CON_1	=	0x00c9
                           0000CA   365 _T2CON_2	=	0x00ca
                           0000CB   366 _T2CON_3	=	0x00cb
                           0000CC   367 _T2CON_4	=	0x00cc
                           0000CD   368 _T2CON_5	=	0x00cd
                           0000CE   369 _T2CON_6	=	0x00ce
                           0000CF   370 _T2CON_7	=	0x00cf
                           0000C8   371 _CP_RL2	=	0x00c8
                           0000C9   372 _C_T2	=	0x00c9
                           0000CA   373 _TR2	=	0x00ca
                           0000CB   374 _EXEN2	=	0x00cb
                           0000CC   375 _TCLK	=	0x00cc
                           0000CD   376 _RCLK	=	0x00cd
                           0000CE   377 _EXF2	=	0x00ce
                           0000CF   378 _TF2	=	0x00cf
                           0000DF   379 _CF	=	0x00df
                           0000DE   380 _CR	=	0x00de
                           0000DC   381 _CCF4	=	0x00dc
                           0000DB   382 _CCF3	=	0x00db
                           0000DA   383 _CCF2	=	0x00da
                           0000D9   384 _CCF1	=	0x00d9
                           0000D8   385 _CCF0	=	0x00d8
                           0000AE   386 _EC	=	0x00ae
                           0000BE   387 _PPCL	=	0x00be
                           0000BD   388 _PT2L	=	0x00bd
                           0000BC   389 _PSL	=	0x00bc
                           0000BB   390 _PT1L	=	0x00bb
                           0000BA   391 _PX1L	=	0x00ba
                           0000B9   392 _PT0L	=	0x00b9
                           0000B8   393 _PX0L	=	0x00b8
                           0000C0   394 _P4_0	=	0x00c0
                           0000C1   395 _P4_1	=	0x00c1
                           0000C2   396 _P4_2	=	0x00c2
                           0000C3   397 _P4_3	=	0x00c3
                           0000C4   398 _P4_4	=	0x00c4
                           0000C5   399 _P4_5	=	0x00c5
                           0000C6   400 _P4_6	=	0x00c6
                           0000C7   401 _P4_7	=	0x00c7
                           0000E8   402 _P5_0	=	0x00e8
                           0000E9   403 _P5_1	=	0x00e9
                           0000EA   404 _P5_2	=	0x00ea
                           0000EB   405 _P5_3	=	0x00eb
                           0000EC   406 _P5_4	=	0x00ec
                           0000ED   407 _P5_5	=	0x00ed
                           0000EE   408 _P5_6	=	0x00ee
                           0000EF   409 _P5_7	=	0x00ef
                           0000F0   410 _BREG_F0	=	0x00f0
                           0000F1   411 _BREG_F1	=	0x00f1
                           0000F2   412 _BREG_F2	=	0x00f2
                           0000F3   413 _BREG_F3	=	0x00f3
                           0000F4   414 _BREG_F4	=	0x00f4
                           0000F5   415 _BREG_F5	=	0x00f5
                           0000F6   416 _BREG_F6	=	0x00f6
                           0000F7   417 _BREG_F7	=	0x00f7
                           0000A8   418 _EX0	=	0x00a8
                           0000A9   419 _ET0	=	0x00a9
                           0000AA   420 _EX1	=	0x00aa
                           0000AB   421 _ET1	=	0x00ab
                           0000AC   422 _ES	=	0x00ac
                           0000AF   423 _EA	=	0x00af
                           0000B8   424 _PX0	=	0x00b8
                           0000B9   425 _PT0	=	0x00b9
                           0000BA   426 _PX1	=	0x00ba
                           0000BB   427 _PT1	=	0x00bb
                           0000BC   428 _PS	=	0x00bc
                           000080   429 _P0_0	=	0x0080
                           000081   430 _P0_1	=	0x0081
                           000082   431 _P0_2	=	0x0082
                           000083   432 _P0_3	=	0x0083
                           000084   433 _P0_4	=	0x0084
                           000085   434 _P0_5	=	0x0085
                           000086   435 _P0_6	=	0x0086
                           000087   436 _P0_7	=	0x0087
                           000090   437 _P1_0	=	0x0090
                           000091   438 _P1_1	=	0x0091
                           000092   439 _P1_2	=	0x0092
                           000093   440 _P1_3	=	0x0093
                           000094   441 _P1_4	=	0x0094
                           000095   442 _P1_5	=	0x0095
                           000096   443 _P1_6	=	0x0096
                           000097   444 _P1_7	=	0x0097
                           0000A0   445 _P2_0	=	0x00a0
                           0000A1   446 _P2_1	=	0x00a1
                           0000A2   447 _P2_2	=	0x00a2
                           0000A3   448 _P2_3	=	0x00a3
                           0000A4   449 _P2_4	=	0x00a4
                           0000A5   450 _P2_5	=	0x00a5
                           0000A6   451 _P2_6	=	0x00a6
                           0000A7   452 _P2_7	=	0x00a7
                           0000B0   453 _P3_0	=	0x00b0
                           0000B1   454 _P3_1	=	0x00b1
                           0000B2   455 _P3_2	=	0x00b2
                           0000B3   456 _P3_3	=	0x00b3
                           0000B4   457 _P3_4	=	0x00b4
                           0000B5   458 _P3_5	=	0x00b5
                           0000B6   459 _P3_6	=	0x00b6
                           0000B7   460 _P3_7	=	0x00b7
                           0000B0   461 _RXD	=	0x00b0
                           0000B0   462 _RXD0	=	0x00b0
                           0000B1   463 _TXD	=	0x00b1
                           0000B1   464 _TXD0	=	0x00b1
                           0000B2   465 _INT0	=	0x00b2
                           0000B3   466 _INT1	=	0x00b3
                           0000B4   467 _T0	=	0x00b4
                           0000B5   468 _T1	=	0x00b5
                           0000B6   469 _WR	=	0x00b6
                           0000B7   470 _RD	=	0x00b7
                           0000D0   471 _P	=	0x00d0
                           0000D1   472 _F1	=	0x00d1
                           0000D2   473 _OV	=	0x00d2
                           0000D3   474 _RS0	=	0x00d3
                           0000D4   475 _RS1	=	0x00d4
                           0000D5   476 _F0	=	0x00d5
                           0000D6   477 _AC	=	0x00d6
                           0000D7   478 _CY	=	0x00d7
                           000098   479 _RI	=	0x0098
                           000099   480 _TI	=	0x0099
                           00009A   481 _RB8	=	0x009a
                           00009B   482 _TB8	=	0x009b
                           00009C   483 _REN	=	0x009c
                           00009D   484 _SM2	=	0x009d
                           00009E   485 _SM1	=	0x009e
                           00009F   486 _SM0	=	0x009f
                           000088   487 _IT0	=	0x0088
                           000089   488 _IE0	=	0x0089
                           00008A   489 _IT1	=	0x008a
                           00008B   490 _IE1	=	0x008b
                           00008C   491 _TR0	=	0x008c
                           00008D   492 _TF0	=	0x008d
                           00008E   493 _TR1	=	0x008e
                           00008F   494 _TF1	=	0x008f
                                    495 ;--------------------------------------------------------
                                    496 ; overlayable register banks
                                    497 ;--------------------------------------------------------
                                    498 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        499 	.ds 8
                                    500 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        501 	.ds 8
                                    502 ;--------------------------------------------------------
                                    503 ; overlayable bit register bank
                                    504 ;--------------------------------------------------------
                                    505 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        506 bits:
      000000                        507 	.ds 1
                           008000   508 	b0 = bits[0]
                           008100   509 	b1 = bits[1]
                           008200   510 	b2 = bits[2]
                           008300   511 	b3 = bits[3]
                           008400   512 	b4 = bits[4]
                           008500   513 	b5 = bits[5]
                           008600   514 	b6 = bits[6]
                           008700   515 	b7 = bits[7]
                                    516 ;--------------------------------------------------------
                                    517 ; internal ram data
                                    518 ;--------------------------------------------------------
                                    519 	.area DSEG    (DATA)
      000000                        520 _delete_buffer_sloc0_1_0:
      000000                        521 	.ds 2
      000002                        522 _delete_buffer_sloc1_1_0:
      000002                        523 	.ds 2
      000004                        524 _delete_buffer_sloc2_1_0:
      000004                        525 	.ds 3
                                    526 ;--------------------------------------------------------
                                    527 ; overlayable items in internal ram 
                                    528 ;--------------------------------------------------------
                                    529 ;--------------------------------------------------------
                                    530 ; Stack segment in internal ram 
                                    531 ;--------------------------------------------------------
                                    532 	.area	SSEG
      000000                        533 __start__stack:
      000000                        534 	.ds	1
                                    535 
                                    536 ;--------------------------------------------------------
                                    537 ; indirectly addressable internal ram data
                                    538 ;--------------------------------------------------------
                                    539 	.area ISEG    (DATA)
                                    540 ;--------------------------------------------------------
                                    541 ; absolute internal ram data
                                    542 ;--------------------------------------------------------
                                    543 	.area IABS    (ABS,DATA)
                                    544 	.area IABS    (ABS,DATA)
                                    545 ;--------------------------------------------------------
                                    546 ; bit data
                                    547 ;--------------------------------------------------------
                                    548 	.area BSEG    (BIT)
                                    549 ;--------------------------------------------------------
                                    550 ; paged external ram data
                                    551 ;--------------------------------------------------------
                                    552 	.area PSEG    (PAG,XDATA)
                                    553 ;--------------------------------------------------------
                                    554 ; external ram data
                                    555 ;--------------------------------------------------------
                                    556 	.area XSEG    (XDATA)
                           008000   557 _DEBUG_LOC	=	0x8000
      000000                        558 _program_stats::
      000000                        559 	.ds 10
      00000A                        560 _buffers_array::
      00000A                        561 	.ds 300
      000136                        562 _i2c_write_random_PARM_2:
      000136                        563 	.ds 1
      000137                        564 _i2c_write_random_PARM_3:
      000137                        565 	.ds 1
      000138                        566 _i2c_write_random_block_65536_80:
      000138                        567 	.ds 1
      000139                        568 _i2c_read_random_PARM_2:
      000139                        569 	.ds 1
      00013A                        570 _i2c_read_random_block_65536_86:
      00013A                        571 	.ds 1
      00013B                        572 _create_new_buffer_buff_65537_113:
      00013B                        573 	.ds 12
      000147                        574 _create_initial_buffers_buff_65538_120:
      000147                        575 	.ds 12
      000153                        576 _create_initial_buffers_buff1_65538_120:
      000153                        577 	.ds 12
      00015F                        578 _dump_buff_zero_ascii_j_65537_137:
      00015F                        579 	.ds 2
      000161                        580 _dump_buff_zero_hex_j_131073_145:
      000161                        581 	.ds 2
      000163                        582 _get_number_total_chars_65536_154:
      000163                        583 	.ds 2
      000165                        584 _get_number_num_65537_156:
      000165                        585 	.ds 2
      000167                        586 _get_num_helper_times_65536_161:
      000167                        587 	.ds 2
      000169                        588 _get_num_helper_num_65536_162:
      000169                        589 	.ds 2
      00016B                        590 _putchar_c_65536_165:
      00016B                        591 	.ds 2
      00016D                        592 _dataout_data_65536_168:
      00016D                        593 	.ds 1
      00016E                        594 _asm_call_sent_from_asm_65536_170:
      00016E                        595 	.ds 1
                                    596 ;--------------------------------------------------------
                                    597 ; absolute external ram data
                                    598 ;--------------------------------------------------------
                                    599 	.area XABS    (ABS,XDATA)
                                    600 ;--------------------------------------------------------
                                    601 ; external initialized ram data
                                    602 ;--------------------------------------------------------
                                    603 	.area XISEG   (XDATA)
      000000                        604 _global_var_test::
      000000                        605 	.ds 1
      000001                        606 _watchdog_flag::
      000001                        607 	.ds 2
                                    608 	.area HOME    (CODE)
                                    609 	.area GSINIT0 (CODE)
                                    610 	.area GSINIT1 (CODE)
                                    611 	.area GSINIT2 (CODE)
                                    612 	.area GSINIT3 (CODE)
                                    613 	.area GSINIT4 (CODE)
                                    614 	.area GSINIT5 (CODE)
                                    615 	.area GSINIT  (CODE)
                                    616 	.area GSFINAL (CODE)
                                    617 	.area CSEG    (CODE)
                                    618 ;--------------------------------------------------------
                                    619 ; interrupt vector 
                                    620 ;--------------------------------------------------------
                                    621 	.area HOME    (CODE)
      000000                        622 __interrupt_vect:
      000000 02r00r00         [24]  623 	ljmp	__sdcc_gsinit_startup
      000003 02r01r9D         [24]  624 	ljmp	_idle_interrupt
      000006                        625 	.ds	5
      00000B 32               [24]  626 	reti
      00000C                        627 	.ds	7
      000013 32               [24]  628 	reti
      000014                        629 	.ds	7
      00001B 32               [24]  630 	reti
      00001C                        631 	.ds	7
      000023 32               [24]  632 	reti
      000024                        633 	.ds	7
      00002B 32               [24]  634 	reti
      00002C                        635 	.ds	7
      000033 02r00rF5         [24]  636 	ljmp	_pca_interrupt
                                    637 ;--------------------------------------------------------
                                    638 ; global & static initialisations
                                    639 ;--------------------------------------------------------
                                    640 	.area HOME    (CODE)
                                    641 	.area GSINIT  (CODE)
                                    642 	.area GSFINAL (CODE)
                                    643 	.area GSINIT  (CODE)
                                    644 	.globl __sdcc_gsinit_startup
                                    645 	.globl __sdcc_program_startup
                                    646 	.globl __start__stack
                                    647 	.globl __mcs51_genXINIT
                                    648 	.globl __mcs51_genXRAMCLEAR
                                    649 	.globl __mcs51_genRAMCLEAR
                                    650 	.area GSFINAL (CODE)
      000000 02r00r36         [24]  651 	ljmp	__sdcc_program_startup
                                    652 ;--------------------------------------------------------
                                    653 ; Home
                                    654 ;--------------------------------------------------------
                                    655 	.area HOME    (CODE)
                                    656 	.area HOME    (CODE)
      000036                        657 __sdcc_program_startup:
      000036 02r00r00         [24]  658 	ljmp	_main
                                    659 ;	return from main will return to caller
                                    660 ;--------------------------------------------------------
                                    661 ; code
                                    662 ;--------------------------------------------------------
                                    663 	.area CSEG    (CODE)
                                    664 ;------------------------------------------------------------
                                    665 ;Allocation info for local variables in function 'main'
                                    666 ;------------------------------------------------------------
                                    667 ;	program.c:97: void main(void)
                                    668 ;	-----------------------------------------
                                    669 ;	 function main
                                    670 ;	-----------------------------------------
      000000                        671 _main:
                           000007   672 	ar7 = 0x07
                           000006   673 	ar6 = 0x06
                           000005   674 	ar5 = 0x05
                           000004   675 	ar4 = 0x04
                           000003   676 	ar3 = 0x03
                           000002   677 	ar2 = 0x02
                           000001   678 	ar1 = 0x01
                           000000   679 	ar0 = 0x00
                                    680 ;	program.c:99: printf("\n\r HELLO! Started in X2 Mode \n\r");
      000000 74r00            [12]  681 	mov	a,#___str_0
      000002 C0 E0            [24]  682 	push	acc
      000004 74s00            [12]  683 	mov	a,#(___str_0 >> 8)
      000006 C0 E0            [24]  684 	push	acc
      000008 74 80            [12]  685 	mov	a,#0x80
      00000A C0 E0            [24]  686 	push	acc
      00000C 12r00r00         [24]  687 	lcall	_printf
      00000F 15 81            [12]  688 	dec	sp
      000011 15 81            [12]  689 	dec	sp
      000013 15 81            [12]  690 	dec	sp
                                    691 ;	program.c:100: DEBUGPORT(0x01);
      000015 75 82 01         [24]  692 	mov	dpl,#0x01
      000018 12r14rFE         [24]  693 	lcall	_dataout
                                    694 ;	program.c:101: P1_1 = 0;
                                    695 ;	assignBit
      00001B C2 91            [12]  696 	clr	_P1_1
                                    697 ;	program.c:103: main_menu(); 
                                    698 ;	program.c:104: }
      00001D 02r03rE6         [24]  699 	ljmp	_main_menu
                                    700 ;------------------------------------------------------------
                                    701 ;Allocation info for local variables in function 'user_interface_heap'
                                    702 ;------------------------------------------------------------
                                    703 ;	program.c:111: void user_interface_heap()
                                    704 ;	-----------------------------------------
                                    705 ;	 function user_interface_heap
                                    706 ;	-----------------------------------------
      000020                        707 _user_interface_heap:
                                    708 ;	program.c:113: DEBUGPORT(0x02);
      000020 75 82 02         [24]  709 	mov	dpl,#0x02
      000023 12r14rFE         [24]  710 	lcall	_dataout
                                    711 ;	program.c:114: create_initial_buffers();
      000026 12r0BrAD         [24]  712 	lcall	_create_initial_buffers
                                    713 ;	program.c:115: print_all_buffers();
      000029 12r11rDE         [24]  714 	lcall	_print_all_buffers
                                    715 ;	program.c:116: enter_chars();
                                    716 ;	program.c:117: }
      00002C 02r0Dr8A         [24]  717 	ljmp	_enter_chars
                                    718 ;------------------------------------------------------------
                                    719 ;Allocation info for local variables in function 'user_interface_PCA'
                                    720 ;------------------------------------------------------------
                                    721 ;inp                       Allocated with name '_user_interface_PCA_inp_65537_59'
                                    722 ;------------------------------------------------------------
                                    723 ;	program.c:124: void user_interface_PCA()
                                    724 ;	-----------------------------------------
                                    725 ;	 function user_interface_PCA
                                    726 ;	-----------------------------------------
      00002F                        727 _user_interface_PCA:
                                    728 ;	program.c:126: DEBUGPORT(0xAA);
      00002F 75 82 AA         [24]  729 	mov	dpl,#0xaa
      000032 12r14rFE         [24]  730 	lcall	_dataout
                                    731 ;	program.c:127: printf("Hello, In PCA Demo mode \n\r");
      000035 74r20            [12]  732 	mov	a,#___str_1
      000037 C0 E0            [24]  733 	push	acc
      000039 74s00            [12]  734 	mov	a,#(___str_1 >> 8)
      00003B C0 E0            [24]  735 	push	acc
      00003D 74 80            [12]  736 	mov	a,#0x80
      00003F C0 E0            [24]  737 	push	acc
      000041 12r00r00         [24]  738 	lcall	_printf
      000044 15 81            [12]  739 	dec	sp
      000046 15 81            [12]  740 	dec	sp
      000048 15 81            [12]  741 	dec	sp
                                    742 ;	program.c:128: print_pca_menu();
      00004A 12r08r96         [24]  743 	lcall	_print_pca_menu
                                    744 ;	program.c:131: wrong_choice_pca:
      00004D                        745 00101$:
                                    746 ;	program.c:132: printf("Please make a valid choice \n\r");
      00004D 74r3B            [12]  747 	mov	a,#___str_2
      00004F C0 E0            [24]  748 	push	acc
      000051 74s00            [12]  749 	mov	a,#(___str_2 >> 8)
      000053 C0 E0            [24]  750 	push	acc
      000055 74 80            [12]  751 	mov	a,#0x80
      000057 C0 E0            [24]  752 	push	acc
      000059 12r00r00         [24]  753 	lcall	_printf
      00005C 15 81            [12]  754 	dec	sp
      00005E 15 81            [12]  755 	dec	sp
      000060 15 81            [12]  756 	dec	sp
                                    757 ;	program.c:133: inp = getchar();
      000062 12r14rC2         [24]  758 	lcall	_getchar
      000065 AE 82            [24]  759 	mov	r6,dpl
      000067 AF 83            [24]  760 	mov	r7,dph
                                    761 ;	program.c:134: if (inp == 0x46)
      000069 BE 46 09         [24]  762 	cjne	r6,#0x46,00127$
      00006C BF 00 06         [24]  763 	cjne	r7,#0x00,00127$
                                    764 ;	program.c:135: pca_falling_edge();
      00006F 12r02r12         [24]  765 	lcall	_pca_falling_edge
      000072 02r00rD0         [24]  766 	ljmp	00145$
      000075                        767 00127$:
                                    768 ;	program.c:136: else if (inp == 0x53)
      000075 BE 53 08         [24]  769 	cjne	r6,#0x53,00124$
      000078 BF 00 05         [24]  770 	cjne	r7,#0x00,00124$
                                    771 ;	program.c:137: pca_software_timer();
      00007B 12r02r2D         [24]  772 	lcall	_pca_software_timer
      00007E 80 50            [24]  773 	sjmp	00145$
      000080                        774 00124$:
                                    775 ;	program.c:138: else if (inp == 0x48)
      000080 BE 48 08         [24]  776 	cjne	r6,#0x48,00121$
      000083 BF 00 05         [24]  777 	cjne	r7,#0x00,00121$
                                    778 ;	program.c:139: pca_high_speed();
      000086 12r02r5E         [24]  779 	lcall	_pca_high_speed
      000089 80 45            [24]  780 	sjmp	00145$
      00008B                        781 00121$:
                                    782 ;	program.c:140: else if (inp == 0x50)
      00008B BE 50 08         [24]  783 	cjne	r6,#0x50,00118$
      00008E BF 00 05         [24]  784 	cjne	r7,#0x00,00118$
                                    785 ;	program.c:141: pca_pwm();
      000091 12r02r82         [24]  786 	lcall	_pca_pwm
      000094 80 3A            [24]  787 	sjmp	00145$
      000096                        788 00118$:
                                    789 ;	program.c:142: else if (inp == 0x57)
      000096 BE 57 08         [24]  790 	cjne	r6,#0x57,00115$
      000099 BF 00 05         [24]  791 	cjne	r7,#0x00,00115$
                                    792 ;	program.c:143: pca_watchdog();
      00009C 12r02rA6         [24]  793 	lcall	_pca_watchdog
      00009F 80 2F            [24]  794 	sjmp	00145$
      0000A1                        795 00115$:
                                    796 ;	program.c:144: else if (inp == 0x49)
      0000A1 BE 49 08         [24]  797 	cjne	r6,#0x49,00112$
      0000A4 BF 00 05         [24]  798 	cjne	r7,#0x00,00112$
                                    799 ;	program.c:145: pca_idle();
      0000A7 12r03r4A         [24]  800 	lcall	_pca_idle
      0000AA 80 24            [24]  801 	sjmp	00145$
      0000AC                        802 00112$:
                                    803 ;	program.c:146: else if (inp == 0x44)
      0000AC BE 44 08         [24]  804 	cjne	r6,#0x44,00109$
      0000AF BF 00 05         [24]  805 	cjne	r7,#0x00,00109$
                                    806 ;	program.c:147: pca_pdown();
      0000B2 12r03r7F         [24]  807 	lcall	_pca_pdown
      0000B5 80 19            [24]  808 	sjmp	00145$
      0000B7                        809 00109$:
                                    810 ;	program.c:148: else if (inp == 0x4C)
      0000B7 BE 4C 08         [24]  811 	cjne	r6,#0x4c,00106$
      0000BA BF 00 05         [24]  812 	cjne	r7,#0x00,00106$
                                    813 ;	program.c:149: fclk_lowest();
      0000BD 12r03rB4         [24]  814 	lcall	_fclk_lowest
      0000C0 80 0E            [24]  815 	sjmp	00145$
      0000C2                        816 00106$:
                                    817 ;	program.c:150: else if (inp == 0x55)
      0000C2 BE 55 05         [24]  818 	cjne	r6,#0x55,00199$
      0000C5 BF 00 02         [24]  819 	cjne	r7,#0x00,00199$
      0000C8 80 03            [24]  820 	sjmp	00200$
      0000CA                        821 00199$:
      0000CA 02r00r4D         [24]  822 	ljmp	00101$
      0000CD                        823 00200$:
                                    824 ;	program.c:151: hardware_watchdog();
      0000CD 12r03r01         [24]  825 	lcall	_hardware_watchdog
                                    826 ;	program.c:155: exit_choice:
      0000D0                        827 00145$:
      0000D0                        828 00129$:
                                    829 ;	program.c:156: printf("Please 'E' to exit or Reset \n\r");
      0000D0 74r59            [12]  830 	mov	a,#___str_3
      0000D2 C0 E0            [24]  831 	push	acc
      0000D4 74s00            [12]  832 	mov	a,#(___str_3 >> 8)
      0000D6 C0 E0            [24]  833 	push	acc
      0000D8 74 80            [12]  834 	mov	a,#0x80
      0000DA C0 E0            [24]  835 	push	acc
      0000DC 12r00r00         [24]  836 	lcall	_printf
      0000DF 15 81            [12]  837 	dec	sp
      0000E1 15 81            [12]  838 	dec	sp
      0000E3 15 81            [12]  839 	dec	sp
                                    840 ;	program.c:157: inp = getchar();
      0000E5 12r14rC2         [24]  841 	lcall	_getchar
      0000E8 AE 82            [24]  842 	mov	r6,dpl
      0000EA AF 83            [24]  843 	mov	r7,dph
                                    844 ;	program.c:158: if (inp == 0x45)
      0000EC BE 45 E1         [24]  845 	cjne	r6,#0x45,00129$
      0000EF BF 00 DE         [24]  846 	cjne	r7,#0x00,00129$
                                    847 ;	program.c:159: user_interface_PCA();
                                    848 ;	program.c:161: goto exit_choice;
                                    849 ;	program.c:162: }
      0000F2 02r00r2F         [24]  850 	ljmp	_user_interface_PCA
                                    851 ;------------------------------------------------------------
                                    852 ;Allocation info for local variables in function 'pca_interrupt'
                                    853 ;------------------------------------------------------------
                                    854 ;	program.c:169: void pca_interrupt() __interrupt(6) __using(1)
                                    855 ;	-----------------------------------------
                                    856 ;	 function pca_interrupt
                                    857 ;	-----------------------------------------
      0000F5                        858 _pca_interrupt:
                           00000F   859 	ar7 = 0x0f
                           00000E   860 	ar6 = 0x0e
                           00000D   861 	ar5 = 0x0d
                           00000C   862 	ar4 = 0x0c
                           00000B   863 	ar3 = 0x0b
                           00000A   864 	ar2 = 0x0a
                           000009   865 	ar1 = 0x09
                           000008   866 	ar0 = 0x08
      0000F5 C0*00            [24]  867 	push	bits
      0000F7 C0 E0            [24]  868 	push	acc
      0000F9 C0 F0            [24]  869 	push	b
      0000FB C0 82            [24]  870 	push	dpl
      0000FD C0 83            [24]  871 	push	dph
      0000FF C0 07            [24]  872 	push	(0+7)
      000101 C0 06            [24]  873 	push	(0+6)
      000103 C0 05            [24]  874 	push	(0+5)
      000105 C0 04            [24]  875 	push	(0+4)
      000107 C0 03            [24]  876 	push	(0+3)
      000109 C0 02            [24]  877 	push	(0+2)
      00010B C0 01            [24]  878 	push	(0+1)
      00010D C0 00            [24]  879 	push	(0+0)
      00010F C0 D0            [24]  880 	push	psw
      000111 75 D0 08         [24]  881 	mov	psw,#0x08
                                    882 ;	program.c:171: if (CCF0)
      000114 30 D8 2D         [24]  883 	jnb	_CCF0,00102$
                                    884 ;	program.c:173: printf("Captured Value CCPL -> %d CCPH -> %d \n\r", CCAP0L, CCAP0H);
      000117 AE FA            [24]  885 	mov	r6,_CCAP0H
      000119 7F 00            [12]  886 	mov	r7,#0x00
      00011B AC EA            [24]  887 	mov	r4,_CCAP0L
      00011D 7D 00            [12]  888 	mov	r5,#0x00
      00011F C0 0E            [24]  889 	push	ar6
      000121 C0 0F            [24]  890 	push	ar7
      000123 C0 0C            [24]  891 	push	ar4
      000125 C0 0D            [24]  892 	push	ar5
      000127 74r78            [12]  893 	mov	a,#___str_4
      000129 C0 E0            [24]  894 	push	acc
      00012B 74s00            [12]  895 	mov	a,#(___str_4 >> 8)
      00012D C0 E0            [24]  896 	push	acc
      00012F 74 80            [12]  897 	mov	a,#0x80
      000131 C0 E0            [24]  898 	push	acc
      000133 75 D0 00         [24]  899 	mov	psw,#0x00
      000136 12r00r00         [24]  900 	lcall	_printf
      000139 75 D0 08         [24]  901 	mov	psw,#0x08
      00013C E5 81            [12]  902 	mov	a,sp
      00013E 24 F9            [12]  903 	add	a,#0xf9
      000140 F5 81            [12]  904 	mov	sp,a
                                    905 ;	program.c:175: CCF0 = 0;
                                    906 ;	assignBit
      000142 C2 D8            [12]  907 	clr	_CCF0
      000144                        908 00102$:
                                    909 ;	program.c:177: if (CCF1)
                                    910 ;	program.c:179: CCF1 = 0;
                                    911 ;	assignBit
      000144 10 D9 02         [24]  912 	jbc	_CCF1,00128$
      000147 80 06            [24]  913 	sjmp	00104$
      000149                        914 00128$:
                                    915 ;	program.c:180: CH = 0;
      000149 75 F9 00         [24]  916 	mov	_CH,#0x00
                                    917 ;	program.c:181: CL = 0;
      00014C 75 E9 00         [24]  918 	mov	_CL,#0x00
      00014F                        919 00104$:
                                    920 ;	program.c:183: if (CCF2)
                                    921 ;	program.c:185: CCF2 = 0;
                                    922 ;	assignBit
      00014F 10 DA 02         [24]  923 	jbc	_CCF2,00129$
      000152 80 0C            [24]  924 	sjmp	00106$
      000154                        925 00129$:
                                    926 ;	program.c:186: CH = 0;
      000154 75 F9 00         [24]  927 	mov	_CH,#0x00
                                    928 ;	program.c:187: CL = 0;
      000157 75 E9 00         [24]  929 	mov	_CL,#0x00
                                    930 ;	program.c:188: WDTRST = 0x01E;
      00015A 75 A6 1E         [24]  931 	mov	_WDTRST,#0x1e
                                    932 ;	program.c:189: WDTRST = 0x0E1;
      00015D 75 A6 E1         [24]  933 	mov	_WDTRST,#0xe1
      000160                        934 00106$:
                                    935 ;	program.c:191: if (CCF3)
                                    936 ;	program.c:193: CCF3 = 0;
                                    937 ;	assignBit
      000160 10 DB 02         [24]  938 	jbc	_CCF3,00130$
      000163 80 1B            [24]  939 	sjmp	00109$
      000165                        940 00130$:
                                    941 ;	program.c:194: printf("Timer Interrupt\n\r");
      000165 74rA0            [12]  942 	mov	a,#___str_5
      000167 C0 E0            [24]  943 	push	acc
      000169 74s00            [12]  944 	mov	a,#(___str_5 >> 8)
      00016B C0 E0            [24]  945 	push	acc
      00016D 74 80            [12]  946 	mov	a,#0x80
      00016F C0 E0            [24]  947 	push	acc
      000171 75 D0 00         [24]  948 	mov	psw,#0x00
      000174 12r00r00         [24]  949 	lcall	_printf
      000177 75 D0 08         [24]  950 	mov	psw,#0x08
      00017A 15 81            [12]  951 	dec	sp
      00017C 15 81            [12]  952 	dec	sp
      00017E 15 81            [12]  953 	dec	sp
      000180                        954 00109$:
                                    955 ;	program.c:196: }
      000180 D0 D0            [24]  956 	pop	psw
      000182 D0 00            [24]  957 	pop	(0+0)
      000184 D0 01            [24]  958 	pop	(0+1)
      000186 D0 02            [24]  959 	pop	(0+2)
      000188 D0 03            [24]  960 	pop	(0+3)
      00018A D0 04            [24]  961 	pop	(0+4)
      00018C D0 05            [24]  962 	pop	(0+5)
      00018E D0 06            [24]  963 	pop	(0+6)
      000190 D0 07            [24]  964 	pop	(0+7)
      000192 D0 83            [24]  965 	pop	dph
      000194 D0 82            [24]  966 	pop	dpl
      000196 D0 F0            [24]  967 	pop	b
      000198 D0 E0            [24]  968 	pop	acc
      00019A D0*00            [24]  969 	pop	bits
      00019C 32               [24]  970 	reti
                                    971 ;------------------------------------------------------------
                                    972 ;Allocation info for local variables in function 'idle_interrupt'
                                    973 ;------------------------------------------------------------
                                    974 ;	program.c:203: void idle_interrupt() __interrupt(0) __using(1)
                                    975 ;	-----------------------------------------
                                    976 ;	 function idle_interrupt
                                    977 ;	-----------------------------------------
      00019D                        978 _idle_interrupt:
      00019D C0*00            [24]  979 	push	bits
      00019F C0 E0            [24]  980 	push	acc
      0001A1 C0 F0            [24]  981 	push	b
      0001A3 C0 82            [24]  982 	push	dpl
      0001A5 C0 83            [24]  983 	push	dph
      0001A7 C0 07            [24]  984 	push	(0+7)
      0001A9 C0 06            [24]  985 	push	(0+6)
      0001AB C0 05            [24]  986 	push	(0+5)
      0001AD C0 04            [24]  987 	push	(0+4)
      0001AF C0 03            [24]  988 	push	(0+3)
      0001B1 C0 02            [24]  989 	push	(0+2)
      0001B3 C0 01            [24]  990 	push	(0+1)
      0001B5 C0 00            [24]  991 	push	(0+0)
      0001B7 C0 D0            [24]  992 	push	psw
      0001B9 75 D0 08         [24]  993 	mov	psw,#0x08
                                    994 ;	program.c:205: EX0 = 0;
                                    995 ;	assignBit
      0001BC C2 A8            [12]  996 	clr	_EX0
                                    997 ;	program.c:206: PCON = 0x80;
      0001BE 75 87 80         [24]  998 	mov	_PCON,#0x80
                                    999 ;	program.c:207: CR = 0;
                                   1000 ;	assignBit
      0001C1 C2 DE            [12] 1001 	clr	_CR
                                   1002 ;	program.c:208: CKRL = 255;
      0001C3 75 97 FF         [24] 1003 	mov	_CKRL,#0xff
                                   1004 ;	program.c:209: CCAPM0 = 0;
                                   1005 ;	program.c:210: CCAPM1 = 0;
                                   1006 ;	program.c:211: CCAPM2 = 0;
                                   1007 ;	program.c:212: CCAPM3 = 0;
                                   1008 ;	program.c:213: CCAPM4 = 0;
                                   1009 ;	program.c:214: printf("Going to main menu.. \n\r");
      0001C6 E4               [12] 1010 	clr	a
      0001C7 F5 DA            [12] 1011 	mov	_CCAPM0,a
      0001C9 F5 DB            [12] 1012 	mov	_CCAPM1,a
      0001CB F5 DC            [12] 1013 	mov	_CCAPM2,a
      0001CD F5 DD            [12] 1014 	mov	_CCAPM3,a
      0001CF F5 DE            [12] 1015 	mov	_CCAPM4,a
      0001D1 74rB2            [12] 1016 	mov	a,#___str_6
      0001D3 C0 E0            [24] 1017 	push	acc
      0001D5 74s00            [12] 1018 	mov	a,#(___str_6 >> 8)
      0001D7 C0 E0            [24] 1019 	push	acc
      0001D9 74 80            [12] 1020 	mov	a,#0x80
      0001DB C0 E0            [24] 1021 	push	acc
      0001DD 75 D0 00         [24] 1022 	mov	psw,#0x00
      0001E0 12r00r00         [24] 1023 	lcall	_printf
      0001E3 75 D0 08         [24] 1024 	mov	psw,#0x08
      0001E6 15 81            [12] 1025 	dec	sp
      0001E8 15 81            [12] 1026 	dec	sp
      0001EA 15 81            [12] 1027 	dec	sp
                                   1028 ;	program.c:215: main_menu();
      0001EC 75 D0 00         [24] 1029 	mov	psw,#0x00
      0001EF 12r03rE6         [24] 1030 	lcall	_main_menu
      0001F2 75 D0 08         [24] 1031 	mov	psw,#0x08
                                   1032 ;	program.c:216: }
      0001F5 D0 D0            [24] 1033 	pop	psw
      0001F7 D0 00            [24] 1034 	pop	(0+0)
      0001F9 D0 01            [24] 1035 	pop	(0+1)
      0001FB D0 02            [24] 1036 	pop	(0+2)
      0001FD D0 03            [24] 1037 	pop	(0+3)
      0001FF D0 04            [24] 1038 	pop	(0+4)
      000201 D0 05            [24] 1039 	pop	(0+5)
      000203 D0 06            [24] 1040 	pop	(0+6)
      000205 D0 07            [24] 1041 	pop	(0+7)
      000207 D0 83            [24] 1042 	pop	dph
      000209 D0 82            [24] 1043 	pop	dpl
      00020B D0 F0            [24] 1044 	pop	b
      00020D D0 E0            [24] 1045 	pop	acc
      00020F D0*00            [24] 1046 	pop	bits
      000211 32               [24] 1047 	reti
                                   1048 ;------------------------------------------------------------
                                   1049 ;Allocation info for local variables in function 'pca_falling_edge'
                                   1050 ;------------------------------------------------------------
                                   1051 ;	program.c:223: void pca_falling_edge()
                                   1052 ;	-----------------------------------------
                                   1053 ;	 function pca_falling_edge
                                   1054 ;	-----------------------------------------
      000212                       1055 _pca_falling_edge:
                           000007  1056 	ar7 = 0x07
                           000006  1057 	ar6 = 0x06
                           000005  1058 	ar5 = 0x05
                           000004  1059 	ar4 = 0x04
                           000003  1060 	ar3 = 0x03
                           000002  1061 	ar2 = 0x02
                           000001  1062 	ar1 = 0x01
                           000000  1063 	ar0 = 0x00
                                   1064 ;	program.c:225: printf("Setting P1.3 as falling edge detector, enabling PCA interrupt \n\r");
      000212 74rCA            [12] 1065 	mov	a,#___str_7
      000214 C0 E0            [24] 1066 	push	acc
      000216 74s00            [12] 1067 	mov	a,#(___str_7 >> 8)
      000218 C0 E0            [24] 1068 	push	acc
      00021A 74 80            [12] 1069 	mov	a,#0x80
      00021C C0 E0            [24] 1070 	push	acc
      00021E 12r00r00         [24] 1071 	lcall	_printf
      000221 15 81            [12] 1072 	dec	sp
      000223 15 81            [12] 1073 	dec	sp
      000225 15 81            [12] 1074 	dec	sp
                                   1075 ;	program.c:226: CCAPM0 = 0x21;
      000227 75 DA 21         [24] 1076 	mov	_CCAPM0,#0x21
                                   1077 ;	program.c:227: CR = 1;
                                   1078 ;	assignBit
      00022A D2 DE            [12] 1079 	setb	_CR
                                   1080 ;	program.c:228: }
      00022C 22               [24] 1081 	ret
                                   1082 ;------------------------------------------------------------
                                   1083 ;Allocation info for local variables in function 'pca_software_timer'
                                   1084 ;------------------------------------------------------------
                                   1085 ;rec                       Allocated with name '_pca_software_timer_rec_65537_68'
                                   1086 ;------------------------------------------------------------
                                   1087 ;	program.c:235: void pca_software_timer()
                                   1088 ;	-----------------------------------------
                                   1089 ;	 function pca_software_timer
                                   1090 ;	-----------------------------------------
      00022D                       1091 _pca_software_timer:
                                   1092 ;	program.c:237: printf("Entering Software Timer Mode \n\r");
      00022D 74r0B            [12] 1093 	mov	a,#___str_8
      00022F C0 E0            [24] 1094 	push	acc
      000231 74s01            [12] 1095 	mov	a,#(___str_8 >> 8)
      000233 C0 E0            [24] 1096 	push	acc
      000235 74 80            [12] 1097 	mov	a,#0x80
      000237 C0 E0            [24] 1098 	push	acc
      000239 12r00r00         [24] 1099 	lcall	_printf
      00023C 15 81            [12] 1100 	dec	sp
      00023E 15 81            [12] 1101 	dec	sp
      000240 15 81            [12] 1102 	dec	sp
                                   1103 ;	program.c:238: CCAP3L = 255;
      000242 75 ED FF         [24] 1104 	mov	_CCAP3L,#0xff
                                   1105 ;	program.c:239: CCAP3H = 255;
      000245 75 FD FF         [24] 1106 	mov	_CCAP3H,#0xff
                                   1107 ;	program.c:240: CCAPM3 = 0x49;
      000248 75 DD 49         [24] 1108 	mov	_CCAPM3,#0x49
                                   1109 ;	program.c:241: CR = 1;
                                   1110 ;	assignBit
      00024B D2 DE            [12] 1111 	setb	_CR
                                   1112 ;	program.c:243: get_f:
      00024D                       1113 00101$:
                                   1114 ;	program.c:244: rec = getchar();
      00024D 12r14rC2         [24] 1115 	lcall	_getchar
      000250 AE 82            [24] 1116 	mov	r6,dpl
      000252 AF 83            [24] 1117 	mov	r7,dph
                                   1118 ;	program.c:246: if (rec == 0x53)
      000254 BE 53 F6         [24] 1119 	cjne	r6,#0x53,00101$
      000257 BF 00 F3         [24] 1120 	cjne	r7,#0x00,00101$
                                   1121 ;	program.c:247: CCAPM3 = 0;
      00025A 75 DD 00         [24] 1122 	mov	_CCAPM3,#0x00
                                   1123 ;	program.c:249: goto get_f;
                                   1124 ;	program.c:250: }
      00025D 22               [24] 1125 	ret
                                   1126 ;------------------------------------------------------------
                                   1127 ;Allocation info for local variables in function 'pca_high_speed'
                                   1128 ;------------------------------------------------------------
                                   1129 ;	program.c:257: void pca_high_speed()
                                   1130 ;	-----------------------------------------
                                   1131 ;	 function pca_high_speed
                                   1132 ;	-----------------------------------------
      00025E                       1133 _pca_high_speed:
                                   1134 ;	program.c:260: printf("Entering High Speed Toggle Mode, P1.5 \n\r");
      00025E 74r2B            [12] 1135 	mov	a,#___str_9
      000260 C0 E0            [24] 1136 	push	acc
      000262 74s01            [12] 1137 	mov	a,#(___str_9 >> 8)
      000264 C0 E0            [24] 1138 	push	acc
      000266 74 80            [12] 1139 	mov	a,#0x80
      000268 C0 E0            [24] 1140 	push	acc
      00026A 12r00r00         [24] 1141 	lcall	_printf
      00026D 15 81            [12] 1142 	dec	sp
      00026F 15 81            [12] 1143 	dec	sp
      000271 15 81            [12] 1144 	dec	sp
                                   1145 ;	program.c:261: CCAP2L = 255;
      000273 75 EC FF         [24] 1146 	mov	_CCAP2L,#0xff
                                   1147 ;	program.c:262: CCAP2H = 2;
      000276 75 FC 02         [24] 1148 	mov	_CCAP2H,#0x02
                                   1149 ;	program.c:263: CCAPM2 = 0x4D;
      000279 75 DC 4D         [24] 1150 	mov	_CCAPM2,#0x4d
                                   1151 ;	program.c:264: CMOD = CPS0;
      00027C 75 D9 02         [24] 1152 	mov	_CMOD,#0x02
                                   1153 ;	program.c:265: CR = 1;
                                   1154 ;	assignBit
      00027F D2 DE            [12] 1155 	setb	_CR
                                   1156 ;	program.c:266: }
      000281 22               [24] 1157 	ret
                                   1158 ;------------------------------------------------------------
                                   1159 ;Allocation info for local variables in function 'pca_pwm'
                                   1160 ;------------------------------------------------------------
                                   1161 ;	program.c:273: void pca_pwm()
                                   1162 ;	-----------------------------------------
                                   1163 ;	 function pca_pwm
                                   1164 ;	-----------------------------------------
      000282                       1165 _pca_pwm:
                                   1166 ;	program.c:275: printf("Entering PWM Mode, 25 percent Duty Cycle P1.6\n\r");
      000282 74r54            [12] 1167 	mov	a,#___str_10
      000284 C0 E0            [24] 1168 	push	acc
      000286 74s01            [12] 1169 	mov	a,#(___str_10 >> 8)
      000288 C0 E0            [24] 1170 	push	acc
      00028A 74 80            [12] 1171 	mov	a,#0x80
      00028C C0 E0            [24] 1172 	push	acc
      00028E 12r00r00         [24] 1173 	lcall	_printf
      000291 15 81            [12] 1174 	dec	sp
      000293 15 81            [12] 1175 	dec	sp
      000295 15 81            [12] 1176 	dec	sp
                                   1177 ;	program.c:276: CCAP3L = 192;
      000297 75 ED C0         [24] 1178 	mov	_CCAP3L,#0xc0
                                   1179 ;	program.c:277: CCAP3H = 192;
      00029A 75 FD C0         [24] 1180 	mov	_CCAP3H,#0xc0
                                   1181 ;	program.c:278: CCAPM3 = 0x42;
      00029D 75 DD 42         [24] 1182 	mov	_CCAPM3,#0x42
                                   1183 ;	program.c:279: CMOD = CPS0;
      0002A0 75 D9 02         [24] 1184 	mov	_CMOD,#0x02
                                   1185 ;	program.c:280: CR = 1;
                                   1186 ;	assignBit
      0002A3 D2 DE            [12] 1187 	setb	_CR
                                   1188 ;	program.c:281: }
      0002A5 22               [24] 1189 	ret
                                   1190 ;------------------------------------------------------------
                                   1191 ;Allocation info for local variables in function 'pca_watchdog'
                                   1192 ;------------------------------------------------------------
                                   1193 ;rec                       Allocated with name '_pca_watchdog_rec_65537_72'
                                   1194 ;------------------------------------------------------------
                                   1195 ;	program.c:288: void pca_watchdog()
                                   1196 ;	-----------------------------------------
                                   1197 ;	 function pca_watchdog
                                   1198 ;	-----------------------------------------
      0002A6                       1199 _pca_watchdog:
                                   1200 ;	program.c:290: CCAP1L = 255;
      0002A6 75 EB FF         [24] 1201 	mov	_CCAP1L,#0xff
                                   1202 ;	program.c:291: CCAP1H = 128;
      0002A9 75 FB 80         [24] 1203 	mov	_CCAP1H,#0x80
                                   1204 ;	program.c:292: CCAPM1 = 0x49;
      0002AC 75 DB 49         [24] 1205 	mov	_CCAPM1,#0x49
                                   1206 ;	program.c:293: watchdog_flag = 1;
      0002AF 90r00r01         [24] 1207 	mov	dptr,#_watchdog_flag
      0002B2 74 01            [12] 1208 	mov	a,#0x01
      0002B4 F0               [24] 1209 	movx	@dptr,a
      0002B5 E4               [12] 1210 	clr	a
      0002B6 A3               [24] 1211 	inc	dptr
      0002B7 F0               [24] 1212 	movx	@dptr,a
                                   1213 ;	program.c:294: printf("Enabling Watchdog Timer..\n\r");
      0002B8 74r84            [12] 1214 	mov	a,#___str_11
      0002BA C0 E0            [24] 1215 	push	acc
      0002BC 74s01            [12] 1216 	mov	a,#(___str_11 >> 8)
      0002BE C0 E0            [24] 1217 	push	acc
      0002C0 74 80            [12] 1218 	mov	a,#0x80
      0002C2 C0 E0            [24] 1219 	push	acc
      0002C4 12r00r00         [24] 1220 	lcall	_printf
      0002C7 15 81            [12] 1221 	dec	sp
      0002C9 15 81            [12] 1222 	dec	sp
      0002CB 15 81            [12] 1223 	dec	sp
                                   1224 ;	program.c:295: CCAP4L = 255;
      0002CD 75 EE FF         [24] 1225 	mov	_CCAP4L,#0xff
                                   1226 ;	program.c:296: CCAP4H = 255;
      0002D0 75 FE FF         [24] 1227 	mov	_CCAP4H,#0xff
                                   1228 ;	program.c:297: CMOD = WDTE;
      0002D3 75 D9 40         [24] 1229 	mov	_CMOD,#0x40
                                   1230 ;	program.c:298: CCAPM4 = 0x48;
      0002D6 75 DE 48         [24] 1231 	mov	_CCAPM4,#0x48
                                   1232 ;	program.c:299: CR = 1;
                                   1233 ;	assignBit
      0002D9 D2 DE            [12] 1234 	setb	_CR
                                   1235 ;	program.c:301: printf("Currently Watchdog is being serviced\n\rPress 'S' to stop and generate a reset \n\r");
      0002DB 74rA0            [12] 1236 	mov	a,#___str_12
      0002DD C0 E0            [24] 1237 	push	acc
      0002DF 74s01            [12] 1238 	mov	a,#(___str_12 >> 8)
      0002E1 C0 E0            [24] 1239 	push	acc
      0002E3 74 80            [12] 1240 	mov	a,#0x80
      0002E5 C0 E0            [24] 1241 	push	acc
      0002E7 12r00r00         [24] 1242 	lcall	_printf
      0002EA 15 81            [12] 1243 	dec	sp
      0002EC 15 81            [12] 1244 	dec	sp
      0002EE 15 81            [12] 1245 	dec	sp
                                   1246 ;	program.c:303: get_e:
      0002F0                       1247 00101$:
                                   1248 ;	program.c:304: rec = getchar();
      0002F0 12r14rC2         [24] 1249 	lcall	_getchar
      0002F3 AE 82            [24] 1250 	mov	r6,dpl
      0002F5 AF 83            [24] 1251 	mov	r7,dph
                                   1252 ;	program.c:306: if (rec == 0x53)
      0002F7 BE 53 F6         [24] 1253 	cjne	r6,#0x53,00101$
      0002FA BF 00 F3         [24] 1254 	cjne	r7,#0x00,00101$
                                   1255 ;	program.c:307: CCAPM1 = 0;
      0002FD 75 DB 00         [24] 1256 	mov	_CCAPM1,#0x00
                                   1257 ;	program.c:309: goto get_e;
                                   1258 ;	program.c:310: }
      000300 22               [24] 1259 	ret
                                   1260 ;------------------------------------------------------------
                                   1261 ;Allocation info for local variables in function 'hardware_watchdog'
                                   1262 ;------------------------------------------------------------
                                   1263 ;rec                       Allocated with name '_hardware_watchdog_rec_65537_74'
                                   1264 ;------------------------------------------------------------
                                   1265 ;	program.c:317: void hardware_watchdog()
                                   1266 ;	-----------------------------------------
                                   1267 ;	 function hardware_watchdog
                                   1268 ;	-----------------------------------------
      000301                       1269 _hardware_watchdog:
                                   1270 ;	program.c:319: CCAP2L = 255;
      000301 75 EC FF         [24] 1271 	mov	_CCAP2L,#0xff
                                   1272 ;	program.c:320: CCAP2H = 255;
      000304 75 FC FF         [24] 1273 	mov	_CCAP2H,#0xff
                                   1274 ;	program.c:321: CCAPM2 = 0x49;
      000307 75 DC 49         [24] 1275 	mov	_CCAPM2,#0x49
                                   1276 ;	program.c:322: printf("Enabling Hardware Watchdog Timer..\n\r");
      00030A 74rF0            [12] 1277 	mov	a,#___str_13
      00030C C0 E0            [24] 1278 	push	acc
      00030E 74s01            [12] 1279 	mov	a,#(___str_13 >> 8)
      000310 C0 E0            [24] 1280 	push	acc
      000312 74 80            [12] 1281 	mov	a,#0x80
      000314 C0 E0            [24] 1282 	push	acc
      000316 12r00r00         [24] 1283 	lcall	_printf
      000319 15 81            [12] 1284 	dec	sp
      00031B 15 81            [12] 1285 	dec	sp
      00031D 15 81            [12] 1286 	dec	sp
                                   1287 ;	program.c:323: WDTPRG = 0x7;
      00031F 75 A7 07         [24] 1288 	mov	_WDTPRG,#0x07
                                   1289 ;	program.c:324: CR = 1;
                                   1290 ;	assignBit
      000322 D2 DE            [12] 1291 	setb	_CR
                                   1292 ;	program.c:326: printf("Currently Hardware Watchdog is being serviced\n\rPress 'S' to stop watchdog service and generate a reset in ~1s \n\r");
      000324 74r15            [12] 1293 	mov	a,#___str_14
      000326 C0 E0            [24] 1294 	push	acc
      000328 74s02            [12] 1295 	mov	a,#(___str_14 >> 8)
      00032A C0 E0            [24] 1296 	push	acc
      00032C 74 80            [12] 1297 	mov	a,#0x80
      00032E C0 E0            [24] 1298 	push	acc
      000330 12r00r00         [24] 1299 	lcall	_printf
      000333 15 81            [12] 1300 	dec	sp
      000335 15 81            [12] 1301 	dec	sp
      000337 15 81            [12] 1302 	dec	sp
                                   1303 ;	program.c:328: get_e:
      000339                       1304 00101$:
                                   1305 ;	program.c:329: rec = getchar();
      000339 12r14rC2         [24] 1306 	lcall	_getchar
      00033C AE 82            [24] 1307 	mov	r6,dpl
      00033E AF 83            [24] 1308 	mov	r7,dph
                                   1309 ;	program.c:331: if (rec == 0x53)
      000340 BE 53 F6         [24] 1310 	cjne	r6,#0x53,00101$
      000343 BF 00 F3         [24] 1311 	cjne	r7,#0x00,00101$
                                   1312 ;	program.c:332: CCAPM2 = 0;
      000346 75 DC 00         [24] 1313 	mov	_CCAPM2,#0x00
                                   1314 ;	program.c:334: goto get_e;
                                   1315 ;	program.c:335: }
      000349 22               [24] 1316 	ret
                                   1317 ;------------------------------------------------------------
                                   1318 ;Allocation info for local variables in function 'pca_idle'
                                   1319 ;------------------------------------------------------------
                                   1320 ;	program.c:342: void pca_idle()
                                   1321 ;	-----------------------------------------
                                   1322 ;	 function pca_idle
                                   1323 ;	-----------------------------------------
      00034A                       1324 _pca_idle:
                                   1325 ;	program.c:344: pca_pwm();
      00034A 12r02r82         [24] 1326 	lcall	_pca_pwm
                                   1327 ;	program.c:345: printf("Entering Idle, Will Exit on external interrupt 0\n\r");
      00034D 74r86            [12] 1328 	mov	a,#___str_15
      00034F C0 E0            [24] 1329 	push	acc
      000351 74s02            [12] 1330 	mov	a,#(___str_15 >> 8)
      000353 C0 E0            [24] 1331 	push	acc
      000355 74 80            [12] 1332 	mov	a,#0x80
      000357 C0 E0            [24] 1333 	push	acc
      000359 12r00r00         [24] 1334 	lcall	_printf
      00035C 15 81            [12] 1335 	dec	sp
      00035E 15 81            [12] 1336 	dec	sp
      000360 15 81            [12] 1337 	dec	sp
                                   1338 ;	program.c:346: EX0 = 1;
                                   1339 ;	assignBit
      000362 D2 A8            [12] 1340 	setb	_EX0
                                   1341 ;	program.c:347: PCON = IDL;
      000364 75 87 01         [24] 1342 	mov	_PCON,#0x01
                                   1343 ;	program.c:348: printf("Woke up from Idle/Power down, going to main menu \n\r");
      000367 74rB9            [12] 1344 	mov	a,#___str_16
      000369 C0 E0            [24] 1345 	push	acc
      00036B 74s02            [12] 1346 	mov	a,#(___str_16 >> 8)
      00036D C0 E0            [24] 1347 	push	acc
      00036F 74 80            [12] 1348 	mov	a,#0x80
      000371 C0 E0            [24] 1349 	push	acc
      000373 12r00r00         [24] 1350 	lcall	_printf
      000376 15 81            [12] 1351 	dec	sp
      000378 15 81            [12] 1352 	dec	sp
      00037A 15 81            [12] 1353 	dec	sp
                                   1354 ;	program.c:349: main_menu();
                                   1355 ;	program.c:350: }
      00037C 02r03rE6         [24] 1356 	ljmp	_main_menu
                                   1357 ;------------------------------------------------------------
                                   1358 ;Allocation info for local variables in function 'pca_pdown'
                                   1359 ;------------------------------------------------------------
                                   1360 ;	program.c:357: void pca_pdown()
                                   1361 ;	-----------------------------------------
                                   1362 ;	 function pca_pdown
                                   1363 ;	-----------------------------------------
      00037F                       1364 _pca_pdown:
                                   1365 ;	program.c:359: pca_pwm();
      00037F 12r02r82         [24] 1366 	lcall	_pca_pwm
                                   1367 ;	program.c:360: printf("Entering power down, Will Exit on external interrupt 0\n\r");
      000382 74rED            [12] 1368 	mov	a,#___str_17
      000384 C0 E0            [24] 1369 	push	acc
      000386 74s02            [12] 1370 	mov	a,#(___str_17 >> 8)
      000388 C0 E0            [24] 1371 	push	acc
      00038A 74 80            [12] 1372 	mov	a,#0x80
      00038C C0 E0            [24] 1373 	push	acc
      00038E 12r00r00         [24] 1374 	lcall	_printf
      000391 15 81            [12] 1375 	dec	sp
      000393 15 81            [12] 1376 	dec	sp
      000395 15 81            [12] 1377 	dec	sp
                                   1378 ;	program.c:361: EX0 = 1;
                                   1379 ;	assignBit
      000397 D2 A8            [12] 1380 	setb	_EX0
                                   1381 ;	program.c:362: PCON = PD;
      000399 75 87 02         [24] 1382 	mov	_PCON,#0x02
                                   1383 ;	program.c:363: printf("Woke up from Idle/Power down, going to main menu \n\r");
      00039C 74rB9            [12] 1384 	mov	a,#___str_16
      00039E C0 E0            [24] 1385 	push	acc
      0003A0 74s02            [12] 1386 	mov	a,#(___str_16 >> 8)
      0003A2 C0 E0            [24] 1387 	push	acc
      0003A4 74 80            [12] 1388 	mov	a,#0x80
      0003A6 C0 E0            [24] 1389 	push	acc
      0003A8 12r00r00         [24] 1390 	lcall	_printf
      0003AB 15 81            [12] 1391 	dec	sp
      0003AD 15 81            [12] 1392 	dec	sp
      0003AF 15 81            [12] 1393 	dec	sp
                                   1394 ;	program.c:364: main_menu();
                                   1395 ;	program.c:365: }
      0003B1 02r03rE6         [24] 1396 	ljmp	_main_menu
                                   1397 ;------------------------------------------------------------
                                   1398 ;Allocation info for local variables in function 'fclk_lowest'
                                   1399 ;------------------------------------------------------------
                                   1400 ;	program.c:372: void fclk_lowest()
                                   1401 ;	-----------------------------------------
                                   1402 ;	 function fclk_lowest
                                   1403 ;	-----------------------------------------
      0003B4                       1404 _fclk_lowest:
                                   1405 ;	program.c:374: printf("Changing Clock prescalar to go to lowest frequency in X2 Mode..\n\r");
      0003B4 74r26            [12] 1406 	mov	a,#___str_18
      0003B6 C0 E0            [24] 1407 	push	acc
      0003B8 74s03            [12] 1408 	mov	a,#(___str_18 >> 8)
      0003BA C0 E0            [24] 1409 	push	acc
      0003BC 74 80            [12] 1410 	mov	a,#0x80
      0003BE C0 E0            [24] 1411 	push	acc
      0003C0 12r00r00         [24] 1412 	lcall	_printf
      0003C3 15 81            [12] 1413 	dec	sp
      0003C5 15 81            [12] 1414 	dec	sp
      0003C7 15 81            [12] 1415 	dec	sp
                                   1416 ;	program.c:375: printf("This UART Session will stop working...\n\r");
      0003C9 74r68            [12] 1417 	mov	a,#___str_19
      0003CB C0 E0            [24] 1418 	push	acc
      0003CD 74s03            [12] 1419 	mov	a,#(___str_19 >> 8)
      0003CF C0 E0            [24] 1420 	push	acc
      0003D1 74 80            [12] 1421 	mov	a,#0x80
      0003D3 C0 E0            [24] 1422 	push	acc
      0003D5 12r00r00         [24] 1423 	lcall	_printf
      0003D8 15 81            [12] 1424 	dec	sp
      0003DA 15 81            [12] 1425 	dec	sp
      0003DC 15 81            [12] 1426 	dec	sp
                                   1427 ;	program.c:376: EX0 = 1;
                                   1428 ;	assignBit
      0003DE D2 A8            [12] 1429 	setb	_EX0
                                   1430 ;	program.c:377: CKRL = 0;
      0003E0 75 97 00         [24] 1431 	mov	_CKRL,#0x00
                                   1432 ;	program.c:378: main_menu();
                                   1433 ;	program.c:379: }
      0003E3 02r03rE6         [24] 1434 	ljmp	_main_menu
                                   1435 ;------------------------------------------------------------
                                   1436 ;Allocation info for local variables in function 'main_menu'
                                   1437 ;------------------------------------------------------------
                                   1438 ;inp                       Allocated with name '_main_menu_inp_65537_79'
                                   1439 ;------------------------------------------------------------
                                   1440 ;	program.c:386: void main_menu()
                                   1441 ;	-----------------------------------------
                                   1442 ;	 function main_menu
                                   1443 ;	-----------------------------------------
      0003E6                       1444 _main_menu:
                                   1445 ;	program.c:388: printf("\n\n\r^^^^^^^^^^^^^^^^^^^-MENU-^^^^^^^^^^^^^^^^^^^^^^^^^^ \n\n\r");
      0003E6 74r91            [12] 1446 	mov	a,#___str_20
      0003E8 C0 E0            [24] 1447 	push	acc
      0003EA 74s03            [12] 1448 	mov	a,#(___str_20 >> 8)
      0003EC C0 E0            [24] 1449 	push	acc
      0003EE 74 80            [12] 1450 	mov	a,#0x80
      0003F0 C0 E0            [24] 1451 	push	acc
      0003F2 12r00r00         [24] 1452 	lcall	_printf
      0003F5 15 81            [12] 1453 	dec	sp
      0003F7 15 81            [12] 1454 	dec	sp
      0003F9 15 81            [12] 1455 	dec	sp
                                   1456 ;	program.c:389: printf("'H' -> Enter Heap Demo Mode \n\r");
      0003FB 74rCC            [12] 1457 	mov	a,#___str_21
      0003FD C0 E0            [24] 1458 	push	acc
      0003FF 74s03            [12] 1459 	mov	a,#(___str_21 >> 8)
      000401 C0 E0            [24] 1460 	push	acc
      000403 74 80            [12] 1461 	mov	a,#0x80
      000405 C0 E0            [24] 1462 	push	acc
      000407 12r00r00         [24] 1463 	lcall	_printf
      00040A 15 81            [12] 1464 	dec	sp
      00040C 15 81            [12] 1465 	dec	sp
      00040E 15 81            [12] 1466 	dec	sp
                                   1467 ;	program.c:390: printf("'P' -> Enter PCA Demo Mode \n\r");
      000410 74rEB            [12] 1468 	mov	a,#___str_22
      000412 C0 E0            [24] 1469 	push	acc
      000414 74s03            [12] 1470 	mov	a,#(___str_22 >> 8)
      000416 C0 E0            [24] 1471 	push	acc
      000418 74 80            [12] 1472 	mov	a,#0x80
      00041A C0 E0            [24] 1473 	push	acc
      00041C 12r00r00         [24] 1474 	lcall	_printf
      00041F 15 81            [12] 1475 	dec	sp
      000421 15 81            [12] 1476 	dec	sp
      000423 15 81            [12] 1477 	dec	sp
                                   1478 ;	program.c:391: printf("'A' -> Assembly C Mix \n\r");
      000425 74r09            [12] 1479 	mov	a,#___str_23
      000427 C0 E0            [24] 1480 	push	acc
      000429 74s04            [12] 1481 	mov	a,#(___str_23 >> 8)
      00042B C0 E0            [24] 1482 	push	acc
      00042D 74 80            [12] 1483 	mov	a,#0x80
      00042F C0 E0            [24] 1484 	push	acc
      000431 12r00r00         [24] 1485 	lcall	_printf
      000434 15 81            [12] 1486 	dec	sp
      000436 15 81            [12] 1487 	dec	sp
      000438 15 81            [12] 1488 	dec	sp
                                   1489 ;	program.c:392: printf("'E' -> EEPROM Mode \n\r");
      00043A 74r22            [12] 1490 	mov	a,#___str_24
      00043C C0 E0            [24] 1491 	push	acc
      00043E 74s04            [12] 1492 	mov	a,#(___str_24 >> 8)
      000440 C0 E0            [24] 1493 	push	acc
      000442 74 80            [12] 1494 	mov	a,#0x80
      000444 C0 E0            [24] 1495 	push	acc
      000446 12r00r00         [24] 1496 	lcall	_printf
      000449 15 81            [12] 1497 	dec	sp
      00044B 15 81            [12] 1498 	dec	sp
      00044D 15 81            [12] 1499 	dec	sp
                                   1500 ;	program.c:395: wrong_choice:
      00044F                       1501 00101$:
                                   1502 ;	program.c:396: printf("Please make a valid choice \n\r");
      00044F 74r3B            [12] 1503 	mov	a,#___str_2
      000451 C0 E0            [24] 1504 	push	acc
      000453 74s00            [12] 1505 	mov	a,#(___str_2 >> 8)
      000455 C0 E0            [24] 1506 	push	acc
      000457 74 80            [12] 1507 	mov	a,#0x80
      000459 C0 E0            [24] 1508 	push	acc
      00045B 12r00r00         [24] 1509 	lcall	_printf
      00045E 15 81            [12] 1510 	dec	sp
      000460 15 81            [12] 1511 	dec	sp
      000462 15 81            [12] 1512 	dec	sp
                                   1513 ;	program.c:397: inp = getchar();
      000464 12r14rC2         [24] 1514 	lcall	_getchar
      000467 AE 82            [24] 1515 	mov	r6,dpl
      000469 AF 83            [24] 1516 	mov	r7,dph
                                   1517 ;	program.c:398: if (inp == 0x48)
      00046B BE 48 06         [24] 1518 	cjne	r6,#0x48,00112$
      00046E BF 00 03         [24] 1519 	cjne	r7,#0x00,00112$
                                   1520 ;	program.c:399: user_interface_heap();
      000471 02r00r20         [24] 1521 	ljmp	_user_interface_heap
      000474                       1522 00112$:
                                   1523 ;	program.c:400: else if (inp == 0x50)
      000474 BE 50 06         [24] 1524 	cjne	r6,#0x50,00109$
      000477 BF 00 03         [24] 1525 	cjne	r7,#0x00,00109$
                                   1526 ;	program.c:401: user_interface_PCA();
      00047A 02r00r2F         [24] 1527 	ljmp	_user_interface_PCA
      00047D                       1528 00109$:
                                   1529 ;	program.c:402: else if (inp == 0x41)
      00047D BE 41 06         [24] 1530 	cjne	r6,#0x41,00106$
      000480 BF 00 03         [24] 1531 	cjne	r7,#0x00,00106$
                                   1532 ;	program.c:403: asm_clang();
      000483 02r05r7D         [24] 1533 	ljmp	_asm_clang
      000486                       1534 00106$:
                                   1535 ;	program.c:404: else if (inp == 0x45)
      000486 BE 45 C6         [24] 1536 	cjne	r6,#0x45,00101$
      000489 BF 00 C3         [24] 1537 	cjne	r7,#0x00,00101$
                                   1538 ;	program.c:405: i2c_testasm();
                                   1539 ;	program.c:407: goto wrong_choice;
                                   1540 ;	program.c:408: }
      00048C 02r04rFC         [24] 1541 	ljmp	_i2c_testasm
                                   1542 ;------------------------------------------------------------
                                   1543 ;Allocation info for local variables in function 'i2c_write_random'
                                   1544 ;------------------------------------------------------------
                                   1545 ;address                   Allocated with name '_i2c_write_random_PARM_2'
                                   1546 ;value                     Allocated with name '_i2c_write_random_PARM_3'
                                   1547 ;block                     Allocated with name '_i2c_write_random_block_65536_80'
                                   1548 ;k                         Allocated with name '_i2c_write_random_k_131072_82'
                                   1549 ;l                         Allocated with name '_i2c_write_random_l_262144_84'
                                   1550 ;------------------------------------------------------------
                                   1551 ;	program.c:410: void i2c_write_random(unsigned char block, unsigned char address, unsigned char value)
                                   1552 ;	-----------------------------------------
                                   1553 ;	 function i2c_write_random
                                   1554 ;	-----------------------------------------
      00048F                       1555 _i2c_write_random:
      00048F E5 82            [12] 1556 	mov	a,dpl
      000491 90r01r38         [24] 1557 	mov	dptr,#_i2c_write_random_block_65536_80
      000494 F0               [24] 1558 	movx	@dptr,a
                                   1559 ;	program.c:412: i2c_write_init(block);
      000495 E0               [24] 1560 	movx	a,@dptr
      000496 F5 82            [12] 1561 	mov	dpl,a
      000498 12r00r00         [24] 1562 	lcall	_i2c_write_init
                                   1563 ;	program.c:413: i2c_addr(address);
      00049B 90r01r36         [24] 1564 	mov	dptr,#_i2c_write_random_PARM_2
      00049E E0               [24] 1565 	movx	a,@dptr
      00049F F5 82            [12] 1566 	mov	dpl,a
      0004A1 12r00r00         [24] 1567 	lcall	_i2c_addr
                                   1568 ;	program.c:414: i2c_write_val(value);
      0004A4 90r01r37         [24] 1569 	mov	dptr,#_i2c_write_random_PARM_3
      0004A7 E0               [24] 1570 	movx	a,@dptr
      0004A8 F5 82            [12] 1571 	mov	dpl,a
      0004AA 12r00r00         [24] 1572 	lcall	_i2c_write_val
                                   1573 ;	program.c:415: for (int k = 0; k < 90; k++)
      0004AD 7E 00            [12] 1574 	mov	r6,#0x00
      0004AF 7F 00            [12] 1575 	mov	r7,#0x00
      0004B1                       1576 00107$:
      0004B1 C3               [12] 1577 	clr	c
      0004B2 EE               [12] 1578 	mov	a,r6
      0004B3 94 5A            [12] 1579 	subb	a,#0x5a
      0004B5 EF               [12] 1580 	mov	a,r7
      0004B6 64 80            [12] 1581 	xrl	a,#0x80
      0004B8 94 80            [12] 1582 	subb	a,#0x80
      0004BA 50 1D            [24] 1583 	jnc	00109$
                                   1584 ;	program.c:417: for (int l = 0; l < 10; l++)
      0004BC 7C 00            [12] 1585 	mov	r4,#0x00
      0004BE 7D 00            [12] 1586 	mov	r5,#0x00
      0004C0                       1587 00104$:
      0004C0 C3               [12] 1588 	clr	c
      0004C1 EC               [12] 1589 	mov	a,r4
      0004C2 94 0A            [12] 1590 	subb	a,#0x0a
      0004C4 ED               [12] 1591 	mov	a,r5
      0004C5 64 80            [12] 1592 	xrl	a,#0x80
      0004C7 94 80            [12] 1593 	subb	a,#0x80
      0004C9 50 07            [24] 1594 	jnc	00108$
      0004CB 0C               [12] 1595 	inc	r4
      0004CC BC 00 F1         [24] 1596 	cjne	r4,#0x00,00104$
      0004CF 0D               [12] 1597 	inc	r5
      0004D0 80 EE            [24] 1598 	sjmp	00104$
      0004D2                       1599 00108$:
                                   1600 ;	program.c:415: for (int k = 0; k < 90; k++)
      0004D2 0E               [12] 1601 	inc	r6
      0004D3 BE 00 DB         [24] 1602 	cjne	r6,#0x00,00107$
      0004D6 0F               [12] 1603 	inc	r7
      0004D7 80 D8            [24] 1604 	sjmp	00107$
      0004D9                       1605 00109$:
                                   1606 ;	program.c:421: }
      0004D9 22               [24] 1607 	ret
                                   1608 ;------------------------------------------------------------
                                   1609 ;Allocation info for local variables in function 'i2c_read_random'
                                   1610 ;------------------------------------------------------------
                                   1611 ;address                   Allocated with name '_i2c_read_random_PARM_2'
                                   1612 ;block                     Allocated with name '_i2c_read_random_block_65536_86'
                                   1613 ;a                         Allocated with name '_i2c_read_random_a_65537_88'
                                   1614 ;------------------------------------------------------------
                                   1615 ;	program.c:423: unsigned char i2c_read_random(unsigned char block, unsigned char address)
                                   1616 ;	-----------------------------------------
                                   1617 ;	 function i2c_read_random
                                   1618 ;	-----------------------------------------
      0004DA                       1619 _i2c_read_random:
      0004DA E5 82            [12] 1620 	mov	a,dpl
      0004DC 90r01r3A         [24] 1621 	mov	dptr,#_i2c_read_random_block_65536_86
      0004DF F0               [24] 1622 	movx	@dptr,a
                                   1623 ;	program.c:425: i2c_write_init(block);
      0004E0 E0               [24] 1624 	movx	a,@dptr
      0004E1 FF               [12] 1625 	mov	r7,a
      0004E2 F5 82            [12] 1626 	mov	dpl,a
      0004E4 C0 07            [24] 1627 	push	ar7
      0004E6 12r00r00         [24] 1628 	lcall	_i2c_write_init
                                   1629 ;	program.c:426: i2c_addr(address);
      0004E9 90r01r39         [24] 1630 	mov	dptr,#_i2c_read_random_PARM_2
      0004EC E0               [24] 1631 	movx	a,@dptr
      0004ED F5 82            [12] 1632 	mov	dpl,a
      0004EF 12r00r00         [24] 1633 	lcall	_i2c_addr
      0004F2 D0 07            [24] 1634 	pop	ar7
                                   1635 ;	program.c:427: i2c_read_init(block);
      0004F4 8F 82            [24] 1636 	mov	dpl,r7
      0004F6 12r00r00         [24] 1637 	lcall	_i2c_read_init
                                   1638 ;	program.c:428: unsigned char a = i2c_read_val();
                                   1639 ;	program.c:429: return a;
                                   1640 ;	program.c:430: }
      0004F9 02r00r00         [24] 1641 	ljmp	_i2c_read_val
                                   1642 ;------------------------------------------------------------
                                   1643 ;Allocation info for local variables in function 'i2c_testasm'
                                   1644 ;------------------------------------------------------------
                                   1645 ;i                         Allocated with name '_i2c_testasm_i_131072_90'
                                   1646 ;r                         Allocated with name '_i2c_testasm_r_65537_92'
                                   1647 ;k                         Allocated with name '_i2c_testasm_k_131073_93'
                                   1648 ;a                         Allocated with name '_i2c_testasm_a_196609_94'
                                   1649 ;------------------------------------------------------------
                                   1650 ;	program.c:432: void i2c_testasm()
                                   1651 ;	-----------------------------------------
                                   1652 ;	 function i2c_testasm
                                   1653 ;	-----------------------------------------
      0004FC                       1654 _i2c_testasm:
                                   1655 ;	program.c:434: for(int i = 0; i <256;i++){
      0004FC 7E 00            [12] 1656 	mov	r6,#0x00
      0004FE 7F 00            [12] 1657 	mov	r7,#0x00
      000500                       1658 00107$:
      000500 C3               [12] 1659 	clr	c
      000501 EF               [12] 1660 	mov	a,r7
      000502 64 80            [12] 1661 	xrl	a,#0x80
      000504 94 81            [12] 1662 	subb	a,#0x81
      000506 50 21            [24] 1663 	jnc	00101$
                                   1664 ;	program.c:435: i2c_write_random(0, i, i);
      000508 8E 05            [24] 1665 	mov	ar5,r6
      00050A 90r01r36         [24] 1666 	mov	dptr,#_i2c_write_random_PARM_2
      00050D ED               [12] 1667 	mov	a,r5
      00050E F0               [24] 1668 	movx	@dptr,a
      00050F 90r01r37         [24] 1669 	mov	dptr,#_i2c_write_random_PARM_3
      000512 ED               [12] 1670 	mov	a,r5
      000513 F0               [24] 1671 	movx	@dptr,a
      000514 75 82 00         [24] 1672 	mov	dpl,#0x00
      000517 C0 07            [24] 1673 	push	ar7
      000519 C0 06            [24] 1674 	push	ar6
      00051B 12r04r8F         [24] 1675 	lcall	_i2c_write_random
      00051E D0 06            [24] 1676 	pop	ar6
      000520 D0 07            [24] 1677 	pop	ar7
                                   1678 ;	program.c:434: for(int i = 0; i <256;i++){
      000522 0E               [12] 1679 	inc	r6
      000523 BE 00 DA         [24] 1680 	cjne	r6,#0x00,00107$
      000526 0F               [12] 1681 	inc	r7
      000527 80 D7            [24] 1682 	sjmp	00107$
      000529                       1683 00101$:
                                   1684 ;	program.c:439: unsigned char r = getchar();
      000529 12r14rC2         [24] 1685 	lcall	_getchar
                                   1686 ;	program.c:441: for(int k = 0; k <256;k++){
      00052C 7E 00            [12] 1687 	mov	r6,#0x00
      00052E 7F 00            [12] 1688 	mov	r7,#0x00
      000530                       1689 00110$:
      000530 C3               [12] 1690 	clr	c
      000531 EF               [12] 1691 	mov	a,r7
      000532 64 80            [12] 1692 	xrl	a,#0x80
      000534 94 81            [12] 1693 	subb	a,#0x81
      000536 50 43            [24] 1694 	jnc	00104$
                                   1695 ;	program.c:442: unsigned char a = i2c_read_random(0, k);
      000538 90r01r39         [24] 1696 	mov	dptr,#_i2c_read_random_PARM_2
      00053B EE               [12] 1697 	mov	a,r6
      00053C F0               [24] 1698 	movx	@dptr,a
      00053D 75 82 00         [24] 1699 	mov	dpl,#0x00
      000540 C0 07            [24] 1700 	push	ar7
      000542 C0 06            [24] 1701 	push	ar6
      000544 12r04rDA         [24] 1702 	lcall	_i2c_read_random
      000547 AD 82            [24] 1703 	mov	r5,dpl
      000549 D0 06            [24] 1704 	pop	ar6
      00054B D0 07            [24] 1705 	pop	ar7
                                   1706 ;	program.c:443: printf("loc ->%d val is -> %x \n\r", k,a);
      00054D 7C 00            [12] 1707 	mov	r4,#0x00
      00054F C0 07            [24] 1708 	push	ar7
      000551 C0 06            [24] 1709 	push	ar6
      000553 C0 05            [24] 1710 	push	ar5
      000555 C0 04            [24] 1711 	push	ar4
      000557 C0 06            [24] 1712 	push	ar6
      000559 C0 07            [24] 1713 	push	ar7
      00055B 74r38            [12] 1714 	mov	a,#___str_25
      00055D C0 E0            [24] 1715 	push	acc
      00055F 74s04            [12] 1716 	mov	a,#(___str_25 >> 8)
      000561 C0 E0            [24] 1717 	push	acc
      000563 74 80            [12] 1718 	mov	a,#0x80
      000565 C0 E0            [24] 1719 	push	acc
      000567 12r00r00         [24] 1720 	lcall	_printf
      00056A E5 81            [12] 1721 	mov	a,sp
      00056C 24 F9            [12] 1722 	add	a,#0xf9
      00056E F5 81            [12] 1723 	mov	sp,a
      000570 D0 06            [24] 1724 	pop	ar6
      000572 D0 07            [24] 1725 	pop	ar7
                                   1726 ;	program.c:441: for(int k = 0; k <256;k++){
      000574 0E               [12] 1727 	inc	r6
                                   1728 ;	program.c:447: while (1)
      000575 BE 00 B8         [24] 1729 	cjne	r6,#0x00,00110$
      000578 0F               [12] 1730 	inc	r7
      000579 80 B5            [24] 1731 	sjmp	00110$
      00057B                       1732 00104$:
                                   1733 ;	program.c:450: }
      00057B 80 FE            [24] 1734 	sjmp	00104$
                                   1735 ;------------------------------------------------------------
                                   1736 ;Allocation info for local variables in function 'asm_clang'
                                   1737 ;------------------------------------------------------------
                                   1738 ;num1                      Allocated with name '_asm_clang_num1_65537_97'
                                   1739 ;num2                      Allocated with name '_asm_clang_num2_65538_98'
                                   1740 ;num3                      Allocated with name '_asm_clang_num3_65539_99'
                                   1741 ;------------------------------------------------------------
                                   1742 ;	program.c:457: void asm_clang()
                                   1743 ;	-----------------------------------------
                                   1744 ;	 function asm_clang
                                   1745 ;	-----------------------------------------
      00057D                       1746 _asm_clang:
                                   1747 ;	program.c:459: printf("\n\r Give param 1, 8bit \n\r");
      00057D 74r51            [12] 1748 	mov	a,#___str_26
      00057F C0 E0            [24] 1749 	push	acc
      000581 74s04            [12] 1750 	mov	a,#(___str_26 >> 8)
      000583 C0 E0            [24] 1751 	push	acc
      000585 74 80            [12] 1752 	mov	a,#0x80
      000587 C0 E0            [24] 1753 	push	acc
      000589 12r00r00         [24] 1754 	lcall	_printf
      00058C 15 81            [12] 1755 	dec	sp
      00058E 15 81            [12] 1756 	dec	sp
      000590 15 81            [12] 1757 	dec	sp
                                   1758 ;	program.c:460: unsigned char num1 = get_number(3);
      000592 90 00 03         [24] 1759 	mov	dptr,#0x0003
      000595 12r13r4E         [24] 1760 	lcall	_get_number
      000598 AE 82            [24] 1761 	mov	r6,dpl
                                   1762 ;	program.c:461: printf("\n\r Give param 2, 8bit \n\r");
      00059A C0 06            [24] 1763 	push	ar6
      00059C 74r6A            [12] 1764 	mov	a,#___str_27
      00059E C0 E0            [24] 1765 	push	acc
      0005A0 74s04            [12] 1766 	mov	a,#(___str_27 >> 8)
      0005A2 C0 E0            [24] 1767 	push	acc
      0005A4 74 80            [12] 1768 	mov	a,#0x80
      0005A6 C0 E0            [24] 1769 	push	acc
      0005A8 12r00r00         [24] 1770 	lcall	_printf
      0005AB 15 81            [12] 1771 	dec	sp
      0005AD 15 81            [12] 1772 	dec	sp
      0005AF 15 81            [12] 1773 	dec	sp
                                   1774 ;	program.c:462: unsigned char num2 = get_number(3);
      0005B1 90 00 03         [24] 1775 	mov	dptr,#0x0003
      0005B4 12r13r4E         [24] 1776 	lcall	_get_number
      0005B7 AD 82            [24] 1777 	mov	r5,dpl
                                   1778 ;	program.c:463: printf("\n\r Give param 3, 8bit \n\r");
      0005B9 C0 05            [24] 1779 	push	ar5
      0005BB 74r83            [12] 1780 	mov	a,#___str_28
      0005BD C0 E0            [24] 1781 	push	acc
      0005BF 74s04            [12] 1782 	mov	a,#(___str_28 >> 8)
      0005C1 C0 E0            [24] 1783 	push	acc
      0005C3 74 80            [12] 1784 	mov	a,#0x80
      0005C5 C0 E0            [24] 1785 	push	acc
      0005C7 12r00r00         [24] 1786 	lcall	_printf
      0005CA 15 81            [12] 1787 	dec	sp
      0005CC 15 81            [12] 1788 	dec	sp
      0005CE 15 81            [12] 1789 	dec	sp
                                   1790 ;	program.c:464: unsigned char num3 = get_number(3);
      0005D0 90 00 03         [24] 1791 	mov	dptr,#0x0003
      0005D3 12r13r4E         [24] 1792 	lcall	_get_number
      0005D6 AC 82            [24] 1793 	mov	r4,dpl
      0005D8 D0 05            [24] 1794 	pop	ar5
      0005DA D0 06            [24] 1795 	pop	ar6
                                   1796 ;	program.c:466: printf("\n\r RESULT-> param3<Mod>param2 * param1 = %d \n\r", asmtest(num1, num2, num3));
      0005DC 90r00r00         [24] 1797 	mov	dptr,#_asmtest_PARM_2
      0005DF ED               [12] 1798 	mov	a,r5
      0005E0 F0               [24] 1799 	movx	@dptr,a
      0005E1 90r00r00         [24] 1800 	mov	dptr,#_asmtest_PARM_3
      0005E4 EC               [12] 1801 	mov	a,r4
      0005E5 F0               [24] 1802 	movx	@dptr,a
      0005E6 8E 82            [24] 1803 	mov	dpl,r6
      0005E8 12r00r00         [24] 1804 	lcall	_asmtest
      0005EB AF 82            [24] 1805 	mov	r7,dpl
      0005ED 7E 00            [12] 1806 	mov	r6,#0x00
      0005EF C0 07            [24] 1807 	push	ar7
      0005F1 C0 06            [24] 1808 	push	ar6
      0005F3 74r9C            [12] 1809 	mov	a,#___str_29
      0005F5 C0 E0            [24] 1810 	push	acc
      0005F7 74s04            [12] 1811 	mov	a,#(___str_29 >> 8)
      0005F9 C0 E0            [24] 1812 	push	acc
      0005FB 74 80            [12] 1813 	mov	a,#0x80
      0005FD C0 E0            [24] 1814 	push	acc
      0005FF 12r00r00         [24] 1815 	lcall	_printf
      000602 E5 81            [12] 1816 	mov	a,sp
      000604 24 FB            [12] 1817 	add	a,#0xfb
      000606 F5 81            [12] 1818 	mov	sp,a
                                   1819 ;	program.c:467: printf("\n\r Going back to main menu.. \n\r");
      000608 74rCB            [12] 1820 	mov	a,#___str_30
      00060A C0 E0            [24] 1821 	push	acc
      00060C 74s04            [12] 1822 	mov	a,#(___str_30 >> 8)
      00060E C0 E0            [24] 1823 	push	acc
      000610 74 80            [12] 1824 	mov	a,#0x80
      000612 C0 E0            [24] 1825 	push	acc
      000614 12r00r00         [24] 1826 	lcall	_printf
      000617 15 81            [12] 1827 	dec	sp
      000619 15 81            [12] 1828 	dec	sp
      00061B 15 81            [12] 1829 	dec	sp
                                   1830 ;	program.c:468: main_menu();
                                   1831 ;	program.c:469: }
      00061D 02r03rE6         [24] 1832 	ljmp	_main_menu
                                   1833 ;------------------------------------------------------------
                                   1834 ;Allocation info for local variables in function 'at_clear_all_buffers'
                                   1835 ;------------------------------------------------------------
                                   1836 ;i                         Allocated with name '_at_clear_all_buffers_i_131072_101'
                                   1837 ;------------------------------------------------------------
                                   1838 ;	program.c:477: void at_clear_all_buffers()
                                   1839 ;	-----------------------------------------
                                   1840 ;	 function at_clear_all_buffers
                                   1841 ;	-----------------------------------------
      000620                       1842 _at_clear_all_buffers:
                                   1843 ;	program.c:479: DEBUGPORT(0x03);
      000620 75 82 03         [24] 1844 	mov	dpl,#0x03
      000623 12r14rFE         [24] 1845 	lcall	_dataout
                                   1846 ;	program.c:480: for (int i = 0; i < program_stats.total_buffers; i++)
      000626 7E 00            [12] 1847 	mov	r6,#0x00
      000628 7F 00            [12] 1848 	mov	r7,#0x00
      00062A                       1849 00103$:
      00062A 90r00r08         [24] 1850 	mov	dptr,#(_program_stats + 0x0008)
      00062D E0               [24] 1851 	movx	a,@dptr
      00062E FC               [12] 1852 	mov	r4,a
      00062F A3               [24] 1853 	inc	dptr
      000630 E0               [24] 1854 	movx	a,@dptr
      000631 FD               [12] 1855 	mov	r5,a
      000632 C3               [12] 1856 	clr	c
      000633 EE               [12] 1857 	mov	a,r6
      000634 9C               [12] 1858 	subb	a,r4
      000635 EF               [12] 1859 	mov	a,r7
      000636 64 80            [12] 1860 	xrl	a,#0x80
      000638 8D F0            [24] 1861 	mov	b,r5
      00063A 63 F0 80         [24] 1862 	xrl	b,#0x80
      00063D 95 F0            [12] 1863 	subb	a,b
      00063F 50 61            [24] 1864 	jnc	00101$
                                   1865 ;	program.c:482: free(buffers_array[i].buffer_start);
      000641 90r00r00         [24] 1866 	mov	dptr,#__mulint_PARM_2
      000644 EE               [12] 1867 	mov	a,r6
      000645 F0               [24] 1868 	movx	@dptr,a
      000646 EF               [12] 1869 	mov	a,r7
      000647 A3               [24] 1870 	inc	dptr
      000648 F0               [24] 1871 	movx	@dptr,a
      000649 90 00 0C         [24] 1872 	mov	dptr,#0x000c
      00064C C0 07            [24] 1873 	push	ar7
      00064E C0 06            [24] 1874 	push	ar6
      000650 12r00r00         [24] 1875 	lcall	__mulint
      000653 AC 82            [24] 1876 	mov	r4,dpl
      000655 AD 83            [24] 1877 	mov	r5,dph
      000657 EC               [12] 1878 	mov	a,r4
      000658 24r0A            [12] 1879 	add	a,#_buffers_array
      00065A FC               [12] 1880 	mov	r4,a
      00065B ED               [12] 1881 	mov	a,r5
      00065C 34s00            [12] 1882 	addc	a,#(_buffers_array >> 8)
      00065E FD               [12] 1883 	mov	r5,a
      00065F 8C 82            [24] 1884 	mov	dpl,r4
      000661 8D 83            [24] 1885 	mov	dph,r5
      000663 A3               [24] 1886 	inc	dptr
      000664 A3               [24] 1887 	inc	dptr
      000665 E0               [24] 1888 	movx	a,@dptr
      000666 FB               [12] 1889 	mov	r3,a
      000667 A3               [24] 1890 	inc	dptr
      000668 E0               [24] 1891 	movx	a,@dptr
      000669 FC               [12] 1892 	mov	r4,a
      00066A A3               [24] 1893 	inc	dptr
      00066B E0               [24] 1894 	movx	a,@dptr
      00066C FD               [12] 1895 	mov	r5,a
      00066D 8B 82            [24] 1896 	mov	dpl,r3
      00066F 8C 83            [24] 1897 	mov	dph,r4
      000671 8D F0            [24] 1898 	mov	b,r5
      000673 12r00r00         [24] 1899 	lcall	_free
      000676 D0 06            [24] 1900 	pop	ar6
      000678 D0 07            [24] 1901 	pop	ar7
                                   1902 ;	program.c:483: printf("Buffer %d Freed ....\n\r", i);
      00067A C0 07            [24] 1903 	push	ar7
      00067C C0 06            [24] 1904 	push	ar6
      00067E C0 06            [24] 1905 	push	ar6
      000680 C0 07            [24] 1906 	push	ar7
      000682 74rEB            [12] 1907 	mov	a,#___str_31
      000684 C0 E0            [24] 1908 	push	acc
      000686 74s04            [12] 1909 	mov	a,#(___str_31 >> 8)
      000688 C0 E0            [24] 1910 	push	acc
      00068A 74 80            [12] 1911 	mov	a,#0x80
      00068C C0 E0            [24] 1912 	push	acc
      00068E 12r00r00         [24] 1913 	lcall	_printf
      000691 E5 81            [12] 1914 	mov	a,sp
      000693 24 FB            [12] 1915 	add	a,#0xfb
      000695 F5 81            [12] 1916 	mov	sp,a
      000697 D0 06            [24] 1917 	pop	ar6
      000699 D0 07            [24] 1918 	pop	ar7
                                   1919 ;	program.c:480: for (int i = 0; i < program_stats.total_buffers; i++)
      00069B 0E               [12] 1920 	inc	r6
      00069C BE 00 8B         [24] 1921 	cjne	r6,#0x00,00103$
      00069F 0F               [12] 1922 	inc	r7
      0006A0 80 88            [24] 1923 	sjmp	00103$
      0006A2                       1924 00101$:
                                   1925 ;	program.c:485: printf("Let's begin again..\n\r");
      0006A2 74r02            [12] 1926 	mov	a,#___str_32
      0006A4 C0 E0            [24] 1927 	push	acc
      0006A6 74s05            [12] 1928 	mov	a,#(___str_32 >> 8)
      0006A8 C0 E0            [24] 1929 	push	acc
      0006AA 74 80            [12] 1930 	mov	a,#0x80
      0006AC C0 E0            [24] 1931 	push	acc
      0006AE 12r00r00         [24] 1932 	lcall	_printf
      0006B1 15 81            [12] 1933 	dec	sp
      0006B3 15 81            [12] 1934 	dec	sp
      0006B5 15 81            [12] 1935 	dec	sp
                                   1936 ;	program.c:486: user_interface_heap();
                                   1937 ;	program.c:487: }
      0006B7 02r00r20         [24] 1938 	ljmp	_user_interface_heap
                                   1939 ;------------------------------------------------------------
                                   1940 ;Allocation info for local variables in function 'delete_buffer'
                                   1941 ;------------------------------------------------------------
                                   1942 ;sloc0                     Allocated with name '_delete_buffer_sloc0_1_0'
                                   1943 ;sloc1                     Allocated with name '_delete_buffer_sloc1_1_0'
                                   1944 ;sloc2                     Allocated with name '_delete_buffer_sloc2_1_0'
                                   1945 ;buff_number               Allocated with name '_delete_buffer_buff_number_65537_104'
                                   1946 ;buff_to_free              Allocated with name '_delete_buffer_buff_to_free_65537_104'
                                   1947 ;buffer_freed_size         Allocated with name '_delete_buffer_buffer_freed_size_65537_104'
                                   1948 ;i                         Allocated with name '_delete_buffer_i_196609_106'
                                   1949 ;------------------------------------------------------------
                                   1950 ;	program.c:494: int delete_buffer()
                                   1951 ;	-----------------------------------------
                                   1952 ;	 function delete_buffer
                                   1953 ;	-----------------------------------------
      0006BA                       1954 _delete_buffer:
                                   1955 ;	program.c:496: DEBUGPORT(0x04);
      0006BA 75 82 04         [24] 1956 	mov	dpl,#0x04
      0006BD 12r14rFE         [24] 1957 	lcall	_dataout
                                   1958 ;	program.c:500: get_del_num:
      0006C0                       1959 00101$:
                                   1960 ;	program.c:501: printf("\n\rGive Valid Buffer Number to delete(1-%d) in 3 digits\n\r", (program_stats.total_buffers - 1));
      0006C0 90r00r08         [24] 1961 	mov	dptr,#(_program_stats + 0x0008)
      0006C3 E0               [24] 1962 	movx	a,@dptr
      0006C4 FE               [12] 1963 	mov	r6,a
      0006C5 A3               [24] 1964 	inc	dptr
      0006C6 E0               [24] 1965 	movx	a,@dptr
      0006C7 FF               [12] 1966 	mov	r7,a
      0006C8 1E               [12] 1967 	dec	r6
      0006C9 BE FF 01         [24] 1968 	cjne	r6,#0xff,00139$
      0006CC 1F               [12] 1969 	dec	r7
      0006CD                       1970 00139$:
      0006CD C0 06            [24] 1971 	push	ar6
      0006CF C0 07            [24] 1972 	push	ar7
      0006D1 74r18            [12] 1973 	mov	a,#___str_33
      0006D3 C0 E0            [24] 1974 	push	acc
      0006D5 74s05            [12] 1975 	mov	a,#(___str_33 >> 8)
      0006D7 C0 E0            [24] 1976 	push	acc
      0006D9 74 80            [12] 1977 	mov	a,#0x80
      0006DB C0 E0            [24] 1978 	push	acc
      0006DD 12r00r00         [24] 1979 	lcall	_printf
      0006E0 E5 81            [12] 1980 	mov	a,sp
      0006E2 24 FB            [12] 1981 	add	a,#0xfb
      0006E4 F5 81            [12] 1982 	mov	sp,a
                                   1983 ;	program.c:502: buff_number = get_number(3);
      0006E6 90 00 03         [24] 1984 	mov	dptr,#0x0003
      0006E9 12r13r4E         [24] 1985 	lcall	_get_number
      0006EC AE 82            [24] 1986 	mov	r6,dpl
      0006EE AF 83            [24] 1987 	mov	r7,dph
                                   1988 ;	program.c:504: if (buff_number > 0 && buff_number < program_stats.total_buffers)
      0006F0 C3               [12] 1989 	clr	c
      0006F1 E4               [12] 1990 	clr	a
      0006F2 9E               [12] 1991 	subb	a,r6
      0006F3 74 80            [12] 1992 	mov	a,#(0x00 ^ 0x80)
      0006F5 8F F0            [24] 1993 	mov	b,r7
      0006F7 63 F0 80         [24] 1994 	xrl	b,#0x80
      0006FA 95 F0            [12] 1995 	subb	a,b
      0006FC 50 C2            [24] 1996 	jnc	00101$
      0006FE 90r00r08         [24] 1997 	mov	dptr,#(_program_stats + 0x0008)
      000701 E0               [24] 1998 	movx	a,@dptr
      000702 FC               [12] 1999 	mov	r4,a
      000703 A3               [24] 2000 	inc	dptr
      000704 E0               [24] 2001 	movx	a,@dptr
      000705 FD               [12] 2002 	mov	r5,a
      000706 C3               [12] 2003 	clr	c
      000707 EE               [12] 2004 	mov	a,r6
      000708 9C               [12] 2005 	subb	a,r4
      000709 EF               [12] 2006 	mov	a,r7
      00070A 64 80            [12] 2007 	xrl	a,#0x80
      00070C 8D F0            [24] 2008 	mov	b,r5
      00070E 63 F0 80         [24] 2009 	xrl	b,#0x80
      000711 95 F0            [12] 2010 	subb	a,b
      000713 50 AB            [24] 2011 	jnc	00101$
                                   2012 ;	program.c:508: buff_to_free = buffers_array[buff_number].buffer_start;
      000715 90r00r00         [24] 2013 	mov	dptr,#__mulint_PARM_2
      000718 EE               [12] 2014 	mov	a,r6
      000719 F0               [24] 2015 	movx	@dptr,a
      00071A EF               [12] 2016 	mov	a,r7
      00071B A3               [24] 2017 	inc	dptr
      00071C F0               [24] 2018 	movx	@dptr,a
      00071D 90 00 0C         [24] 2019 	mov	dptr,#0x000c
      000720 C0 07            [24] 2020 	push	ar7
      000722 C0 06            [24] 2021 	push	ar6
      000724 12r00r00         [24] 2022 	lcall	__mulint
      000727 AC 82            [24] 2023 	mov	r4,dpl
      000729 AD 83            [24] 2024 	mov	r5,dph
      00072B D0 06            [24] 2025 	pop	ar6
      00072D D0 07            [24] 2026 	pop	ar7
      00072F EC               [12] 2027 	mov	a,r4
      000730 24r0A            [12] 2028 	add	a,#_buffers_array
      000732 FC               [12] 2029 	mov	r4,a
      000733 ED               [12] 2030 	mov	a,r5
      000734 34s00            [12] 2031 	addc	a,#(_buffers_array >> 8)
      000736 FD               [12] 2032 	mov	r5,a
      000737 8C 82            [24] 2033 	mov	dpl,r4
      000739 8D 83            [24] 2034 	mov	dph,r5
      00073B A3               [24] 2035 	inc	dptr
      00073C A3               [24] 2036 	inc	dptr
      00073D E0               [24] 2037 	movx	a,@dptr
      00073E F5*04            [12] 2038 	mov	_delete_buffer_sloc2_1_0,a
      000740 A3               [24] 2039 	inc	dptr
      000741 E0               [24] 2040 	movx	a,@dptr
      000742 F5*05            [12] 2041 	mov	(_delete_buffer_sloc2_1_0 + 1),a
      000744 A3               [24] 2042 	inc	dptr
      000745 E0               [24] 2043 	movx	a,@dptr
      000746 F5*06            [12] 2044 	mov	(_delete_buffer_sloc2_1_0 + 2),a
                                   2045 ;	program.c:509: buffer_freed_size = buffers_array[buff_number].buff_size;
      000748 74 08            [12] 2046 	mov	a,#0x08
      00074A 2C               [12] 2047 	add	a,r4
      00074B F5 82            [12] 2048 	mov	dpl,a
      00074D E4               [12] 2049 	clr	a
      00074E 3D               [12] 2050 	addc	a,r5
      00074F F5 83            [12] 2051 	mov	dph,a
      000751 E0               [24] 2052 	movx	a,@dptr
      000752 FC               [12] 2053 	mov	r4,a
      000753 A3               [24] 2054 	inc	dptr
      000754 E0               [24] 2055 	movx	a,@dptr
      000755 FD               [12] 2056 	mov	r5,a
                                   2057 ;	program.c:511: for (int i = 0; i < (program_stats.total_buffers - 1); i++)
      000756 E4               [12] 2058 	clr	a
      000757 F5*00            [12] 2059 	mov	_delete_buffer_sloc0_1_0,a
      000759 F5*01            [12] 2060 	mov	(_delete_buffer_sloc0_1_0 + 1),a
      00075B                       2061 00110$:
      00075B C0 04            [24] 2062 	push	ar4
      00075D C0 05            [24] 2063 	push	ar5
      00075F 90r00r08         [24] 2064 	mov	dptr,#(_program_stats + 0x0008)
      000762 E0               [24] 2065 	movx	a,@dptr
      000763 F5*02            [12] 2066 	mov	_delete_buffer_sloc1_1_0,a
      000765 A3               [24] 2067 	inc	dptr
      000766 E0               [24] 2068 	movx	a,@dptr
      000767 F5*03            [12] 2069 	mov	(_delete_buffer_sloc1_1_0 + 1),a
      000769 E5*02            [12] 2070 	mov	a,_delete_buffer_sloc1_1_0
      00076B 24 FF            [12] 2071 	add	a,#0xff
      00076D F8               [12] 2072 	mov	r0,a
      00076E E5*03            [12] 2073 	mov	a,(_delete_buffer_sloc1_1_0 + 1)
      000770 34 FF            [12] 2074 	addc	a,#0xff
      000772 FD               [12] 2075 	mov	r5,a
      000773 C3               [12] 2076 	clr	c
      000774 E5*00            [12] 2077 	mov	a,_delete_buffer_sloc0_1_0
      000776 98               [12] 2078 	subb	a,r0
      000777 E5*01            [12] 2079 	mov	a,(_delete_buffer_sloc0_1_0 + 1)
      000779 64 80            [12] 2080 	xrl	a,#0x80
      00077B 8D F0            [24] 2081 	mov	b,r5
      00077D 63 F0 80         [24] 2082 	xrl	b,#0x80
      000780 95 F0            [12] 2083 	subb	a,b
      000782 D0 05            [24] 2084 	pop	ar5
      000784 D0 04            [24] 2085 	pop	ar4
      000786 40 03            [24] 2086 	jc	00142$
      000788 02r08r39         [24] 2087 	ljmp	00104$
      00078B                       2088 00142$:
                                   2089 ;	program.c:513: if (i >= buff_number)
      00078B C3               [12] 2090 	clr	c
      00078C E5*00            [12] 2091 	mov	a,_delete_buffer_sloc0_1_0
      00078E 9E               [12] 2092 	subb	a,r6
      00078F E5*01            [12] 2093 	mov	a,(_delete_buffer_sloc0_1_0 + 1)
      000791 64 80            [12] 2094 	xrl	a,#0x80
      000793 8F F0            [24] 2095 	mov	b,r7
      000795 63 F0 80         [24] 2096 	xrl	b,#0x80
      000798 95 F0            [12] 2097 	subb	a,b
      00079A 50 03            [24] 2098 	jnc	00143$
      00079C 02r08r2E         [24] 2099 	ljmp	00111$
      00079F                       2100 00143$:
                                   2101 ;	program.c:515: buffers_array[i + 1].buffer_num = i;
      00079F C0 04            [24] 2102 	push	ar4
      0007A1 C0 05            [24] 2103 	push	ar5
      0007A3 90r00r00         [24] 2104 	mov	dptr,#__mulint_PARM_2
      0007A6 74 01            [12] 2105 	mov	a,#0x01
      0007A8 25*00            [12] 2106 	add	a,_delete_buffer_sloc0_1_0
      0007AA F0               [24] 2107 	movx	@dptr,a
      0007AB E4               [12] 2108 	clr	a
      0007AC 35*01            [12] 2109 	addc	a,(_delete_buffer_sloc0_1_0 + 1)
      0007AE A3               [24] 2110 	inc	dptr
      0007AF F0               [24] 2111 	movx	@dptr,a
      0007B0 90 00 0C         [24] 2112 	mov	dptr,#0x000c
      0007B3 C0 07            [24] 2113 	push	ar7
      0007B5 C0 06            [24] 2114 	push	ar6
      0007B7 C0 04            [24] 2115 	push	ar4
      0007B9 12r00r00         [24] 2116 	lcall	__mulint
      0007BC A8 82            [24] 2117 	mov	r0,dpl
      0007BE AD 83            [24] 2118 	mov	r5,dph
      0007C0 D0 04            [24] 2119 	pop	ar4
      0007C2 E8               [12] 2120 	mov	a,r0
      0007C3 24r0A            [12] 2121 	add	a,#_buffers_array
      0007C5 F5 82            [12] 2122 	mov	dpl,a
      0007C7 ED               [12] 2123 	mov	a,r5
      0007C8 34s00            [12] 2124 	addc	a,#(_buffers_array >> 8)
      0007CA F5 83            [12] 2125 	mov	dph,a
      0007CC E5*00            [12] 2126 	mov	a,_delete_buffer_sloc0_1_0
      0007CE F0               [24] 2127 	movx	@dptr,a
      0007CF E5*01            [12] 2128 	mov	a,(_delete_buffer_sloc0_1_0 + 1)
      0007D1 A3               [24] 2129 	inc	dptr
      0007D2 F0               [24] 2130 	movx	@dptr,a
                                   2131 ;	program.c:516: buffers_array[i] = buffers_array[i + 1];
      0007D3 90r00r00         [24] 2132 	mov	dptr,#__mulint_PARM_2
      0007D6 E5*00            [12] 2133 	mov	a,_delete_buffer_sloc0_1_0
      0007D8 F0               [24] 2134 	movx	@dptr,a
      0007D9 E5*01            [12] 2135 	mov	a,(_delete_buffer_sloc0_1_0 + 1)
      0007DB A3               [24] 2136 	inc	dptr
      0007DC F0               [24] 2137 	movx	@dptr,a
      0007DD 90 00 0C         [24] 2138 	mov	dptr,#0x000c
      0007E0 C0 05            [24] 2139 	push	ar5
      0007E2 C0 00            [24] 2140 	push	ar0
      0007E4 12r00r00         [24] 2141 	lcall	__mulint
      0007E7 AB 82            [24] 2142 	mov	r3,dpl
      0007E9 AC 83            [24] 2143 	mov	r4,dph
      0007EB D0 00            [24] 2144 	pop	ar0
      0007ED D0 05            [24] 2145 	pop	ar5
      0007EF EB               [12] 2146 	mov	a,r3
      0007F0 24r0A            [12] 2147 	add	a,#_buffers_array
      0007F2 FB               [12] 2148 	mov	r3,a
      0007F3 EC               [12] 2149 	mov	a,r4
      0007F4 34s00            [12] 2150 	addc	a,#(_buffers_array >> 8)
      0007F6 FC               [12] 2151 	mov	r4,a
      0007F7 7A 00            [12] 2152 	mov	r2,#0x00
      0007F9 E8               [12] 2153 	mov	a,r0
      0007FA 24r0A            [12] 2154 	add	a,#_buffers_array
      0007FC F8               [12] 2155 	mov	r0,a
      0007FD ED               [12] 2156 	mov	a,r5
      0007FE 34s00            [12] 2157 	addc	a,#(_buffers_array >> 8)
      000800 FD               [12] 2158 	mov	r5,a
      000801 90r00r00         [24] 2159 	mov	dptr,#___memcpy_PARM_2
      000804 E8               [12] 2160 	mov	a,r0
      000805 F0               [24] 2161 	movx	@dptr,a
      000806 ED               [12] 2162 	mov	a,r5
      000807 A3               [24] 2163 	inc	dptr
      000808 F0               [24] 2164 	movx	@dptr,a
      000809 E4               [12] 2165 	clr	a
      00080A A3               [24] 2166 	inc	dptr
      00080B F0               [24] 2167 	movx	@dptr,a
      00080C 90r00r00         [24] 2168 	mov	dptr,#___memcpy_PARM_3
      00080F 74 0C            [12] 2169 	mov	a,#0x0c
      000811 F0               [24] 2170 	movx	@dptr,a
      000812 E4               [12] 2171 	clr	a
      000813 A3               [24] 2172 	inc	dptr
      000814 F0               [24] 2173 	movx	@dptr,a
      000815 8B 82            [24] 2174 	mov	dpl,r3
      000817 8C 83            [24] 2175 	mov	dph,r4
      000819 8A F0            [24] 2176 	mov	b,r2
      00081B C0 05            [24] 2177 	push	ar5
      00081D C0 04            [24] 2178 	push	ar4
      00081F 12r00r00         [24] 2179 	lcall	___memcpy
      000822 D0 04            [24] 2180 	pop	ar4
      000824 D0 05            [24] 2181 	pop	ar5
      000826 D0 06            [24] 2182 	pop	ar6
      000828 D0 07            [24] 2183 	pop	ar7
                                   2184 ;	program.c:529: goto get_del_num;
      00082A D0 05            [24] 2185 	pop	ar5
      00082C D0 04            [24] 2186 	pop	ar4
                                   2187 ;	program.c:516: buffers_array[i] = buffers_array[i + 1];
      00082E                       2188 00111$:
                                   2189 ;	program.c:511: for (int i = 0; i < (program_stats.total_buffers - 1); i++)
      00082E 05*00            [12] 2190 	inc	_delete_buffer_sloc0_1_0
      000830 E4               [12] 2191 	clr	a
      000831 B5*00 02         [24] 2192 	cjne	a,_delete_buffer_sloc0_1_0,00144$
      000834 05*01            [12] 2193 	inc	(_delete_buffer_sloc0_1_0 + 1)
      000836                       2194 00144$:
      000836 02r07r5B         [24] 2195 	ljmp	00110$
      000839                       2196 00104$:
                                   2197 ;	program.c:520: program_stats.total_buffers -= 1;
      000839 E5*02            [12] 2198 	mov	a,_delete_buffer_sloc1_1_0
      00083B 24 FF            [12] 2199 	add	a,#0xff
      00083D FA               [12] 2200 	mov	r2,a
      00083E E5*03            [12] 2201 	mov	a,(_delete_buffer_sloc1_1_0 + 1)
      000840 34 FF            [12] 2202 	addc	a,#0xff
      000842 FB               [12] 2203 	mov	r3,a
      000843 90r00r08         [24] 2204 	mov	dptr,#(_program_stats + 0x0008)
      000846 EA               [12] 2205 	mov	a,r2
      000847 F0               [24] 2206 	movx	@dptr,a
      000848 EB               [12] 2207 	mov	a,r3
      000849 A3               [24] 2208 	inc	dptr
      00084A F0               [24] 2209 	movx	@dptr,a
                                   2210 ;	program.c:521: program_stats.allocated_heap -= buffer_freed_size;
      00084B 90r00r02         [24] 2211 	mov	dptr,#(_program_stats + 0x0002)
      00084E E0               [24] 2212 	movx	a,@dptr
      00084F FA               [12] 2213 	mov	r2,a
      000850 A3               [24] 2214 	inc	dptr
      000851 E0               [24] 2215 	movx	a,@dptr
      000852 FB               [12] 2216 	mov	r3,a
      000853 EA               [12] 2217 	mov	a,r2
      000854 C3               [12] 2218 	clr	c
      000855 9C               [12] 2219 	subb	a,r4
      000856 FC               [12] 2220 	mov	r4,a
      000857 EB               [12] 2221 	mov	a,r3
      000858 9D               [12] 2222 	subb	a,r5
      000859 FD               [12] 2223 	mov	r5,a
      00085A 90r00r02         [24] 2224 	mov	dptr,#(_program_stats + 0x0002)
      00085D EC               [12] 2225 	mov	a,r4
      00085E F0               [24] 2226 	movx	@dptr,a
      00085F ED               [12] 2227 	mov	a,r5
      000860 A3               [24] 2228 	inc	dptr
      000861 F0               [24] 2229 	movx	@dptr,a
                                   2230 ;	program.c:523: free(buff_to_free);
      000862 AB*04            [24] 2231 	mov	r3,_delete_buffer_sloc2_1_0
      000864 AC*05            [24] 2232 	mov	r4,(_delete_buffer_sloc2_1_0 + 1)
      000866 AD*06            [24] 2233 	mov	r5,(_delete_buffer_sloc2_1_0 + 2)
      000868 8B 82            [24] 2234 	mov	dpl,r3
      00086A 8C 83            [24] 2235 	mov	dph,r4
      00086C 8D F0            [24] 2236 	mov	b,r5
      00086E C0 07            [24] 2237 	push	ar7
      000870 C0 06            [24] 2238 	push	ar6
      000872 12r00r00         [24] 2239 	lcall	_free
      000875 D0 06            [24] 2240 	pop	ar6
      000877 D0 07            [24] 2241 	pop	ar7
                                   2242 ;	program.c:524: printf("Buffer %d Successfully Deleted.. \n\r", buff_number);
      000879 C0 06            [24] 2243 	push	ar6
      00087B C0 07            [24] 2244 	push	ar7
      00087D 74r51            [12] 2245 	mov	a,#___str_34
      00087F C0 E0            [24] 2246 	push	acc
      000881 74s05            [12] 2247 	mov	a,#(___str_34 >> 8)
      000883 C0 E0            [24] 2248 	push	acc
      000885 74 80            [12] 2249 	mov	a,#0x80
      000887 C0 E0            [24] 2250 	push	acc
      000889 12r00r00         [24] 2251 	lcall	_printf
      00088C E5 81            [12] 2252 	mov	a,sp
      00088E 24 FB            [12] 2253 	add	a,#0xfb
      000890 F5 81            [12] 2254 	mov	sp,a
                                   2255 ;	program.c:525: return 0;
      000892 90 00 00         [24] 2256 	mov	dptr,#0x0000
                                   2257 ;	program.c:529: goto get_del_num;
                                   2258 ;	program.c:531: }
      000895 22               [24] 2259 	ret
                                   2260 ;------------------------------------------------------------
                                   2261 ;Allocation info for local variables in function 'print_pca_menu'
                                   2262 ;------------------------------------------------------------
                                   2263 ;	program.c:538: void print_pca_menu()
                                   2264 ;	-----------------------------------------
                                   2265 ;	 function print_pca_menu
                                   2266 ;	-----------------------------------------
      000896                       2267 _print_pca_menu:
                                   2268 ;	program.c:540: DEBUGPORT(0x55);
      000896 75 82 55         [24] 2269 	mov	dpl,#0x55
      000899 12r14rFE         [24] 2270 	lcall	_dataout
                                   2271 ;	program.c:541: printf("\n\n\r^^^^^^^^^^^^^^^^^^^-PCA-MENU-^^^^^^^^^^^^^^^^^^^^^^^^^^ \n\n\r");
      00089C 74r75            [12] 2272 	mov	a,#___str_35
      00089E C0 E0            [24] 2273 	push	acc
      0008A0 74s05            [12] 2274 	mov	a,#(___str_35 >> 8)
      0008A2 C0 E0            [24] 2275 	push	acc
      0008A4 74 80            [12] 2276 	mov	a,#0x80
      0008A6 C0 E0            [24] 2277 	push	acc
      0008A8 12r00r00         [24] 2278 	lcall	_printf
      0008AB 15 81            [12] 2279 	dec	sp
      0008AD 15 81            [12] 2280 	dec	sp
      0008AF 15 81            [12] 2281 	dec	sp
                                   2282 ;	program.c:542: printf("'F' -> Falling Edge Capture Mode\n\r");
      0008B1 74rB4            [12] 2283 	mov	a,#___str_36
      0008B3 C0 E0            [24] 2284 	push	acc
      0008B5 74s05            [12] 2285 	mov	a,#(___str_36 >> 8)
      0008B7 C0 E0            [24] 2286 	push	acc
      0008B9 74 80            [12] 2287 	mov	a,#0x80
      0008BB C0 E0            [24] 2288 	push	acc
      0008BD 12r00r00         [24] 2289 	lcall	_printf
      0008C0 15 81            [12] 2290 	dec	sp
      0008C2 15 81            [12] 2291 	dec	sp
      0008C4 15 81            [12] 2292 	dec	sp
                                   2293 ;	program.c:543: printf("'S' -> Software Timer Mode\n\r");
      0008C6 74rD7            [12] 2294 	mov	a,#___str_37
      0008C8 C0 E0            [24] 2295 	push	acc
      0008CA 74s05            [12] 2296 	mov	a,#(___str_37 >> 8)
      0008CC C0 E0            [24] 2297 	push	acc
      0008CE 74 80            [12] 2298 	mov	a,#0x80
      0008D0 C0 E0            [24] 2299 	push	acc
      0008D2 12r00r00         [24] 2300 	lcall	_printf
      0008D5 15 81            [12] 2301 	dec	sp
      0008D7 15 81            [12] 2302 	dec	sp
      0008D9 15 81            [12] 2303 	dec	sp
                                   2304 ;	program.c:544: printf("'H' -> High Speed Output Mode\n\r");
      0008DB 74rF4            [12] 2305 	mov	a,#___str_38
      0008DD C0 E0            [24] 2306 	push	acc
      0008DF 74s05            [12] 2307 	mov	a,#(___str_38 >> 8)
      0008E1 C0 E0            [24] 2308 	push	acc
      0008E3 74 80            [12] 2309 	mov	a,#0x80
      0008E5 C0 E0            [24] 2310 	push	acc
      0008E7 12r00r00         [24] 2311 	lcall	_printf
      0008EA 15 81            [12] 2312 	dec	sp
      0008EC 15 81            [12] 2313 	dec	sp
      0008EE 15 81            [12] 2314 	dec	sp
                                   2315 ;	program.c:545: printf("'P' -> PWM Mode \n\r");
      0008F0 74r14            [12] 2316 	mov	a,#___str_39
      0008F2 C0 E0            [24] 2317 	push	acc
      0008F4 74s06            [12] 2318 	mov	a,#(___str_39 >> 8)
      0008F6 C0 E0            [24] 2319 	push	acc
      0008F8 74 80            [12] 2320 	mov	a,#0x80
      0008FA C0 E0            [24] 2321 	push	acc
      0008FC 12r00r00         [24] 2322 	lcall	_printf
      0008FF 15 81            [12] 2323 	dec	sp
      000901 15 81            [12] 2324 	dec	sp
      000903 15 81            [12] 2325 	dec	sp
                                   2326 ;	program.c:546: printf("'W' -> Watchdog Timer Mode\n\r");
      000905 74r27            [12] 2327 	mov	a,#___str_40
      000907 C0 E0            [24] 2328 	push	acc
      000909 74s06            [12] 2329 	mov	a,#(___str_40 >> 8)
      00090B C0 E0            [24] 2330 	push	acc
      00090D 74 80            [12] 2331 	mov	a,#0x80
      00090F C0 E0            [24] 2332 	push	acc
      000911 12r00r00         [24] 2333 	lcall	_printf
      000914 15 81            [12] 2334 	dec	sp
      000916 15 81            [12] 2335 	dec	sp
      000918 15 81            [12] 2336 	dec	sp
                                   2337 ;	program.c:547: printf("'I' -> Idle Mode with PWM\n\r");
      00091A 74r44            [12] 2338 	mov	a,#___str_41
      00091C C0 E0            [24] 2339 	push	acc
      00091E 74s06            [12] 2340 	mov	a,#(___str_41 >> 8)
      000920 C0 E0            [24] 2341 	push	acc
      000922 74 80            [12] 2342 	mov	a,#0x80
      000924 C0 E0            [24] 2343 	push	acc
      000926 12r00r00         [24] 2344 	lcall	_printf
      000929 15 81            [12] 2345 	dec	sp
      00092B 15 81            [12] 2346 	dec	sp
      00092D 15 81            [12] 2347 	dec	sp
                                   2348 ;	program.c:548: printf("'L' -> Change Prescalar to lowest frequency\n\r");
      00092F 74r60            [12] 2349 	mov	a,#___str_42
      000931 C0 E0            [24] 2350 	push	acc
      000933 74s06            [12] 2351 	mov	a,#(___str_42 >> 8)
      000935 C0 E0            [24] 2352 	push	acc
      000937 74 80            [12] 2353 	mov	a,#0x80
      000939 C0 E0            [24] 2354 	push	acc
      00093B 12r00r00         [24] 2355 	lcall	_printf
      00093E 15 81            [12] 2356 	dec	sp
      000940 15 81            [12] 2357 	dec	sp
      000942 15 81            [12] 2358 	dec	sp
                                   2359 ;	program.c:549: printf("'U' -> Hardware Watchdog Timer\n\r");
      000944 74r8E            [12] 2360 	mov	a,#___str_43
      000946 C0 E0            [24] 2361 	push	acc
      000948 74s06            [12] 2362 	mov	a,#(___str_43 >> 8)
      00094A C0 E0            [24] 2363 	push	acc
      00094C 74 80            [12] 2364 	mov	a,#0x80
      00094E C0 E0            [24] 2365 	push	acc
      000950 12r00r00         [24] 2366 	lcall	_printf
      000953 15 81            [12] 2367 	dec	sp
      000955 15 81            [12] 2368 	dec	sp
      000957 15 81            [12] 2369 	dec	sp
                                   2370 ;	program.c:550: printf("'D' -> Power Down Mode\n\n\r");
      000959 74rAF            [12] 2371 	mov	a,#___str_44
      00095B C0 E0            [24] 2372 	push	acc
      00095D 74s06            [12] 2373 	mov	a,#(___str_44 >> 8)
      00095F C0 E0            [24] 2374 	push	acc
      000961 74 80            [12] 2375 	mov	a,#0x80
      000963 C0 E0            [24] 2376 	push	acc
      000965 12r00r00         [24] 2377 	lcall	_printf
      000968 15 81            [12] 2378 	dec	sp
      00096A 15 81            [12] 2379 	dec	sp
      00096C 15 81            [12] 2380 	dec	sp
                                   2381 ;	program.c:552: printf("'M' -> Go to Main Menu \n\n\r");
      00096E 74rC9            [12] 2382 	mov	a,#___str_45
      000970 C0 E0            [24] 2383 	push	acc
      000972 74s06            [12] 2384 	mov	a,#(___str_45 >> 8)
      000974 C0 E0            [24] 2385 	push	acc
      000976 74 80            [12] 2386 	mov	a,#0x80
      000978 C0 E0            [24] 2387 	push	acc
      00097A 12r00r00         [24] 2388 	lcall	_printf
      00097D 15 81            [12] 2389 	dec	sp
      00097F 15 81            [12] 2390 	dec	sp
      000981 15 81            [12] 2391 	dec	sp
                                   2392 ;	program.c:553: }
      000983 22               [24] 2393 	ret
                                   2394 ;------------------------------------------------------------
                                   2395 ;Allocation info for local variables in function 'print_heap_menu'
                                   2396 ;------------------------------------------------------------
                                   2397 ;	program.c:560: void print_heap_menu()
                                   2398 ;	-----------------------------------------
                                   2399 ;	 function print_heap_menu
                                   2400 ;	-----------------------------------------
      000984                       2401 _print_heap_menu:
                                   2402 ;	program.c:562: DEBUGPORT(0x05);
      000984 75 82 05         [24] 2403 	mov	dpl,#0x05
      000987 12r14rFE         [24] 2404 	lcall	_dataout
                                   2405 ;	program.c:563: printf("\n\n\r^^^^^^^^^^^^^^^^^^^-HEAP-MENU-^^^^^^^^^^^^^^^^^^^^^^^^^^ \n\n\r");
      00098A 74rE4            [12] 2406 	mov	a,#___str_46
      00098C C0 E0            [24] 2407 	push	acc
      00098E 74s06            [12] 2408 	mov	a,#(___str_46 >> 8)
      000990 C0 E0            [24] 2409 	push	acc
      000992 74 80            [12] 2410 	mov	a,#0x80
      000994 C0 E0            [24] 2411 	push	acc
      000996 12r00r00         [24] 2412 	lcall	_printf
      000999 15 81            [12] 2413 	dec	sp
      00099B 15 81            [12] 2414 	dec	sp
      00099D 15 81            [12] 2415 	dec	sp
                                   2416 ;	program.c:564: printf("You can enter characters or use commands from below \n\r");
      00099F 74r24            [12] 2417 	mov	a,#___str_47
      0009A1 C0 E0            [24] 2418 	push	acc
      0009A3 74s07            [12] 2419 	mov	a,#(___str_47 >> 8)
      0009A5 C0 E0            [24] 2420 	push	acc
      0009A7 74 80            [12] 2421 	mov	a,#0x80
      0009A9 C0 E0            [24] 2422 	push	acc
      0009AB 12r00r00         [24] 2423 	lcall	_printf
      0009AE 15 81            [12] 2424 	dec	sp
      0009B0 15 81            [12] 2425 	dec	sp
      0009B2 15 81            [12] 2426 	dec	sp
                                   2427 ;	program.c:565: printf("'?' -> Show heap status, dump & clear Buffer 0 \n\r");
      0009B4 74r5B            [12] 2428 	mov	a,#___str_48
      0009B6 C0 E0            [24] 2429 	push	acc
      0009B8 74s07            [12] 2430 	mov	a,#(___str_48 >> 8)
      0009BA C0 E0            [24] 2431 	push	acc
      0009BC 74 80            [12] 2432 	mov	a,#0x80
      0009BE C0 E0            [24] 2433 	push	acc
      0009C0 12r00r00         [24] 2434 	lcall	_printf
      0009C3 15 81            [12] 2435 	dec	sp
      0009C5 15 81            [12] 2436 	dec	sp
      0009C7 15 81            [12] 2437 	dec	sp
                                   2438 ;	program.c:566: printf("'+' -> Add a new Buffer\n\r");
      0009C9 74r8D            [12] 2439 	mov	a,#___str_49
      0009CB C0 E0            [24] 2440 	push	acc
      0009CD 74s07            [12] 2441 	mov	a,#(___str_49 >> 8)
      0009CF C0 E0            [24] 2442 	push	acc
      0009D1 74 80            [12] 2443 	mov	a,#0x80
      0009D3 C0 E0            [24] 2444 	push	acc
      0009D5 12r00r00         [24] 2445 	lcall	_printf
      0009D8 15 81            [12] 2446 	dec	sp
      0009DA 15 81            [12] 2447 	dec	sp
      0009DC 15 81            [12] 2448 	dec	sp
                                   2449 ;	program.c:567: printf("'-' -> Delete existing Buffer\n\r");
      0009DE 74rA7            [12] 2450 	mov	a,#___str_50
      0009E0 C0 E0            [24] 2451 	push	acc
      0009E2 74s07            [12] 2452 	mov	a,#(___str_50 >> 8)
      0009E4 C0 E0            [24] 2453 	push	acc
      0009E6 74 80            [12] 2454 	mov	a,#0x80
      0009E8 C0 E0            [24] 2455 	push	acc
      0009EA 12r00r00         [24] 2456 	lcall	_printf
      0009ED 15 81            [12] 2457 	dec	sp
      0009EF 15 81            [12] 2458 	dec	sp
      0009F1 15 81            [12] 2459 	dec	sp
                                   2460 ;	program.c:568: printf("'=' -> Dump Buffer 0 in hex\n\r");
      0009F3 74rC7            [12] 2461 	mov	a,#___str_51
      0009F5 C0 E0            [24] 2462 	push	acc
      0009F7 74s07            [12] 2463 	mov	a,#(___str_51 >> 8)
      0009F9 C0 E0            [24] 2464 	push	acc
      0009FB 74 80            [12] 2465 	mov	a,#0x80
      0009FD C0 E0            [24] 2466 	push	acc
      0009FF 12r00r00         [24] 2467 	lcall	_printf
      000A02 15 81            [12] 2468 	dec	sp
      000A04 15 81            [12] 2469 	dec	sp
      000A06 15 81            [12] 2470 	dec	sp
                                   2471 ;	program.c:569: printf("'@' -> Free all Heap & begin again\n\n\r");
      000A08 74rE5            [12] 2472 	mov	a,#___str_52
      000A0A C0 E0            [24] 2473 	push	acc
      000A0C 74s07            [12] 2474 	mov	a,#(___str_52 >> 8)
      000A0E C0 E0            [24] 2475 	push	acc
      000A10 74 80            [12] 2476 	mov	a,#0x80
      000A12 C0 E0            [24] 2477 	push	acc
      000A14 12r00r00         [24] 2478 	lcall	_printf
      000A17 15 81            [12] 2479 	dec	sp
      000A19 15 81            [12] 2480 	dec	sp
      000A1B 15 81            [12] 2481 	dec	sp
                                   2482 ;	program.c:570: printf("'M' -> Go to Main Menu \n\n\r");
      000A1D 74rC9            [12] 2483 	mov	a,#___str_45
      000A1F C0 E0            [24] 2484 	push	acc
      000A21 74s06            [12] 2485 	mov	a,#(___str_45 >> 8)
      000A23 C0 E0            [24] 2486 	push	acc
      000A25 74 80            [12] 2487 	mov	a,#0x80
      000A27 C0 E0            [24] 2488 	push	acc
      000A29 12r00r00         [24] 2489 	lcall	_printf
      000A2C 15 81            [12] 2490 	dec	sp
      000A2E 15 81            [12] 2491 	dec	sp
      000A30 15 81            [12] 2492 	dec	sp
                                   2493 ;	program.c:571: }
      000A32 22               [24] 2494 	ret
                                   2495 ;------------------------------------------------------------
                                   2496 ;Allocation info for local variables in function 'create_new_buffer'
                                   2497 ;------------------------------------------------------------
                                   2498 ;buff_size                 Allocated with name '_create_new_buffer_buff_size_65537_113'
                                   2499 ;buff                      Allocated with name '_create_new_buffer_buff_65537_113'
                                   2500 ;------------------------------------------------------------
                                   2501 ;	program.c:579: int create_new_buffer()
                                   2502 ;	-----------------------------------------
                                   2503 ;	 function create_new_buffer
                                   2504 ;	-----------------------------------------
      000A33                       2505 _create_new_buffer:
                                   2506 ;	program.c:581: DEBUGPORT(0x06);
      000A33 75 82 06         [24] 2507 	mov	dpl,#0x06
      000A36 12r14rFE         [24] 2508 	lcall	_dataout
                                   2509 ;	program.c:584: if (program_stats.allocated_heap == program_stats.total_heap_size)
      000A39 90r00r02         [24] 2510 	mov	dptr,#(_program_stats + 0x0002)
      000A3C E0               [24] 2511 	movx	a,@dptr
      000A3D FE               [12] 2512 	mov	r6,a
      000A3E A3               [24] 2513 	inc	dptr
      000A3F E0               [24] 2514 	movx	a,@dptr
      000A40 FF               [12] 2515 	mov	r7,a
      000A41 90r00r00         [24] 2516 	mov	dptr,#_program_stats
      000A44 E0               [24] 2517 	movx	a,@dptr
      000A45 FC               [12] 2518 	mov	r4,a
      000A46 A3               [24] 2519 	inc	dptr
      000A47 E0               [24] 2520 	movx	a,@dptr
      000A48 FD               [12] 2521 	mov	r5,a
      000A49 EE               [12] 2522 	mov	a,r6
      000A4A B5 04 07         [24] 2523 	cjne	a,ar4,00133$
      000A4D EF               [12] 2524 	mov	a,r7
      000A4E B5 05 03         [24] 2525 	cjne	a,ar5,00133$
      000A51 02r0Br94         [24] 2526 	ljmp	00111$
      000A54                       2527 00133$:
                                   2528 ;	program.c:587: get_new_buff:
      000A54                       2529 00103$:
                                   2530 ;	program.c:588: printf("\n\rGive Valid Buffer Size(030-300):");
      000A54 74r0B            [12] 2531 	mov	a,#___str_53
      000A56 C0 E0            [24] 2532 	push	acc
      000A58 74s08            [12] 2533 	mov	a,#(___str_53 >> 8)
      000A5A C0 E0            [24] 2534 	push	acc
      000A5C 74 80            [12] 2535 	mov	a,#0x80
      000A5E C0 E0            [24] 2536 	push	acc
      000A60 12r00r00         [24] 2537 	lcall	_printf
      000A63 15 81            [12] 2538 	dec	sp
      000A65 15 81            [12] 2539 	dec	sp
      000A67 15 81            [12] 2540 	dec	sp
                                   2541 ;	program.c:589: buff_size = get_number(3);
      000A69 90 00 03         [24] 2542 	mov	dptr,#0x0003
      000A6C 12r13r4E         [24] 2543 	lcall	_get_number
      000A6F AE 82            [24] 2544 	mov	r6,dpl
      000A71 AF 83            [24] 2545 	mov	r7,dph
                                   2546 ;	program.c:590: if (buff_size >= 30 && buff_size <= 300)
      000A73 C3               [12] 2547 	clr	c
      000A74 EE               [12] 2548 	mov	a,r6
      000A75 94 1E            [12] 2549 	subb	a,#0x1e
      000A77 EF               [12] 2550 	mov	a,r7
      000A78 64 80            [12] 2551 	xrl	a,#0x80
      000A7A 94 80            [12] 2552 	subb	a,#0x80
      000A7C 40 D6            [24] 2553 	jc	00103$
      000A7E 74 2C            [12] 2554 	mov	a,#0x2c
      000A80 9E               [12] 2555 	subb	a,r6
      000A81 74 81            [12] 2556 	mov	a,#(0x01 ^ 0x80)
      000A83 8F F0            [24] 2557 	mov	b,r7
      000A85 63 F0 80         [24] 2558 	xrl	b,#0x80
      000A88 95 F0            [12] 2559 	subb	a,b
      000A8A 40 C8            [24] 2560 	jc	00103$
                                   2561 ;	program.c:592: buff.buffer_start = malloc(buff_size);
      000A8C 8E 82            [24] 2562 	mov	dpl,r6
      000A8E 8F 83            [24] 2563 	mov	dph,r7
      000A90 C0 07            [24] 2564 	push	ar7
      000A92 C0 06            [24] 2565 	push	ar6
      000A94 12r00r00         [24] 2566 	lcall	_malloc
      000A97 AC 82            [24] 2567 	mov	r4,dpl
      000A99 AD 83            [24] 2568 	mov	r5,dph
      000A9B D0 06            [24] 2569 	pop	ar6
      000A9D D0 07            [24] 2570 	pop	ar7
      000A9F 7B 00            [12] 2571 	mov	r3,#0x00
      000AA1 90r01r3D         [24] 2572 	mov	dptr,#(_create_new_buffer_buff_65537_113 + 0x0002)
      000AA4 EC               [12] 2573 	mov	a,r4
      000AA5 F0               [24] 2574 	movx	@dptr,a
      000AA6 ED               [12] 2575 	mov	a,r5
      000AA7 A3               [24] 2576 	inc	dptr
      000AA8 F0               [24] 2577 	movx	@dptr,a
      000AA9 EB               [12] 2578 	mov	a,r3
      000AAA A3               [24] 2579 	inc	dptr
      000AAB F0               [24] 2580 	movx	@dptr,a
                                   2581 ;	program.c:593: if (buff.buffer_start == NULL)
      000AAC EC               [12] 2582 	mov	a,r4
      000AAD 4D               [12] 2583 	orl	a,r5
      000AAE 70 18            [24] 2584 	jnz	00105$
                                   2585 ;	program.c:595: printf("Failed, give smaller buffer\n\r");
      000AB0 74r2E            [12] 2586 	mov	a,#___str_54
      000AB2 C0 E0            [24] 2587 	push	acc
      000AB4 74s08            [12] 2588 	mov	a,#(___str_54 >> 8)
      000AB6 C0 E0            [24] 2589 	push	acc
      000AB8 74 80            [12] 2590 	mov	a,#0x80
      000ABA C0 E0            [24] 2591 	push	acc
      000ABC 12r00r00         [24] 2592 	lcall	_printf
      000ABF 15 81            [12] 2593 	dec	sp
      000AC1 15 81            [12] 2594 	dec	sp
      000AC3 15 81            [12] 2595 	dec	sp
      000AC5 02r0Br90         [24] 2596 	ljmp	00106$
      000AC8                       2597 00105$:
                                   2598 ;	program.c:599: printf("\n\n\r####SUCCESS, BUFFER Created####\n\n\r");
      000AC8 C0 07            [24] 2599 	push	ar7
      000ACA C0 06            [24] 2600 	push	ar6
      000ACC 74r4C            [12] 2601 	mov	a,#___str_55
      000ACE C0 E0            [24] 2602 	push	acc
      000AD0 74s08            [12] 2603 	mov	a,#(___str_55 >> 8)
      000AD2 C0 E0            [24] 2604 	push	acc
      000AD4 74 80            [12] 2605 	mov	a,#0x80
      000AD6 C0 E0            [24] 2606 	push	acc
      000AD8 12r00r00         [24] 2607 	lcall	_printf
      000ADB 15 81            [12] 2608 	dec	sp
      000ADD 15 81            [12] 2609 	dec	sp
      000ADF 15 81            [12] 2610 	dec	sp
      000AE1 D0 06            [24] 2611 	pop	ar6
      000AE3 D0 07            [24] 2612 	pop	ar7
                                   2613 ;	program.c:601: program_stats.allocated_heap += buff_size;
      000AE5 90r00r02         [24] 2614 	mov	dptr,#(_program_stats + 0x0002)
      000AE8 E0               [24] 2615 	movx	a,@dptr
      000AE9 FC               [12] 2616 	mov	r4,a
      000AEA A3               [24] 2617 	inc	dptr
      000AEB E0               [24] 2618 	movx	a,@dptr
      000AEC FD               [12] 2619 	mov	r5,a
      000AED EE               [12] 2620 	mov	a,r6
      000AEE 2C               [12] 2621 	add	a,r4
      000AEF FC               [12] 2622 	mov	r4,a
      000AF0 EF               [12] 2623 	mov	a,r7
      000AF1 3D               [12] 2624 	addc	a,r5
      000AF2 FD               [12] 2625 	mov	r5,a
      000AF3 90r00r02         [24] 2626 	mov	dptr,#(_program_stats + 0x0002)
      000AF6 EC               [12] 2627 	mov	a,r4
      000AF7 F0               [24] 2628 	movx	@dptr,a
      000AF8 ED               [12] 2629 	mov	a,r5
      000AF9 A3               [24] 2630 	inc	dptr
      000AFA F0               [24] 2631 	movx	@dptr,a
                                   2632 ;	program.c:602: buff.buff_size = buff_size;
      000AFB 90r01r43         [24] 2633 	mov	dptr,#(_create_new_buffer_buff_65537_113 + 0x0008)
      000AFE EE               [12] 2634 	mov	a,r6
      000AFF F0               [24] 2635 	movx	@dptr,a
      000B00 EF               [12] 2636 	mov	a,r7
      000B01 A3               [24] 2637 	inc	dptr
      000B02 F0               [24] 2638 	movx	@dptr,a
                                   2639 ;	program.c:603: buff.buffer_num = program_stats.total_buffers;
      000B03 90r00r08         [24] 2640 	mov	dptr,#(_program_stats + 0x0008)
      000B06 E0               [24] 2641 	movx	a,@dptr
      000B07 FC               [12] 2642 	mov	r4,a
      000B08 A3               [24] 2643 	inc	dptr
      000B09 E0               [24] 2644 	movx	a,@dptr
      000B0A FD               [12] 2645 	mov	r5,a
      000B0B 90r01r3B         [24] 2646 	mov	dptr,#_create_new_buffer_buff_65537_113
      000B0E EC               [12] 2647 	mov	a,r4
      000B0F F0               [24] 2648 	movx	@dptr,a
      000B10 ED               [12] 2649 	mov	a,r5
      000B11 A3               [24] 2650 	inc	dptr
      000B12 F0               [24] 2651 	movx	@dptr,a
                                   2652 ;	program.c:604: buff.buffer_end = buff.buffer_start + buff_size;
      000B13 90r01r3D         [24] 2653 	mov	dptr,#(_create_new_buffer_buff_65537_113 + 0x0002)
      000B16 E0               [24] 2654 	movx	a,@dptr
      000B17 FB               [12] 2655 	mov	r3,a
      000B18 A3               [24] 2656 	inc	dptr
      000B19 E0               [24] 2657 	movx	a,@dptr
      000B1A FC               [12] 2658 	mov	r4,a
      000B1B A3               [24] 2659 	inc	dptr
      000B1C E0               [24] 2660 	movx	a,@dptr
      000B1D FD               [12] 2661 	mov	r5,a
      000B1E EE               [12] 2662 	mov	a,r6
      000B1F 2B               [12] 2663 	add	a,r3
      000B20 FE               [12] 2664 	mov	r6,a
      000B21 EF               [12] 2665 	mov	a,r7
      000B22 3C               [12] 2666 	addc	a,r4
      000B23 FF               [12] 2667 	mov	r7,a
      000B24 8D 02            [24] 2668 	mov	ar2,r5
      000B26 90r01r40         [24] 2669 	mov	dptr,#(_create_new_buffer_buff_65537_113 + 0x0005)
      000B29 EE               [12] 2670 	mov	a,r6
      000B2A F0               [24] 2671 	movx	@dptr,a
      000B2B EF               [12] 2672 	mov	a,r7
      000B2C A3               [24] 2673 	inc	dptr
      000B2D F0               [24] 2674 	movx	@dptr,a
      000B2E EA               [12] 2675 	mov	a,r2
      000B2F A3               [24] 2676 	inc	dptr
      000B30 F0               [24] 2677 	movx	@dptr,a
                                   2678 ;	program.c:605: buff.num_char = 0;
      000B31 90r01r45         [24] 2679 	mov	dptr,#(_create_new_buffer_buff_65537_113 + 0x000a)
      000B34 E4               [12] 2680 	clr	a
      000B35 F0               [24] 2681 	movx	@dptr,a
      000B36 A3               [24] 2682 	inc	dptr
      000B37 F0               [24] 2683 	movx	@dptr,a
                                   2684 ;	program.c:607: buffers_array[program_stats.total_buffers] = buff;
      000B38 90r00r08         [24] 2685 	mov	dptr,#(_program_stats + 0x0008)
      000B3B E0               [24] 2686 	movx	a,@dptr
      000B3C FE               [12] 2687 	mov	r6,a
      000B3D A3               [24] 2688 	inc	dptr
      000B3E E0               [24] 2689 	movx	a,@dptr
      000B3F FF               [12] 2690 	mov	r7,a
      000B40 90r00r00         [24] 2691 	mov	dptr,#__mulint_PARM_2
      000B43 EE               [12] 2692 	mov	a,r6
      000B44 F0               [24] 2693 	movx	@dptr,a
      000B45 EF               [12] 2694 	mov	a,r7
      000B46 A3               [24] 2695 	inc	dptr
      000B47 F0               [24] 2696 	movx	@dptr,a
      000B48 90 00 0C         [24] 2697 	mov	dptr,#0x000c
      000B4B 12r00r00         [24] 2698 	lcall	__mulint
      000B4E AE 82            [24] 2699 	mov	r6,dpl
      000B50 AF 83            [24] 2700 	mov	r7,dph
      000B52 EE               [12] 2701 	mov	a,r6
      000B53 24r0A            [12] 2702 	add	a,#_buffers_array
      000B55 FE               [12] 2703 	mov	r6,a
      000B56 EF               [12] 2704 	mov	a,r7
      000B57 34s00            [12] 2705 	addc	a,#(_buffers_array >> 8)
      000B59 FF               [12] 2706 	mov	r7,a
      000B5A 7D 00            [12] 2707 	mov	r5,#0x00
      000B5C 90r00r00         [24] 2708 	mov	dptr,#___memcpy_PARM_2
      000B5F 74r3B            [12] 2709 	mov	a,#_create_new_buffer_buff_65537_113
      000B61 F0               [24] 2710 	movx	@dptr,a
      000B62 74s01            [12] 2711 	mov	a,#(_create_new_buffer_buff_65537_113 >> 8)
      000B64 A3               [24] 2712 	inc	dptr
      000B65 F0               [24] 2713 	movx	@dptr,a
      000B66 E4               [12] 2714 	clr	a
      000B67 A3               [24] 2715 	inc	dptr
      000B68 F0               [24] 2716 	movx	@dptr,a
      000B69 90r00r00         [24] 2717 	mov	dptr,#___memcpy_PARM_3
      000B6C 74 0C            [12] 2718 	mov	a,#0x0c
      000B6E F0               [24] 2719 	movx	@dptr,a
      000B6F E4               [12] 2720 	clr	a
      000B70 A3               [24] 2721 	inc	dptr
      000B71 F0               [24] 2722 	movx	@dptr,a
      000B72 8E 82            [24] 2723 	mov	dpl,r6
      000B74 8F 83            [24] 2724 	mov	dph,r7
      000B76 8D F0            [24] 2725 	mov	b,r5
      000B78 12r00r00         [24] 2726 	lcall	___memcpy
                                   2727 ;	program.c:608: program_stats.total_buffers += 1;
      000B7B 90r00r08         [24] 2728 	mov	dptr,#(_program_stats + 0x0008)
      000B7E E0               [24] 2729 	movx	a,@dptr
      000B7F FE               [12] 2730 	mov	r6,a
      000B80 A3               [24] 2731 	inc	dptr
      000B81 E0               [24] 2732 	movx	a,@dptr
      000B82 FF               [12] 2733 	mov	r7,a
      000B83 0E               [12] 2734 	inc	r6
      000B84 BE 00 01         [24] 2735 	cjne	r6,#0x00,00137$
      000B87 0F               [12] 2736 	inc	r7
      000B88                       2737 00137$:
      000B88 90r00r08         [24] 2738 	mov	dptr,#(_program_stats + 0x0008)
      000B8B EE               [12] 2739 	mov	a,r6
      000B8C F0               [24] 2740 	movx	@dptr,a
      000B8D EF               [12] 2741 	mov	a,r7
      000B8E A3               [24] 2742 	inc	dptr
      000B8F F0               [24] 2743 	movx	@dptr,a
      000B90                       2744 00106$:
                                   2745 ;	program.c:610: return 0;
      000B90 90 00 00         [24] 2746 	mov	dptr,#0x0000
                                   2747 ;	program.c:616: no_heap_left:
      000B93 22               [24] 2748 	ret
      000B94                       2749 00111$:
                                   2750 ;	program.c:617: printf("No Heap Memory Left, Delete some buffers...\n\r");
      000B94 74r72            [12] 2751 	mov	a,#___str_56
      000B96 C0 E0            [24] 2752 	push	acc
      000B98 74s08            [12] 2753 	mov	a,#(___str_56 >> 8)
      000B9A C0 E0            [24] 2754 	push	acc
      000B9C 74 80            [12] 2755 	mov	a,#0x80
      000B9E C0 E0            [24] 2756 	push	acc
      000BA0 12r00r00         [24] 2757 	lcall	_printf
      000BA3 15 81            [12] 2758 	dec	sp
      000BA5 15 81            [12] 2759 	dec	sp
      000BA7 15 81            [12] 2760 	dec	sp
                                   2761 ;	program.c:618: return 0;
      000BA9 90 00 00         [24] 2762 	mov	dptr,#0x0000
                                   2763 ;	program.c:619: }
      000BAC 22               [24] 2764 	ret
                                   2765 ;------------------------------------------------------------
                                   2766 ;Allocation info for local variables in function 'create_initial_buffers'
                                   2767 ;------------------------------------------------------------
                                   2768 ;buff_size                 Allocated with name '_create_initial_buffers_buff_size_65537_119'
                                   2769 ;buff                      Allocated with name '_create_initial_buffers_buff_65538_120'
                                   2770 ;buff1                     Allocated with name '_create_initial_buffers_buff1_65538_120'
                                   2771 ;------------------------------------------------------------
                                   2772 ;	program.c:627: void create_initial_buffers()
                                   2773 ;	-----------------------------------------
                                   2774 ;	 function create_initial_buffers
                                   2775 ;	-----------------------------------------
      000BAD                       2776 _create_initial_buffers:
                                   2777 ;	program.c:629: DEBUGPORT(0x07);
      000BAD 75 82 07         [24] 2778 	mov	dpl,#0x07
      000BB0 12r14rFE         [24] 2779 	lcall	_dataout
                                   2780 ;	program.c:632: get_buff:
      000BB3                       2781 00101$:
                                   2782 ;	program.c:633: printf("\n\rGive Valid Initial Buffer Size(0048-4800):");
      000BB3 74rA0            [12] 2783 	mov	a,#___str_57
      000BB5 C0 E0            [24] 2784 	push	acc
      000BB7 74s08            [12] 2785 	mov	a,#(___str_57 >> 8)
      000BB9 C0 E0            [24] 2786 	push	acc
      000BBB 74 80            [12] 2787 	mov	a,#0x80
      000BBD C0 E0            [24] 2788 	push	acc
      000BBF 12r00r00         [24] 2789 	lcall	_printf
      000BC2 15 81            [12] 2790 	dec	sp
      000BC4 15 81            [12] 2791 	dec	sp
      000BC6 15 81            [12] 2792 	dec	sp
                                   2793 ;	program.c:634: buff_size = get_number(4);
      000BC8 90 00 04         [24] 2794 	mov	dptr,#0x0004
      000BCB 12r13r4E         [24] 2795 	lcall	_get_number
      000BCE AE 82            [24] 2796 	mov	r6,dpl
      000BD0 AF 83            [24] 2797 	mov	r7,dph
                                   2798 ;	program.c:638: if (buff_size >= 48 && buff_size <= 4800)
      000BD2 C3               [12] 2799 	clr	c
      000BD3 EE               [12] 2800 	mov	a,r6
      000BD4 94 30            [12] 2801 	subb	a,#0x30
      000BD6 EF               [12] 2802 	mov	a,r7
      000BD7 64 80            [12] 2803 	xrl	a,#0x80
      000BD9 94 80            [12] 2804 	subb	a,#0x80
      000BDB 40 D6            [24] 2805 	jc	00101$
      000BDD 74 C0            [12] 2806 	mov	a,#0xc0
      000BDF 9E               [12] 2807 	subb	a,r6
      000BE0 74 92            [12] 2808 	mov	a,#(0x12 ^ 0x80)
      000BE2 8F F0            [24] 2809 	mov	b,r7
      000BE4 63 F0 80         [24] 2810 	xrl	b,#0x80
      000BE7 95 F0            [12] 2811 	subb	a,b
      000BE9 40 C8            [24] 2812 	jc	00101$
                                   2813 ;	program.c:640: buff.buffer_start = malloc(buff_size);
      000BEB 8E 82            [24] 2814 	mov	dpl,r6
      000BED 8F 83            [24] 2815 	mov	dph,r7
      000BEF C0 07            [24] 2816 	push	ar7
      000BF1 C0 06            [24] 2817 	push	ar6
      000BF3 12r00r00         [24] 2818 	lcall	_malloc
      000BF6 AC 82            [24] 2819 	mov	r4,dpl
      000BF8 AD 83            [24] 2820 	mov	r5,dph
      000BFA D0 06            [24] 2821 	pop	ar6
      000BFC D0 07            [24] 2822 	pop	ar7
      000BFE 7B 00            [12] 2823 	mov	r3,#0x00
      000C00 90r01r49         [24] 2824 	mov	dptr,#(_create_initial_buffers_buff_65538_120 + 0x0002)
      000C03 EC               [12] 2825 	mov	a,r4
      000C04 F0               [24] 2826 	movx	@dptr,a
      000C05 ED               [12] 2827 	mov	a,r5
      000C06 A3               [24] 2828 	inc	dptr
      000C07 F0               [24] 2829 	movx	@dptr,a
      000C08 EB               [12] 2830 	mov	a,r3
      000C09 A3               [24] 2831 	inc	dptr
      000C0A F0               [24] 2832 	movx	@dptr,a
                                   2833 ;	program.c:641: buff1.buffer_start = malloc(buff_size);
      000C0B 8E 82            [24] 2834 	mov	dpl,r6
      000C0D 8F 83            [24] 2835 	mov	dph,r7
      000C0F C0 07            [24] 2836 	push	ar7
      000C11 C0 06            [24] 2837 	push	ar6
      000C13 12r00r00         [24] 2838 	lcall	_malloc
      000C16 AC 82            [24] 2839 	mov	r4,dpl
      000C18 AD 83            [24] 2840 	mov	r5,dph
      000C1A D0 06            [24] 2841 	pop	ar6
      000C1C D0 07            [24] 2842 	pop	ar7
      000C1E 7B 00            [12] 2843 	mov	r3,#0x00
      000C20 90r01r55         [24] 2844 	mov	dptr,#(_create_initial_buffers_buff1_65538_120 + 0x0002)
      000C23 EC               [12] 2845 	mov	a,r4
      000C24 F0               [24] 2846 	movx	@dptr,a
      000C25 ED               [12] 2847 	mov	a,r5
      000C26 A3               [24] 2848 	inc	dptr
      000C27 F0               [24] 2849 	movx	@dptr,a
      000C28 EB               [12] 2850 	mov	a,r3
      000C29 A3               [24] 2851 	inc	dptr
      000C2A F0               [24] 2852 	movx	@dptr,a
                                   2853 ;	program.c:643: if (buff.buffer_start == NULL || buff1.buffer_start == NULL)
      000C2B 90r01r49         [24] 2854 	mov	dptr,#(_create_initial_buffers_buff_65538_120 + 0x0002)
      000C2E E0               [24] 2855 	movx	a,@dptr
      000C2F FB               [12] 2856 	mov	r3,a
      000C30 A3               [24] 2857 	inc	dptr
      000C31 E0               [24] 2858 	movx	a,@dptr
      000C32 FC               [12] 2859 	mov	r4,a
      000C33 A3               [24] 2860 	inc	dptr
      000C34 E0               [24] 2861 	movx	a,@dptr
      000C35 EB               [12] 2862 	mov	a,r3
      000C36 4C               [12] 2863 	orl	a,r4
      000C37 60 0F            [24] 2864 	jz	00106$
      000C39 90r01r55         [24] 2865 	mov	dptr,#(_create_initial_buffers_buff1_65538_120 + 0x0002)
      000C3C E0               [24] 2866 	movx	a,@dptr
      000C3D FB               [12] 2867 	mov	r3,a
      000C3E A3               [24] 2868 	inc	dptr
      000C3F E0               [24] 2869 	movx	a,@dptr
      000C40 FC               [12] 2870 	mov	r4,a
      000C41 A3               [24] 2871 	inc	dptr
      000C42 E0               [24] 2872 	movx	a,@dptr
      000C43 FD               [12] 2873 	mov	r5,a
      000C44 EB               [12] 2874 	mov	a,r3
      000C45 4C               [12] 2875 	orl	a,r4
      000C46 70 60            [24] 2876 	jnz	00107$
      000C48                       2877 00106$:
                                   2878 ;	program.c:645: printf("\n\r####FAIL, Please give a smaller buffer size####\n\n\r");
      000C48 74rCD            [12] 2879 	mov	a,#___str_58
      000C4A C0 E0            [24] 2880 	push	acc
      000C4C 74s08            [12] 2881 	mov	a,#(___str_58 >> 8)
      000C4E C0 E0            [24] 2882 	push	acc
      000C50 74 80            [12] 2883 	mov	a,#0x80
      000C52 C0 E0            [24] 2884 	push	acc
      000C54 12r00r00         [24] 2885 	lcall	_printf
      000C57 15 81            [12] 2886 	dec	sp
      000C59 15 81            [12] 2887 	dec	sp
      000C5B 15 81            [12] 2888 	dec	sp
                                   2889 ;	program.c:647: if (buff.buffer_start != NULL)
      000C5D 90r01r49         [24] 2890 	mov	dptr,#(_create_initial_buffers_buff_65538_120 + 0x0002)
      000C60 E0               [24] 2891 	movx	a,@dptr
      000C61 FB               [12] 2892 	mov	r3,a
      000C62 A3               [24] 2893 	inc	dptr
      000C63 E0               [24] 2894 	movx	a,@dptr
      000C64 FC               [12] 2895 	mov	r4,a
      000C65 A3               [24] 2896 	inc	dptr
      000C66 E0               [24] 2897 	movx	a,@dptr
      000C67 EB               [12] 2898 	mov	a,r3
      000C68 4C               [12] 2899 	orl	a,r4
      000C69 60 14            [24] 2900 	jz	00103$
                                   2901 ;	program.c:648: free(buff.buffer_start);
      000C6B 90r01r49         [24] 2902 	mov	dptr,#(_create_initial_buffers_buff_65538_120 + 0x0002)
      000C6E E0               [24] 2903 	movx	a,@dptr
      000C6F FB               [12] 2904 	mov	r3,a
      000C70 A3               [24] 2905 	inc	dptr
      000C71 E0               [24] 2906 	movx	a,@dptr
      000C72 FC               [12] 2907 	mov	r4,a
      000C73 A3               [24] 2908 	inc	dptr
      000C74 E0               [24] 2909 	movx	a,@dptr
      000C75 FD               [12] 2910 	mov	r5,a
      000C76 8B 82            [24] 2911 	mov	dpl,r3
      000C78 8C 83            [24] 2912 	mov	dph,r4
      000C7A 8D F0            [24] 2913 	mov	b,r5
      000C7C 12r00r00         [24] 2914 	lcall	_free
      000C7F                       2915 00103$:
                                   2916 ;	program.c:649: if (buff1.buffer_start != NULL)
      000C7F 90r01r55         [24] 2917 	mov	dptr,#(_create_initial_buffers_buff1_65538_120 + 0x0002)
      000C82 E0               [24] 2918 	movx	a,@dptr
      000C83 FB               [12] 2919 	mov	r3,a
      000C84 A3               [24] 2920 	inc	dptr
      000C85 E0               [24] 2921 	movx	a,@dptr
      000C86 FC               [12] 2922 	mov	r4,a
      000C87 A3               [24] 2923 	inc	dptr
      000C88 E0               [24] 2924 	movx	a,@dptr
      000C89 FD               [12] 2925 	mov	r5,a
      000C8A EB               [12] 2926 	mov	a,r3
      000C8B 4C               [12] 2927 	orl	a,r4
      000C8C 70 03            [24] 2928 	jnz	00145$
      000C8E 02r0BrB3         [24] 2929 	ljmp	00101$
      000C91                       2930 00145$:
                                   2931 ;	program.c:650: free(buff1.buffer_start);
      000C91 90r01r55         [24] 2932 	mov	dptr,#(_create_initial_buffers_buff1_65538_120 + 0x0002)
      000C94 E0               [24] 2933 	movx	a,@dptr
      000C95 FB               [12] 2934 	mov	r3,a
      000C96 A3               [24] 2935 	inc	dptr
      000C97 E0               [24] 2936 	movx	a,@dptr
      000C98 FC               [12] 2937 	mov	r4,a
      000C99 A3               [24] 2938 	inc	dptr
      000C9A E0               [24] 2939 	movx	a,@dptr
      000C9B FD               [12] 2940 	mov	r5,a
      000C9C 8B 82            [24] 2941 	mov	dpl,r3
      000C9E 8C 83            [24] 2942 	mov	dph,r4
      000CA0 8D F0            [24] 2943 	mov	b,r5
      000CA2 12r00r00         [24] 2944 	lcall	_free
                                   2945 ;	program.c:652: goto get_buff;
      000CA5 02r0BrB3         [24] 2946 	ljmp	00101$
      000CA8                       2947 00107$:
                                   2948 ;	program.c:657: printf("\n\n\r####SUCCESS, INITIAL BUFFERS Created####\n\n\r");
      000CA8 C0 07            [24] 2949 	push	ar7
      000CAA C0 06            [24] 2950 	push	ar6
      000CAC 74r02            [12] 2951 	mov	a,#___str_59
      000CAE C0 E0            [24] 2952 	push	acc
      000CB0 74s09            [12] 2953 	mov	a,#(___str_59 >> 8)
      000CB2 C0 E0            [24] 2954 	push	acc
      000CB4 74 80            [12] 2955 	mov	a,#0x80
      000CB6 C0 E0            [24] 2956 	push	acc
      000CB8 12r00r00         [24] 2957 	lcall	_printf
      000CBB 15 81            [12] 2958 	dec	sp
      000CBD 15 81            [12] 2959 	dec	sp
      000CBF 15 81            [12] 2960 	dec	sp
      000CC1 D0 06            [24] 2961 	pop	ar6
      000CC3 D0 07            [24] 2962 	pop	ar7
                                   2963 ;	program.c:658: program_stats.allocated_heap = 2 * buff_size;
      000CC5 EE               [12] 2964 	mov	a,r6
      000CC6 2E               [12] 2965 	add	a,r6
      000CC7 FC               [12] 2966 	mov	r4,a
      000CC8 EF               [12] 2967 	mov	a,r7
      000CC9 33               [12] 2968 	rlc	a
      000CCA FD               [12] 2969 	mov	r5,a
      000CCB 90r00r02         [24] 2970 	mov	dptr,#(_program_stats + 0x0002)
      000CCE EC               [12] 2971 	mov	a,r4
      000CCF F0               [24] 2972 	movx	@dptr,a
      000CD0 ED               [12] 2973 	mov	a,r5
      000CD1 A3               [24] 2974 	inc	dptr
      000CD2 F0               [24] 2975 	movx	@dptr,a
                                   2976 ;	program.c:659: program_stats.total_heap_size = 4996;
      000CD3 90r00r00         [24] 2977 	mov	dptr,#_program_stats
      000CD6 74 84            [12] 2978 	mov	a,#0x84
      000CD8 F0               [24] 2979 	movx	@dptr,a
      000CD9 74 13            [12] 2980 	mov	a,#0x13
      000CDB A3               [24] 2981 	inc	dptr
      000CDC F0               [24] 2982 	movx	@dptr,a
                                   2983 ;	program.c:660: program_stats.total_buffers = 2;
      000CDD 90r00r08         [24] 2984 	mov	dptr,#(_program_stats + 0x0008)
      000CE0 74 02            [12] 2985 	mov	a,#0x02
      000CE2 F0               [24] 2986 	movx	@dptr,a
      000CE3 E4               [12] 2987 	clr	a
      000CE4 A3               [24] 2988 	inc	dptr
      000CE5 F0               [24] 2989 	movx	@dptr,a
                                   2990 ;	program.c:662: buff.buff_size = buff_size;
      000CE6 90r01r4F         [24] 2991 	mov	dptr,#(_create_initial_buffers_buff_65538_120 + 0x0008)
      000CE9 EE               [12] 2992 	mov	a,r6
      000CEA F0               [24] 2993 	movx	@dptr,a
      000CEB EF               [12] 2994 	mov	a,r7
      000CEC A3               [24] 2995 	inc	dptr
      000CED F0               [24] 2996 	movx	@dptr,a
                                   2997 ;	program.c:663: buff1.buff_size = buff_size;
      000CEE 90r01r5B         [24] 2998 	mov	dptr,#(_create_initial_buffers_buff1_65538_120 + 0x0008)
      000CF1 EE               [12] 2999 	mov	a,r6
      000CF2 F0               [24] 3000 	movx	@dptr,a
      000CF3 EF               [12] 3001 	mov	a,r7
      000CF4 A3               [24] 3002 	inc	dptr
      000CF5 F0               [24] 3003 	movx	@dptr,a
                                   3004 ;	program.c:664: buff.buffer_num = 0;
      000CF6 90r01r47         [24] 3005 	mov	dptr,#_create_initial_buffers_buff_65538_120
      000CF9 E4               [12] 3006 	clr	a
      000CFA F0               [24] 3007 	movx	@dptr,a
      000CFB A3               [24] 3008 	inc	dptr
      000CFC F0               [24] 3009 	movx	@dptr,a
                                   3010 ;	program.c:665: buff1.buffer_num = 1;
      000CFD 90r01r53         [24] 3011 	mov	dptr,#_create_initial_buffers_buff1_65538_120
      000D00 04               [12] 3012 	inc	a
      000D01 F0               [24] 3013 	movx	@dptr,a
      000D02 E4               [12] 3014 	clr	a
      000D03 A3               [24] 3015 	inc	dptr
      000D04 F0               [24] 3016 	movx	@dptr,a
                                   3017 ;	program.c:666: buff1.buffer_end = buff1.buffer_start + buff_size;
      000D05 90r01r55         [24] 3018 	mov	dptr,#(_create_initial_buffers_buff1_65538_120 + 0x0002)
      000D08 E0               [24] 3019 	movx	a,@dptr
      000D09 FB               [12] 3020 	mov	r3,a
      000D0A A3               [24] 3021 	inc	dptr
      000D0B E0               [24] 3022 	movx	a,@dptr
      000D0C FC               [12] 3023 	mov	r4,a
      000D0D A3               [24] 3024 	inc	dptr
      000D0E E0               [24] 3025 	movx	a,@dptr
      000D0F FD               [12] 3026 	mov	r5,a
      000D10 EE               [12] 3027 	mov	a,r6
      000D11 2B               [12] 3028 	add	a,r3
      000D12 FB               [12] 3029 	mov	r3,a
      000D13 EF               [12] 3030 	mov	a,r7
      000D14 3C               [12] 3031 	addc	a,r4
      000D15 FC               [12] 3032 	mov	r4,a
      000D16 90r01r58         [24] 3033 	mov	dptr,#(_create_initial_buffers_buff1_65538_120 + 0x0005)
      000D19 EB               [12] 3034 	mov	a,r3
      000D1A F0               [24] 3035 	movx	@dptr,a
      000D1B EC               [12] 3036 	mov	a,r4
      000D1C A3               [24] 3037 	inc	dptr
      000D1D F0               [24] 3038 	movx	@dptr,a
      000D1E ED               [12] 3039 	mov	a,r5
      000D1F A3               [24] 3040 	inc	dptr
      000D20 F0               [24] 3041 	movx	@dptr,a
                                   3042 ;	program.c:667: buff.buffer_end = buff.buffer_start + buff_size;
      000D21 90r01r49         [24] 3043 	mov	dptr,#(_create_initial_buffers_buff_65538_120 + 0x0002)
      000D24 E0               [24] 3044 	movx	a,@dptr
      000D25 FB               [12] 3045 	mov	r3,a
      000D26 A3               [24] 3046 	inc	dptr
      000D27 E0               [24] 3047 	movx	a,@dptr
      000D28 FC               [12] 3048 	mov	r4,a
      000D29 A3               [24] 3049 	inc	dptr
      000D2A E0               [24] 3050 	movx	a,@dptr
      000D2B FD               [12] 3051 	mov	r5,a
      000D2C EE               [12] 3052 	mov	a,r6
      000D2D 2B               [12] 3053 	add	a,r3
      000D2E FE               [12] 3054 	mov	r6,a
      000D2F EF               [12] 3055 	mov	a,r7
      000D30 3C               [12] 3056 	addc	a,r4
      000D31 FF               [12] 3057 	mov	r7,a
      000D32 8D 02            [24] 3058 	mov	ar2,r5
      000D34 90r01r4C         [24] 3059 	mov	dptr,#(_create_initial_buffers_buff_65538_120 + 0x0005)
      000D37 EE               [12] 3060 	mov	a,r6
      000D38 F0               [24] 3061 	movx	@dptr,a
      000D39 EF               [12] 3062 	mov	a,r7
      000D3A A3               [24] 3063 	inc	dptr
      000D3B F0               [24] 3064 	movx	@dptr,a
      000D3C EA               [12] 3065 	mov	a,r2
      000D3D A3               [24] 3066 	inc	dptr
      000D3E F0               [24] 3067 	movx	@dptr,a
                                   3068 ;	program.c:668: buff.num_char = 0;
      000D3F 90r01r51         [24] 3069 	mov	dptr,#(_create_initial_buffers_buff_65538_120 + 0x000a)
      000D42 E4               [12] 3070 	clr	a
      000D43 F0               [24] 3071 	movx	@dptr,a
      000D44 A3               [24] 3072 	inc	dptr
      000D45 F0               [24] 3073 	movx	@dptr,a
                                   3074 ;	program.c:669: buff1.num_char = 0;
      000D46 90r01r5D         [24] 3075 	mov	dptr,#(_create_initial_buffers_buff1_65538_120 + 0x000a)
      000D49 F0               [24] 3076 	movx	@dptr,a
      000D4A A3               [24] 3077 	inc	dptr
      000D4B F0               [24] 3078 	movx	@dptr,a
                                   3079 ;	program.c:671: buffers_array[0] = buff;
      000D4C 90r00r00         [24] 3080 	mov	dptr,#___memcpy_PARM_2
      000D4F 74r47            [12] 3081 	mov	a,#_create_initial_buffers_buff_65538_120
      000D51 F0               [24] 3082 	movx	@dptr,a
      000D52 74s01            [12] 3083 	mov	a,#(_create_initial_buffers_buff_65538_120 >> 8)
      000D54 A3               [24] 3084 	inc	dptr
      000D55 F0               [24] 3085 	movx	@dptr,a
      000D56 E4               [12] 3086 	clr	a
      000D57 A3               [24] 3087 	inc	dptr
      000D58 F0               [24] 3088 	movx	@dptr,a
      000D59 90r00r00         [24] 3089 	mov	dptr,#___memcpy_PARM_3
      000D5C 74 0C            [12] 3090 	mov	a,#0x0c
      000D5E F0               [24] 3091 	movx	@dptr,a
      000D5F E4               [12] 3092 	clr	a
      000D60 A3               [24] 3093 	inc	dptr
      000D61 F0               [24] 3094 	movx	@dptr,a
      000D62 90r00r0A         [24] 3095 	mov	dptr,#_buffers_array
      000D65 75 F0 00         [24] 3096 	mov	b,#0x00
      000D68 12r00r00         [24] 3097 	lcall	___memcpy
                                   3098 ;	program.c:672: buffers_array[1] = buff1;
      000D6B 90r00r00         [24] 3099 	mov	dptr,#___memcpy_PARM_2
      000D6E 74r53            [12] 3100 	mov	a,#_create_initial_buffers_buff1_65538_120
      000D70 F0               [24] 3101 	movx	@dptr,a
      000D71 74s01            [12] 3102 	mov	a,#(_create_initial_buffers_buff1_65538_120 >> 8)
      000D73 A3               [24] 3103 	inc	dptr
      000D74 F0               [24] 3104 	movx	@dptr,a
      000D75 E4               [12] 3105 	clr	a
      000D76 A3               [24] 3106 	inc	dptr
      000D77 F0               [24] 3107 	movx	@dptr,a
      000D78 90r00r00         [24] 3108 	mov	dptr,#___memcpy_PARM_3
      000D7B 74 0C            [12] 3109 	mov	a,#0x0c
      000D7D F0               [24] 3110 	movx	@dptr,a
      000D7E E4               [12] 3111 	clr	a
      000D7F A3               [24] 3112 	inc	dptr
      000D80 F0               [24] 3113 	movx	@dptr,a
      000D81 90r00r16         [24] 3114 	mov	dptr,#(_buffers_array + 0x000c)
      000D84 75 F0 00         [24] 3115 	mov	b,#0x00
                                   3116 ;	program.c:676: goto get_buff;
                                   3117 ;	program.c:677: }
      000D87 02r00r00         [24] 3118 	ljmp	___memcpy
                                   3119 ;------------------------------------------------------------
                                   3120 ;Allocation info for local variables in function 'enter_chars'
                                   3121 ;------------------------------------------------------------
                                   3122 ;rec                       Allocated with name '_enter_chars_rec_65537_125'
                                   3123 ;------------------------------------------------------------
                                   3124 ;	program.c:685: void enter_chars()
                                   3125 ;	-----------------------------------------
                                   3126 ;	 function enter_chars
                                   3127 ;	-----------------------------------------
      000D8A                       3128 _enter_chars:
                                   3129 ;	program.c:687: DEBUGPORT(0x08);
      000D8A 75 82 08         [24] 3130 	mov	dpl,#0x08
      000D8D 12r14rFE         [24] 3131 	lcall	_dataout
                                   3132 ;	program.c:688: print_heap_menu();
      000D90 12r09r84         [24] 3133 	lcall	_print_heap_menu
                                   3134 ;	program.c:690: while (1)
      000D93                       3135 00126$:
                                   3136 ;	program.c:692: rec = getchar();
      000D93 12r14rC2         [24] 3137 	lcall	_getchar
      000D96 AE 82            [24] 3138 	mov	r6,dpl
      000D98 AF 83            [24] 3139 	mov	r7,dph
                                   3140 ;	program.c:693: if (rec > 0x60 && rec < 0x7B)
      000D9A C3               [12] 3141 	clr	c
      000D9B 74 60            [12] 3142 	mov	a,#0x60
      000D9D 9E               [12] 3143 	subb	a,r6
      000D9E 74 80            [12] 3144 	mov	a,#(0x00 ^ 0x80)
      000DA0 8F F0            [24] 3145 	mov	b,r7
      000DA2 63 F0 80         [24] 3146 	xrl	b,#0x80
      000DA5 95 F0            [12] 3147 	subb	a,b
      000DA7 40 03            [24] 3148 	jc	00170$
      000DA9 02r0Er38         [24] 3149 	ljmp	00122$
      000DAC                       3150 00170$:
      000DAC C3               [12] 3151 	clr	c
      000DAD EE               [12] 3152 	mov	a,r6
      000DAE 94 7B            [12] 3153 	subb	a,#0x7b
      000DB0 EF               [12] 3154 	mov	a,r7
      000DB1 64 80            [12] 3155 	xrl	a,#0x80
      000DB3 94 80            [12] 3156 	subb	a,#0x80
      000DB5 40 03            [24] 3157 	jc	00171$
      000DB7 02r0Er38         [24] 3158 	ljmp	00122$
      000DBA                       3159 00171$:
                                   3160 ;	program.c:697: if (buffers_array[0].num_char < buffers_array[0].buff_size)
      000DBA 90r00r14         [24] 3161 	mov	dptr,#(_buffers_array + 0x000a)
      000DBD E0               [24] 3162 	movx	a,@dptr
      000DBE FC               [12] 3163 	mov	r4,a
      000DBF A3               [24] 3164 	inc	dptr
      000DC0 E0               [24] 3165 	movx	a,@dptr
      000DC1 FD               [12] 3166 	mov	r5,a
      000DC2 90r00r12         [24] 3167 	mov	dptr,#(_buffers_array + 0x0008)
      000DC5 E0               [24] 3168 	movx	a,@dptr
      000DC6 FA               [12] 3169 	mov	r2,a
      000DC7 A3               [24] 3170 	inc	dptr
      000DC8 E0               [24] 3171 	movx	a,@dptr
      000DC9 FB               [12] 3172 	mov	r3,a
      000DCA C3               [12] 3173 	clr	c
      000DCB EC               [12] 3174 	mov	a,r4
      000DCC 9A               [12] 3175 	subb	a,r2
      000DCD ED               [12] 3176 	mov	a,r5
      000DCE 64 80            [12] 3177 	xrl	a,#0x80
      000DD0 8B F0            [24] 3178 	mov	b,r3
      000DD2 63 F0 80         [24] 3179 	xrl	b,#0x80
      000DD5 95 F0            [12] 3180 	subb	a,b
      000DD7 50 32            [24] 3181 	jnc	00102$
                                   3182 ;	program.c:699: *(buffers_array[0].buffer_start + buffers_array[0].num_char) = rec;
      000DD9 90r00r0C         [24] 3183 	mov	dptr,#(_buffers_array + 0x0002)
      000DDC E0               [24] 3184 	movx	a,@dptr
      000DDD F9               [12] 3185 	mov	r1,a
      000DDE A3               [24] 3186 	inc	dptr
      000DDF E0               [24] 3187 	movx	a,@dptr
      000DE0 FA               [12] 3188 	mov	r2,a
      000DE1 A3               [24] 3189 	inc	dptr
      000DE2 E0               [24] 3190 	movx	a,@dptr
      000DE3 FB               [12] 3191 	mov	r3,a
      000DE4 EC               [12] 3192 	mov	a,r4
      000DE5 29               [12] 3193 	add	a,r1
      000DE6 F9               [12] 3194 	mov	r1,a
      000DE7 ED               [12] 3195 	mov	a,r5
      000DE8 3A               [12] 3196 	addc	a,r2
      000DE9 FA               [12] 3197 	mov	r2,a
      000DEA 8E 05            [24] 3198 	mov	ar5,r6
      000DEC 89 82            [24] 3199 	mov	dpl,r1
      000DEE 8A 83            [24] 3200 	mov	dph,r2
      000DF0 8B F0            [24] 3201 	mov	b,r3
      000DF2 ED               [12] 3202 	mov	a,r5
      000DF3 12r00r00         [24] 3203 	lcall	__gptrput
                                   3204 ;	program.c:700: buffers_array[0].num_char += 1;
      000DF6 90r00r14         [24] 3205 	mov	dptr,#(_buffers_array + 0x000a)
      000DF9 E0               [24] 3206 	movx	a,@dptr
      000DFA FC               [12] 3207 	mov	r4,a
      000DFB A3               [24] 3208 	inc	dptr
      000DFC E0               [24] 3209 	movx	a,@dptr
      000DFD FD               [12] 3210 	mov	r5,a
      000DFE 0C               [12] 3211 	inc	r4
      000DFF BC 00 01         [24] 3212 	cjne	r4,#0x00,00173$
      000E02 0D               [12] 3213 	inc	r5
      000E03                       3214 00173$:
      000E03 90r00r14         [24] 3215 	mov	dptr,#(_buffers_array + 0x000a)
      000E06 EC               [12] 3216 	mov	a,r4
      000E07 F0               [24] 3217 	movx	@dptr,a
      000E08 ED               [12] 3218 	mov	a,r5
      000E09 A3               [24] 3219 	inc	dptr
      000E0A F0               [24] 3220 	movx	@dptr,a
      000E0B                       3221 00102$:
                                   3222 ;	program.c:702: program_stats.all_char_count += 1;
      000E0B 90r00r04         [24] 3223 	mov	dptr,#(_program_stats + 0x0004)
      000E0E E0               [24] 3224 	movx	a,@dptr
      000E0F FC               [12] 3225 	mov	r4,a
      000E10 A3               [24] 3226 	inc	dptr
      000E11 E0               [24] 3227 	movx	a,@dptr
      000E12 FD               [12] 3228 	mov	r5,a
      000E13 0C               [12] 3229 	inc	r4
      000E14 BC 00 01         [24] 3230 	cjne	r4,#0x00,00174$
      000E17 0D               [12] 3231 	inc	r5
      000E18                       3232 00174$:
      000E18 90r00r04         [24] 3233 	mov	dptr,#(_program_stats + 0x0004)
      000E1B EC               [12] 3234 	mov	a,r4
      000E1C F0               [24] 3235 	movx	@dptr,a
      000E1D ED               [12] 3236 	mov	a,r5
      000E1E A3               [24] 3237 	inc	dptr
      000E1F F0               [24] 3238 	movx	@dptr,a
                                   3239 ;	program.c:703: program_stats.storage_char_count += 1;
      000E20 90r00r06         [24] 3240 	mov	dptr,#(_program_stats + 0x0006)
      000E23 E0               [24] 3241 	movx	a,@dptr
      000E24 FC               [12] 3242 	mov	r4,a
      000E25 A3               [24] 3243 	inc	dptr
      000E26 E0               [24] 3244 	movx	a,@dptr
      000E27 FD               [12] 3245 	mov	r5,a
      000E28 0C               [12] 3246 	inc	r4
      000E29 BC 00 01         [24] 3247 	cjne	r4,#0x00,00175$
      000E2C 0D               [12] 3248 	inc	r5
      000E2D                       3249 00175$:
      000E2D 90r00r06         [24] 3250 	mov	dptr,#(_program_stats + 0x0006)
      000E30 EC               [12] 3251 	mov	a,r4
      000E31 F0               [24] 3252 	movx	@dptr,a
      000E32 ED               [12] 3253 	mov	a,r5
      000E33 A3               [24] 3254 	inc	dptr
      000E34 F0               [24] 3255 	movx	@dptr,a
      000E35 02r0Dr93         [24] 3256 	ljmp	00126$
      000E38                       3257 00122$:
                                   3258 ;	program.c:705: else if (rec == 0x3F)
      000E38 BE 3F 1F         [24] 3259 	cjne	r6,#0x3f,00119$
      000E3B BF 00 1C         [24] 3260 	cjne	r7,#0x00,00119$
                                   3261 ;	program.c:708: print_heap_stats();
      000E3E 12r11r1D         [24] 3262 	lcall	_print_heap_stats
                                   3263 ;	program.c:709: print_all_buffers();
      000E41 12r11rDE         [24] 3264 	lcall	_print_all_buffers
                                   3265 ;	program.c:710: dump_buff_zero_ascii();
      000E44 12r0ErBA         [24] 3266 	lcall	_dump_buff_zero_ascii
                                   3267 ;	program.c:711: program_stats.all_char_count = 0;
      000E47 90r00r04         [24] 3268 	mov	dptr,#(_program_stats + 0x0004)
      000E4A E4               [12] 3269 	clr	a
      000E4B F0               [24] 3270 	movx	@dptr,a
      000E4C A3               [24] 3271 	inc	dptr
      000E4D F0               [24] 3272 	movx	@dptr,a
                                   3273 ;	program.c:712: program_stats.storage_char_count = 0;
      000E4E 90r00r06         [24] 3274 	mov	dptr,#(_program_stats + 0x0006)
      000E51 F0               [24] 3275 	movx	@dptr,a
      000E52 A3               [24] 3276 	inc	dptr
      000E53 F0               [24] 3277 	movx	@dptr,a
                                   3278 ;	program.c:713: print_heap_menu();
      000E54 12r09r84         [24] 3279 	lcall	_print_heap_menu
      000E57 02r0Dr93         [24] 3280 	ljmp	00126$
      000E5A                       3281 00119$:
                                   3282 ;	program.c:715: else if (rec == 0x3D)
      000E5A BE 3D 0C         [24] 3283 	cjne	r6,#0x3d,00116$
      000E5D BF 00 09         [24] 3284 	cjne	r7,#0x00,00116$
                                   3285 ;	program.c:718: dump_buff_zero_hex();
      000E60 12r0FrD0         [24] 3286 	lcall	_dump_buff_zero_hex
                                   3287 ;	program.c:719: print_heap_menu();
      000E63 12r09r84         [24] 3288 	lcall	_print_heap_menu
      000E66 02r0Dr93         [24] 3289 	ljmp	00126$
      000E69                       3290 00116$:
                                   3291 ;	program.c:721: else if (rec == 0x40)
      000E69 BE 40 0C         [24] 3292 	cjne	r6,#0x40,00113$
      000E6C BF 00 09         [24] 3293 	cjne	r7,#0x00,00113$
                                   3294 ;	program.c:724: at_clear_all_buffers();
      000E6F 12r06r20         [24] 3295 	lcall	_at_clear_all_buffers
                                   3296 ;	program.c:725: print_heap_menu();
      000E72 12r09r84         [24] 3297 	lcall	_print_heap_menu
      000E75 02r0Dr93         [24] 3298 	ljmp	00126$
      000E78                       3299 00113$:
                                   3300 ;	program.c:727: else if (rec == 0x2B)
      000E78 BE 2B 0C         [24] 3301 	cjne	r6,#0x2b,00110$
      000E7B BF 00 09         [24] 3302 	cjne	r7,#0x00,00110$
                                   3303 ;	program.c:730: create_new_buffer();
      000E7E 12r0Ar33         [24] 3304 	lcall	_create_new_buffer
                                   3305 ;	program.c:731: print_heap_menu();
      000E81 12r09r84         [24] 3306 	lcall	_print_heap_menu
      000E84 02r0Dr93         [24] 3307 	ljmp	00126$
      000E87                       3308 00110$:
                                   3309 ;	program.c:733: else if (rec == 0x2D)
      000E87 BE 2D 0C         [24] 3310 	cjne	r6,#0x2d,00107$
      000E8A BF 00 09         [24] 3311 	cjne	r7,#0x00,00107$
                                   3312 ;	program.c:736: delete_buffer();
      000E8D 12r06rBA         [24] 3313 	lcall	_delete_buffer
                                   3314 ;	program.c:737: print_heap_menu();
      000E90 12r09r84         [24] 3315 	lcall	_print_heap_menu
      000E93 02r0Dr93         [24] 3316 	ljmp	00126$
      000E96                       3317 00107$:
                                   3318 ;	program.c:739: else if (rec == 0x4D)
      000E96 BE 4D 09         [24] 3319 	cjne	r6,#0x4d,00104$
      000E99 BF 00 06         [24] 3320 	cjne	r7,#0x00,00104$
                                   3321 ;	program.c:741: main_menu();
      000E9C 12r03rE6         [24] 3322 	lcall	_main_menu
      000E9F 02r0Dr93         [24] 3323 	ljmp	00126$
      000EA2                       3324 00104$:
                                   3325 ;	program.c:745: program_stats.all_char_count += 1;
      000EA2 90r00r04         [24] 3326 	mov	dptr,#(_program_stats + 0x0004)
      000EA5 E0               [24] 3327 	movx	a,@dptr
      000EA6 FE               [12] 3328 	mov	r6,a
      000EA7 A3               [24] 3329 	inc	dptr
      000EA8 E0               [24] 3330 	movx	a,@dptr
      000EA9 FF               [12] 3331 	mov	r7,a
      000EAA 0E               [12] 3332 	inc	r6
      000EAB BE 00 01         [24] 3333 	cjne	r6,#0x00,00188$
      000EAE 0F               [12] 3334 	inc	r7
      000EAF                       3335 00188$:
      000EAF 90r00r04         [24] 3336 	mov	dptr,#(_program_stats + 0x0004)
      000EB2 EE               [12] 3337 	mov	a,r6
      000EB3 F0               [24] 3338 	movx	@dptr,a
      000EB4 EF               [12] 3339 	mov	a,r7
      000EB5 A3               [24] 3340 	inc	dptr
      000EB6 F0               [24] 3341 	movx	@dptr,a
                                   3342 ;	program.c:748: }
      000EB7 02r0Dr93         [24] 3343 	ljmp	00126$
                                   3344 ;------------------------------------------------------------
                                   3345 ;Allocation info for local variables in function 'dump_buff_zero_ascii'
                                   3346 ;------------------------------------------------------------
                                   3347 ;j                         Allocated with name '_dump_buff_zero_ascii_j_65537_137'
                                   3348 ;i                         Allocated with name '_dump_buff_zero_ascii_i_196609_139'
                                   3349 ;------------------------------------------------------------
                                   3350 ;	program.c:756: void dump_buff_zero_ascii()
                                   3351 ;	-----------------------------------------
                                   3352 ;	 function dump_buff_zero_ascii
                                   3353 ;	-----------------------------------------
      000EBA                       3354 _dump_buff_zero_ascii:
                                   3355 ;	program.c:758: DEBUGPORT(0x09);
      000EBA 75 82 09         [24] 3356 	mov	dpl,#0x09
      000EBD 12r14rFE         [24] 3357 	lcall	_dataout
                                   3358 ;	program.c:759: int j = 64;
      000EC0 90r01r5F         [24] 3359 	mov	dptr,#_dump_buff_zero_ascii_j_65537_137
      000EC3 74 40            [12] 3360 	mov	a,#0x40
      000EC5 F0               [24] 3361 	movx	@dptr,a
      000EC6 E4               [12] 3362 	clr	a
      000EC7 A3               [24] 3363 	inc	dptr
      000EC8 F0               [24] 3364 	movx	@dptr,a
                                   3365 ;	program.c:760: if (buffers_array[0].num_char > 0)
      000EC9 90r00r14         [24] 3366 	mov	dptr,#(_buffers_array + 0x000a)
      000ECC E0               [24] 3367 	movx	a,@dptr
      000ECD FE               [12] 3368 	mov	r6,a
      000ECE A3               [24] 3369 	inc	dptr
      000ECF E0               [24] 3370 	movx	a,@dptr
      000ED0 FF               [12] 3371 	mov	r7,a
      000ED1 C3               [12] 3372 	clr	c
      000ED2 E4               [12] 3373 	clr	a
      000ED3 9E               [12] 3374 	subb	a,r6
      000ED4 74 80            [12] 3375 	mov	a,#(0x00 ^ 0x80)
      000ED6 8F F0            [24] 3376 	mov	b,r7
      000ED8 63 F0 80         [24] 3377 	xrl	b,#0x80
      000EDB 95 F0            [12] 3378 	subb	a,b
      000EDD 40 03            [24] 3379 	jc	00135$
      000EDF 02r0FrBA         [24] 3380 	ljmp	00107$
      000EE2                       3381 00135$:
                                   3382 ;	program.c:762: printf("\n\n\r***********Buffer-0-Contents*********** \n\r");
      000EE2 74r31            [12] 3383 	mov	a,#___str_60
      000EE4 C0 E0            [24] 3384 	push	acc
      000EE6 74s09            [12] 3385 	mov	a,#(___str_60 >> 8)
      000EE8 C0 E0            [24] 3386 	push	acc
      000EEA 74 80            [12] 3387 	mov	a,#0x80
      000EEC C0 E0            [24] 3388 	push	acc
      000EEE 12r00r00         [24] 3389 	lcall	_printf
      000EF1 15 81            [12] 3390 	dec	sp
      000EF3 15 81            [12] 3391 	dec	sp
      000EF5 15 81            [12] 3392 	dec	sp
                                   3393 ;	program.c:763: for (int i = 0; i < buffers_array[0].num_char; i++)
      000EF7 7E 00            [12] 3394 	mov	r6,#0x00
      000EF9 7F 00            [12] 3395 	mov	r7,#0x00
      000EFB                       3396 00110$:
      000EFB 90r00r14         [24] 3397 	mov	dptr,#(_buffers_array + 0x000a)
      000EFE E0               [24] 3398 	movx	a,@dptr
      000EFF FC               [12] 3399 	mov	r4,a
      000F00 A3               [24] 3400 	inc	dptr
      000F01 E0               [24] 3401 	movx	a,@dptr
      000F02 FD               [12] 3402 	mov	r5,a
      000F03 C3               [12] 3403 	clr	c
      000F04 EE               [12] 3404 	mov	a,r6
      000F05 9C               [12] 3405 	subb	a,r4
      000F06 EF               [12] 3406 	mov	a,r7
      000F07 64 80            [12] 3407 	xrl	a,#0x80
      000F09 8D F0            [24] 3408 	mov	b,r5
      000F0B 63 F0 80         [24] 3409 	xrl	b,#0x80
      000F0E 95 F0            [12] 3410 	subb	a,b
      000F10 40 03            [24] 3411 	jc	00136$
      000F12 02r0Fr9D         [24] 3412 	ljmp	00105$
      000F15                       3413 00136$:
                                   3414 ;	program.c:765: if (j == 64)
      000F15 90r01r5F         [24] 3415 	mov	dptr,#_dump_buff_zero_ascii_j_65537_137
      000F18 E0               [24] 3416 	movx	a,@dptr
      000F19 FC               [12] 3417 	mov	r4,a
      000F1A A3               [24] 3418 	inc	dptr
      000F1B E0               [24] 3419 	movx	a,@dptr
      000F1C FD               [12] 3420 	mov	r5,a
      000F1D BC 40 20         [24] 3421 	cjne	r4,#0x40,00102$
      000F20 BD 00 1D         [24] 3422 	cjne	r5,#0x00,00102$
                                   3423 ;	program.c:767: printf("\n\r");
      000F23 C0 07            [24] 3424 	push	ar7
      000F25 C0 06            [24] 3425 	push	ar6
      000F27 74r5F            [12] 3426 	mov	a,#___str_61
      000F29 C0 E0            [24] 3427 	push	acc
      000F2B 74s09            [12] 3428 	mov	a,#(___str_61 >> 8)
      000F2D C0 E0            [24] 3429 	push	acc
      000F2F 74 80            [12] 3430 	mov	a,#0x80
      000F31 C0 E0            [24] 3431 	push	acc
      000F33 12r00r00         [24] 3432 	lcall	_printf
      000F36 15 81            [12] 3433 	dec	sp
      000F38 15 81            [12] 3434 	dec	sp
      000F3A 15 81            [12] 3435 	dec	sp
      000F3C D0 06            [24] 3436 	pop	ar6
      000F3E D0 07            [24] 3437 	pop	ar7
      000F40                       3438 00102$:
                                   3439 ;	program.c:769: putchar(*(buffers_array[0].buffer_start + i));
      000F40 90r00r0C         [24] 3440 	mov	dptr,#(_buffers_array + 0x0002)
      000F43 E0               [24] 3441 	movx	a,@dptr
      000F44 FB               [12] 3442 	mov	r3,a
      000F45 A3               [24] 3443 	inc	dptr
      000F46 E0               [24] 3444 	movx	a,@dptr
      000F47 FC               [12] 3445 	mov	r4,a
      000F48 A3               [24] 3446 	inc	dptr
      000F49 E0               [24] 3447 	movx	a,@dptr
      000F4A FD               [12] 3448 	mov	r5,a
      000F4B EE               [12] 3449 	mov	a,r6
      000F4C 2B               [12] 3450 	add	a,r3
      000F4D FB               [12] 3451 	mov	r3,a
      000F4E EF               [12] 3452 	mov	a,r7
      000F4F 3C               [12] 3453 	addc	a,r4
      000F50 FC               [12] 3454 	mov	r4,a
      000F51 8B 82            [24] 3455 	mov	dpl,r3
      000F53 8C 83            [24] 3456 	mov	dph,r4
      000F55 8D F0            [24] 3457 	mov	b,r5
      000F57 12r00r00         [24] 3458 	lcall	__gptrget
      000F5A FB               [12] 3459 	mov	r3,a
      000F5B 7D 00            [12] 3460 	mov	r5,#0x00
      000F5D 8B 82            [24] 3461 	mov	dpl,r3
      000F5F 8D 83            [24] 3462 	mov	dph,r5
      000F61 C0 07            [24] 3463 	push	ar7
      000F63 C0 06            [24] 3464 	push	ar6
      000F65 12r14rA3         [24] 3465 	lcall	_putchar
      000F68 D0 06            [24] 3466 	pop	ar6
      000F6A D0 07            [24] 3467 	pop	ar7
                                   3468 ;	program.c:770: j--;
      000F6C 90r01r5F         [24] 3469 	mov	dptr,#_dump_buff_zero_ascii_j_65537_137
      000F6F E0               [24] 3470 	movx	a,@dptr
      000F70 24 FF            [12] 3471 	add	a,#0xff
      000F72 FC               [12] 3472 	mov	r4,a
      000F73 A3               [24] 3473 	inc	dptr
      000F74 E0               [24] 3474 	movx	a,@dptr
      000F75 34 FF            [12] 3475 	addc	a,#0xff
      000F77 FD               [12] 3476 	mov	r5,a
      000F78 90r01r5F         [24] 3477 	mov	dptr,#_dump_buff_zero_ascii_j_65537_137
      000F7B EC               [12] 3478 	mov	a,r4
      000F7C F0               [24] 3479 	movx	@dptr,a
      000F7D ED               [12] 3480 	mov	a,r5
      000F7E A3               [24] 3481 	inc	dptr
      000F7F F0               [24] 3482 	movx	@dptr,a
                                   3483 ;	program.c:771: if (j == 0)
      000F80 90r01r5F         [24] 3484 	mov	dptr,#_dump_buff_zero_ascii_j_65537_137
      000F83 E0               [24] 3485 	movx	a,@dptr
      000F84 F5 F0            [12] 3486 	mov	b,a
      000F86 A3               [24] 3487 	inc	dptr
      000F87 E0               [24] 3488 	movx	a,@dptr
      000F88 45 F0            [12] 3489 	orl	a,b
      000F8A 70 09            [24] 3490 	jnz	00111$
                                   3491 ;	program.c:772: j = 64;
      000F8C 90r01r5F         [24] 3492 	mov	dptr,#_dump_buff_zero_ascii_j_65537_137
      000F8F 74 40            [12] 3493 	mov	a,#0x40
      000F91 F0               [24] 3494 	movx	@dptr,a
      000F92 E4               [12] 3495 	clr	a
      000F93 A3               [24] 3496 	inc	dptr
      000F94 F0               [24] 3497 	movx	@dptr,a
      000F95                       3498 00111$:
                                   3499 ;	program.c:763: for (int i = 0; i < buffers_array[0].num_char; i++)
      000F95 0E               [12] 3500 	inc	r6
      000F96 BE 00 01         [24] 3501 	cjne	r6,#0x00,00140$
      000F99 0F               [12] 3502 	inc	r7
      000F9A                       3503 00140$:
      000F9A 02r0ErFB         [24] 3504 	ljmp	00110$
      000F9D                       3505 00105$:
                                   3506 ;	program.c:774: buffers_array[0].num_char = 0;
      000F9D 90r00r14         [24] 3507 	mov	dptr,#(_buffers_array + 0x000a)
      000FA0 E4               [12] 3508 	clr	a
      000FA1 F0               [24] 3509 	movx	@dptr,a
      000FA2 A3               [24] 3510 	inc	dptr
      000FA3 F0               [24] 3511 	movx	@dptr,a
                                   3512 ;	program.c:775: printf("\n\n\r");
      000FA4 74r62            [12] 3513 	mov	a,#___str_62
      000FA6 C0 E0            [24] 3514 	push	acc
      000FA8 74s09            [12] 3515 	mov	a,#(___str_62 >> 8)
      000FAA C0 E0            [24] 3516 	push	acc
      000FAC 74 80            [12] 3517 	mov	a,#0x80
      000FAE C0 E0            [24] 3518 	push	acc
      000FB0 12r00r00         [24] 3519 	lcall	_printf
      000FB3 15 81            [12] 3520 	dec	sp
      000FB5 15 81            [12] 3521 	dec	sp
      000FB7 15 81            [12] 3522 	dec	sp
      000FB9 22               [24] 3523 	ret
      000FBA                       3524 00107$:
                                   3525 ;	program.c:779: printf("Buffer0 is Empty....\n\r");
      000FBA 74r66            [12] 3526 	mov	a,#___str_63
      000FBC C0 E0            [24] 3527 	push	acc
      000FBE 74s09            [12] 3528 	mov	a,#(___str_63 >> 8)
      000FC0 C0 E0            [24] 3529 	push	acc
      000FC2 74 80            [12] 3530 	mov	a,#0x80
      000FC4 C0 E0            [24] 3531 	push	acc
      000FC6 12r00r00         [24] 3532 	lcall	_printf
      000FC9 15 81            [12] 3533 	dec	sp
      000FCB 15 81            [12] 3534 	dec	sp
      000FCD 15 81            [12] 3535 	dec	sp
                                   3536 ;	program.c:781: }
      000FCF 22               [24] 3537 	ret
                                   3538 ;------------------------------------------------------------
                                   3539 ;Allocation info for local variables in function 'dump_buff_zero_hex'
                                   3540 ;------------------------------------------------------------
                                   3541 ;j                         Allocated with name '_dump_buff_zero_hex_j_131073_145'
                                   3542 ;i                         Allocated with name '_dump_buff_zero_hex_i_196609_146'
                                   3543 ;------------------------------------------------------------
                                   3544 ;	program.c:788: void dump_buff_zero_hex()
                                   3545 ;	-----------------------------------------
                                   3546 ;	 function dump_buff_zero_hex
                                   3547 ;	-----------------------------------------
      000FD0                       3548 _dump_buff_zero_hex:
                                   3549 ;	program.c:790: DEBUGPORT(0xA);
      000FD0 75 82 0A         [24] 3550 	mov	dpl,#0x0a
      000FD3 12r14rFE         [24] 3551 	lcall	_dataout
                                   3552 ;	program.c:791: if (buffers_array[0].num_char > 0)
      000FD6 90r00r14         [24] 3553 	mov	dptr,#(_buffers_array + 0x000a)
      000FD9 E0               [24] 3554 	movx	a,@dptr
      000FDA FE               [12] 3555 	mov	r6,a
      000FDB A3               [24] 3556 	inc	dptr
      000FDC E0               [24] 3557 	movx	a,@dptr
      000FDD FF               [12] 3558 	mov	r7,a
      000FDE C3               [12] 3559 	clr	c
      000FDF E4               [12] 3560 	clr	a
      000FE0 9E               [12] 3561 	subb	a,r6
      000FE1 74 80            [12] 3562 	mov	a,#(0x00 ^ 0x80)
      000FE3 8F F0            [24] 3563 	mov	b,r7
      000FE5 63 F0 80         [24] 3564 	xrl	b,#0x80
      000FE8 95 F0            [12] 3565 	subb	a,b
      000FEA 40 03            [24] 3566 	jc	00135$
      000FEC 02r11r07         [24] 3567 	ljmp	00107$
      000FEF                       3568 00135$:
                                   3569 ;	program.c:793: printf("\n\r-------------------------HEXDUMP--------------------------------");
      000FEF 74r7D            [12] 3570 	mov	a,#___str_64
      000FF1 C0 E0            [24] 3571 	push	acc
      000FF3 74s09            [12] 3572 	mov	a,#(___str_64 >> 8)
      000FF5 C0 E0            [24] 3573 	push	acc
      000FF7 74 80            [12] 3574 	mov	a,#0x80
      000FF9 C0 E0            [24] 3575 	push	acc
      000FFB 12r00r00         [24] 3576 	lcall	_printf
      000FFE 15 81            [12] 3577 	dec	sp
      001000 15 81            [12] 3578 	dec	sp
      001002 15 81            [12] 3579 	dec	sp
                                   3580 ;	program.c:794: printf("\n\r    ADDR: +0 +1 +2 +3 +4 +5 +6 +7 +8 +9 +A +B +C +D +E +F \n\r");
      001004 74rC0            [12] 3581 	mov	a,#___str_65
      001006 C0 E0            [24] 3582 	push	acc
      001008 74s09            [12] 3583 	mov	a,#(___str_65 >> 8)
      00100A C0 E0            [24] 3584 	push	acc
      00100C 74 80            [12] 3585 	mov	a,#0x80
      00100E C0 E0            [24] 3586 	push	acc
      001010 12r00r00         [24] 3587 	lcall	_printf
      001013 15 81            [12] 3588 	dec	sp
      001015 15 81            [12] 3589 	dec	sp
      001017 15 81            [12] 3590 	dec	sp
                                   3591 ;	program.c:795: int j = 16;
      001019 90r01r61         [24] 3592 	mov	dptr,#_dump_buff_zero_hex_j_131073_145
      00101C 74 10            [12] 3593 	mov	a,#0x10
      00101E F0               [24] 3594 	movx	@dptr,a
      00101F E4               [12] 3595 	clr	a
      001020 A3               [24] 3596 	inc	dptr
      001021 F0               [24] 3597 	movx	@dptr,a
                                   3598 ;	program.c:797: for (int i = 0; i < buffers_array[0].num_char; i++)
      001022 7E 00            [12] 3599 	mov	r6,#0x00
      001024 7F 00            [12] 3600 	mov	r7,#0x00
      001026                       3601 00110$:
      001026 90r00r14         [24] 3602 	mov	dptr,#(_buffers_array + 0x000a)
      001029 E0               [24] 3603 	movx	a,@dptr
      00102A FC               [12] 3604 	mov	r4,a
      00102B A3               [24] 3605 	inc	dptr
      00102C E0               [24] 3606 	movx	a,@dptr
      00102D FD               [12] 3607 	mov	r5,a
      00102E C3               [12] 3608 	clr	c
      00102F EE               [12] 3609 	mov	a,r6
      001030 9C               [12] 3610 	subb	a,r4
      001031 EF               [12] 3611 	mov	a,r7
      001032 64 80            [12] 3612 	xrl	a,#0x80
      001034 8D F0            [24] 3613 	mov	b,r5
      001036 63 F0 80         [24] 3614 	xrl	b,#0x80
      001039 95 F0            [12] 3615 	subb	a,b
      00103B 40 03            [24] 3616 	jc	00136$
      00103D 02r10rF1         [24] 3617 	ljmp	00105$
      001040                       3618 00136$:
                                   3619 ;	program.c:799: if (j == 16)
      001040 90r01r61         [24] 3620 	mov	dptr,#_dump_buff_zero_hex_j_131073_145
      001043 E0               [24] 3621 	movx	a,@dptr
      001044 FC               [12] 3622 	mov	r4,a
      001045 A3               [24] 3623 	inc	dptr
      001046 E0               [24] 3624 	movx	a,@dptr
      001047 FD               [12] 3625 	mov	r5,a
      001048 BC 10 37         [24] 3626 	cjne	r4,#0x10,00102$
      00104B BD 00 34         [24] 3627 	cjne	r5,#0x00,00102$
                                   3628 ;	program.c:801: printf("\n\r%p: ", (buffers_array[0].buffer_start + i));
      00104E 90r00r0C         [24] 3629 	mov	dptr,#(_buffers_array + 0x0002)
      001051 E0               [24] 3630 	movx	a,@dptr
      001052 FB               [12] 3631 	mov	r3,a
      001053 A3               [24] 3632 	inc	dptr
      001054 E0               [24] 3633 	movx	a,@dptr
      001055 FC               [12] 3634 	mov	r4,a
      001056 A3               [24] 3635 	inc	dptr
      001057 E0               [24] 3636 	movx	a,@dptr
      001058 FD               [12] 3637 	mov	r5,a
      001059 EE               [12] 3638 	mov	a,r6
      00105A 2B               [12] 3639 	add	a,r3
      00105B FB               [12] 3640 	mov	r3,a
      00105C EF               [12] 3641 	mov	a,r7
      00105D 3C               [12] 3642 	addc	a,r4
      00105E FC               [12] 3643 	mov	r4,a
      00105F C0 07            [24] 3644 	push	ar7
      001061 C0 06            [24] 3645 	push	ar6
      001063 C0 03            [24] 3646 	push	ar3
      001065 C0 04            [24] 3647 	push	ar4
      001067 C0 05            [24] 3648 	push	ar5
      001069 74rFF            [12] 3649 	mov	a,#___str_66
      00106B C0 E0            [24] 3650 	push	acc
      00106D 74s09            [12] 3651 	mov	a,#(___str_66 >> 8)
      00106F C0 E0            [24] 3652 	push	acc
      001071 74 80            [12] 3653 	mov	a,#0x80
      001073 C0 E0            [24] 3654 	push	acc
      001075 12r00r00         [24] 3655 	lcall	_printf
      001078 E5 81            [12] 3656 	mov	a,sp
      00107A 24 FA            [12] 3657 	add	a,#0xfa
      00107C F5 81            [12] 3658 	mov	sp,a
      00107E D0 06            [24] 3659 	pop	ar6
      001080 D0 07            [24] 3660 	pop	ar7
      001082                       3661 00102$:
                                   3662 ;	program.c:803: printf("%x ", *(buffers_array[0].buffer_start + i));
      001082 90r00r0C         [24] 3663 	mov	dptr,#(_buffers_array + 0x0002)
      001085 E0               [24] 3664 	movx	a,@dptr
      001086 FB               [12] 3665 	mov	r3,a
      001087 A3               [24] 3666 	inc	dptr
      001088 E0               [24] 3667 	movx	a,@dptr
      001089 FC               [12] 3668 	mov	r4,a
      00108A A3               [24] 3669 	inc	dptr
      00108B E0               [24] 3670 	movx	a,@dptr
      00108C FD               [12] 3671 	mov	r5,a
      00108D EE               [12] 3672 	mov	a,r6
      00108E 2B               [12] 3673 	add	a,r3
      00108F FB               [12] 3674 	mov	r3,a
      001090 EF               [12] 3675 	mov	a,r7
      001091 3C               [12] 3676 	addc	a,r4
      001092 FC               [12] 3677 	mov	r4,a
      001093 8B 82            [24] 3678 	mov	dpl,r3
      001095 8C 83            [24] 3679 	mov	dph,r4
      001097 8D F0            [24] 3680 	mov	b,r5
      001099 12r00r00         [24] 3681 	lcall	__gptrget
      00109C FB               [12] 3682 	mov	r3,a
      00109D 7D 00            [12] 3683 	mov	r5,#0x00
      00109F C0 07            [24] 3684 	push	ar7
      0010A1 C0 06            [24] 3685 	push	ar6
      0010A3 C0 03            [24] 3686 	push	ar3
      0010A5 C0 05            [24] 3687 	push	ar5
      0010A7 74r06            [12] 3688 	mov	a,#___str_67
      0010A9 C0 E0            [24] 3689 	push	acc
      0010AB 74s0A            [12] 3690 	mov	a,#(___str_67 >> 8)
      0010AD C0 E0            [24] 3691 	push	acc
      0010AF 74 80            [12] 3692 	mov	a,#0x80
      0010B1 C0 E0            [24] 3693 	push	acc
      0010B3 12r00r00         [24] 3694 	lcall	_printf
      0010B6 E5 81            [12] 3695 	mov	a,sp
      0010B8 24 FB            [12] 3696 	add	a,#0xfb
      0010BA F5 81            [12] 3697 	mov	sp,a
      0010BC D0 06            [24] 3698 	pop	ar6
      0010BE D0 07            [24] 3699 	pop	ar7
                                   3700 ;	program.c:804: j--;
      0010C0 90r01r61         [24] 3701 	mov	dptr,#_dump_buff_zero_hex_j_131073_145
      0010C3 E0               [24] 3702 	movx	a,@dptr
      0010C4 24 FF            [12] 3703 	add	a,#0xff
      0010C6 FC               [12] 3704 	mov	r4,a
      0010C7 A3               [24] 3705 	inc	dptr
      0010C8 E0               [24] 3706 	movx	a,@dptr
      0010C9 34 FF            [12] 3707 	addc	a,#0xff
      0010CB FD               [12] 3708 	mov	r5,a
      0010CC 90r01r61         [24] 3709 	mov	dptr,#_dump_buff_zero_hex_j_131073_145
      0010CF EC               [12] 3710 	mov	a,r4
      0010D0 F0               [24] 3711 	movx	@dptr,a
      0010D1 ED               [12] 3712 	mov	a,r5
      0010D2 A3               [24] 3713 	inc	dptr
      0010D3 F0               [24] 3714 	movx	@dptr,a
                                   3715 ;	program.c:805: if (j == 0)
      0010D4 90r01r61         [24] 3716 	mov	dptr,#_dump_buff_zero_hex_j_131073_145
      0010D7 E0               [24] 3717 	movx	a,@dptr
      0010D8 F5 F0            [12] 3718 	mov	b,a
      0010DA A3               [24] 3719 	inc	dptr
      0010DB E0               [24] 3720 	movx	a,@dptr
      0010DC 45 F0            [12] 3721 	orl	a,b
      0010DE 70 09            [24] 3722 	jnz	00111$
                                   3723 ;	program.c:806: j = 16;
      0010E0 90r01r61         [24] 3724 	mov	dptr,#_dump_buff_zero_hex_j_131073_145
      0010E3 74 10            [12] 3725 	mov	a,#0x10
      0010E5 F0               [24] 3726 	movx	@dptr,a
      0010E6 E4               [12] 3727 	clr	a
      0010E7 A3               [24] 3728 	inc	dptr
      0010E8 F0               [24] 3729 	movx	@dptr,a
      0010E9                       3730 00111$:
                                   3731 ;	program.c:797: for (int i = 0; i < buffers_array[0].num_char; i++)
      0010E9 0E               [12] 3732 	inc	r6
      0010EA BE 00 01         [24] 3733 	cjne	r6,#0x00,00140$
      0010ED 0F               [12] 3734 	inc	r7
      0010EE                       3735 00140$:
      0010EE 02r10r26         [24] 3736 	ljmp	00110$
      0010F1                       3737 00105$:
                                   3738 ;	program.c:808: printf("\n\n\r");
      0010F1 74r62            [12] 3739 	mov	a,#___str_62
      0010F3 C0 E0            [24] 3740 	push	acc
      0010F5 74s09            [12] 3741 	mov	a,#(___str_62 >> 8)
      0010F7 C0 E0            [24] 3742 	push	acc
      0010F9 74 80            [12] 3743 	mov	a,#0x80
      0010FB C0 E0            [24] 3744 	push	acc
      0010FD 12r00r00         [24] 3745 	lcall	_printf
      001100 15 81            [12] 3746 	dec	sp
      001102 15 81            [12] 3747 	dec	sp
      001104 15 81            [12] 3748 	dec	sp
      001106 22               [24] 3749 	ret
      001107                       3750 00107$:
                                   3751 ;	program.c:812: printf("Buffer 0 is empty...\n\r");
      001107 74r0A            [12] 3752 	mov	a,#___str_68
      001109 C0 E0            [24] 3753 	push	acc
      00110B 74s0A            [12] 3754 	mov	a,#(___str_68 >> 8)
      00110D C0 E0            [24] 3755 	push	acc
      00110F 74 80            [12] 3756 	mov	a,#0x80
      001111 C0 E0            [24] 3757 	push	acc
      001113 12r00r00         [24] 3758 	lcall	_printf
      001116 15 81            [12] 3759 	dec	sp
      001118 15 81            [12] 3760 	dec	sp
      00111A 15 81            [12] 3761 	dec	sp
                                   3762 ;	program.c:814: }
      00111C 22               [24] 3763 	ret
                                   3764 ;------------------------------------------------------------
                                   3765 ;Allocation info for local variables in function 'print_heap_stats'
                                   3766 ;------------------------------------------------------------
                                   3767 ;	program.c:821: void print_heap_stats()
                                   3768 ;	-----------------------------------------
                                   3769 ;	 function print_heap_stats
                                   3770 ;	-----------------------------------------
      00111D                       3771 _print_heap_stats:
                                   3772 ;	program.c:823: DEBUGPORT(0xB);
      00111D 75 82 0B         [24] 3773 	mov	dpl,#0x0b
      001120 12r14rFE         [24] 3774 	lcall	_dataout
                                   3775 ;	program.c:824: printf("\n\r****************HEAP*STATS*************\n\r");
      001123 74r21            [12] 3776 	mov	a,#___str_69
      001125 C0 E0            [24] 3777 	push	acc
      001127 74s0A            [12] 3778 	mov	a,#(___str_69 >> 8)
      001129 C0 E0            [24] 3779 	push	acc
      00112B 74 80            [12] 3780 	mov	a,#0x80
      00112D C0 E0            [24] 3781 	push	acc
      00112F 12r00r00         [24] 3782 	lcall	_printf
      001132 15 81            [12] 3783 	dec	sp
      001134 15 81            [12] 3784 	dec	sp
      001136 15 81            [12] 3785 	dec	sp
                                   3786 ;	program.c:825: printf("Total Heap Size: %d \n\r", program_stats.total_heap_size);
      001138 90r00r00         [24] 3787 	mov	dptr,#_program_stats
      00113B E0               [24] 3788 	movx	a,@dptr
      00113C FE               [12] 3789 	mov	r6,a
      00113D A3               [24] 3790 	inc	dptr
      00113E E0               [24] 3791 	movx	a,@dptr
      00113F FF               [12] 3792 	mov	r7,a
      001140 C0 06            [24] 3793 	push	ar6
      001142 C0 07            [24] 3794 	push	ar7
      001144 74r4D            [12] 3795 	mov	a,#___str_70
      001146 C0 E0            [24] 3796 	push	acc
      001148 74s0A            [12] 3797 	mov	a,#(___str_70 >> 8)
      00114A C0 E0            [24] 3798 	push	acc
      00114C 74 80            [12] 3799 	mov	a,#0x80
      00114E C0 E0            [24] 3800 	push	acc
      001150 12r00r00         [24] 3801 	lcall	_printf
      001153 E5 81            [12] 3802 	mov	a,sp
      001155 24 FB            [12] 3803 	add	a,#0xfb
      001157 F5 81            [12] 3804 	mov	sp,a
                                   3805 ;	program.c:826: printf("Allocated Heap Size: %d \n\r", program_stats.allocated_heap);
      001159 90r00r02         [24] 3806 	mov	dptr,#(_program_stats + 0x0002)
      00115C E0               [24] 3807 	movx	a,@dptr
      00115D FE               [12] 3808 	mov	r6,a
      00115E A3               [24] 3809 	inc	dptr
      00115F E0               [24] 3810 	movx	a,@dptr
      001160 FF               [12] 3811 	mov	r7,a
      001161 C0 06            [24] 3812 	push	ar6
      001163 C0 07            [24] 3813 	push	ar7
      001165 74r64            [12] 3814 	mov	a,#___str_71
      001167 C0 E0            [24] 3815 	push	acc
      001169 74s0A            [12] 3816 	mov	a,#(___str_71 >> 8)
      00116B C0 E0            [24] 3817 	push	acc
      00116D 74 80            [12] 3818 	mov	a,#0x80
      00116F C0 E0            [24] 3819 	push	acc
      001171 12r00r00         [24] 3820 	lcall	_printf
      001174 E5 81            [12] 3821 	mov	a,sp
      001176 24 FB            [12] 3822 	add	a,#0xfb
      001178 F5 81            [12] 3823 	mov	sp,a
                                   3824 ;	program.c:827: printf("All Chars: %d \n\r", program_stats.all_char_count);
      00117A 90r00r04         [24] 3825 	mov	dptr,#(_program_stats + 0x0004)
      00117D E0               [24] 3826 	movx	a,@dptr
      00117E FE               [12] 3827 	mov	r6,a
      00117F A3               [24] 3828 	inc	dptr
      001180 E0               [24] 3829 	movx	a,@dptr
      001181 FF               [12] 3830 	mov	r7,a
      001182 C0 06            [24] 3831 	push	ar6
      001184 C0 07            [24] 3832 	push	ar7
      001186 74r7F            [12] 3833 	mov	a,#___str_72
      001188 C0 E0            [24] 3834 	push	acc
      00118A 74s0A            [12] 3835 	mov	a,#(___str_72 >> 8)
      00118C C0 E0            [24] 3836 	push	acc
      00118E 74 80            [12] 3837 	mov	a,#0x80
      001190 C0 E0            [24] 3838 	push	acc
      001192 12r00r00         [24] 3839 	lcall	_printf
      001195 E5 81            [12] 3840 	mov	a,sp
      001197 24 FB            [12] 3841 	add	a,#0xfb
      001199 F5 81            [12] 3842 	mov	sp,a
                                   3843 ;	program.c:828: printf("Storage Chars: %d \n\r", program_stats.storage_char_count);
      00119B 90r00r06         [24] 3844 	mov	dptr,#(_program_stats + 0x0006)
      00119E E0               [24] 3845 	movx	a,@dptr
      00119F FE               [12] 3846 	mov	r6,a
      0011A0 A3               [24] 3847 	inc	dptr
      0011A1 E0               [24] 3848 	movx	a,@dptr
      0011A2 FF               [12] 3849 	mov	r7,a
      0011A3 C0 06            [24] 3850 	push	ar6
      0011A5 C0 07            [24] 3851 	push	ar7
      0011A7 74r90            [12] 3852 	mov	a,#___str_73
      0011A9 C0 E0            [24] 3853 	push	acc
      0011AB 74s0A            [12] 3854 	mov	a,#(___str_73 >> 8)
      0011AD C0 E0            [24] 3855 	push	acc
      0011AF 74 80            [12] 3856 	mov	a,#0x80
      0011B1 C0 E0            [24] 3857 	push	acc
      0011B3 12r00r00         [24] 3858 	lcall	_printf
      0011B6 E5 81            [12] 3859 	mov	a,sp
      0011B8 24 FB            [12] 3860 	add	a,#0xfb
      0011BA F5 81            [12] 3861 	mov	sp,a
                                   3862 ;	program.c:829: printf("Total Buffers: %d \n\r", program_stats.total_buffers);
      0011BC 90r00r08         [24] 3863 	mov	dptr,#(_program_stats + 0x0008)
      0011BF E0               [24] 3864 	movx	a,@dptr
      0011C0 FE               [12] 3865 	mov	r6,a
      0011C1 A3               [24] 3866 	inc	dptr
      0011C2 E0               [24] 3867 	movx	a,@dptr
      0011C3 FF               [12] 3868 	mov	r7,a
      0011C4 C0 06            [24] 3869 	push	ar6
      0011C6 C0 07            [24] 3870 	push	ar7
      0011C8 74rA5            [12] 3871 	mov	a,#___str_74
      0011CA C0 E0            [24] 3872 	push	acc
      0011CC 74s0A            [12] 3873 	mov	a,#(___str_74 >> 8)
      0011CE C0 E0            [24] 3874 	push	acc
      0011D0 74 80            [12] 3875 	mov	a,#0x80
      0011D2 C0 E0            [24] 3876 	push	acc
      0011D4 12r00r00         [24] 3877 	lcall	_printf
      0011D7 E5 81            [12] 3878 	mov	a,sp
      0011D9 24 FB            [12] 3879 	add	a,#0xfb
      0011DB F5 81            [12] 3880 	mov	sp,a
                                   3881 ;	program.c:830: }
      0011DD 22               [24] 3882 	ret
                                   3883 ;------------------------------------------------------------
                                   3884 ;Allocation info for local variables in function 'print_all_buffers'
                                   3885 ;------------------------------------------------------------
                                   3886 ;i                         Allocated with name '_print_all_buffers_i_131072_152'
                                   3887 ;------------------------------------------------------------
                                   3888 ;	program.c:837: void print_all_buffers()
                                   3889 ;	-----------------------------------------
                                   3890 ;	 function print_all_buffers
                                   3891 ;	-----------------------------------------
      0011DE                       3892 _print_all_buffers:
                                   3893 ;	program.c:839: DEBUGPORT(0xC)
      0011DE 75 82 0C         [24] 3894 	mov	dpl,#0x0c
      0011E1 12r14rFE         [24] 3895 	lcall	_dataout
                                   3896 ;	program.c:840: for (int i = 0; i < program_stats.total_buffers; i++)
      0011E4 7E 00            [12] 3897 	mov	r6,#0x00
      0011E6 7F 00            [12] 3898 	mov	r7,#0x00
      0011E8                       3899 00103$:
      0011E8 90r00r08         [24] 3900 	mov	dptr,#(_program_stats + 0x0008)
      0011EB E0               [24] 3901 	movx	a,@dptr
      0011EC FC               [12] 3902 	mov	r4,a
      0011ED A3               [24] 3903 	inc	dptr
      0011EE E0               [24] 3904 	movx	a,@dptr
      0011EF FD               [12] 3905 	mov	r5,a
      0011F0 C3               [12] 3906 	clr	c
      0011F1 EE               [12] 3907 	mov	a,r6
      0011F2 9C               [12] 3908 	subb	a,r4
      0011F3 EF               [12] 3909 	mov	a,r7
      0011F4 64 80            [12] 3910 	xrl	a,#0x80
      0011F6 8D F0            [24] 3911 	mov	b,r5
      0011F8 63 F0 80         [24] 3912 	xrl	b,#0x80
      0011FB 95 F0            [12] 3913 	subb	a,b
      0011FD 40 03            [24] 3914 	jc	00116$
      0011FF 02r13r38         [24] 3915 	ljmp	00101$
      001202                       3916 00116$:
                                   3917 ;	program.c:842: printf("****************BUFFER*%d***************\n\r", i);
      001202 C0 07            [24] 3918 	push	ar7
      001204 C0 06            [24] 3919 	push	ar6
      001206 C0 06            [24] 3920 	push	ar6
      001208 C0 07            [24] 3921 	push	ar7
      00120A 74rBA            [12] 3922 	mov	a,#___str_75
      00120C C0 E0            [24] 3923 	push	acc
      00120E 74s0A            [12] 3924 	mov	a,#(___str_75 >> 8)
      001210 C0 E0            [24] 3925 	push	acc
      001212 74 80            [12] 3926 	mov	a,#0x80
      001214 C0 E0            [24] 3927 	push	acc
      001216 12r00r00         [24] 3928 	lcall	_printf
      001219 E5 81            [12] 3929 	mov	a,sp
      00121B 24 FB            [12] 3930 	add	a,#0xfb
      00121D F5 81            [12] 3931 	mov	sp,a
      00121F D0 06            [24] 3932 	pop	ar6
      001221 D0 07            [24] 3933 	pop	ar7
                                   3934 ;	program.c:843: printf("Buffer#: %d \n\r", buffers_array[i].buffer_num);
      001223 90r00r00         [24] 3935 	mov	dptr,#__mulint_PARM_2
      001226 EE               [12] 3936 	mov	a,r6
      001227 F0               [24] 3937 	movx	@dptr,a
      001228 EF               [12] 3938 	mov	a,r7
      001229 A3               [24] 3939 	inc	dptr
      00122A F0               [24] 3940 	movx	@dptr,a
      00122B 90 00 0C         [24] 3941 	mov	dptr,#0x000c
      00122E C0 07            [24] 3942 	push	ar7
      001230 C0 06            [24] 3943 	push	ar6
      001232 12r00r00         [24] 3944 	lcall	__mulint
      001235 AC 82            [24] 3945 	mov	r4,dpl
      001237 AD 83            [24] 3946 	mov	r5,dph
      001239 EC               [12] 3947 	mov	a,r4
      00123A 24r0A            [12] 3948 	add	a,#_buffers_array
      00123C F5 82            [12] 3949 	mov	dpl,a
      00123E ED               [12] 3950 	mov	a,r5
      00123F 34s00            [12] 3951 	addc	a,#(_buffers_array >> 8)
      001241 F5 83            [12] 3952 	mov	dph,a
      001243 E0               [24] 3953 	movx	a,@dptr
      001244 FA               [12] 3954 	mov	r2,a
      001245 A3               [24] 3955 	inc	dptr
      001246 E0               [24] 3956 	movx	a,@dptr
      001247 FB               [12] 3957 	mov	r3,a
      001248 C0 05            [24] 3958 	push	ar5
      00124A C0 04            [24] 3959 	push	ar4
      00124C C0 02            [24] 3960 	push	ar2
      00124E C0 03            [24] 3961 	push	ar3
      001250 74rE5            [12] 3962 	mov	a,#___str_76
      001252 C0 E0            [24] 3963 	push	acc
      001254 74s0A            [12] 3964 	mov	a,#(___str_76 >> 8)
      001256 C0 E0            [24] 3965 	push	acc
      001258 74 80            [12] 3966 	mov	a,#0x80
      00125A C0 E0            [24] 3967 	push	acc
      00125C 12r00r00         [24] 3968 	lcall	_printf
      00125F E5 81            [12] 3969 	mov	a,sp
      001261 24 FB            [12] 3970 	add	a,#0xfb
      001263 F5 81            [12] 3971 	mov	sp,a
      001265 D0 04            [24] 3972 	pop	ar4
      001267 D0 05            [24] 3973 	pop	ar5
                                   3974 ;	program.c:844: printf("BufferStart: %p \n\r", buffers_array[i].buffer_start);
      001269 EC               [12] 3975 	mov	a,r4
      00126A 24r0A            [12] 3976 	add	a,#_buffers_array
      00126C FC               [12] 3977 	mov	r4,a
      00126D ED               [12] 3978 	mov	a,r5
      00126E 34s00            [12] 3979 	addc	a,#(_buffers_array >> 8)
      001270 FD               [12] 3980 	mov	r5,a
      001271 8C 82            [24] 3981 	mov	dpl,r4
      001273 8D 83            [24] 3982 	mov	dph,r5
      001275 A3               [24] 3983 	inc	dptr
      001276 A3               [24] 3984 	inc	dptr
      001277 E0               [24] 3985 	movx	a,@dptr
      001278 F9               [12] 3986 	mov	r1,a
      001279 A3               [24] 3987 	inc	dptr
      00127A E0               [24] 3988 	movx	a,@dptr
      00127B FA               [12] 3989 	mov	r2,a
      00127C A3               [24] 3990 	inc	dptr
      00127D E0               [24] 3991 	movx	a,@dptr
      00127E FB               [12] 3992 	mov	r3,a
      00127F C0 05            [24] 3993 	push	ar5
      001281 C0 04            [24] 3994 	push	ar4
      001283 C0 01            [24] 3995 	push	ar1
      001285 C0 02            [24] 3996 	push	ar2
      001287 C0 03            [24] 3997 	push	ar3
      001289 74rF4            [12] 3998 	mov	a,#___str_77
      00128B C0 E0            [24] 3999 	push	acc
      00128D 74s0A            [12] 4000 	mov	a,#(___str_77 >> 8)
      00128F C0 E0            [24] 4001 	push	acc
      001291 74 80            [12] 4002 	mov	a,#0x80
      001293 C0 E0            [24] 4003 	push	acc
      001295 12r00r00         [24] 4004 	lcall	_printf
      001298 E5 81            [12] 4005 	mov	a,sp
      00129A 24 FA            [12] 4006 	add	a,#0xfa
      00129C F5 81            [12] 4007 	mov	sp,a
      00129E D0 04            [24] 4008 	pop	ar4
      0012A0 D0 05            [24] 4009 	pop	ar5
                                   4010 ;	program.c:845: printf("BufferEnd: %p \n\r", buffers_array[i].buffer_end);
      0012A2 8C 82            [24] 4011 	mov	dpl,r4
      0012A4 8D 83            [24] 4012 	mov	dph,r5
      0012A6 A3               [24] 4013 	inc	dptr
      0012A7 A3               [24] 4014 	inc	dptr
      0012A8 A3               [24] 4015 	inc	dptr
      0012A9 A3               [24] 4016 	inc	dptr
      0012AA A3               [24] 4017 	inc	dptr
      0012AB E0               [24] 4018 	movx	a,@dptr
      0012AC F9               [12] 4019 	mov	r1,a
      0012AD A3               [24] 4020 	inc	dptr
      0012AE E0               [24] 4021 	movx	a,@dptr
      0012AF FA               [12] 4022 	mov	r2,a
      0012B0 A3               [24] 4023 	inc	dptr
      0012B1 E0               [24] 4024 	movx	a,@dptr
      0012B2 FB               [12] 4025 	mov	r3,a
      0012B3 C0 05            [24] 4026 	push	ar5
      0012B5 C0 04            [24] 4027 	push	ar4
      0012B7 C0 01            [24] 4028 	push	ar1
      0012B9 C0 02            [24] 4029 	push	ar2
      0012BB C0 03            [24] 4030 	push	ar3
      0012BD 74r07            [12] 4031 	mov	a,#___str_78
      0012BF C0 E0            [24] 4032 	push	acc
      0012C1 74s0B            [12] 4033 	mov	a,#(___str_78 >> 8)
      0012C3 C0 E0            [24] 4034 	push	acc
      0012C5 74 80            [12] 4035 	mov	a,#0x80
      0012C7 C0 E0            [24] 4036 	push	acc
      0012C9 12r00r00         [24] 4037 	lcall	_printf
      0012CC E5 81            [12] 4038 	mov	a,sp
      0012CE 24 FA            [12] 4039 	add	a,#0xfa
      0012D0 F5 81            [12] 4040 	mov	sp,a
      0012D2 D0 04            [24] 4041 	pop	ar4
      0012D4 D0 05            [24] 4042 	pop	ar5
                                   4043 ;	program.c:846: printf("BufferSize: %d \n\r", buffers_array[i].buff_size);
      0012D6 74 08            [12] 4044 	mov	a,#0x08
      0012D8 2C               [12] 4045 	add	a,r4
      0012D9 F5 82            [12] 4046 	mov	dpl,a
      0012DB E4               [12] 4047 	clr	a
      0012DC 3D               [12] 4048 	addc	a,r5
      0012DD F5 83            [12] 4049 	mov	dph,a
      0012DF E0               [24] 4050 	movx	a,@dptr
      0012E0 FA               [12] 4051 	mov	r2,a
      0012E1 A3               [24] 4052 	inc	dptr
      0012E2 E0               [24] 4053 	movx	a,@dptr
      0012E3 FB               [12] 4054 	mov	r3,a
      0012E4 C0 05            [24] 4055 	push	ar5
      0012E6 C0 04            [24] 4056 	push	ar4
      0012E8 C0 02            [24] 4057 	push	ar2
      0012EA C0 03            [24] 4058 	push	ar3
      0012EC 74r18            [12] 4059 	mov	a,#___str_79
      0012EE C0 E0            [24] 4060 	push	acc
      0012F0 74s0B            [12] 4061 	mov	a,#(___str_79 >> 8)
      0012F2 C0 E0            [24] 4062 	push	acc
      0012F4 74 80            [12] 4063 	mov	a,#0x80
      0012F6 C0 E0            [24] 4064 	push	acc
      0012F8 12r00r00         [24] 4065 	lcall	_printf
      0012FB E5 81            [12] 4066 	mov	a,sp
      0012FD 24 FB            [12] 4067 	add	a,#0xfb
      0012FF F5 81            [12] 4068 	mov	sp,a
      001301 D0 04            [24] 4069 	pop	ar4
      001303 D0 05            [24] 4070 	pop	ar5
                                   4071 ;	program.c:847: printf("TotalUsed: %d \n\r", buffers_array[i].num_char);
      001305 74 0A            [12] 4072 	mov	a,#0x0a
      001307 2C               [12] 4073 	add	a,r4
      001308 F5 82            [12] 4074 	mov	dpl,a
      00130A E4               [12] 4075 	clr	a
      00130B 3D               [12] 4076 	addc	a,r5
      00130C F5 83            [12] 4077 	mov	dph,a
      00130E E0               [24] 4078 	movx	a,@dptr
      00130F FC               [12] 4079 	mov	r4,a
      001310 A3               [24] 4080 	inc	dptr
      001311 E0               [24] 4081 	movx	a,@dptr
      001312 FD               [12] 4082 	mov	r5,a
      001313 C0 04            [24] 4083 	push	ar4
      001315 C0 05            [24] 4084 	push	ar5
      001317 74r2A            [12] 4085 	mov	a,#___str_80
      001319 C0 E0            [24] 4086 	push	acc
      00131B 74s0B            [12] 4087 	mov	a,#(___str_80 >> 8)
      00131D C0 E0            [24] 4088 	push	acc
      00131F 74 80            [12] 4089 	mov	a,#0x80
      001321 C0 E0            [24] 4090 	push	acc
      001323 12r00r00         [24] 4091 	lcall	_printf
      001326 E5 81            [12] 4092 	mov	a,sp
      001328 24 FB            [12] 4093 	add	a,#0xfb
      00132A F5 81            [12] 4094 	mov	sp,a
      00132C D0 06            [24] 4095 	pop	ar6
      00132E D0 07            [24] 4096 	pop	ar7
                                   4097 ;	program.c:840: for (int i = 0; i < program_stats.total_buffers; i++)
      001330 0E               [12] 4098 	inc	r6
      001331 BE 00 01         [24] 4099 	cjne	r6,#0x00,00117$
      001334 0F               [12] 4100 	inc	r7
      001335                       4101 00117$:
      001335 02r11rE8         [24] 4102 	ljmp	00103$
      001338                       4103 00101$:
                                   4104 ;	program.c:849: printf("***************************************\n\r");
      001338 74r3B            [12] 4105 	mov	a,#___str_81
      00133A C0 E0            [24] 4106 	push	acc
      00133C 74s0B            [12] 4107 	mov	a,#(___str_81 >> 8)
      00133E C0 E0            [24] 4108 	push	acc
      001340 74 80            [12] 4109 	mov	a,#0x80
      001342 C0 E0            [24] 4110 	push	acc
      001344 12r00r00         [24] 4111 	lcall	_printf
      001347 15 81            [12] 4112 	dec	sp
      001349 15 81            [12] 4113 	dec	sp
      00134B 15 81            [12] 4114 	dec	sp
                                   4115 ;	program.c:850: }
      00134D 22               [24] 4116 	ret
                                   4117 ;------------------------------------------------------------
                                   4118 ;Allocation info for local variables in function 'get_number'
                                   4119 ;------------------------------------------------------------
                                   4120 ;total_chars               Allocated with name '_get_number_total_chars_65536_154'
                                   4121 ;rec                       Allocated with name '_get_number_rec_65537_156'
                                   4122 ;num                       Allocated with name '_get_number_num_65537_156'
                                   4123 ;i                         Allocated with name '_get_number_i_131073_157'
                                   4124 ;------------------------------------------------------------
                                   4125 ;	program.c:857: int get_number(int total_chars)
                                   4126 ;	-----------------------------------------
                                   4127 ;	 function get_number
                                   4128 ;	-----------------------------------------
      00134E                       4129 _get_number:
      00134E AF 83            [24] 4130 	mov	r7,dph
      001350 E5 82            [12] 4131 	mov	a,dpl
      001352 90r01r63         [24] 4132 	mov	dptr,#_get_number_total_chars_65536_154
      001355 F0               [24] 4133 	movx	@dptr,a
      001356 EF               [12] 4134 	mov	a,r7
      001357 A3               [24] 4135 	inc	dptr
      001358 F0               [24] 4136 	movx	@dptr,a
                                   4137 ;	program.c:859: DEBUGPORT(0xD);
      001359 75 82 0D         [24] 4138 	mov	dpl,#0x0d
      00135C 12r14rFE         [24] 4139 	lcall	_dataout
                                   4140 ;	program.c:861: int num = 0;
      00135F 90r01r65         [24] 4141 	mov	dptr,#_get_number_num_65537_156
      001362 E4               [12] 4142 	clr	a
      001363 F0               [24] 4143 	movx	@dptr,a
      001364 A3               [24] 4144 	inc	dptr
      001365 F0               [24] 4145 	movx	@dptr,a
                                   4146 ;	program.c:862: for (int i = total_chars; i > 0; i--)
      001366 90r01r63         [24] 4147 	mov	dptr,#_get_number_total_chars_65536_154
      001369 E0               [24] 4148 	movx	a,@dptr
      00136A FE               [12] 4149 	mov	r6,a
      00136B A3               [24] 4150 	inc	dptr
      00136C E0               [24] 4151 	movx	a,@dptr
      00136D FF               [12] 4152 	mov	r7,a
      00136E                       4153 00107$:
      00136E C3               [12] 4154 	clr	c
      00136F E4               [12] 4155 	clr	a
      001370 9E               [12] 4156 	subb	a,r6
      001371 74 80            [12] 4157 	mov	a,#(0x00 ^ 0x80)
      001373 8F F0            [24] 4158 	mov	b,r7
      001375 63 F0 80         [24] 4159 	xrl	b,#0x80
      001378 95 F0            [12] 4160 	subb	a,b
      00137A 40 03            [24] 4161 	jc	00127$
      00137C 02r14r1A         [24] 4162 	ljmp	00105$
      00137F                       4163 00127$:
                                   4164 ;	program.c:864: rec = getchar();
      00137F C0 07            [24] 4165 	push	ar7
      001381 C0 06            [24] 4166 	push	ar6
      001383 12r14rC2         [24] 4167 	lcall	_getchar
      001386 AC 82            [24] 4168 	mov	r4,dpl
      001388 AD 83            [24] 4169 	mov	r5,dph
      00138A D0 06            [24] 4170 	pop	ar6
      00138C D0 07            [24] 4171 	pop	ar7
                                   4172 ;	program.c:866: if (rec <= 0x39 && rec >= 0x30)
      00138E C3               [12] 4173 	clr	c
      00138F 74 39            [12] 4174 	mov	a,#0x39
      001391 9C               [12] 4175 	subb	a,r4
      001392 74 80            [12] 4176 	mov	a,#(0x00 ^ 0x80)
      001394 8D F0            [24] 4177 	mov	b,r5
      001396 63 F0 80         [24] 4178 	xrl	b,#0x80
      001399 95 F0            [12] 4179 	subb	a,b
      00139B 40 5C            [24] 4180 	jc	00102$
      00139D EC               [12] 4181 	mov	a,r4
      00139E 94 30            [12] 4182 	subb	a,#0x30
      0013A0 ED               [12] 4183 	mov	a,r5
      0013A1 64 80            [12] 4184 	xrl	a,#0x80
      0013A3 94 80            [12] 4185 	subb	a,#0x80
      0013A5 40 52            [24] 4186 	jc	00102$
                                   4187 ;	program.c:868: num += ((rec - 0x30) * get_num_helper(i - 1));
      0013A7 EC               [12] 4188 	mov	a,r4
      0013A8 24 D0            [12] 4189 	add	a,#0xd0
      0013AA FC               [12] 4190 	mov	r4,a
      0013AB ED               [12] 4191 	mov	a,r5
      0013AC 34 FF            [12] 4192 	addc	a,#0xff
      0013AE FD               [12] 4193 	mov	r5,a
      0013AF EE               [12] 4194 	mov	a,r6
      0013B0 24 FF            [12] 4195 	add	a,#0xff
      0013B2 FA               [12] 4196 	mov	r2,a
      0013B3 EF               [12] 4197 	mov	a,r7
      0013B4 34 FF            [12] 4198 	addc	a,#0xff
      0013B6 FB               [12] 4199 	mov	r3,a
      0013B7 8A 82            [24] 4200 	mov	dpl,r2
      0013B9 8B 83            [24] 4201 	mov	dph,r3
      0013BB C0 07            [24] 4202 	push	ar7
      0013BD C0 06            [24] 4203 	push	ar6
      0013BF C0 05            [24] 4204 	push	ar5
      0013C1 C0 04            [24] 4205 	push	ar4
      0013C3 12r14r26         [24] 4206 	lcall	_get_num_helper
      0013C6 AA 82            [24] 4207 	mov	r2,dpl
      0013C8 AB 83            [24] 4208 	mov	r3,dph
      0013CA D0 04            [24] 4209 	pop	ar4
      0013CC D0 05            [24] 4210 	pop	ar5
      0013CE 90r00r00         [24] 4211 	mov	dptr,#__mulint_PARM_2
      0013D1 EA               [12] 4212 	mov	a,r2
      0013D2 F0               [24] 4213 	movx	@dptr,a
      0013D3 EB               [12] 4214 	mov	a,r3
      0013D4 A3               [24] 4215 	inc	dptr
      0013D5 F0               [24] 4216 	movx	@dptr,a
      0013D6 8C 82            [24] 4217 	mov	dpl,r4
      0013D8 8D 83            [24] 4218 	mov	dph,r5
      0013DA 12r00r00         [24] 4219 	lcall	__mulint
      0013DD AC 82            [24] 4220 	mov	r4,dpl
      0013DF AD 83            [24] 4221 	mov	r5,dph
      0013E1 D0 06            [24] 4222 	pop	ar6
      0013E3 D0 07            [24] 4223 	pop	ar7
      0013E5 90r01r65         [24] 4224 	mov	dptr,#_get_number_num_65537_156
      0013E8 E0               [24] 4225 	movx	a,@dptr
      0013E9 FA               [12] 4226 	mov	r2,a
      0013EA A3               [24] 4227 	inc	dptr
      0013EB E0               [24] 4228 	movx	a,@dptr
      0013EC FB               [12] 4229 	mov	r3,a
      0013ED 90r01r65         [24] 4230 	mov	dptr,#_get_number_num_65537_156
      0013F0 EC               [12] 4231 	mov	a,r4
      0013F1 2A               [12] 4232 	add	a,r2
      0013F2 F0               [24] 4233 	movx	@dptr,a
      0013F3 ED               [12] 4234 	mov	a,r5
      0013F4 3B               [12] 4235 	addc	a,r3
      0013F5 A3               [24] 4236 	inc	dptr
      0013F6 F0               [24] 4237 	movx	@dptr,a
      0013F7 80 19            [24] 4238 	sjmp	00108$
      0013F9                       4239 00102$:
                                   4240 ;	program.c:872: printf("ERR,Numbers ONLY!\n\r");
      0013F9 74r65            [12] 4241 	mov	a,#___str_82
      0013FB C0 E0            [24] 4242 	push	acc
      0013FD 74s0B            [12] 4243 	mov	a,#(___str_82 >> 8)
      0013FF C0 E0            [24] 4244 	push	acc
      001401 74 80            [12] 4245 	mov	a,#0x80
      001403 C0 E0            [24] 4246 	push	acc
      001405 12r00r00         [24] 4247 	lcall	_printf
      001408 15 81            [12] 4248 	dec	sp
      00140A 15 81            [12] 4249 	dec	sp
      00140C 15 81            [12] 4250 	dec	sp
                                   4251 ;	program.c:873: return -1;
      00140E 90 FF FF         [24] 4252 	mov	dptr,#0xffff
      001411 22               [24] 4253 	ret
      001412                       4254 00108$:
                                   4255 ;	program.c:862: for (int i = total_chars; i > 0; i--)
      001412 1E               [12] 4256 	dec	r6
      001413 BE FF 01         [24] 4257 	cjne	r6,#0xff,00130$
      001416 1F               [12] 4258 	dec	r7
      001417                       4259 00130$:
      001417 02r13r6E         [24] 4260 	ljmp	00107$
      00141A                       4261 00105$:
                                   4262 ;	program.c:876: return num;
      00141A 90r01r65         [24] 4263 	mov	dptr,#_get_number_num_65537_156
      00141D E0               [24] 4264 	movx	a,@dptr
      00141E FE               [12] 4265 	mov	r6,a
      00141F A3               [24] 4266 	inc	dptr
      001420 E0               [24] 4267 	movx	a,@dptr
                                   4268 ;	program.c:877: }
      001421 8E 82            [24] 4269 	mov	dpl,r6
      001423 F5 83            [12] 4270 	mov	dph,a
      001425 22               [24] 4271 	ret
                                   4272 ;------------------------------------------------------------
                                   4273 ;Allocation info for local variables in function 'get_num_helper'
                                   4274 ;------------------------------------------------------------
                                   4275 ;times                     Allocated with name '_get_num_helper_times_65536_161'
                                   4276 ;num                       Allocated with name '_get_num_helper_num_65536_162'
                                   4277 ;i                         Allocated with name '_get_num_helper_i_131072_163'
                                   4278 ;------------------------------------------------------------
                                   4279 ;	program.c:884: int get_num_helper(int times)
                                   4280 ;	-----------------------------------------
                                   4281 ;	 function get_num_helper
                                   4282 ;	-----------------------------------------
      001426                       4283 _get_num_helper:
      001426 AF 83            [24] 4284 	mov	r7,dph
      001428 E5 82            [12] 4285 	mov	a,dpl
      00142A 90r01r67         [24] 4286 	mov	dptr,#_get_num_helper_times_65536_161
      00142D F0               [24] 4287 	movx	@dptr,a
      00142E EF               [12] 4288 	mov	a,r7
      00142F A3               [24] 4289 	inc	dptr
      001430 F0               [24] 4290 	movx	@dptr,a
                                   4291 ;	program.c:886: int num = 1;
      001431 90r01r69         [24] 4292 	mov	dptr,#_get_num_helper_num_65536_162
      001434 74 01            [12] 4293 	mov	a,#0x01
      001436 F0               [24] 4294 	movx	@dptr,a
      001437 E4               [12] 4295 	clr	a
      001438 A3               [24] 4296 	inc	dptr
      001439 F0               [24] 4297 	movx	@dptr,a
                                   4298 ;	program.c:888: for (int i = 0; i < times; i++)
      00143A 90r01r67         [24] 4299 	mov	dptr,#_get_num_helper_times_65536_161
      00143D E0               [24] 4300 	movx	a,@dptr
      00143E FE               [12] 4301 	mov	r6,a
      00143F A3               [24] 4302 	inc	dptr
      001440 E0               [24] 4303 	movx	a,@dptr
      001441 FF               [12] 4304 	mov	r7,a
      001442 7C 00            [12] 4305 	mov	r4,#0x00
      001444 7D 00            [12] 4306 	mov	r5,#0x00
      001446                       4307 00106$:
      001446 C3               [12] 4308 	clr	c
      001447 EC               [12] 4309 	mov	a,r4
      001448 9E               [12] 4310 	subb	a,r6
      001449 ED               [12] 4311 	mov	a,r5
      00144A 64 80            [12] 4312 	xrl	a,#0x80
      00144C 8F F0            [24] 4313 	mov	b,r7
      00144E 63 F0 80         [24] 4314 	xrl	b,#0x80
      001451 95 F0            [12] 4315 	subb	a,b
      001453 50 3A            [24] 4316 	jnc	00101$
                                   4317 ;	program.c:890: num = num * 10;
      001455 90r01r69         [24] 4318 	mov	dptr,#_get_num_helper_num_65536_162
      001458 E0               [24] 4319 	movx	a,@dptr
      001459 FA               [12] 4320 	mov	r2,a
      00145A A3               [24] 4321 	inc	dptr
      00145B E0               [24] 4322 	movx	a,@dptr
      00145C FB               [12] 4323 	mov	r3,a
      00145D 90r00r00         [24] 4324 	mov	dptr,#__mulint_PARM_2
      001460 EA               [12] 4325 	mov	a,r2
      001461 F0               [24] 4326 	movx	@dptr,a
      001462 EB               [12] 4327 	mov	a,r3
      001463 A3               [24] 4328 	inc	dptr
      001464 F0               [24] 4329 	movx	@dptr,a
      001465 90 00 0A         [24] 4330 	mov	dptr,#0x000a
      001468 C0 07            [24] 4331 	push	ar7
      00146A C0 06            [24] 4332 	push	ar6
      00146C C0 05            [24] 4333 	push	ar5
      00146E C0 04            [24] 4334 	push	ar4
      001470 12r00r00         [24] 4335 	lcall	__mulint
      001473 E5 82            [12] 4336 	mov	a,dpl
      001475 85 83 F0         [24] 4337 	mov	b,dph
      001478 D0 04            [24] 4338 	pop	ar4
      00147A D0 05            [24] 4339 	pop	ar5
      00147C D0 06            [24] 4340 	pop	ar6
      00147E D0 07            [24] 4341 	pop	ar7
      001480 90r01r69         [24] 4342 	mov	dptr,#_get_num_helper_num_65536_162
      001483 F0               [24] 4343 	movx	@dptr,a
      001484 E5 F0            [12] 4344 	mov	a,b
      001486 A3               [24] 4345 	inc	dptr
      001487 F0               [24] 4346 	movx	@dptr,a
                                   4347 ;	program.c:888: for (int i = 0; i < times; i++)
      001488 0C               [12] 4348 	inc	r4
      001489 BC 00 BA         [24] 4349 	cjne	r4,#0x00,00106$
      00148C 0D               [12] 4350 	inc	r5
      00148D 80 B7            [24] 4351 	sjmp	00106$
      00148F                       4352 00101$:
                                   4353 ;	program.c:892: if (times == 0)
      00148F EE               [12] 4354 	mov	a,r6
      001490 4F               [12] 4355 	orl	a,r7
      001491 70 04            [24] 4356 	jnz	00103$
                                   4357 ;	program.c:893: return 1;
      001493 90 00 01         [24] 4358 	mov	dptr,#0x0001
      001496 22               [24] 4359 	ret
      001497                       4360 00103$:
                                   4361 ;	program.c:895: return num;
      001497 90r01r69         [24] 4362 	mov	dptr,#_get_num_helper_num_65536_162
      00149A E0               [24] 4363 	movx	a,@dptr
      00149B FE               [12] 4364 	mov	r6,a
      00149C A3               [24] 4365 	inc	dptr
      00149D E0               [24] 4366 	movx	a,@dptr
                                   4367 ;	program.c:896: }
      00149E 8E 82            [24] 4368 	mov	dpl,r6
      0014A0 F5 83            [12] 4369 	mov	dph,a
      0014A2 22               [24] 4370 	ret
                                   4371 ;------------------------------------------------------------
                                   4372 ;Allocation info for local variables in function 'putchar'
                                   4373 ;------------------------------------------------------------
                                   4374 ;c                         Allocated with name '_putchar_c_65536_165'
                                   4375 ;------------------------------------------------------------
                                   4376 ;	program.c:909: int putchar(int c)
                                   4377 ;	-----------------------------------------
                                   4378 ;	 function putchar
                                   4379 ;	-----------------------------------------
      0014A3                       4380 _putchar:
      0014A3 AF 83            [24] 4381 	mov	r7,dph
      0014A5 E5 82            [12] 4382 	mov	a,dpl
      0014A7 90r01r6B         [24] 4383 	mov	dptr,#_putchar_c_65536_165
      0014AA F0               [24] 4384 	movx	@dptr,a
      0014AB EF               [12] 4385 	mov	a,r7
      0014AC A3               [24] 4386 	inc	dptr
      0014AD F0               [24] 4387 	movx	@dptr,a
                                   4388 ;	program.c:911: while ((SCON & 0x02) == 0)
      0014AE                       4389 00101$:
      0014AE E5 98            [12] 4390 	mov	a,_SCON
      0014B0 30 E1 FB         [24] 4391 	jnb	acc.1,00101$
                                   4392 ;	program.c:913: TI = 0;
                                   4393 ;	assignBit
      0014B3 C2 99            [12] 4394 	clr	_TI
                                   4395 ;	program.c:914: SBUF = c;
      0014B5 90r01r6B         [24] 4396 	mov	dptr,#_putchar_c_65536_165
      0014B8 E0               [24] 4397 	movx	a,@dptr
      0014B9 FE               [12] 4398 	mov	r6,a
      0014BA A3               [24] 4399 	inc	dptr
      0014BB E0               [24] 4400 	movx	a,@dptr
      0014BC 8E 99            [24] 4401 	mov	_SBUF,r6
                                   4402 ;	program.c:915: return 0;
      0014BE 90 00 00         [24] 4403 	mov	dptr,#0x0000
                                   4404 ;	program.c:916: }
      0014C1 22               [24] 4405 	ret
                                   4406 ;------------------------------------------------------------
                                   4407 ;Allocation info for local variables in function 'getchar'
                                   4408 ;------------------------------------------------------------
                                   4409 ;	program.c:923: int getchar()
                                   4410 ;	-----------------------------------------
                                   4411 ;	 function getchar
                                   4412 ;	-----------------------------------------
      0014C2                       4413 _getchar:
                                   4414 ;	program.c:925: while (RI == 0)
      0014C2                       4415 00101$:
                                   4416 ;	program.c:927: RI = 0;
                                   4417 ;	assignBit
      0014C2 10 98 02         [24] 4418 	jbc	_RI,00140$
      0014C5 80 FB            [24] 4419 	sjmp	00101$
      0014C7                       4420 00140$:
                                   4421 ;	program.c:929: if (SBUF != 0x3F && SBUF != 0x3D && SBUF != 0x40 && SBUF != 0x2B && SBUF != 0x2D)
      0014C7 74 3F            [12] 4422 	mov	a,#0x3f
      0014C9 B5 99 02         [24] 4423 	cjne	a,_SBUF,00141$
      0014CC 80 27            [24] 4424 	sjmp	00105$
      0014CE                       4425 00141$:
      0014CE 74 3D            [12] 4426 	mov	a,#0x3d
      0014D0 B5 99 02         [24] 4427 	cjne	a,_SBUF,00142$
      0014D3 80 20            [24] 4428 	sjmp	00105$
      0014D5                       4429 00142$:
      0014D5 74 40            [12] 4430 	mov	a,#0x40
      0014D7 B5 99 02         [24] 4431 	cjne	a,_SBUF,00143$
      0014DA 80 19            [24] 4432 	sjmp	00105$
      0014DC                       4433 00143$:
      0014DC 74 2B            [12] 4434 	mov	a,#0x2b
      0014DE B5 99 02         [24] 4435 	cjne	a,_SBUF,00144$
      0014E1 80 12            [24] 4436 	sjmp	00105$
      0014E3                       4437 00144$:
      0014E3 74 2D            [12] 4438 	mov	a,#0x2d
      0014E5 B5 99 02         [24] 4439 	cjne	a,_SBUF,00145$
      0014E8 80 0B            [24] 4440 	sjmp	00105$
      0014EA                       4441 00145$:
                                   4442 ;	program.c:930: putchar(SBUF);
      0014EA AE 99            [24] 4443 	mov	r6,_SBUF
      0014EC 7F 00            [12] 4444 	mov	r7,#0x00
      0014EE 8E 82            [24] 4445 	mov	dpl,r6
      0014F0 8F 83            [24] 4446 	mov	dph,r7
      0014F2 12r14rA3         [24] 4447 	lcall	_putchar
      0014F5                       4448 00105$:
                                   4449 ;	program.c:931: return SBUF;
      0014F5 AE 99            [24] 4450 	mov	r6,_SBUF
      0014F7 7F 00            [12] 4451 	mov	r7,#0x00
      0014F9 8E 82            [24] 4452 	mov	dpl,r6
      0014FB 8F 83            [24] 4453 	mov	dph,r7
                                   4454 ;	program.c:932: }
      0014FD 22               [24] 4455 	ret
                                   4456 ;------------------------------------------------------------
                                   4457 ;Allocation info for local variables in function 'dataout'
                                   4458 ;------------------------------------------------------------
                                   4459 ;data                      Allocated with name '_dataout_data_65536_168'
                                   4460 ;------------------------------------------------------------
                                   4461 ;	program.c:939: void dataout(unsigned char data)
                                   4462 ;	-----------------------------------------
                                   4463 ;	 function dataout
                                   4464 ;	-----------------------------------------
      0014FE                       4465 _dataout:
      0014FE E5 82            [12] 4466 	mov	a,dpl
      001500 90r01r6D         [24] 4467 	mov	dptr,#_dataout_data_65536_168
      001503 F0               [24] 4468 	movx	@dptr,a
                                   4469 ;	program.c:941: DEBUG_LOC = data;
      001504 E0               [24] 4470 	movx	a,@dptr
      001505 90 80 00         [24] 4471 	mov	dptr,#_DEBUG_LOC
      001508 F0               [24] 4472 	movx	@dptr,a
                                   4473 ;	program.c:942: }
      001509 22               [24] 4474 	ret
                                   4475 ;------------------------------------------------------------
                                   4476 ;Allocation info for local variables in function 'asm_call'
                                   4477 ;------------------------------------------------------------
                                   4478 ;sent_from_asm             Allocated with name '_asm_call_sent_from_asm_65536_170'
                                   4479 ;------------------------------------------------------------
                                   4480 ;	program.c:944: void asm_call(unsigned char sent_from_asm)
                                   4481 ;	-----------------------------------------
                                   4482 ;	 function asm_call
                                   4483 ;	-----------------------------------------
      00150A                       4484 _asm_call:
      00150A E5 82            [12] 4485 	mov	a,dpl
      00150C 90r01r6E         [24] 4486 	mov	dptr,#_asm_call_sent_from_asm_65536_170
      00150F F0               [24] 4487 	movx	@dptr,a
                                   4488 ;	program.c:946: printf("\n\n\r This function was called from assembly, character sent from there -> %c\n\r", sent_from_asm);
      001510 E0               [24] 4489 	movx	a,@dptr
      001511 FF               [12] 4490 	mov	r7,a
      001512 7E 00            [12] 4491 	mov	r6,#0x00
      001514 C0 07            [24] 4492 	push	ar7
      001516 C0 06            [24] 4493 	push	ar6
      001518 74r79            [12] 4494 	mov	a,#___str_83
      00151A C0 E0            [24] 4495 	push	acc
      00151C 74s0B            [12] 4496 	mov	a,#(___str_83 >> 8)
      00151E C0 E0            [24] 4497 	push	acc
      001520 74 80            [12] 4498 	mov	a,#0x80
      001522 C0 E0            [24] 4499 	push	acc
      001524 12r00r00         [24] 4500 	lcall	_printf
      001527 E5 81            [12] 4501 	mov	a,sp
      001529 24 FB            [12] 4502 	add	a,#0xfb
      00152B F5 81            [12] 4503 	mov	sp,a
                                   4504 ;	program.c:947: }
      00152D 22               [24] 4505 	ret
                                   4506 ;------------------------------------------------------------
                                   4507 ;Allocation info for local variables in function '_sdcc_external_startup'
                                   4508 ;------------------------------------------------------------
                                   4509 ;	program.c:954: _sdcc_external_startup()
                                   4510 ;	-----------------------------------------
                                   4511 ;	 function _sdcc_external_startup
                                   4512 ;	-----------------------------------------
      00152E                       4513 __sdcc_external_startup:
                                   4514 ;	program.c:956: CKCON0 |= 0x1;
      00152E 43 8F 01         [24] 4515 	orl	_CKCON0,#0x01
                                   4516 ;	program.c:958: _AUXR = 0xC;
      001531 75 8E 0C         [24] 4517 	mov	__AUXR,#0x0c
                                   4518 ;	program.c:960: SCON = 0x42;
      001534 75 98 42         [24] 4519 	mov	_SCON,#0x42
                                   4520 ;	program.c:962: PCON = 0x80;
      001537 75 87 80         [24] 4521 	mov	_PCON,#0x80
                                   4522 ;	program.c:964: TH1 = 255;
      00153A 75 8D FF         [24] 4523 	mov	_TH1,#0xff
                                   4524 ;	program.c:965: TL1 = 255;
      00153D 75 8B FF         [24] 4525 	mov	_TL1,#0xff
                                   4526 ;	program.c:967: TMOD = 0x20;
      001540 75 89 20         [24] 4527 	mov	_TMOD,#0x20
                                   4528 ;	program.c:969: REN = 1;
                                   4529 ;	assignBit
      001543 D2 9C            [12] 4530 	setb	_REN
                                   4531 ;	program.c:971: TR1 = 1;
                                   4532 ;	assignBit
      001545 D2 8E            [12] 4533 	setb	_TR1
                                   4534 ;	program.c:973: EA = 1;
                                   4535 ;	assignBit
      001547 D2 AF            [12] 4536 	setb	_EA
                                   4537 ;	program.c:975: EC = 1;
                                   4538 ;	assignBit
      001549 D2 AE            [12] 4539 	setb	_EC
                                   4540 ;	program.c:976: return 0;
      00154B 90 00 00         [24] 4541 	mov	dptr,#0x0000
                                   4542 ;	program.c:977: }
      00154E 22               [24] 4543 	ret
                                   4544 	.area CSEG    (CODE)
                                   4545 	.area CONST   (CODE)
                                   4546 	.area CONST   (CODE)
      000000                       4547 ___str_0:
      000000 0A                    4548 	.db 0x0a
      000001 0D                    4549 	.db 0x0d
      000002 20 48 45 4C 4C 4F 21  4550 	.ascii " HELLO! Started in X2 Mode "
             20 53 74 61 72 74 65
             64 20 69 6E 20 58 32
             20 4D 6F 64 65 20
      00001D 0A                    4551 	.db 0x0a
      00001E 0D                    4552 	.db 0x0d
      00001F 00                    4553 	.db 0x00
                                   4554 	.area CSEG    (CODE)
                                   4555 	.area CONST   (CODE)
      000020                       4556 ___str_1:
      000020 48 65 6C 6C 6F 2C 20  4557 	.ascii "Hello, In PCA Demo mode "
             49 6E 20 50 43 41 20
             44 65 6D 6F 20 6D 6F
             64 65 20
      000038 0A                    4558 	.db 0x0a
      000039 0D                    4559 	.db 0x0d
      00003A 00                    4560 	.db 0x00
                                   4561 	.area CSEG    (CODE)
                                   4562 	.area CONST   (CODE)
      00003B                       4563 ___str_2:
      00003B 50 6C 65 61 73 65 20  4564 	.ascii "Please make a valid choice "
             6D 61 6B 65 20 61 20
             76 61 6C 69 64 20 63
             68 6F 69 63 65 20
      000056 0A                    4565 	.db 0x0a
      000057 0D                    4566 	.db 0x0d
      000058 00                    4567 	.db 0x00
                                   4568 	.area CSEG    (CODE)
                                   4569 	.area CONST   (CODE)
      000059                       4570 ___str_3:
      000059 50 6C 65 61 73 65 20  4571 	.ascii "Please 'E' to exit or Reset "
             27 45 27 20 74 6F 20
             65 78 69 74 20 6F 72
             20 52 65 73 65 74 20
      000075 0A                    4572 	.db 0x0a
      000076 0D                    4573 	.db 0x0d
      000077 00                    4574 	.db 0x00
                                   4575 	.area CSEG    (CODE)
                                   4576 	.area CONST   (CODE)
      000078                       4577 ___str_4:
      000078 43 61 70 74 75 72 65  4578 	.ascii "Captured Value CCPL -> %d CCPH -> %d "
             64 20 56 61 6C 75 65
             20 43 43 50 4C 20 2D
             3E 20 25 64 20 43 43
             50 48 20 2D 3E 20 25
             64 20
      00009D 0A                    4579 	.db 0x0a
      00009E 0D                    4580 	.db 0x0d
      00009F 00                    4581 	.db 0x00
                                   4582 	.area CSEG    (CODE)
                                   4583 	.area CONST   (CODE)
      0000A0                       4584 ___str_5:
      0000A0 54 69 6D 65 72 20 49  4585 	.ascii "Timer Interrupt"
             6E 74 65 72 72 75 70
             74
      0000AF 0A                    4586 	.db 0x0a
      0000B0 0D                    4587 	.db 0x0d
      0000B1 00                    4588 	.db 0x00
                                   4589 	.area CSEG    (CODE)
                                   4590 	.area CONST   (CODE)
      0000B2                       4591 ___str_6:
      0000B2 47 6F 69 6E 67 20 74  4592 	.ascii "Going to main menu.. "
             6F 20 6D 61 69 6E 20
             6D 65 6E 75 2E 2E 20
      0000C7 0A                    4593 	.db 0x0a
      0000C8 0D                    4594 	.db 0x0d
      0000C9 00                    4595 	.db 0x00
                                   4596 	.area CSEG    (CODE)
                                   4597 	.area CONST   (CODE)
      0000CA                       4598 ___str_7:
      0000CA 53 65 74 74 69 6E 67  4599 	.ascii "Setting P1.3 as falling edge detector, enabling PCA interrup"
             20 50 31 2E 33 20 61
             73 20 66 61 6C 6C 69
             6E 67 20 65 64 67 65
             20 64 65 74 65 63 74
             6F 72 2C 20 65 6E 61
             62 6C 69 6E 67 20 50
             43 41 20 69 6E 74 65
             72 72 75 70
      000106 74 20                 4600 	.ascii "t "
      000108 0A                    4601 	.db 0x0a
      000109 0D                    4602 	.db 0x0d
      00010A 00                    4603 	.db 0x00
                                   4604 	.area CSEG    (CODE)
                                   4605 	.area CONST   (CODE)
      00010B                       4606 ___str_8:
      00010B 45 6E 74 65 72 69 6E  4607 	.ascii "Entering Software Timer Mode "
             67 20 53 6F 66 74 77
             61 72 65 20 54 69 6D
             65 72 20 4D 6F 64 65
             20
      000128 0A                    4608 	.db 0x0a
      000129 0D                    4609 	.db 0x0d
      00012A 00                    4610 	.db 0x00
                                   4611 	.area CSEG    (CODE)
                                   4612 	.area CONST   (CODE)
      00012B                       4613 ___str_9:
      00012B 45 6E 74 65 72 69 6E  4614 	.ascii "Entering High Speed Toggle Mode, P1.5 "
             67 20 48 69 67 68 20
             53 70 65 65 64 20 54
             6F 67 67 6C 65 20 4D
             6F 64 65 2C 20 50 31
             2E 35 20
      000151 0A                    4615 	.db 0x0a
      000152 0D                    4616 	.db 0x0d
      000153 00                    4617 	.db 0x00
                                   4618 	.area CSEG    (CODE)
                                   4619 	.area CONST   (CODE)
      000154                       4620 ___str_10:
      000154 45 6E 74 65 72 69 6E  4621 	.ascii "Entering PWM Mode, 25 percent Duty Cycle P1.6"
             67 20 50 57 4D 20 4D
             6F 64 65 2C 20 32 35
             20 70 65 72 63 65 6E
             74 20 44 75 74 79 20
             43 79 63 6C 65 20 50
             31 2E 36
      000181 0A                    4622 	.db 0x0a
      000182 0D                    4623 	.db 0x0d
      000183 00                    4624 	.db 0x00
                                   4625 	.area CSEG    (CODE)
                                   4626 	.area CONST   (CODE)
      000184                       4627 ___str_11:
      000184 45 6E 61 62 6C 69 6E  4628 	.ascii "Enabling Watchdog Timer.."
             67 20 57 61 74 63 68
             64 6F 67 20 54 69 6D
             65 72 2E 2E
      00019D 0A                    4629 	.db 0x0a
      00019E 0D                    4630 	.db 0x0d
      00019F 00                    4631 	.db 0x00
                                   4632 	.area CSEG    (CODE)
                                   4633 	.area CONST   (CODE)
      0001A0                       4634 ___str_12:
      0001A0 43 75 72 72 65 6E 74  4635 	.ascii "Currently Watchdog is being serviced"
             6C 79 20 57 61 74 63
             68 64 6F 67 20 69 73
             20 62 65 69 6E 67 20
             73 65 72 76 69 63 65
             64
      0001C4 0A                    4636 	.db 0x0a
      0001C5 0D                    4637 	.db 0x0d
      0001C6 50 72 65 73 73 20 27  4638 	.ascii "Press 'S' to stop and generate a reset "
             53 27 20 74 6F 20 73
             74 6F 70 20 61 6E 64
             20 67 65 6E 65 72 61
             74 65 20 61 20 72 65
             73 65 74 20
      0001ED 0A                    4639 	.db 0x0a
      0001EE 0D                    4640 	.db 0x0d
      0001EF 00                    4641 	.db 0x00
                                   4642 	.area CSEG    (CODE)
                                   4643 	.area CONST   (CODE)
      0001F0                       4644 ___str_13:
      0001F0 45 6E 61 62 6C 69 6E  4645 	.ascii "Enabling Hardware Watchdog Timer.."
             67 20 48 61 72 64 77
             61 72 65 20 57 61 74
             63 68 64 6F 67 20 54
             69 6D 65 72 2E 2E
      000212 0A                    4646 	.db 0x0a
      000213 0D                    4647 	.db 0x0d
      000214 00                    4648 	.db 0x00
                                   4649 	.area CSEG    (CODE)
                                   4650 	.area CONST   (CODE)
      000215                       4651 ___str_14:
      000215 43 75 72 72 65 6E 74  4652 	.ascii "Currently Hardware Watchdog is being serviced"
             6C 79 20 48 61 72 64
             77 61 72 65 20 57 61
             74 63 68 64 6F 67 20
             69 73 20 62 65 69 6E
             67 20 73 65 72 76 69
             63 65 64
      000242 0A                    4653 	.db 0x0a
      000243 0D                    4654 	.db 0x0d
      000244 50 72 65 73 73 20 27  4655 	.ascii "Press 'S' to stop watchdog service and generate a reset in ~"
             53 27 20 74 6F 20 73
             74 6F 70 20 77 61 74
             63 68 64 6F 67 20 73
             65 72 76 69 63 65 20
             61 6E 64 20 67 65 6E
             65 72 61 74 65 20 61
             20 72 65 73 65 74 20
             69 6E 20 7E
      000280 31 73 20              4656 	.ascii "1s "
      000283 0A                    4657 	.db 0x0a
      000284 0D                    4658 	.db 0x0d
      000285 00                    4659 	.db 0x00
                                   4660 	.area CSEG    (CODE)
                                   4661 	.area CONST   (CODE)
      000286                       4662 ___str_15:
      000286 45 6E 74 65 72 69 6E  4663 	.ascii "Entering Idle, Will Exit on external interrupt 0"
             67 20 49 64 6C 65 2C
             20 57 69 6C 6C 20 45
             78 69 74 20 6F 6E 20
             65 78 74 65 72 6E 61
             6C 20 69 6E 74 65 72
             72 75 70 74 20 30
      0002B6 0A                    4664 	.db 0x0a
      0002B7 0D                    4665 	.db 0x0d
      0002B8 00                    4666 	.db 0x00
                                   4667 	.area CSEG    (CODE)
                                   4668 	.area CONST   (CODE)
      0002B9                       4669 ___str_16:
      0002B9 57 6F 6B 65 20 75 70  4670 	.ascii "Woke up from Idle/Power down, going to main menu "
             20 66 72 6F 6D 20 49
             64 6C 65 2F 50 6F 77
             65 72 20 64 6F 77 6E
             2C 20 67 6F 69 6E 67
             20 74 6F 20 6D 61 69
             6E 20 6D 65 6E 75 20
      0002EA 0A                    4671 	.db 0x0a
      0002EB 0D                    4672 	.db 0x0d
      0002EC 00                    4673 	.db 0x00
                                   4674 	.area CSEG    (CODE)
                                   4675 	.area CONST   (CODE)
      0002ED                       4676 ___str_17:
      0002ED 45 6E 74 65 72 69 6E  4677 	.ascii "Entering power down, Will Exit on external interrupt 0"
             67 20 70 6F 77 65 72
             20 64 6F 77 6E 2C 20
             57 69 6C 6C 20 45 78
             69 74 20 6F 6E 20 65
             78 74 65 72 6E 61 6C
             20 69 6E 74 65 72 72
             75 70 74 20 30
      000323 0A                    4678 	.db 0x0a
      000324 0D                    4679 	.db 0x0d
      000325 00                    4680 	.db 0x00
                                   4681 	.area CSEG    (CODE)
                                   4682 	.area CONST   (CODE)
      000326                       4683 ___str_18:
      000326 43 68 61 6E 67 69 6E  4684 	.ascii "Changing Clock prescalar to go to lowest frequency in X2 Mod"
             67 20 43 6C 6F 63 6B
             20 70 72 65 73 63 61
             6C 61 72 20 74 6F 20
             67 6F 20 74 6F 20 6C
             6F 77 65 73 74 20 66
             72 65 71 75 65 6E 63
             79 20 69 6E 20 58 32
             20 4D 6F 64
      000362 65 2E 2E              4685 	.ascii "e.."
      000365 0A                    4686 	.db 0x0a
      000366 0D                    4687 	.db 0x0d
      000367 00                    4688 	.db 0x00
                                   4689 	.area CSEG    (CODE)
                                   4690 	.area CONST   (CODE)
      000368                       4691 ___str_19:
      000368 54 68 69 73 20 55 41  4692 	.ascii "This UART Session will stop working..."
             52 54 20 53 65 73 73
             69 6F 6E 20 77 69 6C
             6C 20 73 74 6F 70 20
             77 6F 72 6B 69 6E 67
             2E 2E 2E
      00038E 0A                    4693 	.db 0x0a
      00038F 0D                    4694 	.db 0x0d
      000390 00                    4695 	.db 0x00
                                   4696 	.area CSEG    (CODE)
                                   4697 	.area CONST   (CODE)
      000391                       4698 ___str_20:
      000391 0A                    4699 	.db 0x0a
      000392 0A                    4700 	.db 0x0a
      000393 0D                    4701 	.db 0x0d
      000394 5E 5E 5E 5E 5E 5E 5E  4702 	.ascii "^^^^^^^^^^^^^^^^^^^-MENU-^^^^^^^^^^^^^^^^^^^^^^^^^^ "
             5E 5E 5E 5E 5E 5E 5E
             5E 5E 5E 5E 5E 2D 4D
             45 4E 55 2D 5E 5E 5E
             5E 5E 5E 5E 5E 5E 5E
             5E 5E 5E 5E 5E 5E 5E
             5E 5E 5E 5E 5E 5E 5E
             5E 5E 20
      0003C8 0A                    4703 	.db 0x0a
      0003C9 0A                    4704 	.db 0x0a
      0003CA 0D                    4705 	.db 0x0d
      0003CB 00                    4706 	.db 0x00
                                   4707 	.area CSEG    (CODE)
                                   4708 	.area CONST   (CODE)
      0003CC                       4709 ___str_21:
      0003CC 27 48 27 20 2D 3E 20  4710 	.ascii "'H' -> Enter Heap Demo Mode "
             45 6E 74 65 72 20 48
             65 61 70 20 44 65 6D
             6F 20 4D 6F 64 65 20
      0003E8 0A                    4711 	.db 0x0a
      0003E9 0D                    4712 	.db 0x0d
      0003EA 00                    4713 	.db 0x00
                                   4714 	.area CSEG    (CODE)
                                   4715 	.area CONST   (CODE)
      0003EB                       4716 ___str_22:
      0003EB 27 50 27 20 2D 3E 20  4717 	.ascii "'P' -> Enter PCA Demo Mode "
             45 6E 74 65 72 20 50
             43 41 20 44 65 6D 6F
             20 4D 6F 64 65 20
      000406 0A                    4718 	.db 0x0a
      000407 0D                    4719 	.db 0x0d
      000408 00                    4720 	.db 0x00
                                   4721 	.area CSEG    (CODE)
                                   4722 	.area CONST   (CODE)
      000409                       4723 ___str_23:
      000409 27 41 27 20 2D 3E 20  4724 	.ascii "'A' -> Assembly C Mix "
             41 73 73 65 6D 62 6C
             79 20 43 20 4D 69 78
             20
      00041F 0A                    4725 	.db 0x0a
      000420 0D                    4726 	.db 0x0d
      000421 00                    4727 	.db 0x00
                                   4728 	.area CSEG    (CODE)
                                   4729 	.area CONST   (CODE)
      000422                       4730 ___str_24:
      000422 27 45 27 20 2D 3E 20  4731 	.ascii "'E' -> EEPROM Mode "
             45 45 50 52 4F 4D 20
             4D 6F 64 65 20
      000435 0A                    4732 	.db 0x0a
      000436 0D                    4733 	.db 0x0d
      000437 00                    4734 	.db 0x00
                                   4735 	.area CSEG    (CODE)
                                   4736 	.area CONST   (CODE)
      000438                       4737 ___str_25:
      000438 6C 6F 63 20 2D 3E 25  4738 	.ascii "loc ->%d val is -> %x "
             64 20 76 61 6C 20 69
             73 20 2D 3E 20 25 78
             20
      00044E 0A                    4739 	.db 0x0a
      00044F 0D                    4740 	.db 0x0d
      000450 00                    4741 	.db 0x00
                                   4742 	.area CSEG    (CODE)
                                   4743 	.area CONST   (CODE)
      000451                       4744 ___str_26:
      000451 0A                    4745 	.db 0x0a
      000452 0D                    4746 	.db 0x0d
      000453 20 47 69 76 65 20 70  4747 	.ascii " Give param 1, 8bit "
             61 72 61 6D 20 31 2C
             20 38 62 69 74 20
      000467 0A                    4748 	.db 0x0a
      000468 0D                    4749 	.db 0x0d
      000469 00                    4750 	.db 0x00
                                   4751 	.area CSEG    (CODE)
                                   4752 	.area CONST   (CODE)
      00046A                       4753 ___str_27:
      00046A 0A                    4754 	.db 0x0a
      00046B 0D                    4755 	.db 0x0d
      00046C 20 47 69 76 65 20 70  4756 	.ascii " Give param 2, 8bit "
             61 72 61 6D 20 32 2C
             20 38 62 69 74 20
      000480 0A                    4757 	.db 0x0a
      000481 0D                    4758 	.db 0x0d
      000482 00                    4759 	.db 0x00
                                   4760 	.area CSEG    (CODE)
                                   4761 	.area CONST   (CODE)
      000483                       4762 ___str_28:
      000483 0A                    4763 	.db 0x0a
      000484 0D                    4764 	.db 0x0d
      000485 20 47 69 76 65 20 70  4765 	.ascii " Give param 3, 8bit "
             61 72 61 6D 20 33 2C
             20 38 62 69 74 20
      000499 0A                    4766 	.db 0x0a
      00049A 0D                    4767 	.db 0x0d
      00049B 00                    4768 	.db 0x00
                                   4769 	.area CSEG    (CODE)
                                   4770 	.area CONST   (CODE)
      00049C                       4771 ___str_29:
      00049C 0A                    4772 	.db 0x0a
      00049D 0D                    4773 	.db 0x0d
      00049E 20 52 45 53 55 4C 54  4774 	.ascii " RESULT-> param3<Mod>param2 * param1 = %d "
             2D 3E 20 70 61 72 61
             6D 33 3C 4D 6F 64 3E
             70 61 72 61 6D 32 20
             2A 20 70 61 72 61 6D
             31 20 3D 20 25 64 20
      0004C8 0A                    4775 	.db 0x0a
      0004C9 0D                    4776 	.db 0x0d
      0004CA 00                    4777 	.db 0x00
                                   4778 	.area CSEG    (CODE)
                                   4779 	.area CONST   (CODE)
      0004CB                       4780 ___str_30:
      0004CB 0A                    4781 	.db 0x0a
      0004CC 0D                    4782 	.db 0x0d
      0004CD 20 47 6F 69 6E 67 20  4783 	.ascii " Going back to main menu.. "
             62 61 63 6B 20 74 6F
             20 6D 61 69 6E 20 6D
             65 6E 75 2E 2E 20
      0004E8 0A                    4784 	.db 0x0a
      0004E9 0D                    4785 	.db 0x0d
      0004EA 00                    4786 	.db 0x00
                                   4787 	.area CSEG    (CODE)
                                   4788 	.area CONST   (CODE)
      0004EB                       4789 ___str_31:
      0004EB 42 75 66 66 65 72 20  4790 	.ascii "Buffer %d Freed ...."
             25 64 20 46 72 65 65
             64 20 2E 2E 2E 2E
      0004FF 0A                    4791 	.db 0x0a
      000500 0D                    4792 	.db 0x0d
      000501 00                    4793 	.db 0x00
                                   4794 	.area CSEG    (CODE)
                                   4795 	.area CONST   (CODE)
      000502                       4796 ___str_32:
      000502 4C 65 74 27 73 20 62  4797 	.ascii "Let's begin again.."
             65 67 69 6E 20 61 67
             61 69 6E 2E 2E
      000515 0A                    4798 	.db 0x0a
      000516 0D                    4799 	.db 0x0d
      000517 00                    4800 	.db 0x00
                                   4801 	.area CSEG    (CODE)
                                   4802 	.area CONST   (CODE)
      000518                       4803 ___str_33:
      000518 0A                    4804 	.db 0x0a
      000519 0D                    4805 	.db 0x0d
      00051A 47 69 76 65 20 56 61  4806 	.ascii "Give Valid Buffer Number to delete(1-%d) in 3 digits"
             6C 69 64 20 42 75 66
             66 65 72 20 4E 75 6D
             62 65 72 20 74 6F 20
             64 65 6C 65 74 65 28
             31 2D 25 64 29 20 69
             6E 20 33 20 64 69 67
             69 74 73
      00054E 0A                    4807 	.db 0x0a
      00054F 0D                    4808 	.db 0x0d
      000550 00                    4809 	.db 0x00
                                   4810 	.area CSEG    (CODE)
                                   4811 	.area CONST   (CODE)
      000551                       4812 ___str_34:
      000551 42 75 66 66 65 72 20  4813 	.ascii "Buffer %d Successfully Deleted.. "
             25 64 20 53 75 63 63
             65 73 73 66 75 6C 6C
             79 20 44 65 6C 65 74
             65 64 2E 2E 20
      000572 0A                    4814 	.db 0x0a
      000573 0D                    4815 	.db 0x0d
      000574 00                    4816 	.db 0x00
                                   4817 	.area CSEG    (CODE)
                                   4818 	.area CONST   (CODE)
      000575                       4819 ___str_35:
      000575 0A                    4820 	.db 0x0a
      000576 0A                    4821 	.db 0x0a
      000577 0D                    4822 	.db 0x0d
      000578 5E 5E 5E 5E 5E 5E 5E  4823 	.ascii "^^^^^^^^^^^^^^^^^^^-PCA-MENU-^^^^^^^^^^^^^^^^^^^^^^^^^^ "
             5E 5E 5E 5E 5E 5E 5E
             5E 5E 5E 5E 5E 2D 50
             43 41 2D 4D 45 4E 55
             2D 5E 5E 5E 5E 5E 5E
             5E 5E 5E 5E 5E 5E 5E
             5E 5E 5E 5E 5E 5E 5E
             5E 5E 5E 5E 5E 5E 20
      0005B0 0A                    4824 	.db 0x0a
      0005B1 0A                    4825 	.db 0x0a
      0005B2 0D                    4826 	.db 0x0d
      0005B3 00                    4827 	.db 0x00
                                   4828 	.area CSEG    (CODE)
                                   4829 	.area CONST   (CODE)
      0005B4                       4830 ___str_36:
      0005B4 27 46 27 20 2D 3E 20  4831 	.ascii "'F' -> Falling Edge Capture Mode"
             46 61 6C 6C 69 6E 67
             20 45 64 67 65 20 43
             61 70 74 75 72 65 20
             4D 6F 64 65
      0005D4 0A                    4832 	.db 0x0a
      0005D5 0D                    4833 	.db 0x0d
      0005D6 00                    4834 	.db 0x00
                                   4835 	.area CSEG    (CODE)
                                   4836 	.area CONST   (CODE)
      0005D7                       4837 ___str_37:
      0005D7 27 53 27 20 2D 3E 20  4838 	.ascii "'S' -> Software Timer Mode"
             53 6F 66 74 77 61 72
             65 20 54 69 6D 65 72
             20 4D 6F 64 65
      0005F1 0A                    4839 	.db 0x0a
      0005F2 0D                    4840 	.db 0x0d
      0005F3 00                    4841 	.db 0x00
                                   4842 	.area CSEG    (CODE)
                                   4843 	.area CONST   (CODE)
      0005F4                       4844 ___str_38:
      0005F4 27 48 27 20 2D 3E 20  4845 	.ascii "'H' -> High Speed Output Mode"
             48 69 67 68 20 53 70
             65 65 64 20 4F 75 74
             70 75 74 20 4D 6F 64
             65
      000611 0A                    4846 	.db 0x0a
      000612 0D                    4847 	.db 0x0d
      000613 00                    4848 	.db 0x00
                                   4849 	.area CSEG    (CODE)
                                   4850 	.area CONST   (CODE)
      000614                       4851 ___str_39:
      000614 27 50 27 20 2D 3E 20  4852 	.ascii "'P' -> PWM Mode "
             50 57 4D 20 4D 6F 64
             65 20
      000624 0A                    4853 	.db 0x0a
      000625 0D                    4854 	.db 0x0d
      000626 00                    4855 	.db 0x00
                                   4856 	.area CSEG    (CODE)
                                   4857 	.area CONST   (CODE)
      000627                       4858 ___str_40:
      000627 27 57 27 20 2D 3E 20  4859 	.ascii "'W' -> Watchdog Timer Mode"
             57 61 74 63 68 64 6F
             67 20 54 69 6D 65 72
             20 4D 6F 64 65
      000641 0A                    4860 	.db 0x0a
      000642 0D                    4861 	.db 0x0d
      000643 00                    4862 	.db 0x00
                                   4863 	.area CSEG    (CODE)
                                   4864 	.area CONST   (CODE)
      000644                       4865 ___str_41:
      000644 27 49 27 20 2D 3E 20  4866 	.ascii "'I' -> Idle Mode with PWM"
             49 64 6C 65 20 4D 6F
             64 65 20 77 69 74 68
             20 50 57 4D
      00065D 0A                    4867 	.db 0x0a
      00065E 0D                    4868 	.db 0x0d
      00065F 00                    4869 	.db 0x00
                                   4870 	.area CSEG    (CODE)
                                   4871 	.area CONST   (CODE)
      000660                       4872 ___str_42:
      000660 27 4C 27 20 2D 3E 20  4873 	.ascii "'L' -> Change Prescalar to lowest frequency"
             43 68 61 6E 67 65 20
             50 72 65 73 63 61 6C
             61 72 20 74 6F 20 6C
             6F 77 65 73 74 20 66
             72 65 71 75 65 6E 63
             79
      00068B 0A                    4874 	.db 0x0a
      00068C 0D                    4875 	.db 0x0d
      00068D 00                    4876 	.db 0x00
                                   4877 	.area CSEG    (CODE)
                                   4878 	.area CONST   (CODE)
      00068E                       4879 ___str_43:
      00068E 27 55 27 20 2D 3E 20  4880 	.ascii "'U' -> Hardware Watchdog Timer"
             48 61 72 64 77 61 72
             65 20 57 61 74 63 68
             64 6F 67 20 54 69 6D
             65 72
      0006AC 0A                    4881 	.db 0x0a
      0006AD 0D                    4882 	.db 0x0d
      0006AE 00                    4883 	.db 0x00
                                   4884 	.area CSEG    (CODE)
                                   4885 	.area CONST   (CODE)
      0006AF                       4886 ___str_44:
      0006AF 27 44 27 20 2D 3E 20  4887 	.ascii "'D' -> Power Down Mode"
             50 6F 77 65 72 20 44
             6F 77 6E 20 4D 6F 64
             65
      0006C5 0A                    4888 	.db 0x0a
      0006C6 0A                    4889 	.db 0x0a
      0006C7 0D                    4890 	.db 0x0d
      0006C8 00                    4891 	.db 0x00
                                   4892 	.area CSEG    (CODE)
                                   4893 	.area CONST   (CODE)
      0006C9                       4894 ___str_45:
      0006C9 27 4D 27 20 2D 3E 20  4895 	.ascii "'M' -> Go to Main Menu "
             47 6F 20 74 6F 20 4D
             61 69 6E 20 4D 65 6E
             75 20
      0006E0 0A                    4896 	.db 0x0a
      0006E1 0A                    4897 	.db 0x0a
      0006E2 0D                    4898 	.db 0x0d
      0006E3 00                    4899 	.db 0x00
                                   4900 	.area CSEG    (CODE)
                                   4901 	.area CONST   (CODE)
      0006E4                       4902 ___str_46:
      0006E4 0A                    4903 	.db 0x0a
      0006E5 0A                    4904 	.db 0x0a
      0006E6 0D                    4905 	.db 0x0d
      0006E7 5E 5E 5E 5E 5E 5E 5E  4906 	.ascii "^^^^^^^^^^^^^^^^^^^-HEAP-MENU-^^^^^^^^^^^^^^^^^^^^^^^^^^ "
             5E 5E 5E 5E 5E 5E 5E
             5E 5E 5E 5E 5E 2D 48
             45 41 50 2D 4D 45 4E
             55 2D 5E 5E 5E 5E 5E
             5E 5E 5E 5E 5E 5E 5E
             5E 5E 5E 5E 5E 5E 5E
             5E 5E 5E 5E 5E 5E 5E
             20
      000720 0A                    4907 	.db 0x0a
      000721 0A                    4908 	.db 0x0a
      000722 0D                    4909 	.db 0x0d
      000723 00                    4910 	.db 0x00
                                   4911 	.area CSEG    (CODE)
                                   4912 	.area CONST   (CODE)
      000724                       4913 ___str_47:
      000724 59 6F 75 20 63 61 6E  4914 	.ascii "You can enter characters or use commands from below "
             20 65 6E 74 65 72 20
             63 68 61 72 61 63 74
             65 72 73 20 6F 72 20
             75 73 65 20 63 6F 6D
             6D 61 6E 64 73 20 66
             72 6F 6D 20 62 65 6C
             6F 77 20
      000758 0A                    4915 	.db 0x0a
      000759 0D                    4916 	.db 0x0d
      00075A 00                    4917 	.db 0x00
                                   4918 	.area CSEG    (CODE)
                                   4919 	.area CONST   (CODE)
      00075B                       4920 ___str_48:
      00075B 27 3F 27 20 2D 3E 20  4921 	.ascii "'?' -> Show heap status, dump & clear Buffer 0 "
             53 68 6F 77 20 68 65
             61 70 20 73 74 61 74
             75 73 2C 20 64 75 6D
             70 20 26 20 63 6C 65
             61 72 20 42 75 66 66
             65 72 20 30 20
      00078A 0A                    4922 	.db 0x0a
      00078B 0D                    4923 	.db 0x0d
      00078C 00                    4924 	.db 0x00
                                   4925 	.area CSEG    (CODE)
                                   4926 	.area CONST   (CODE)
      00078D                       4927 ___str_49:
      00078D 27 2B 27 20 2D 3E 20  4928 	.ascii "'+' -> Add a new Buffer"
             41 64 64 20 61 20 6E
             65 77 20 42 75 66 66
             65 72
      0007A4 0A                    4929 	.db 0x0a
      0007A5 0D                    4930 	.db 0x0d
      0007A6 00                    4931 	.db 0x00
                                   4932 	.area CSEG    (CODE)
                                   4933 	.area CONST   (CODE)
      0007A7                       4934 ___str_50:
      0007A7 27 2D 27 20 2D 3E 20  4935 	.ascii "'-' -> Delete existing Buffer"
             44 65 6C 65 74 65 20
             65 78 69 73 74 69 6E
             67 20 42 75 66 66 65
             72
      0007C4 0A                    4936 	.db 0x0a
      0007C5 0D                    4937 	.db 0x0d
      0007C6 00                    4938 	.db 0x00
                                   4939 	.area CSEG    (CODE)
                                   4940 	.area CONST   (CODE)
      0007C7                       4941 ___str_51:
      0007C7 27 3D 27 20 2D 3E 20  4942 	.ascii "'=' -> Dump Buffer 0 in hex"
             44 75 6D 70 20 42 75
             66 66 65 72 20 30 20
             69 6E 20 68 65 78
      0007E2 0A                    4943 	.db 0x0a
      0007E3 0D                    4944 	.db 0x0d
      0007E4 00                    4945 	.db 0x00
                                   4946 	.area CSEG    (CODE)
                                   4947 	.area CONST   (CODE)
      0007E5                       4948 ___str_52:
      0007E5 27 40 27 20 2D 3E 20  4949 	.ascii "'@' -> Free all Heap & begin again"
             46 72 65 65 20 61 6C
             6C 20 48 65 61 70 20
             26 20 62 65 67 69 6E
             20 61 67 61 69 6E
      000807 0A                    4950 	.db 0x0a
      000808 0A                    4951 	.db 0x0a
      000809 0D                    4952 	.db 0x0d
      00080A 00                    4953 	.db 0x00
                                   4954 	.area CSEG    (CODE)
                                   4955 	.area CONST   (CODE)
      00080B                       4956 ___str_53:
      00080B 0A                    4957 	.db 0x0a
      00080C 0D                    4958 	.db 0x0d
      00080D 47 69 76 65 20 56 61  4959 	.ascii "Give Valid Buffer Size(030-300):"
             6C 69 64 20 42 75 66
             66 65 72 20 53 69 7A
             65 28 30 33 30 2D 33
             30 30 29 3A
      00082D 00                    4960 	.db 0x00
                                   4961 	.area CSEG    (CODE)
                                   4962 	.area CONST   (CODE)
      00082E                       4963 ___str_54:
      00082E 46 61 69 6C 65 64 2C  4964 	.ascii "Failed, give smaller buffer"
             20 67 69 76 65 20 73
             6D 61 6C 6C 65 72 20
             62 75 66 66 65 72
      000849 0A                    4965 	.db 0x0a
      00084A 0D                    4966 	.db 0x0d
      00084B 00                    4967 	.db 0x00
                                   4968 	.area CSEG    (CODE)
                                   4969 	.area CONST   (CODE)
      00084C                       4970 ___str_55:
      00084C 0A                    4971 	.db 0x0a
      00084D 0A                    4972 	.db 0x0a
      00084E 0D                    4973 	.db 0x0d
      00084F 23 23 23 23 53 55 43  4974 	.ascii "####SUCCESS, BUFFER Created####"
             43 45 53 53 2C 20 42
             55 46 46 45 52 20 43
             72 65 61 74 65 64 23
             23 23 23
      00086E 0A                    4975 	.db 0x0a
      00086F 0A                    4976 	.db 0x0a
      000870 0D                    4977 	.db 0x0d
      000871 00                    4978 	.db 0x00
                                   4979 	.area CSEG    (CODE)
                                   4980 	.area CONST   (CODE)
      000872                       4981 ___str_56:
      000872 4E 6F 20 48 65 61 70  4982 	.ascii "No Heap Memory Left, Delete some buffers..."
             20 4D 65 6D 6F 72 79
             20 4C 65 66 74 2C 20
             44 65 6C 65 74 65 20
             73 6F 6D 65 20 62 75
             66 66 65 72 73 2E 2E
             2E
      00089D 0A                    4983 	.db 0x0a
      00089E 0D                    4984 	.db 0x0d
      00089F 00                    4985 	.db 0x00
                                   4986 	.area CSEG    (CODE)
                                   4987 	.area CONST   (CODE)
      0008A0                       4988 ___str_57:
      0008A0 0A                    4989 	.db 0x0a
      0008A1 0D                    4990 	.db 0x0d
      0008A2 47 69 76 65 20 56 61  4991 	.ascii "Give Valid Initial Buffer Size(0048-4800):"
             6C 69 64 20 49 6E 69
             74 69 61 6C 20 42 75
             66 66 65 72 20 53 69
             7A 65 28 30 30 34 38
             2D 34 38 30 30 29 3A
      0008CC 00                    4992 	.db 0x00
                                   4993 	.area CSEG    (CODE)
                                   4994 	.area CONST   (CODE)
      0008CD                       4995 ___str_58:
      0008CD 0A                    4996 	.db 0x0a
      0008CE 0D                    4997 	.db 0x0d
      0008CF 23 23 23 23 46 41 49  4998 	.ascii "####FAIL, Please give a smaller buffer size####"
             4C 2C 20 50 6C 65 61
             73 65 20 67 69 76 65
             20 61 20 73 6D 61 6C
             6C 65 72 20 62 75 66
             66 65 72 20 73 69 7A
             65 23 23 23 23
      0008FE 0A                    4999 	.db 0x0a
      0008FF 0A                    5000 	.db 0x0a
      000900 0D                    5001 	.db 0x0d
      000901 00                    5002 	.db 0x00
                                   5003 	.area CSEG    (CODE)
                                   5004 	.area CONST   (CODE)
      000902                       5005 ___str_59:
      000902 0A                    5006 	.db 0x0a
      000903 0A                    5007 	.db 0x0a
      000904 0D                    5008 	.db 0x0d
      000905 23 23 23 23 53 55 43  5009 	.ascii "####SUCCESS, INITIAL BUFFERS Created####"
             43 45 53 53 2C 20 49
             4E 49 54 49 41 4C 20
             42 55 46 46 45 52 53
             20 43 72 65 61 74 65
             64 23 23 23 23
      00092D 0A                    5010 	.db 0x0a
      00092E 0A                    5011 	.db 0x0a
      00092F 0D                    5012 	.db 0x0d
      000930 00                    5013 	.db 0x00
                                   5014 	.area CSEG    (CODE)
                                   5015 	.area CONST   (CODE)
      000931                       5016 ___str_60:
      000931 0A                    5017 	.db 0x0a
      000932 0A                    5018 	.db 0x0a
      000933 0D                    5019 	.db 0x0d
      000934 2A 2A 2A 2A 2A 2A 2A  5020 	.ascii "***********Buffer-0-Contents*********** "
             2A 2A 2A 2A 42 75 66
             66 65 72 2D 30 2D 43
             6F 6E 74 65 6E 74 73
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 20
      00095C 0A                    5021 	.db 0x0a
      00095D 0D                    5022 	.db 0x0d
      00095E 00                    5023 	.db 0x00
                                   5024 	.area CSEG    (CODE)
                                   5025 	.area CONST   (CODE)
      00095F                       5026 ___str_61:
      00095F 0A                    5027 	.db 0x0a
      000960 0D                    5028 	.db 0x0d
      000961 00                    5029 	.db 0x00
                                   5030 	.area CSEG    (CODE)
                                   5031 	.area CONST   (CODE)
      000962                       5032 ___str_62:
      000962 0A                    5033 	.db 0x0a
      000963 0A                    5034 	.db 0x0a
      000964 0D                    5035 	.db 0x0d
      000965 00                    5036 	.db 0x00
                                   5037 	.area CSEG    (CODE)
                                   5038 	.area CONST   (CODE)
      000966                       5039 ___str_63:
      000966 42 75 66 66 65 72 30  5040 	.ascii "Buffer0 is Empty...."
             20 69 73 20 45 6D 70
             74 79 2E 2E 2E 2E
      00097A 0A                    5041 	.db 0x0a
      00097B 0D                    5042 	.db 0x0d
      00097C 00                    5043 	.db 0x00
                                   5044 	.area CSEG    (CODE)
                                   5045 	.area CONST   (CODE)
      00097D                       5046 ___str_64:
      00097D 0A                    5047 	.db 0x0a
      00097E 0D                    5048 	.db 0x0d
      00097F 2D 2D 2D 2D 2D 2D 2D  5049 	.ascii "-------------------------HEXDUMP----------------------------"
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 48 45 58
             44 55 4D 50 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D
      0009BB 2D 2D 2D 2D           5050 	.ascii "----"
      0009BF 00                    5051 	.db 0x00
                                   5052 	.area CSEG    (CODE)
                                   5053 	.area CONST   (CODE)
      0009C0                       5054 ___str_65:
      0009C0 0A                    5055 	.db 0x0a
      0009C1 0D                    5056 	.db 0x0d
      0009C2 20 20 20 20 41 44 44  5057 	.ascii "    ADDR: +0 +1 +2 +3 +4 +5 +6 +7 +8 +9 +A +B +C +D +E +F "
             52 3A 20 2B 30 20 2B
             31 20 2B 32 20 2B 33
             20 2B 34 20 2B 35 20
             2B 36 20 2B 37 20 2B
             38 20 2B 39 20 2B 41
             20 2B 42 20 2B 43 20
             2B 44 20 2B 45 20 2B
             46 20
      0009FC 0A                    5058 	.db 0x0a
      0009FD 0D                    5059 	.db 0x0d
      0009FE 00                    5060 	.db 0x00
                                   5061 	.area CSEG    (CODE)
                                   5062 	.area CONST   (CODE)
      0009FF                       5063 ___str_66:
      0009FF 0A                    5064 	.db 0x0a
      000A00 0D                    5065 	.db 0x0d
      000A01 25 70 3A 20           5066 	.ascii "%p: "
      000A05 00                    5067 	.db 0x00
                                   5068 	.area CSEG    (CODE)
                                   5069 	.area CONST   (CODE)
      000A06                       5070 ___str_67:
      000A06 25 78 20              5071 	.ascii "%x "
      000A09 00                    5072 	.db 0x00
                                   5073 	.area CSEG    (CODE)
                                   5074 	.area CONST   (CODE)
      000A0A                       5075 ___str_68:
      000A0A 42 75 66 66 65 72 20  5076 	.ascii "Buffer 0 is empty..."
             30 20 69 73 20 65 6D
             70 74 79 2E 2E 2E
      000A1E 0A                    5077 	.db 0x0a
      000A1F 0D                    5078 	.db 0x0d
      000A20 00                    5079 	.db 0x00
                                   5080 	.area CSEG    (CODE)
                                   5081 	.area CONST   (CODE)
      000A21                       5082 ___str_69:
      000A21 0A                    5083 	.db 0x0a
      000A22 0D                    5084 	.db 0x0d
      000A23 2A 2A 2A 2A 2A 2A 2A  5085 	.ascii "****************HEAP*STATS*************"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 48 45 41 50 2A
             53 54 41 54 53 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A
      000A4A 0A                    5086 	.db 0x0a
      000A4B 0D                    5087 	.db 0x0d
      000A4C 00                    5088 	.db 0x00
                                   5089 	.area CSEG    (CODE)
                                   5090 	.area CONST   (CODE)
      000A4D                       5091 ___str_70:
      000A4D 54 6F 74 61 6C 20 48  5092 	.ascii "Total Heap Size: %d "
             65 61 70 20 53 69 7A
             65 3A 20 25 64 20
      000A61 0A                    5093 	.db 0x0a
      000A62 0D                    5094 	.db 0x0d
      000A63 00                    5095 	.db 0x00
                                   5096 	.area CSEG    (CODE)
                                   5097 	.area CONST   (CODE)
      000A64                       5098 ___str_71:
      000A64 41 6C 6C 6F 63 61 74  5099 	.ascii "Allocated Heap Size: %d "
             65 64 20 48 65 61 70
             20 53 69 7A 65 3A 20
             25 64 20
      000A7C 0A                    5100 	.db 0x0a
      000A7D 0D                    5101 	.db 0x0d
      000A7E 00                    5102 	.db 0x00
                                   5103 	.area CSEG    (CODE)
                                   5104 	.area CONST   (CODE)
      000A7F                       5105 ___str_72:
      000A7F 41 6C 6C 20 43 68 61  5106 	.ascii "All Chars: %d "
             72 73 3A 20 25 64 20
      000A8D 0A                    5107 	.db 0x0a
      000A8E 0D                    5108 	.db 0x0d
      000A8F 00                    5109 	.db 0x00
                                   5110 	.area CSEG    (CODE)
                                   5111 	.area CONST   (CODE)
      000A90                       5112 ___str_73:
      000A90 53 74 6F 72 61 67 65  5113 	.ascii "Storage Chars: %d "
             20 43 68 61 72 73 3A
             20 25 64 20
      000AA2 0A                    5114 	.db 0x0a
      000AA3 0D                    5115 	.db 0x0d
      000AA4 00                    5116 	.db 0x00
                                   5117 	.area CSEG    (CODE)
                                   5118 	.area CONST   (CODE)
      000AA5                       5119 ___str_74:
      000AA5 54 6F 74 61 6C 20 42  5120 	.ascii "Total Buffers: %d "
             75 66 66 65 72 73 3A
             20 25 64 20
      000AB7 0A                    5121 	.db 0x0a
      000AB8 0D                    5122 	.db 0x0d
      000AB9 00                    5123 	.db 0x00
                                   5124 	.area CSEG    (CODE)
                                   5125 	.area CONST   (CODE)
      000ABA                       5126 ___str_75:
      000ABA 2A 2A 2A 2A 2A 2A 2A  5127 	.ascii "****************BUFFER*%d***************"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 42 55 46 46 45
             52 2A 25 64 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A
      000AE2 0A                    5128 	.db 0x0a
      000AE3 0D                    5129 	.db 0x0d
      000AE4 00                    5130 	.db 0x00
                                   5131 	.area CSEG    (CODE)
                                   5132 	.area CONST   (CODE)
      000AE5                       5133 ___str_76:
      000AE5 42 75 66 66 65 72 23  5134 	.ascii "Buffer#: %d "
             3A 20 25 64 20
      000AF1 0A                    5135 	.db 0x0a
      000AF2 0D                    5136 	.db 0x0d
      000AF3 00                    5137 	.db 0x00
                                   5138 	.area CSEG    (CODE)
                                   5139 	.area CONST   (CODE)
      000AF4                       5140 ___str_77:
      000AF4 42 75 66 66 65 72 53  5141 	.ascii "BufferStart: %p "
             74 61 72 74 3A 20 25
             70 20
      000B04 0A                    5142 	.db 0x0a
      000B05 0D                    5143 	.db 0x0d
      000B06 00                    5144 	.db 0x00
                                   5145 	.area CSEG    (CODE)
                                   5146 	.area CONST   (CODE)
      000B07                       5147 ___str_78:
      000B07 42 75 66 66 65 72 45  5148 	.ascii "BufferEnd: %p "
             6E 64 3A 20 25 70 20
      000B15 0A                    5149 	.db 0x0a
      000B16 0D                    5150 	.db 0x0d
      000B17 00                    5151 	.db 0x00
                                   5152 	.area CSEG    (CODE)
                                   5153 	.area CONST   (CODE)
      000B18                       5154 ___str_79:
      000B18 42 75 66 66 65 72 53  5155 	.ascii "BufferSize: %d "
             69 7A 65 3A 20 25 64
             20
      000B27 0A                    5156 	.db 0x0a
      000B28 0D                    5157 	.db 0x0d
      000B29 00                    5158 	.db 0x00
                                   5159 	.area CSEG    (CODE)
                                   5160 	.area CONST   (CODE)
      000B2A                       5161 ___str_80:
      000B2A 54 6F 74 61 6C 55 73  5162 	.ascii "TotalUsed: %d "
             65 64 3A 20 25 64 20
      000B38 0A                    5163 	.db 0x0a
      000B39 0D                    5164 	.db 0x0d
      000B3A 00                    5165 	.db 0x00
                                   5166 	.area CSEG    (CODE)
                                   5167 	.area CONST   (CODE)
      000B3B                       5168 ___str_81:
      000B3B 2A 2A 2A 2A 2A 2A 2A  5169 	.ascii "***************************************"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A
      000B62 0A                    5170 	.db 0x0a
      000B63 0D                    5171 	.db 0x0d
      000B64 00                    5172 	.db 0x00
                                   5173 	.area CSEG    (CODE)
                                   5174 	.area CONST   (CODE)
      000B65                       5175 ___str_82:
      000B65 45 52 52 2C 4E 75 6D  5176 	.ascii "ERR,Numbers ONLY!"
             62 65 72 73 20 4F 4E
             4C 59 21
      000B76 0A                    5177 	.db 0x0a
      000B77 0D                    5178 	.db 0x0d
      000B78 00                    5179 	.db 0x00
                                   5180 	.area CSEG    (CODE)
                                   5181 	.area CONST   (CODE)
      000B79                       5182 ___str_83:
      000B79 0A                    5183 	.db 0x0a
      000B7A 0A                    5184 	.db 0x0a
      000B7B 0D                    5185 	.db 0x0d
      000B7C 20 54 68 69 73 20 66  5186 	.ascii " This function was called from assembly, character sent from"
             75 6E 63 74 69 6F 6E
             20 77 61 73 20 63 61
             6C 6C 65 64 20 66 72
             6F 6D 20 61 73 73 65
             6D 62 6C 79 2C 20 63
             68 61 72 61 63 74 65
             72 20 73 65 6E 74 20
             66 72 6F 6D
      000BB8 20 74 68 65 72 65 20  5187 	.ascii " there -> %c"
             2D 3E 20 25 63
      000BC4 0A                    5188 	.db 0x0a
      000BC5 0D                    5189 	.db 0x0d
      000BC6 00                    5190 	.db 0x00
                                   5191 	.area CSEG    (CODE)
                                   5192 	.area XINIT   (CODE)
      000000                       5193 __xinit__global_var_test:
      000000 02                    5194 	.db #0x02	; 2
      000001                       5195 __xinit__watchdog_flag:
      000001 00 00                 5196 	.byte #0x00, #0x00	;  0
                                   5197 	.area CABS    (ABS,CODE)
